#include <icv.rh>
///*****************************************************************************
/// TSMC 3 NM FEOL DUMMY GENERATION UTILITY (IC Validator) - Dummy_FEOL_ICV_3nm_E_19M_1Xa1Xb1Xc1Xd1Ya1Yb6Y2Yy2Yx2R_014.11_1a (01/19/2024)
/// 1P19M PROCESS WITH 1Xa1Xb1Xc1Xd1Ya1Yb6Y2Yy2Yx2R METAL OPTION
/// UTILITY DOCUMENT:     T-N03-CL-DR-014-J2 VER 1.1_1a
/// DESIGN RULE DOCUMENT: T-N03-CL-DR-014    VER 1.1_1
/// DUMMY SPEC DOCUMENT:  T-N03-CL-US-006    VER 1.1_1a
///
/// Tech File Ver: v1.1_1a
///*****************************************************************************

#ifdef VERSION_LT

#if VERSION_LT(2022, 12, 4, 2)
#error This PXL runset was generated to run with ICV version U-2022.12-SP4-2 code and newer.
#endif
#endif



///*****************************************************************************
///     USAGE
///*****************************************************************************
///
/// (1) #define OUTPUT_GDS
///     Turn on to output GDS; Turn off to output OASIS
///
/// (2) #define FULL_CHIP
///     Turn on for chip level design; Turn off for IP/macro/cell level design
///
/// (3) #define WITH_SEALRING
///     Turn on if sealring is assembed in chip 
///
/// (4) #define UseprBoundary
///     #define ChipWindowUsed
///     In default, utility will use the bounding box of defined (tape-out) layers as the window of chip.
///
///     If user wants to specify the window of chip by prBoundary(108;0) layer,
///     please un-comment the line as below:
///
///         #define UseprBoundary
///
///     If user wants to specify the window of chip exactly, please un-comment
///     the line as below:
///
///         #define ChipWindowUsed
///
///     , and then modify the variables ( xLB, yLB ) for the coordinate of left-bottom corner
///     and ( xRT, yRT ) for the coordinate of right-top corner of the user-defined chip window.

///  (5) #define MERGE_ORIGINAL_DESIGN
///     By default, the output data will not include the original design. To have post DRC/LVS
///     checking after the dummy insertion, please enable this option to include the design.
///     User could un-comment the line as below to enable this function.
///
///         #define MERGE_ORIGINAL_DESIGN
///
///
/// (6) #define FILL_TCD
///     Turn on to fill dummy TCD.
///
/// (7) #define MINIMIZE_EMPTY
///     If there are empty violation happen, please turn on this and refill.
///
/// (8) #Dummy_Under_INDDMY
///     Turn on to add dummy inside INDDMY
/// (9) #define WIDE_POLY_CELL_IN_CORE          
///	    Turn on to fill wider poly cell(W=86nm) around wide poly(W>36nm) first in core region
///
/// (10) #define COMBINE
///     FEOL dummy fill utility & BEOL dummy fill utility can be combined into a single fill utility
///     which can insert FEOL dummy & BEOL dummy at the same time.
///
///     Either one of the following combinations and orders can be supported:
///     <FEOL dummy fill utility> + <BEOL dummy fill utility>
///     Please be sure to complete the following procedures for correct usage of the single fill utility:
///
///     1. Please download the most update FEOL dummy fill utility & BEOL dummy fill utility:
///        "Dummy_FEOL_ICV_3nm_E.11_1a" (version may be varied!) from TSMC-online.
///        "Dummy_BEOL_ICV_3nm_E.11_1a" (version may be varied!) from TSMC-online.
///
///     2. Use the unix command 'cat' to create this single fill utility (assuming % is the unix prompt):
///        % cat Dummy_FEOL_ICV_3nm_E.11_1a Dummy_BEOL_ICV_3nm.11_1a > Dummy_ICV_3nm.11_1a
///
///     3. The environment setups - library/error_options/
///        resolution_options/prototype_options/layout_grid_options/text_options
///        option setups - OUTPUT_GDS/FULL_CHIP/WITH_SEALRING/UseprBoundary/ChipWindowUsed,
///        and layer mapping setups must be set in FEOL dummy utility file.
///        These setups in BEOL dummy utility file will be invalid.
///        This flow supports GDSII/OASIS format library. 
/// (11) #define ENGINE_OPT_BY_ADV_FEATURE
///     Optimize engine performance by optional advanced features 
/// 

///*****************************************************************************


///*****************************************************************************
///      NOTE
///*****************************************************************************
///
/// If this utility was used for cell level design, please set the options or variables below.
///
/// (1) chip boundary: turn on option "UseprBoundary" or "ChipWindowUsed" to define chip boundary,
///     or use whole layout extent.
///
/// (2) Dummy to chip boundary: variable "Cell_CHIP" defines min. space between dummy and chip boundary.
///     Users can revise this variable to change the space between dummy and chip boundary.
///     Please at least leave a buffer from dummy to chip boundary to avoid dummy abutted when IP merged.
///
///*****************************************************************************
//************************************************************************************
//* TSMC developed this deck using Synopsys proprietary ICV format.
//* The deck is to be used only in ICV tools.
//************************************************************************************































// snps end run snps



/* SWITCH DEFINITION START */



//******************************************************************************
//      CONFIGURATION
//******************************************************************************

//***** Output database ********************************************************
#define OUTPUT_GDS                      // Turn on to output GDS; turn off to output OASIS
//#define MERGE_ORIGINAL_DESIGN         // Output data will contain the original design

//***** Fill cell name setting ********************************************************
DECK_VERSION : string = "F11u1a";    // Attach deck version to cell name
UNIQUE_ID : string = ""; // Attach the unique ID to fill cell to avoid cell name collision in cell-level run


CELL_PREFIX: string = DECK_VERSION + UNIQUE_ID;
output_cell_prefix : string = CELL_PREFIX;
#ifdef OUTPUT_GDS
output_file_name   : string = "FEOL.gds";
out_file = gds_library(output_file_name);
#else
output_file_name   : string = "FEOL.oas";
out_file = oasis_library(output_file_name);
#endif

//***** Design level ***********************************************************
#define FULL_CHIP                       // Turn on for chip level design; Turn off for IP/macro/cell level design
#define WITH_SEALRING                   // Turn on if sealring is assembed in chip 

//***** User defined chip area *************************************************
//#define UseprBoundary         // Use layer prBoundary(108;0) to define the chip window
//#define ChipWindowUsed        // Specify chip boundary directly by following variables
xLB : const double = 0.0;       // x-coordinate of left-bottom corner for user defined chip window
yLB : const double = 0.0;       // y-coordinate of left-bottom corner for user defined chip window
xRT : const double = 1000.0;    // x-coordinate of right-top corner for user defined chip window
yRT : const double = 1000.0;    // y-coordinate of right-top corner for user defined chip window

//***** Synopsys in-design flow *************************************************






//***** Select patterns to be filled *******************************************
#define FILL_TCD                        // turn on to fill TCD pattern
//#define Dummy_Under_INDDMY      // turn on to add dummy inside INDDMY
#define WIDE_POLY_CELL_IN_CORE          // turn on to fill wider poly cell(W=86nm) around wide poly(W>36nm) first in core region
//#define MINIMIZE_EMPTY                 // if there are empty violation happen, please turn on this and refill
//#define COMBINE                         // support to combine FEOL dummy fill utility, BEOL dummy fill utility, & COD fill utility

#ifdef OVERRIDE_FILE
#include "override_file.rs"
#endif

//***** Input database ********************************************************
library( 
    library_name = "GDSFILENAME",
    cell         = "TOPCELLNAME",
#ifdef OUTPUT_GDS
    format       = GDSII
#else
    format       = OASIS	
#endif
);
error_options( 
    output_violation_shapes = NET_POLYGON,
    error_limit_per_check = ERROR_LIMIT_UNLIMITED
);
gds_options( 
    box            		= CONVERT_TO_RECT,
    duplicate_cell 		= DROP
);
resolution_options( 
    spacing_tolerance = 0.0,
    drc_length_precision = 0.0,
    internal_resolution 	= 0.0005

);
prototype_options(symmetry = DUAL);
layout_drawn_options( 
    self_intersect        	= true,
    self_intersect_action 	= FILL
);
layout_grid_options( 
    check_45 = {},
    check_90 = {}
);
text_options( 
    colon_text     		= REGULAR_TEXT,
    semicolon_text 		= REGULAR_TEXT,
    allow_all_numeric 		= true,
    replace_text_characters_regex = { { { { search_string = "[\\s\\*\"={},]", replace_string = "_" } } } }
);

/* SWITCH DEFINITION END */

// DRAWN LAYER DEFINITIONS
//========================

/* TSMC internal used */
APBLK             = assign({ { 150, 74 } }); 
/* TSMC internal used */
INDDMY_APCHECK    = assign({ { 144, 42 } }); 

// DRAWN LAYER DEFINITIONS
//========================
CHIP_BOUNDARY             = assign({ { 108, 250 } }); // for Chip area definition
PRBOUNDARY                = assign({ { 108, 0 } }); // P&R cell boundary layer for auto P&R purpose
/* Top die Chip_Boundary without SEALRING_ALL for DRC recognition purpose. */
TD_CHIP_BOUNDARY = assign({ { 108, 16 } }); 
TDSBOUNDARY               = assign({ { 108, 100 } }); //3D SoIC define top die chip area without SEALRING_ALL (162;2) for DRC recognition purpose

/* Assembly Recognition Layer for SoIC_F2F */
ARL_S_F2F           = assign({ { 108, 500 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face tier 1 pseudo layer */
ARL_S_F2F_T1        = assign({ { 108, 501 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face tier 2 pseudo layer */
ARL_S_F2F_T2        = assign({ { 108, 502 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face tier 3 pseudo layer */
ARL_S_F2F_T3        = assign({ { 108, 503 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face tier 4 pseudo layer */
ARL_S_F2F_T4        = assign({ { 108, 504 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face tier 5 pseudo layer */
ARL_S_F2F_T5        = assign({ { 108, 505 } }); 
/* Assembly Recognition Layer for SoIC_F2F */
ARL_S_F2B           = assign({ { 108, 510 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back tier 1 pseudo layer */
ARL_S_F2B_T1        = assign({ { 108, 511 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back tier 2 pseudo layer */
ARL_S_F2B_T2        = assign({ { 108, 512 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back tier 3 pseudo layer */
ARL_S_F2B_T3        = assign({ { 108, 513 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back tier 4 pseudo layer */
ARL_S_F2B_T4        = assign({ { 108, 514 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back tier 5 pseudo layer */
ARL_S_F2B_T5        = assign({ { 108, 515 } }); 
/* Assembly recognition layer(ARL) at SoC chip boundary at  jointed top die of CoWoS-S product */
ARL_C_TDUB          = assign({ { 108, 520 } }); 
/* Assembly recognition layer(ARL) at SoC chip boundary for top die at CoW_3D */
ARL_I_TDBP          = assign({ { 108, 540 } }); 
/* Assembly recognition layer(ARL) at SoC chip boundary for bottom die at CoW_3D */
ARL_I_BDBP          = assign({ { 108, 541 } }); 
/* Assembly recognition layer at SoC chip boundary for top die at InFO */
ARL_I_TDPM0         = assign({ { 108, 542 } }); 
/* Assembly recognition layer for InFO_3DP */
ARL_I_INFO3D        = assign({ { 108, 543 } }); 
/* Assembly recognition layer(ARL) in top die for following FC C4 bump product identification */
ARL_F_TD            = assign({ { 108, 551 } }); 
/* Assembly recognition layer(ARL) in top die for following DoW micro bump product identification */
ARL_DOW_TDUB        = assign({ { 108, 552 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) EBO recognition */
ARL_WOW             = assign({ { 108, 580 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer T1 (WoW) product */
ARL_WOW_T1          = assign({ { 108, 581 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer T2 (WoW) product */
ARL_WOW_T2          = assign({ { 108, 582 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer T3 (WoW) product */
ARL_WOW_T3          = assign({ { 108, 583 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer T4 (WoW) product */
ARL_WOW_T4          = assign({ { 108, 584 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer T5 (WoW) product */
ARL_WOW_T5          = assign({ { 108, 585 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for final tier identification */
ARL_S_F2F_TF        = assign({ { 108, 700 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for tier1 with FC product identification */
ARL_S_F2F_T1_FC     = assign({ { 108, 701 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for tier1 with InFO product identification */
ARL_S_F2F_T1_INFO   = assign({ { 108, 702 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for tier1 with DoW product identification */
ARL_S_F2F_T1_DOW    = assign({ { 108, 703 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for tier1 with CoWoS product identification */
ARL_S_F2F_T1_COWOS  = assign({ { 108, 704 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-face and stands for tier1 with InFO3D product identification */
ARL_S_F2F_T1_INFO3D = assign({ { 108, 705 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for final tier identification */
ARL_S_F2B_TF        = assign({ { 108, 710 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for tier1 with FC product identification */
ARL_S_F2B_T1_FC     = assign({ { 108, 711 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for tier1 with InFO product identification */
ARL_S_F2B_T1_INFO   = assign({ { 108, 712 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for tier1 with DoW product identification */
ARL_S_F2B_T1_DOW    = assign({ { 108, 713 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for tier1 with CoWoS product identification */
ARL_S_F2B_T1_COWOS  = assign({ { 108, 714 } }); 
/* Assembly recognition layer(ARL) for SoIC face-to-back and stands for tier1 with InFO3D product identification */
ARL_S_F2B_T1_INFO3D = assign({ { 108, 715 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for bottom die identification */
ARL_WOW_BD          = assign({ { 108, 780 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for top die with FC product identification */
ARL_WOW_TD_FC       = assign({ { 108, 781 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for top die with InFO product identification */
ARL_WOW_TD_INFO     = assign({ { 108, 782 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for top die with DoW product identification */
ARL_WOW_TD_DOW      = assign({ { 108, 783 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for top die with CoWoS product identification */
ARL_WOW_TD_COWOS    = assign({ { 108, 784 } }); 
/* Assembly recognition layer(ARL) for Wafer-on-Wafer (WoW) and stands for top die with InFO3D product identification */
ARL_WOW_TD_INFO3D   = assign({ { 108, 785 } }); 

FB_1                      = assign({ { 250, 1 } }); // FINFET device
FB_2                      = assign({ { 250, 2 } }); // FINFET I/O device
FB_3                      = assign({ { 250, 3 } }); // H195 STD Cell
FB_4                      = assign({ { 250, 4 } }); // H494 STD Cell
FB_5                      = assign({ { 250, 5 } }); // H338 STD Cell
FB_6                      = assign({ { 250, 6 } }); // H156 1-Fin STD Cell
FB_7                      = assign({ { 250, 7 } }); // H286 STD Cell
FB_8                      = assign({ { 250, 8 } }); // H390 STD Cell
FB_9                      = assign({ { 250, 9 } }); // H286 STD Cell
FB_10                     = assign({ { 250, 10 } }); // H156 STD Cell
/* H143 on grid STD Cell */
FB_11    = assign({ { 250, 11 } }); 
/* H143 off grid STD Cell */
FB_12    = assign({ { 250, 12 } }); 
/* H130 on grid STD Cell */
FB_13    = assign({ { 250, 13 } }); 
/* H130 off grid STD Cell */
FB_14    = assign({ { 250, 14 } }); 
/* H182 STD Cell */
FB_15    = assign({ { 250, 15 } }); 
/* H208 STD Cell */
FB_16    = assign({ { 250, 16 } }); 
/* H364 STD Cell */
FB_17    = assign({ { 250, 17 } }); 
/* STD Cell */
FB_18    = assign({ { 250, 18 } }); 
/* H247 STD Cell */
FB_19    = assign({ { 250, 19 } }); 
/* STD Cell */
FB_26       = assign({ { 250, 26 } }); 
/* STD Cell */
FB_28       = assign({ { 250, 28 } }); 
/* STD Cell */
FB_29       = assign({ { 250, 29 } }); 
/* STD Cell */
FB_31       = assign({ { 250, 31 } }); 
/* STD Cell */
FB_36       = assign({ { 250, 36 } }); 
/* STD Cell */
FB_38       = assign({ { 250, 38 } }); 
/* to distinguish STD cell FB_1 */
FB1_STD     = assign({ { 250, 30 } }); 
/* H117 STD Cell, 1-fin   */
FB_A     = assign({ { 250, 50 } }); 
/* H169 STD Cell, 2-fin */
FB_B     = assign({ { 250, 51 } }); 
/* H221 STD Cell, 3-fin */
FB_C     = assign({ { 250, 52 } }); 
/* STD cell A in FB_31 */
FB_31_A     = assign({ { 250, 53 } }); 
/* STD cell B in FB_31 */
FB_31_B     = assign({ { 250, 54 } }); 
/* STD cell C in FB_31 */
FB_31_C     = assign({ { 250, 55 } });
/* Define the FinFET area with high-speed performance */
FB_HS       = assign({ { 250, 58 } }); 
/* Marker layer for customized stdcell like 1R1W SRAM Bit cell */
SRM_1R1W      = assign({ { 250, 61 } }); 
/* Marker layer for customized stdcell like 2R1W SRAM Bit cell */
SRM_2R1W      = assign({ { 250, 62 } }); 
/* Marker layer for customized stdcell like 2R2W SRAM Bit cell */
SRM_2R2W      = assign({ { 250, 63 } }); 
/* Marker layer for customized stdcell like SRM_1R1W_2ROW SRAM Bit cell */
SRM_1R1W_2ROW = assign({ { 250, 64 } }); 
/* Marker layer for customized stdcell like SRM_ROM SRAM Bit cell */
SRM_ROM       = assign({ { 250, 65 } }); 
/* Marker layer for customized stdcell like 12R6W SRAM Bit cell */
SRM_12R6W     = assign({ { 250, 66 } }); 
/* Marker layer for customized stdcell like 4R1W and 4R2W SRAM Bit cell */
SRM_4R1W_2W  = assign({ { 250, 67 } }); 
/* Marker layer for customized stdcell like 2R2W type2 SRAM Bit cell */
SRM_2R2W_T2  = assign({ { 250, 68 } }); 
/* Marker layer for customized stdcell like 1RST2R1W SRAM Bit cell */
SRM_1RST2R1W = assign({ { 250, 69 } }); 
/* Marker layer for FB_10 full height boundary block */
FB_10_H     = assign({ { 250, 110 } }); 
/* Marker layer for FB_10 half height boundary block */
FB_10_F     = assign({ { 250, 160 } });
/* Marker layer for all analog cell */
FB_AN        = assign({ { 252, 1 } }); 
/* Marker layer for waive low OD density area in analog cell */
FB_AN_OD        = assign({ { 252, 2 } });
/* Marker layer for T16 cell */
T16_STD        = assign({ { 252, 3 } });
/* Marker layer for T18 cell */
T18_STD        = assign({ { 252, 4 } });
/* Analog HD cell special CAD layer */
AN_HD        = assign({ { 252, 10 } });
/* FB_1 Analog unit Cell special CAD layer */
AN_U1        = assign({ { 252, 11 } }); 
/* FB1AN exception layer */
AN_C1        = assign({ { 252, 12 } }); 
/* FB_1 Analog CMOS Cell special CAD layer */
ANA_EXP        = assign({ { 252, 21 } }); 
/* Marker layer for BEOL rule push of Analog unit cell */
AN_HDU1M0_3T = assign({ { 252, 101 } }); 
/* Marker layer for BEOL rule push of Analog unit cell */
AN_HDU1M0_4T = assign({ { 252, 102 } }); 
/* Marker layer for BEOL rule push of Analog CMOS */
AN_HDC1M0    = assign({ { 252, 103 } }); 
/* Marker layer for BEOL rule push of Analog HD208 */
AN_HDU3M0    = assign({ { 252, 105 } }); 
/* Marker layer for BEOL rule push of Analog C520 cell */
AN_HDC2M0    = assign({ { 252, 106 } }); 
/* Marker layer for BEOL rule push of Analog HD312 cell */
AN_HDU4M0    = assign({ { 252, 107 } }); 
/* FB_1 Analog unit Cell special CAD layer for 3T BEOL	 */
BE_3T        = assign({ { 252, 111 } }); 
/* FB_1 Analog unit Cell special CAD layer for 4T BEOL */
BE_4T    = assign({ { 252, 112 } }); 
/* VIA2 Marker layer for BEOL rule push of Analog Cell HD218 */
AN_HD_V2_18 = assign({ { 252, 120 } }); 
/* VIA1 Marker layer for BEOL rule push of Analog Cell HD218 */
AN_HD_V1_18 = assign({ { 252, 121 } }); 
/* VIA0 Marker layer for BEOL rule push of Analog Cell C560 */
AN_HD_V0_16 = assign({ { 252, 125 } }); 
/* VIA1 Marker layer for BEOL rule push of Analog Cell C560 */
AN_HD_V1_16 = assign({ { 252, 126 } }); 
/* VIA2 Marker layer for BEOL rule push of Analog Cell C560 */
AN_HD_V2_16 = assign({ { 252, 127 } }); 
/* Maker layer of Analog cell of ECO region */
ECO_REGION  = assign({ { 252, 41 } }); 
/* Maker layer of Analog cell of ECO Decap */
ECO_DECAP   = assign({ { 252, 42 } }); 
/* Waive LUP.WARN.5 rules only for eco_anaGR_cell, eco_anaTap_cell */
ECO_TAP_DMY   = assign({ { 252, 43 } }); 
/* Marker layer for ECO cells swap to active MOS */
ECO_ACT     = assign({ { 252, 44 } }); 
/* Analog ECO CELL */
D130_P45_2FN    = assign({ { 252, 51 } }); 
/* Analog ECO CELL */
D130_P45_2FP    = assign({ { 252, 52 } }); 
/* Analog ECO CELL */
D208_P45_4FN    = assign({ { 252, 57 } }); 
/* Analog ECO CELL */
D208_P45_4FP    = assign({ { 252, 58 } }); 
/* Analog ECO CELL */
D260_P45_2_2FN  = assign({ { 252, 61 } }); 
/* Analog ECO CELL */
D260_P45_2_2FP  = assign({ { 252, 62 } }); 
/* Analog ECO CELL */
D260_P45_6FN    = assign({ { 252, 63 } }); 
/* Analog ECO CELL */
D260_P45_6FP    = assign({ { 252, 64 } }); 
/* Analog ECO CELL */
D260_P45_8FN    = assign({ { 252, 65 } }); 
/* Analog ECO CELL */
D260_P45_8FP    = assign({ { 252, 66 } }); 
/* Analog ECO CELL */
D260_P135_2_2FN = assign({ { 252, 171 } }); 
/* Analog ECO CELL */
D260_P135_2_2FP = assign({ { 252, 172 } }); 
/* Analog ECO CELL */
D260_P135_6FN   = assign({ { 252, 173 } }); 
/* Analog ECO CELL */
D260_P135_6FP   = assign({ { 252, 174 } }); 
/* Analog ECO CELL */
D260_P135_8FN   = assign({ { 252, 175 } }); 
/* Analog ECO CELL */
D260_P135_8FP   = assign({ { 252, 176 } }); 
/* Analog ECO CELL for HD280, 6fin, Lg55, CPP135, N-type */
D280_P135_6FN   = assign({ { 252, 301 } }); 
/* Analog ECO CELL for HD280, 6fin, Lg55, CPP135, P-type */
D280_P135_6FP   = assign({ { 252, 302 } }); 
/* Analog ECO CELL for HD336, 6fin CPP135, N-type */
D336_P135_6FN = assign({ { 252, 303 } }); 
/* Analog ECO CELL for HD336, 6fin CPP135, P-type */
D336_P135_6FP = assign({ { 252, 304 } }); 
/* Analog ECO cell for HD280, 6fin, Lg86, CPP166, N-type */
D280_P166_6FN = assign({ { 252, 311 } }); 
/* Analog ECO cell for HD280, 6fin, Lg86, CPP166, P-type */
D280_P166_6FP = assign({ { 252, 312 } }); 
/* Analog ECO cell for HD336, 8fin, Lg86, CPP166, N-type */
D336_P166_8FN = assign({ { 252, 313 } }); 
/* Analog ECO cell for HD336, 8fin, Lg86, CPP166, P-type */
D336_P166_8FP = assign({ { 252, 314 } }); 
/* tsmc internal usage */
D130_PL_2FN      = assign({ { 252, 351 } }); 
/* tsmc internal usage */
D130_PL_2FP      = assign({ { 252, 352 } }); 
/* tsmc internal usage */
D208_PL_4FN      = assign({ { 252, 357 } }); 
/* tsmc internal usage */
D208_PL_4FP      = assign({ { 252, 358 } }); 
/* tsmc internal usage */
D260_PL_2_2FN    = assign({ { 252, 361 } }); 
/* tsmc internal usage */
D260_PL_2_2FP    = assign({ { 252, 362 } }); 
/* tsmc internal usage */
D260_PL_6FN      = assign({ { 252, 363 } }); 
/* tsmc internal usage */
D260_PL_6FP      = assign({ { 252, 364 } }); 
/* tsmc internal usage */
C260_PL_2FN2FP   = assign({ { 252, 801 } }); 
/* tsmc internal usage */
C260_PL_2FN2FP_G = assign({ { 252, 802 } }); 
/* tsmc internal usage */
C520_PL_2FN2FP   = assign({ { 252, 803 } }); 
/* tsmc internal usage */
C520_PL_2X2FN2FP = assign({ { 252, 804 } }); 
/* tsmc internal usage */
C520_PL_6FN6FP   = assign({ { 252, 805 } }); 
/* Analog ECO CELL */
S208_P45_4FN    = assign({ { 252, 257 } }); 
/* Analog ECO CELL */
S208_P45_4FP    = assign({ { 252, 258 } }); 
/* Analog ECO CELL for C260, 2fin, Lg3, CPP135, CMOS */
C260_P45_2FN2FP = assign({ { 252, 501 } }); 
/* Analog ECO CELL for C260, CPP45, 2 fin N-type, 2 fin P-type (general) */
C260_P45_2FN2FP_G = assign({ { 252, 502 } }); 
/* Analog ECO CELL for C520, CPP45, 2 fin N-type, 2 fin P-type */
C520_P45_2FN2FP   = assign({ { 252, 503 } }); 
/* Analog ECO CELL for C520, 2finx2, Lg3, CPP45, CMOS */
C520_P45_2X2FN2FP = assign({ { 252, 504 } }); 
/* Analog ECO CELL for C520, CPP45, 6 fin N-type, 6 fin P-type */
C520_P45_6FN6FP   = assign({ { 252, 505 } }); 
/* Analog ECO CELL for C560, CPP166, 6 fin N-type, 6 fin P-type */
C560_P166_6FN6FP = assign({ { 252, 546 } }); 
/* Analog ECO CELL for C672, CPP166, 6 fin N-type, 6 fin P-type */
C672_P166_6FN6FP = assign({ { 252, 547 } }); 
/* Analog ECO CELL for C812, CPP166, 8 fin N-type, 8 fin P-type */
C672_P166_8FN8FP = assign({ { 252, 548 } }); 
/* Confined Compact Pattern for FB_3 */
CCP_3    = assign({ { 98, 3 } }); 
/* Confined Compact Pattern for FB_4 */
CCP_4    = assign({ { 98, 4 } }); 
/* Confined Compact Pattern for FB_5 */
CCP_5    = assign({ { 98, 5 } }); 
/* Confined Compact Pattern for FB_6 */
CCP_6    = assign({ { 98, 6 } }); 
/* Confined Compact Pattern for FB_7 */
CCP_7    = assign({ { 98, 7 } }); 
/* Confined Compact Pattern for FB_8 */
CCP_8    = assign({ { 98, 8 } }); 
/* Confined Compact Pattern for FB_9 */
CCP_9    = assign({ { 98, 9 } }); 
/* Confined Compact Pattern for FB_10 */
CCP_10   = assign({ { 98, 10 } }); 
/* Confined Compact Pattern for FB_11 */
CCP_11   = assign({ { 98, 11 } }); 
/* Confined Compact Pattern for FB_12 */
CCP_12   = assign({ { 98, 12 } }); 
/* Confined Compact Pattern for FB_13 */
CCP_13   = assign({ { 98, 13 } }); 
/* Confined Compact Pattern for FB_14 */
CCP_14   = assign({ { 98, 14 } }); 
/* Confined Compact Pattern for FB_15 */
CCP_15   = assign({ { 98, 15 } }); 
/* Confined Compact Pattern for FB_16 */
CCP_16   = assign({ { 98, 16 } }); 
/* Confined Compact Pattern for FB_17 */
CCP_17   = assign({ { 98, 17 } }); 
/* Confined Compact Pattern for FB_18 */
CCP_18      = assign({ { 98, 18 } }); 
/* Confined Compact Pattern for FB_19 */
CCP_19   = assign({ { 98, 19 } }); 
/* define Confined Compact Pattern for FB_26 */
CCP_26      = assign({ { 98, 26 } }); 
/* define Confined Compact Pattern for FB_28 */
CCP_28      = assign({ { 98, 28 } }); 
/* define Confined Compact Pattern for FB_29 */
CCP_29      = assign({ { 98, 29 } }); 
/* define Confined Compact Pattern for FB_31 */
CCP_31      = assign({ { 98, 31 } }); 
/* define Confined Compact Pattern for FB_36 */
CCP_36      = assign({ { 98, 36 } }); 
/* define Confined Compact Pattern for FB_38 */
CCP_38      = assign({ { 98, 38 } }); 

/* Filler cell marker (1fin height) for periphery cell and std cell abutment */
STD_FILLER_1 = assign({ { 6, 201 } }); 
/* Filler cell marker (4fin height) for periphery cell and std cell abutment */
STD_FILLER_4 = assign({ { 6, 202 } }); 
/* Filler cell marker for periphery cell and std cell abutment */
STD_FILLER   = assign({ { 6, 210 } }); 
/* Marker layer COD_V smoothing at STD_FILLER boundary region */
STD_FILLER_H_BOUND = assign({ { 6, 211 } }); 
/* Padded dummy poly boundary recognized in APR */
PADDED_DPO = assign({ { 6, 220 } });

/* Deep N-well */
DNW             = assign({ { 1, 0 } }); 
/* N-well */
NW              = assign({ { 3, 0 } }); 
/* OD */
OD              = assign({ { 6, 0 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Dummy OD */
SR_DOD          = assign({ { 6, 7 } }); 
/* SRAM OD (TSMC internal use) */
OD_SRAM1          = assign({ { 6, 11 } }); 
/* Planar OD special usage for COD utility */
OD_20           = assign({ { 6, 20 } }); 
/* OD mandrel */
OD_DA           = assign({ { 6, 30 } }); 
/* OD density waive layer for H338 only */
OD_DN_BLK       = assign({ { 6, 31 } }); 
/* Marker layer for STD Cell direct abutment of diff conditions */
FB_BOUNDARY_BLK_H = assign({ { 6, 33 } }); 
/* Block layer from mandrel generation */
FB_BOUNDARY_BLK = assign({ { 6, 34 } }); 
/* Block layer from mandrel generation */
FB_CORNER_BLK   = assign({ { 6, 35 } }); 
/* FB6 1X height boundary cell marker laye */
FB6_1X_BLK  = assign({ { 6, 36 } }); 
/* FB26 1X height boundary cell marker layer */
FB_26_1X_BLK = assign({ { 6, 37 } });
/* Horizontal Cut OD  */
COD_H           = assign({ { 6, 60 } }); 
/* Vertical Cut OD */
COD_V           = assign({ { 6, 61 } }); 
/* 2nd Vertical Cut OD */
COD_V2          = assign({ { 6, 65 } }); 
/* Cut OD block */
COD_BLOCK       = assign({ { 6, 70 } }); 
/* OD mandrel block */
ODMMB           = assign({ { 6, 80 } }); 
/* Dummy Horizontal Cut OD  */
DCOD_H          = assign({ { 6, 160 } }); 
/* Dummy Vertical Cut OD */
DCOD_V          = assign({ { 6, 161 } }); 
/* Dummy 2nd Vertical Cut OD */
DCOD_V2         = assign({ { 6, 165 } }); 
/* Dummy Cut OD block */
DCOD_BLOCK      = assign({ { 6, 170 } }); 
/* Horizontal Cut OD (COD utility) */
GCOD_H          = assign({ { 6, 260 } }); 
/* Vertical Cut OD (COD utility) */
GCOD_V          = assign({ { 6, 261 } }); 
/* OD mandrel (utility generation) */
ODMUO           = assign({ { 6, 230 } }); 
/* Poly */
PO              = assign({ { 17, 0 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Dummy Poly */
SR_DPO          = assign({ { 17, 7 } }); 
/* Cut Poly for SRAM */
CPO_SRAM        = assign({ { 17, 12 } }); 
/* Trim PO for Lg=5nm */
TPO         = assign({ { 17, 20 } }); 
/* Cut Poly */
CPO             = assign({ { 17, 30 } }); 
/* Dummy CPO */
SR_DCPO         = assign({ { 17, 50 } }); 
/* SRAM butted FB_1 PO layer          */
BPO             = assign({ { 17, 80 } }); 
/* SRAM butted FB_1 PO layer          */
BPO_2           = assign({ { 17, 81 } }); 
/* PO pitch 42 block layer */
PO_P42          = assign({ { 17, 90 } }); 
/* PO pitch 48 block layer */
PO_P48          = assign({ { 17, 91 } }); 
/* PO pitch 51 block layer */
PO_P51          = assign({ { 17, 92 } }); 
/* PO pitch 81 block layer */
PO_P81          = assign({ { 17, 93 } }); 
/* PO pitch 81 block layer */
PO_P81_WPO      = assign({ { 17, 94 } });
/* PO pitch 57 block layer */
PO_P57          = assign({ { 17, 95 } }); 
/* PO pitch 54 block layer */
PO_P54          = assign({ { 17, 96 } }); 
/* Marker layer for chip that only allow Lg3 poly gate */
PA_CORE_MIN          = assign({ { 17, 100 } }); 
/* EPI blocking layer */
EPI_BLK         = assign({ { 206, 1 } });
/* GATE abut OD vertical edge   */
PODE_GATE       = assign({ { 206, 28 } }); 

/* Marker layer for P/G net, for M2 */
M2_PG_MARKER  = assign({ { 207, 32 } }); 
/* Marker layer for P/G net, for M3 */
M3_PG_MARKER  = assign({ { 207, 33 } }); 
/* Marker layer for P/G net, for M4 */
M4_PG_MARKER  = assign({ { 207, 34 } }); 
/* Marker layer for P/G net, for M5 */
M5_PG_MARKER  = assign({ { 207, 35 } }); 
/* Marker layer for P/G net, for M6 */
M6_PG_MARKER  = assign({ { 207, 36 } }); 
/* Marker layer for P/G net, for M7 */
M7_PG_MARKER  = assign({ { 207, 37 } }); 
/* Marker layer for P/G net, for M8 */
M8_PG_MARKER  = assign({ { 207, 38 } }); 
/* Marker layer for P/G net, for M9 */
M9_PG_MARKER  = assign({ { 207, 39 } }); 
/* Marker layer for P/G net, for M10 */
M10_PG_MARKER = assign({ { 207, 40 } }); 
/* Marker layer for P/G net, for M11 */
M11_PG_MARKER = assign({ { 207, 41 } }); 
/* Marker layer for P/G net, for M12 */
M12_PG_MARKER = assign({ { 207, 42 } }); 
/* Marker layer for P/G net, for M13 */
M13_PG_MARKER = assign({ { 207, 43 } }); 
/* Marker layer for P/G net, for M14 */
M14_PG_MARKER = assign({ { 207, 44 } }); 
/* Marker layer for P/G net, for M15 */
M15_PG_MARKER = assign({ { 207, 45 } }); 
/* Marker layer for P/G net, for M16 */
M16_PG_MARKER = assign({ { 207, 46 } }); 
/* Marker layer for P/G net, for M17 */
M17_PG_MARKER = assign({ { 207, 47 } }); 
/* Marker layer for P/G net, for M18 */
M18_PG_MARKER = assign({ { 207, 48 } }); 
/* Marker layer for P/G net, for M19 */
M19_PG_MARKER = assign({ { 207, 49 } }); 
/* Marker layer for P/G net, for M20 */
M20_PG_MARKER = assign({ { 207, 550 } }); 
/* Marker layer for P/G net, for M21 */
M21_PG_MARKER = assign({ { 207, 551 } });
MPG_MARKER_M2  = assign({ { 207, 332 } }); 
/* Marker layer for customer P/G net, for M3 */
MPG_MARKER_M3  = assign({ { 207, 333 } }); 
/* Marker layer for customer P/G net, for M4 */
MPG_MARKER_M4  = assign({ { 207, 334 } }); 
/* Marker layer for customer P/G net, for M5 */
MPG_MARKER_M5  = assign({ { 207, 335 } }); 
/* Marker layer for customer P/G net, for M6 */
MPG_MARKER_M6  = assign({ { 207, 336 } }); 
/* Marker layer for customer P/G net, for M7 */
MPG_MARKER_M7  = assign({ { 207, 337 } }); 
/* Marker layer for customer P/G net, for M8 */
MPG_MARKER_M8  = assign({ { 207, 338 } }); 
/* Marker layer for customer P/G net, for M9 */
MPG_MARKER_M9  = assign({ { 207, 339 } }); 
/* Marker layer for customer P/G net, for M10 */
MPG_MARKER_M10 = assign({ { 207, 340 } }); 
/* Marker layer for customer P/G net, for M11 */
MPG_MARKER_M11 = assign({ { 207, 341 } }); 
/* Marker layer for customer P/G net, for M12 */
MPG_MARKER_M12 = assign({ { 207, 342 } }); 
/* Marker layer for customer P/G net, for M13 */
MPG_MARKER_M13 = assign({ { 207, 343 } }); 
/* Marker layer for customer P/G net, for M14 */
MPG_MARKER_M14 = assign({ { 207, 344 } }); 
/* Marker layer for customer P/G net, for M15 */
MPG_MARKER_M15 = assign({ { 207, 345 } }); 
/* Marker layer for customer P/G net, for M16 */
MPG_MARKER_M16 = assign({ { 207, 346 } }); 
/* Marker layer for customer P/G net, for M17 */
MPG_MARKER_M17 = assign({ { 207, 347 } }); 
/* Marker layer for customer P/G net, for M18 */
MPG_MARKER_M18 = assign({ { 207, 348 } }); 
/* Marker layer for customer P/G net, for M19 */
MPG_MARKER_M19 = assign({ { 207, 349 } }); 
/* Marker layer for customer P/G net, for M20 */
MPG_MARKER_M20 = assign({ { 207, 350 } }); 
/* Marker layer for customer  P/G net, for M21 */
MPG_MARKER_M21 = assign({ { 207, 351 } }); 

/* Recognize dummy mos cell in PDK/LVS flows   */
MOSDMY       = assign({ { 208, 5 } }); 
/* Connect two PODE cells together for Continuous OD       */
CPODE           = assign({ { 206, 150 } }); 
/* Dummy CPODE */
DCPODE          = assign({ { 206, 170 } }); 
/* MD interconnection between OD and VD */
MD              = assign({ { 82, 150 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* dummy MD */
SR_DMD          = assign({ { 82, 170 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Cut MD */
CMD             = assign({ { 82, 250 } }); 
/* dummy CMD */
SR_DCMD         = assign({ { 82, 270 } }); 
/* Butted CMD at Std Cell */
BCMD            = assign({ { 87, 0 } }); 
/* MD interconnection between OD and VD  */
MP             = assign({ { 83, 150 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Via on MG  */
VDR             = assign({ { 177, 150 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Via on MG  */
VG              = assign({ { 178, 150 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Butted Via on MG at Std Cell */
BVG             = assign({ { 178, 180 } }); 
/* Via on MD */
VD              = assign({ { 179, 150 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Via (inside power rail) on MD */
VD2             = assign({ { 179, 151 } }, layer_intent = { LAYER_INTENT_BASE }); 
/* Butted via (inside power rail) on MD */
BVD2            = assign({ { 179, 152 } }, layer_intent = { LAYER_INTENT_BASE });

/* 1.2V thick gate oxide */
OD_12   = assign({ { 14, 0 } }); 
/* 1.2V thick gate oxide underdrive 1.0v */
OD12_10 = assign({ { 14, 1 } }); 
/* 1.2V thick gate oxide overdrive 1.5v */
OD12_15 = assign({ { 14, 2 } }); 
/* 1.5V thick gate oxide */
OD_15   = assign({ { 15, 0 } }); 
/* 1.5V thick gate oxide underdrive 1.2v */
OD15_12 = assign({ { 15, 1 } }); 
/* 1.8V thick gate oxide */
OD_18   = assign({ { 16, 0 } }); 
/* 1.8V thick gate oxide underdrive 1.2v */
OD18_12 = assign({ { 16, 1 } }); 
/* 1.8V thick gate oxide underdrive 1.5v */
OD18_15 = assign({ { 16, 4 } }); 
/* 1.8V thick gate oxide underdrive 1.0v */
OD18_10 = assign({ { 16, 5 } }); 
/* P+ S/D implant */
PP      = assign({ { 25, 0 } }); 
/* N+ S/D implant */
gNP      = assign({ { 26, 0 } });
/* Marker layer for NP boundary effect relaxation for specific layout */
NP_BOUNDARY_BLK      = assign({ { 26, 1 } });
/* Standard Vt N+ implant */
VTS_N   = assign({ { 23, 0 } }); 
/* Low leakage Standard Vt N+ implant */
VTSN_LL     = assign({ { 23, 4 } }); 
/* Standard Vt P+ implant */
VTS_P       = assign({ { 24, 0 } }); 
/* Low leakage Standard Vt P+ implant */
VTSP_LL     = assign({ { 24, 4 } }); 
/* Low Vt N+ implant */
VTL_N       = assign({ { 12, 0 } }); 
/* Low leakage low Vt N+ implant */
VTLN_LL     = assign({ { 12, 4 } }); 
/* Low Vt P+ implant */
VTL_P       = assign({ { 13, 0 } }); 
/* Low leakage low Vt P+ implant */
VTLP_LL     = assign({ { 13, 4 } }); 
/* Extreme low Vt N+ implant */
VTXL_N      = assign({ { 12, 2 } }); 
/* Extreme low Vt P+ implant */
VTXL_P      = assign({ { 13, 2 } }); 
/* High Vt N+ implant */
VTH_N       = assign({ { 23, 1 } }); 
/* High Vt P+ implant */
VTH_P       = assign({ { 24, 1 } }); 
/* Ultra Low Vt N+ implant */
VTUL_N      = assign({ { 151, 0 } }); 
/* Low leakage ultra Low Vt N+ implant */
VTULN_LL    = assign({ { 151, 4 } }); 
/* Ultra Low Vt P+ implant */
VTUL_P      = assign({ { 152, 0 } }); 
/* Low leakage ultra Low Vt P+ implant */
VTULP_LL    = assign({ { 152, 4 } }); 
/* Medium Low Vt N+ implant */
VTML_N      = assign({ { 151, 5 } }); 
/* Medium Low Vt P+ implant */
VTML_P      = assign({ { 152, 5 } }); 
/* Low Vt N+ implant */
VTEL_N      = assign({ { 12, 6 } }); 
/* Low Vt P+ implant */
VTEL_P      = assign({ { 13, 6 } });
/* Well implant blocking */
NT_N = assign({ { 11, 0 } }); 
/* MOS varactor device */
VAR  = assign({ { 143, 0 } }); 

/* Passivation opening for Wire-Bond */
CB     = assign({ { 76, 0 } }); 
/* Passivation opening for flip-chip */
CBD    = assign({ { 169, 0 } }); 
/* Passivation opening as VIA between AP and Top Metal */
RV     = assign({ { 85, 0 } }); 
/* AlCu bonding Pad & AlCu Redistributional layer (Al RDL). */
AP     = assign({ { 74, 0 } });
/* SoIC backside AlCu Redistributional layer */
APS         = assign({ { 74, 180 } }); 
/* AlCu bonding Pad & AlCu Redistributional layer (Al RDL). */
BPMT   = assign({ { 74, 200 } }); 
/* Dummy hybrid bond metal on top chip (Tier 2) */
D_BPMT        = assign({ { 74, 201 } }); 
/* Passivation opening as VIA between AP and Top Metal */
CU_RV         = assign({ { 85, 300 } }); 
/* AlCu bonding Pad & AlCu Redistributional layer (Al RDL). */
CU_RDL        = assign({ { 73, 0 } }); 
/* AlCu bonding Pad & AlCu Redistributional layer (Al RDL). */
DCU_RDL       = assign({ { 373, 0 } }); 
/* Backside Through Si Via */
BTSV        = assign({ { 121, 182 } });
/* Frontside HB contact */
HBC         = assign({ { 121, 233 } }); 
/* Frontside HB link */
HBL         = assign({ { 121, 234 } }); 
/* Backside HB contact */
BSHBC       = assign({ { 121, 237 } }); 

/* AlCu bonding Pad & AlCu Redistributional layer (Al RDL).InFO layer for DRC/LVS checking about CB2/PM and PM0 overlap */
IFO_VIA = assign({ { 74, 11 } }); 
CPS         = assign({ { 74, 21 } }); 
CPS2        = assign({ { 74, 24 } }); 
/* Micro Cu bump alignment mark (micro Cu bump for flip chip) */
MCBAM = assign({ { 74, 120 } });
/* marker layer for AP pad (THK14.5KA) */
AP_14P5_MARKER = assign({ { 74, 155 } }); 
/* marker layer for Cu pad (THK 28KA) */
CU_28_MARKER  = assign({ { 73, 160 } }); 
/* Cu pad marker */
CU_PAD_MARKER = assign({ { 73, 250 } }); 
/* Cu micro Pad marker */
CU_UPAD_MARKER = assign({ { 73, 260 } });
/* Cu micro Pad marker for pitch 36 um */
CU_UPAD_MARKER_P36 = assign({ { 73, 270 } });
/* Cu micro Pad marker for pitch 25 um */
CU_UPAD_MARKER_P25 = assign({ { 73, 280 } }); 
/* Cu micro Pad marker for pitch 90 um */
CU_UPAD_MARKER_P90 = assign({ { 73, 290 } }); 
/* 3D SoIC define AP marker location for DRC recognition purpose */
COWAP_MARKER = assign({ { 74, 250 } });
/* Marker for AP bird peak treatment to avoid peak crack */
AP_UPAD_MARKER = assign({ { 74, 260 } }); 
/* Passivation-2 opening for Wire-Bond */
CB2_WB = assign({ { 86, 20 } }); 
/* Passivation-2 opening for flip-chip */
CB2_FC = assign({ { 86, 0 } }); 
/* Pseudo layer in PASS 2 for LVS purpose  */
DR_CB2      = assign({ { 86, 1 } }); 
/* Passivation-2 open in SAC Pad */
CB2_SAC     = assign({ { 86, 10 } });
/* // Pseudo layer for CB2_SAC without PM0_SAC_Pad */
CB2_SAC_ISO     = assign({ { 86, 2 } });
/* Back-Side passivation-2 opening, second bonding pad opening */
CB2B        = assign({ { 86, 160 } }); 
/* SoIC backside passivation-2 opening */
CB2S        = assign({ { 86, 180 } }); 
/* SoIC frontside passivation-2 open */
CB2_F2B     = assign({ { 86, 200 } }); 
/* Passivation-2 opening for flip-chip */
CU_CB2_FC   = assign({ { 86, 300 } }); 
/* Passivation-2 opening for micro-bump */
CU_CB2_FCU  = assign({ { 86, 325 } }); 
/* Passivation-2 opening micro bump (Cu_RDL) for pitch 36 um */
CU_CB2_FCU_P36 = assign({ { 86, 335 } }); 
/* Passivation-2 opening micro bump (Cu_RDL) for pitch 25 um */
CU_CB2_FCU_P25 = assign({ { 86, 345 } }); 
/* Passivation-2 opening micro bump (Cu_RDL) for pitch 90 um */
CU_CB2_FCU_P90 = assign({ { 86, 355 } }); 
/* Polyimide opening */
PM     = assign({ { 5, 0 } }); 
/* PM opening pattern under PM0 to separate different PKG application under the same SOC design */
PM_IN       = assign({ { 5, 60 } }); 
/* PM opening pattern under micro PM0 (PM0_u) to separate different PKG application under the same SOC design */
PM_INU      = assign({ { 5, 65 } });
/* Cu via between AP and Cu_PPI */
PM0    = assign({ { 5, 10 } }); 
/* Layer for sacrificial pad (SAC Pad) */
PM0_SAC     = assign({ { 5, 14 } }); 
/* PM0 pattern for InFO package */
PM0_IN      = assign({ { 5, 12 } }); 
/* micro-bump pattern under for InFO package */
PM0_INU     = assign({ { 5, 17 } });
/* micro-bump pattern under for InFO package */
PM0_PAD     = assign({ { 5, 19 } }); 
/* Under bump metal for flip-chip */
UBM    = assign({ { 170, 0 } }); 
/* under bump metallurgy */
UBM_FC      = assign({ { 170, 10 } }); 
/* under bump metallurgy */
UBM_FCU     = assign({ { 170, 5 } }); 
/* SoIC under bump metallurgy */
UBM_F2B     = assign({ { 170, 200 } }); 
/* Micro under bump metallurgy for flip chip */
UUBM     = assign({ { 170, 100 } }); 
/* Vision dummy micro bump for alignment usage (Small CD bump) */
V_UUBM      = assign({ { 170, 230 } }); 
/* polyimide window */
PM_FC       = assign({ { 5, 55 } }); 
/* polyimide window */
PM_FCU      = assign({ { 5, 25 } }); 
/* 3D SoIC define backside BPM (Bonding Pad Metal) alignment mark for DRC recognition purpose */
BSAM        = assign({ { 5, 230 } }); 
/* passivation2 window for bump pad */
CB2_FCU     = assign({ { 86, 25 } }); 
/* CB2 pattern under PM0 for InFO package */
CB2_IN      = assign({ { 86, 30 } }); 
/* CB2 pattern under PM0_U for InFO package  */
CB2_INU     = assign({ { 86, 35 } });
/* TSV pattern  */
TSV         = assign({ { 251, 0 } });
/* Dummy resistor cover TSV region for LVS */
DRTSV       = assign({ { 251, 1 } }); 
/* Backside TSV pseudo metal */
BTPM        = assign({ { 251, 76 } }); 
/* NWEL 2-T resistor */
NWDMY_0   = assign({ { 114, 0 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* NWEL 3-T resistor */
NWDMY_1   = assign({ { 114, 1 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* High-R Resistor */
RH_TN     = assign({ { 117, 6 } }); 
/* Dummy High-R Resistor */
SR_DTN    = assign({ { 117, 7 } }); 
/* High-R Resistor block layer */
RH_TNB    = assign({ { 117, 8 } }); 
/* 2 terminal HiR resistor device */
RHDMY_ALL = assign({ { 117, 9 } }); 
/* high-EM blocking layer */
RH_TNE    = assign({ { 117, 10 } }); 
/* To define the different matching requirement. */
RH_MATCHING_2 = assign({ { 117, 11 } }); 

RHDMY0    = assign({ { 117, 30 } }); // Dummy layer for M0 Resistor region
RHDMY1    = assign({ { 117, 31 } }); // Dummy layer for M1 Resistor region
RHDMY2    = assign({ { 117, 32 } }); // Dummy layer for M2 Resistor region
RHDMY3    = assign({ { 117, 33 } }); // Dummy layer for M3 Resistor region
RHDMY4    = assign({ { 117, 34 } }); // Dummy layer for M4 Resistor region
RHDMY5    = assign({ { 117, 35 } }); // Dummy layer for M5 Resistor region
RHDMY6    = assign({ { 117, 36 } }); // Dummy layer for M6 Resistor region
RHDMY7    = assign({ { 117, 37 } }); // Dummy layer for M7 Resistor region
RHDMY8    = assign({ { 117, 38 } }); // Dummy layer for M8 Resistor region
RHDMY9    = assign({ { 117, 39 } }); // Dummy layer for M9 Resistor region
RHDMY10    = assign({ { 117, 40 } }); // Dummy layer for M10 Resistor region
RHDMY11    = assign({ { 117, 41 } }); // Dummy layer for M11 Resistor region
RHDMY12    = assign({ { 117, 42 } }); // Dummy layer for M12 Resistor region
RHDMY13    = assign({ { 117, 43 } }); // Dummy layer for M13 Resistor region
RHDMY14    = assign({ { 117, 44 } }); // Dummy layer for M14 Resistor region
RHDMY15    = assign({ { 117, 45 } }); // Dummy layer for M15 Resistor region
RHDMY16    = assign({ { 117, 46 } }); // Dummy layer for M16 Resistor region
RHDMY17    = assign({ { 117, 47 } }); // Dummy layer for M17 Resistor region
RHDMY18    = assign({ { 117, 48 } }); // Dummy layer for M18 Resistor region
RHDMY19    = assign({ { 117, 49 } }); // Dummy layer for M19 Resistor region
RMDMY0    = assign({ { 116, 30 } }, layer_intent = { LAYER_INTENT_FILL }); // M0 metal Resistor 
RMDMY1    = assign({ { 116, 31 } }, layer_intent = { LAYER_INTENT_FILL }); // M1 metal Resistor 
RMDMY2    = assign({ { 116, 32 } }, layer_intent = { LAYER_INTENT_FILL }); // M2 metal Resistor 
RMDMY3    = assign({ { 116, 33 } }, layer_intent = { LAYER_INTENT_FILL }); // M3 metal Resistor 
RMDMY4    = assign({ { 116, 34 } }, layer_intent = { LAYER_INTENT_FILL }); // M4 metal Resistor 
RMDMY5    = assign({ { 116, 35 } }, layer_intent = { LAYER_INTENT_FILL }); // M5 metal Resistor 
RMDMY6    = assign({ { 116, 36 } }, layer_intent = { LAYER_INTENT_FILL }); // M6 metal Resistor 
RMDMY7    = assign({ { 116, 37 } }, layer_intent = { LAYER_INTENT_FILL }); // M7 metal Resistor 
RMDMY8    = assign({ { 116, 38 } }, layer_intent = { LAYER_INTENT_FILL }); // M8 metal Resistor 
RMDMY9    = assign({ { 116, 39 } }, layer_intent = { LAYER_INTENT_FILL }); // M9 metal Resistor 
RMDMY10    = assign({ { 116, 40 } }, layer_intent = { LAYER_INTENT_FILL }); // M10 metal Resistor 
RMDMY11    = assign({ { 116, 41 } }, layer_intent = { LAYER_INTENT_FILL }); // M11 metal Resistor 
RMDMY12    = assign({ { 116, 42 } }, layer_intent = { LAYER_INTENT_FILL }); // M12 metal Resistor 
RMDMY13    = assign({ { 116, 43 } }, layer_intent = { LAYER_INTENT_FILL }); // M13 metal Resistor 
RMDMY14    = assign({ { 116, 44 } }, layer_intent = { LAYER_INTENT_FILL }); // M14 metal Resistor 
RMDMY15    = assign({ { 116, 45 } }, layer_intent = { LAYER_INTENT_FILL }); // M15 metal Resistor 
RMDMY16    = assign({ { 116, 46 } }, layer_intent = { LAYER_INTENT_FILL }); // M16 metal Resistor 
RMDMY17    = assign({ { 116, 47 } }, layer_intent = { LAYER_INTENT_FILL }); // M17 metal Resistor 
RMDMY18    = assign({ { 116, 48 } }, layer_intent = { LAYER_INTENT_FILL }); // M18 metal Resistor 
RMDMY19    = assign({ { 116, 49 } }, layer_intent = { LAYER_INTENT_FILL }); // M19 metal Resistor 
/* Cu metal Resistor */
RMDMYCU     = assign({ { 116, 73 } }); 
/* AP metal Resistor */
RMDMYAP    = assign({ { 116, 74 } }, layer_intent = { LAYER_INTENT_FILL }); 

/* TSV_GR layer for OD_DA */
GR_TSV_OD_DA             = assign({ { 251, 83 } }); 
/* TSV_GR layer for PO */
GR_TSV_PO                = assign({ { 251, 84 } }); 
/* TSV_GR layer for MD */
GR_TSV_MD                = assign({ { 251, 85 } }); 
/* TSV_GR layer for VDR */
GR_TSV_VDR               = assign({ { 251, 86 } }); 






















/* TSV_GR layer for VDR */
TSV_BLK                  = assign({ { 251, 181 } }); 

/* Diode device */
DIODMY     = assign({ { 119, 0 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Serdes device marker layer */
AN_SD      = assign({ { 120, 0 } });
/* Marker layer for H234 srdes cell */
AN_SD_4      = assign({ { 120, 1 } });
/* High Current Diode device */
HIA_DUMMY  = assign({ { 168, 0 } }); 
/* Dummy layer to recognized HIA_diode with optimized layout rule */
IHIADMY = assign({ { 168, 2 } }); 
BJTDMY    = assign({ { 110, 0 } }); 
/* BJT Emitter area */
BJTEDMY    = assign({ { 110, 2 } }); 
/* iBJT device */
IBJTDMY    = assign({ { 110, 3 } });
/* PBJT corner blocking layer */
PBJT_COR    = assign({ { 110, 5 } });
/* IBJT corner blocking layer */
IBJT_COR    = assign({ { 110, 6 } });
/* Dummy layer to cover customized BJT device for analog layout rules   */
BJTDMY_C2   = assign({ { 110, 12 } }); 
/* Dummy layer to cover customized BJT device for analog layout rules */
BJTEDMY_C2  = assign({ { 110, 13 } }); 
/* Dummy layer to cover customized BJT device for analog layout rules   */
BJTDMY_CD1  = assign({ { 110, 14 } }); 
/* Dummy layer to cover customized BJT device for analog layout rules   */
BJTEDMY_CD1 = assign({ { 110, 15 } });
/* Decoupling Capacitor dummy layer to cover DECAP */
DECAPDMY   = assign({ { 129, 0 } }); 

MATCHING    = assign({ { 205, 8 } }); 
/* Marker layer for customized CRAM cell */
CRAM_LP     = assign({ { 255, 8 } });
/* IP marker layer */
BUMP_BLOCKAGE   = assign({ { 255, 17 } }); 
/* sensitive analog N/P MOS array with high matching requirement */
ANARRAY_H   = assign({ { 255, 20 } }); 
/* sensitive analog N/P MOS array with medium matching requirement */
ANARRAY_M   = assign({ { 255, 21 } }); 
/* sensitive analog N/P MOS array with high matching requirement */
ANARRAY_HS  = assign({ { 255, 23 } }); 
/* special CAD layer for small MOS array to check the DGE  */
ANARRAY_S   = assign({ { 255, 24 } }); 
RH_MATCHING = assign({ { 117, 20 } }); 

/* Metal Fuse IP  */
METALFUSE     = assign({ { 156, 2 } }); 
/* Metal Fuse Link */
METALFUSELINK = assign({ { 156, 3 } }); 
/* Metal Fuse Block  */
METALFUSE_B1  = assign({ { 156, 8 } }); 
/* Inductor  */
INDDMY        = assign({ { 144, 0 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Product labels and LOGO  */
LOGO          = assign({ { 158, 0 } }); 
/* dummy TCD FEOL pattern */
TCDDMY        = assign({ { 165, 1 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* dummy TCD full stack (FEOL+BEOL) */
TCDDMY_ALL    = assign({ { 165, 20 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* voltage range 1.8V<=x<1.98V net marker layer, for decap */
CAP_18V     = assign({ { 255, 130 } }); 
/* Marker layer for DRC check */
RDR_ANALOG    = assign({ { 255, 151 } }); 
/* Marker layer for restriced design rule */
RDR           = assign({ { 255, 152 } }); 
/* Define Non-OPC region in DTCD */
TCDDMY_NON_OPC          = assign({ { 165, 100 } }); 
/* Define Non-OPC region for stacking DTCD */
TCDDMY_NON_OPC_STACK    = assign({ { 165, 101 } }); 
/* Define Non-OPC region for DTCD M0 */
TCDDMY_NON_OPC_BEOL0    = assign({ { 165, 110 } }); 

/* Define Non-OPC region for DTCD M1/V0  */
TCDDMY_NON_OPC_BEOL1 =  assign({ { 165, 111 } });
/* Define Non-OPC region for DTCD M2/V1  */
TCDDMY_NON_OPC_BEOL2 =  assign({ { 165, 112 } });
/* Define Non-OPC region for DTCD M3/V2  */
TCDDMY_NON_OPC_BEOL3 =  assign({ { 165, 113 } });
/* Define Non-OPC region for DTCD M4/V3  */
TCDDMY_NON_OPC_BEOL4 =  assign({ { 165, 114 } });
/* Define Non-OPC region for DTCD M5/V4  */
TCDDMY_NON_OPC_BEOL5 =  assign({ { 165, 115 } });
/* Define Non-OPC region for DTCD M6/V5  */
TCDDMY_NON_OPC_BEOL6 =  assign({ { 165, 116 } });
/* Define Non-OPC region for DTCD M7/V6  */
TCDDMY_NON_OPC_BEOL7 =  assign({ { 165, 117 } });
/* Define Non-OPC region for DTCD M8/V7  */
TCDDMY_NON_OPC_BEOL8 =  assign({ { 165, 118 } });


TCDDMY_M0     = assign({ { 165, 30 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M0 pattern 


TCDDMY_M1     = assign({ { 165, 31 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M1 pattern 


TCDDMY_M2     = assign({ { 165, 32 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M2 pattern 


TCDDMY_M3     = assign({ { 165, 33 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M3 pattern 


TCDDMY_M4     = assign({ { 165, 34 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M4 pattern 


TCDDMY_M5     = assign({ { 165, 35 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M5 pattern 


TCDDMY_M6     = assign({ { 165, 36 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M6 pattern 


TCDDMY_M7     = assign({ { 165, 37 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M7 pattern 


TCDDMY_M8     = assign({ { 165, 38 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M8 pattern 


TCDDMY_M9     = assign({ { 165, 39 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M9 pattern 


TCDDMY_M10     = assign({ { 165, 40 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M10 pattern 


TCDDMY_M11     = assign({ { 165, 41 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M11 pattern 


TCDDMY_M12     = assign({ { 165, 42 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M12 pattern 


TCDDMY_M13     = assign({ { 165, 43 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M13 pattern 


TCDDMY_M14     = assign({ { 165, 44 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M14 pattern 


TCDDMY_M15     = assign({ { 165, 45 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M15 pattern 


TCDDMY_M16     = assign({ { 165, 46 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M16 pattern 


TCDDMY_M17     = assign({ { 165, 47 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M17 pattern 


TCDDMY_M18     = assign({ { 165, 48 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M18 pattern 


TCDDMY_M19     = assign({ { 165, 49 } }, layer_intent = { LAYER_INTENT_FILL }); // dummy TCD M19 pattern 

TCDDMY_V0     = assign({ { 165, 50 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V0 pattern

TCDDMY_V1     = assign({ { 165, 51 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V1 pattern

TCDDMY_V2     = assign({ { 165, 52 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V2 pattern

TCDDMY_V3     = assign({ { 165, 53 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V3 pattern

TCDDMY_V4     = assign({ { 165, 54 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V4 pattern

TCDDMY_V5     = assign({ { 165, 55 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V5 pattern

TCDDMY_V6     = assign({ { 165, 56 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V6 pattern

TCDDMY_V7     = assign({ { 165, 57 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V7 pattern

TCDDMY_V8     = assign({ { 165, 58 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V8 pattern

TCDDMY_V9     = assign({ { 165, 59 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V9 pattern

TCDDMY_V10     = assign({ { 165, 60 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V10 pattern

TCDDMY_V11     = assign({ { 165, 61 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V11 pattern

TCDDMY_V12     = assign({ { 165, 62 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V12 pattern

TCDDMY_V13     = assign({ { 165, 63 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V13 pattern

TCDDMY_V14     = assign({ { 165, 64 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V14 pattern

TCDDMY_V15     = assign({ { 165, 65 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V15 pattern

TCDDMY_V16     = assign({ { 165, 66 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V16 pattern

TCDDMY_V17     = assign({ { 165, 67 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V17 pattern

TCDDMY_V18     = assign({ { 165, 68 } }, layer_intent = { LAYER_INTENT_FILL });  // dummy TCD V18 pattern

/* LVS dummy layer to cover interdigitated capacitor (IDMOM) */
RTMOMDMY   = assign({ { 155, 0 } }); 
/* MOM capacitor device */
MOMDMY        = assign({ { 155, 21 } }); // MOM capacitor device
VIAMOMDMY     = assign({ { 155, 25 } }); // Dummy layer to define VIA in MOM region
MOMDMY_0      = assign({ { 155, 30 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M0 finger region
MOMDMY_1      = assign({ { 155, 31 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M1 finger region
MOMDMY_2      = assign({ { 155, 32 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M2 finger region
MOMDMY_3      = assign({ { 155, 33 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M3 finger region
MOMDMY_4      = assign({ { 155, 34 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M4 finger region
MOMDMY_5      = assign({ { 155, 35 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M5 finger region
MOMDMY_6      = assign({ { 155, 36 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M6 finger region
MOMDMY_7      = assign({ { 155, 37 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M7 finger region
MOMDMY_8      = assign({ { 155, 38 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M8 finger region
MOMDMY_9      = assign({ { 155, 39 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M9 finger region
MOMDMY_10      = assign({ { 155, 40 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M10 finger region
MOMDMY_11      = assign({ { 155, 41 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M11 finger region
MOMDMY_12      = assign({ { 155, 42 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M12 finger region
MOMDMY_13      = assign({ { 155, 43 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M13 finger region
MOMDMY_14      = assign({ { 155, 44 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M14 finger region
MOMDMY_15      = assign({ { 155, 45 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M15 finger region
MOMDMY_16      = assign({ { 155, 46 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M16 finger region
MOMDMY_17      = assign({ { 155, 47 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M17 finger region
MOMDMY_18      = assign({ { 155, 48 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M18 finger region
MOMDMY_19      = assign({ { 155, 49 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M19 finger region
MOMDMY_20      = assign({ { 155, 50 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M20 finger region
MOMDMY_21      = assign({ { 155, 51 } }, layer_intent = { LAYER_INTENT_FILL });  // MOM M21 finger region
/* DRC/LVS dummy layer for Cu MOM region, for Cu */
MOMDMY_CU   = assign({ { 155, 73 } }); 
/* MOM AP finger region */
MOMDMY_AP   = assign({ { 155, 74 } }); 
/* waive MOM cell */
MOM_WAIVE_FLOAT_M0   = assign({ { 155, 120 } });
/* waive MOM cell */
MOM_WAIVE_FLOAT_M1   = assign({ { 155, 121 } });
/* Free Style MOMCAP */
MOMCAP_FS   = assign({ { 155, 204 } }); 
/* LVS dummy layer for customized MOM recognition */
MOMDMY_QCM  = assign({ { 155, 220 } }); 
/* LVS dummy layer for customized MOM recognition */
MOMDMY_QFM  = assign({ { 155, 221 } }); 

/* ICOVL pattern */
ICOVL_A     = assign({ { 165, 70 } }); 
/* ICOVL pattern */
ICOVL_B     = assign({ { 165, 71 } }); 
/* ICOVL pattern */
ICOVL_C     = assign({ { 165, 72 } }); 
/* ICOVL pattern */
ICOVL_D     = assign({ { 165, 73 } }); 
/* ICOVL pattern */
ICOVL_E     = assign({ { 165, 74 } }); 
/* ICOVL pattern */
ICOVL_F     = assign({ { 165, 75 } }); 
/* ICOVL pattern */
ICOVL_G     = assign({ { 165, 76 } }); 
/* ICOVL pattern */
ICOVL_H     = assign({ { 165, 77 } }); 
/* ICOVL pattern */
ICOVL_I     = assign({ { 165, 78 } }); 
/* ICOVL pattern */
ICOVL_J     = assign({ { 165, 79 } }); 
/* ICOVL pattern */
ICOVL_SINGLE   = assign({ { 165, 320 } }); 
/* 3D SoIC define backside BPM (Bonding Pad Metal) alignment mark for DRC recognition purpose */
/* MiM capacitor top plate for 3-plates MiM process */
TPC         = assign({ { 260, 0 } }); 
/* open area of TPC */
TPC_O       = assign({ { 260, 1 } }); 
/* TPC RV dummy for 3-plate MiM use */
TPC_RVDMY   = assign({ { 260, 3 } }); 
/* TPC dummy for 3-plate MiM use */
TPCDMY      = assign({ { 260, 4 } }); 
/* TPC dummy for 3-plate MiM use (Customized use) */
TPC2_O      = assign({ { 260, 5 } }); 
/* MiM capacitor Middle plate for 3-plates MiM process  */
MPC         = assign({ { 261, 0 } }); 
/* open area of MPC */
MPC_O       = assign({ { 261, 1 } }); 
/* MPC RV dummy for 3-plate MiM use */
MPC_RVDMY   = assign({ { 261, 3 } }); 
/* MPC dummy for 3-plate MiM use */
MPCDMY      = assign({ { 261, 4 } }); 
/* MiM capacitor bottom plate for 3-plates MiM process */
BPC         = assign({ { 262, 0 } }); 
/* open area of BPC */
BPC_O       = assign({ { 262, 1 } }); 
/* BPC RV dummy for 3-plate MiM use */
BPC_RVDMY   = assign({ { 262, 3 } }); 
/* BPC dummy for 3-plate MiM use */
BPCDMY      = assign({ { 262, 4 } }); 
/* DRC/LVS dummy layer for Cu_RDL 3-plates MiM region */
TPCDMY_CU      = assign({ { 148, 73 } }); 
/* DRC/LVS dummy layer for AP 3-plates MiM region */
TPCDMY_AP   = assign({ { 148, 74 } }); 
/* DRC/LVS dummy layer for AP 2-plates MiM region */
TPCDMY_AP2  = assign({ { 148, 75 } }); 
TPCDMY_AP3  = assign({ { 148, 77 } }); 
/* DRC/LVS dummy layer for SHPMiM client region */
PMIM_1      = assign({ { 148, 81 } }); 
/* DRC/LVS dummy layer for SHPMiM server region */
PMIM_2      = assign({ { 148, 82 } }); 
/* DRC/LVS dummy layer for SHPMiM server type2-1 region */
PMIM2_1     = assign({ { 148, 83 } }); 
DMIMEXCL    = assign({ { 150, 260 } }); 
/* dummy layer to avoid SHPMIM dummy insertion */
DPMIMEXCL   = assign({ { 150, 261 } }); 
MIMEXCL     = assign({ { 255, 260 } }); 
PMIMEXCL    = assign({ { 255, 261 } });
/* Marker layer for Gm sensitive analog design */
AN_GM_SENS  = assign({ { 255, 290 } });
BPVT        = assign({ { 85, 200 } }); 
BPVB        = assign({ { 85, 202 } }); 
/* MIM capacitor for SHPMiM process */
BPC_LV       = assign({ { 263, 0 } }); 
/* opening region for SHPMIM use */
BPC_LV_O     = assign({ { 263, 1 } }); 
/* BPC_LV Dummy for SHPMIM use */
BPC_LVHV_DMY = assign({ { 263, 4 } }); 
/* MIM capacitor for SHPMiM client process */
BPC_HV1      = assign({ { 263, 11 } }); 
/* MIM capacitor for SHPMiM server process */
BPC_HV2      = assign({ { 263, 12 } }); 
/* BPC_HV2 opening region for SHPMIM use */
BPC_HV2_O    = assign({ { 263, 13 } }); 
/* BPC_HV2 opening region for SHPMIM use */
BPC_HV1_O    = assign({ { 263, 14 } }); 
/* MIM capacitor for SHPMiM process */
BPC_GND      = assign({ { 264, 0 } }); 
/* opening region for SHPMIM use */
BPC_GND_O    = assign({ { 264, 1 } }); 
/* BPC_GND_DMY Dummy for SHPMIM use */
BPC_GND_DMY  = assign({ { 264, 4 } }); 
/* MIM capacitor for SHPMiM process */
MPC_LV       = assign({ { 265, 0 } }); 
/* opening region for SHPMIM use */
MPC_LV_O     = assign({ { 265, 1 } }); 
/* MPC_LV Dummy for SHPMIM use */
MPC_LV_DMY   = assign({ { 265, 4 } }); 
/* MIM capacitor for SHPMiM process */
TPC_GND      = assign({ { 266, 0 } }); 
/* opening region for SHPMIM use */
TPC_GND_O    = assign({ { 266, 1 } }); 
/* TPC_GND_DMY Dummy for SHPMIM use */
TPC_GND_DMY  = assign({ { 266, 4 } }); 
/* MIM capacitor for SHPMiM process */
TPC_LV       = assign({ { 267, 0 } }); 
/* opening region for SHPMIM use */
TPC_LV_O     = assign({ { 267, 1 } }); 
/* TPC_LV Dummy for SHPMIM use */
TPC_LV_DMY   = assign({ { 267, 4 } }); 


M0_BREAK_BLK	= assign({ { 255, 46 } }); 
VIRT_M1_TRACK	= assign({ { 255, 123 } }); 
ODBLK        = assign({ { 150, 6 } }); 
POBLK        = assign({ { 150, 17 } }); 
MDBLK        = assign({ { 150, 82 } }); 
SIGE_DRAW    = assign({ { 205, 2 } }); 
SIC_DRAW     = assign({ { 205, 3 } }); 
/* SealRing Region */
SEALRING     = assign({ { 162, 0 } }); 
/* SLDB Region outside SealRing */
SEALRING_DB  = assign({ { 162, 1 } }); 
/* EnhanceZone+SealRing+SLDB */
SEALRING_ALL = assign({ { 162, 2 } }); 
/* SealRing EnhanceZone */
SEALRING_EN  = assign({ { 162, 3 } }); 
/* sealring reinforcement region */
SEALRING_RE  = assign({ { 162, 4 } }); 
/* sealring inner region */
SEALRING_IN  = assign({ { 162, 5 } }); 
/* sealring inner region */
SEALRING_OUT = assign({ { 162, 6 } });
/* DRC recognition layer for the sealring corner region */
SEALRING_CORNER = assign({ { 162, 7 } });
/* DRC recognition layer for the SoIC-M sealring empty zone */
SEALRING_EPT_M = assign({ { 162, 10 } }); 
/* New CAD layer of DRC recognition layer for the SoIC sealring empty zone */
SEALRING_EPT_S = assign({ { 162, 11 } }); 
/* L-shape Alignment Mark in SealRing */
LMARK        = assign({ { 109, 0 } }); 
/* CoW alignment mark */
COWAM       = assign({ { 109, 150 } }); 
/* CoW alignment mark for SoIC within CoWoS */
COWAMS      = assign({ { 109, 200 } }); 
/* Chip Corner Stress Relief pattern in SealRing */
CSRDMY       = assign({ { 166, 0 } }, layer_intent = { LAYER_INTENT_FILL });
/* Dummy CAD layer to define pick & place alignment mark (AM) location in AP layer */
AP_AMDMY       = assign({ { 166, 15 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* drain-ballasted ESD device */
SR_ESD           = assign({ { 121, 0 } }); 
/* cover ESD MOS OD region */
SDI              = assign({ { 122, 0 } }); 
/* cover drain side of drain-ballasted ESD device */
SDI_2            = assign({ { 122, 2 } }); 
SDI_3            = assign({ { 122, 3 } }); 
/* waive LUP rules for verified IP */
LUPWDMY          = assign({ { 255, 1 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* recognize Area IO region */
LUPWDMY_2        = assign({ { 255, 18 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Marker layer for waiving DRC violation in pad frame region */
PAD_WAV     = assign({ { 255, 19 } }); 
/* To waive push rules, only for TV2 tape-out */
LUP6IEDMY_ENG        = assign({ { 255, 55 } }, layer_intent = { LAYER_INTENT_FILL });
/* waive LUP strap density rules */
LUPDWDMY         = assign({ { 255, 59 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Recognize 15um checking window of OD injectors in IP level */
LUP_015U         = assign({ { 255, 70 } }); 
/* Recognize 15um checking window for P-type OD injectors in IP level */
LUP_015U_P         = assign({ { 255, 76 } }); 
/* Recognize 15um checking window for N-type OD injectors in IP level */
LUP_015U_N         = assign({ { 255, 77 } }); 
/* Recognize 45um checking window of High-noise OD injectors in IP level */
LUP_045U         = assign({ { 255, 71 } }); 
/* Recognize 75um checking window of IHIA OD injectors and check specific LUP rules. */
LUP_045U_IHIA    = assign({ { 255, 74 } });
/* Recognize 45um checking window of IHIA OD injectors and check specific LUP rules. */
LUP_075U_IHIA    = assign({ { 255, 75 } });
/* Recognize 75um checking window of High-noise OD injectors in IP level */
LUP_075U         = assign({ { 255, 72 } }); 
/* Recognize 45um checking window of IHIA OD injectors in IP level */
LUP_045U_15V     = assign({ { 255, 101 } }); 
/* Recognize 75um checking window of IHIA OD injectors in IP level */
LUP_075U_15V     = assign({ { 255, 102 } }); 
/* Recognize 45um checking window of Med-low-noise OD injectors in IP level */
LUP_045U_15V_IHIA 	= assign({ { 255, 103 } });
/* Recognize 75um checking window of Med-low-noise OD injectors in IP level */
LUP_075U_15V_IHIA 	= assign({ { 255, 104 } });
/* To annotate the waived gates for a particular violation */
CNODWVR      = assign({ { 255, 109 } }); 
/* To annotate the waived gates for a particular violation */
CNODWVR_TEXT_exploded = assign_text({ { 255, 109 } }, use_exploded_text = { { { "*" }, { "*" } } }); 
CNODWVR_TEXT = assign_text({ { 255, 109 } }); 
/* Recognize 45um checking window of Med-noise OD injectors in IP level */
LUP_045U_18V     = assign({ { 255, 111 } }); 
/* Recognize 75um checking window of Med-noise OD injectors in IP level */
LUP_075U_18V     = assign({ { 255, 112 } }); 
/* Recognize 45um checking window of IHIA OD injectors in IP level */
LUP_045U_18V_IHIA     = assign({ { 255, 113 } });
/* To check tighten Latch-up rule for Vtrigger=1.70V */
LUP_VTR170_LOGIC     = assign({ { 255, 218 } });
/* To check tighten Latch-up rule for Vtrigger=1.80V */
LUP_VTR180_LOGIC     = assign({ { 255, 219 } });
/* To check SRAM tighten Latch-up rule for Vtrigger=1.60V */
LUP_VTR160_SRM     = assign({ { 255, 221 } });

/* Recognize 75um checking window of IHIA OD injectors in IP level */
LUP_075U_18V_IHIA     = assign({ { 255, 114 } });
/* To check within OD injector 150um  related ESD/LU rules */
LUP_150U         = assign({ { 255, 115 } });
/* An engineering layer for LUP.6 rule waiver. */
LUPWDMY_ENG      = assign({ { 255, 119 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on M1 to triggle LUP check in IP level without PAD */
IODMYI            = assign({ { 255, 31 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Identify VDD PAD for LUP rules. */
VDDDMY           = assign({ { 255, 4 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Identify VSS PAD for LUP rules. */
VSSDMY           = assign({ { 255, 5 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* Recognize resistor over 200ohm for ESD/LUP check */
RES200           = assign({ { 255, 9 } }); 
/* Low capacitance ESD device region */
LC_DMY           = assign({ { 168, 1 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* waive defined LUP rules */
LUPIEDMY         = assign({ { 255, 56 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on M1 to recognize low noise OD injector to waive LUP rules */
LUPVIEDMY        = assign({ { 255, 58 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on Pad to recognize low noise OD injector to waive LUP rules */
LUPVIEDMY_BUMP   = assign({ { 255, 60 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on M1 to recognize medium-low noise OD injector to waive LUP rules */
LUP15VIEDMY      = assign({ { 255, 65 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on Pad to recognize medium-low noise OD injector to waive LUP rules */
LUP15VIEDMY_BUMP = assign({ { 255, 62 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on M1 to recognize medium noise OD injector to waive LUP rules */
LUP18VIEDMY      = assign({ { 255, 66 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on Pad to recognize medium noise OD injector to waive LUP rules */
LUP18VIEDMY_BUMP = assign({ { 255, 63 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* DRC recognition layer for waive PAD frame area */
PADDMY           = assign({ { 255, 16 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on M1 to recognize Ultra noise OD injector to waive LUP rules */
LUPULVIEDMY      = assign({ { 255, 91 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* draw on Pad to recognize Ultra noise OD injector to waive LUP rules */
LUPULVIEDMY_BUMP = assign({ { 255, 92 } }, layer_intent = { LAYER_INTENT_FILL }); 

SRM              = assign({ { 20, 0 } }); // define SRAM FEOL region
SRM_1            = assign({ { 20, 1 } }); // TSMC internal use
SRM_3            = assign({ { 20, 3 } }); // TSMC internal use
SRM_4            = assign({ { 20, 4 } }); // TSMC internal use
SRM_7            = assign({ { 20, 7 } }); // TSMC internal use

SRM_9            = assign({ { 20, 9 } });     // SRAM layer for TSMC internal use
SRM_10            = assign({ { 20, 10 } });     // SRAM layer for TSMC internal use
SRM_11            = assign({ { 20, 11 } });     // SRAM layer for TSMC internal use
SRM_12            = assign({ { 20, 12 } });     // SRAM layer for TSMC internal use
SRM_13            = assign({ { 20, 13 } });     // SRAM layer for TSMC internal use
SRM_14            = assign({ { 20, 14 } });     // SRAM layer for TSMC internal use
SRM_15            = assign({ { 20, 15 } });     // SRAM layer for TSMC internal use
SRM_16            = assign({ { 20, 16 } });     // SRAM layer for TSMC internal use
SRM_17            = assign({ { 20, 17 } });     // SRAM layer for TSMC internal use
SRM_18            = assign({ { 20, 18 } });     // SRAM layer for TSMC internal use
SRM_19            = assign({ { 20, 19 } });     // SRAM layer for TSMC internal use
SRM_20            = assign({ { 20, 20 } });     // SRAM layer for TSMC internal use
SRM_21            = assign({ { 20, 21 } });     // SRAM layer for TSMC internal use
SRM_22            = assign({ { 20, 22 } });     // SRAM layer for TSMC internal use
SRM_23            = assign({ { 20, 23 } });     // SRAM layer for TSMC internal use
SRM_24            = assign({ { 20, 24 } });     // SRAM layer for TSMC internal use
SRM_25            = assign({ { 20, 25 } });     // SRAM layer for TSMC internal use
SRM_26            = assign({ { 20, 26 } });     // SRAM layer for TSMC internal use
SRM_27            = assign({ { 20, 27 } });     // SRAM layer for TSMC internal use
SRM_28            = assign({ { 20, 28 } });     // SRAM layer for TSMC internal use
SRM_29            = assign({ { 20, 29 } });     // SRAM layer for TSMC internal use
SRM_30            = assign({ { 20, 30 } });     // SRAM layer for TSMC internal use
SRM_31            = assign({ { 20, 31 } });     // SRAM layer for TSMC internal use
SRM_32            = assign({ { 20, 32 } });     // SRAM layer for TSMC internal use
SRM_33            = assign({ { 20, 33 } });     // SRAM layer for TSMC internal use
SRM_34            = assign({ { 20, 34 } });     // SRAM layer for TSMC internal use
SRM_35            = assign({ { 20, 35 } });     // SRAM layer for TSMC internal use
SRM_36            = assign({ { 20, 36 } });     // SRAM layer for TSMC internal use
SRM_37            = assign({ { 20, 37 } });     // SRAM layer for TSMC internal use
SRM_38            = assign({ { 20, 38 } });     // SRAM layer for TSMC internal use
SRM_39            = assign({ { 20, 39 } });     // SRAM layer for TSMC internal use
SRM_40            = assign({ { 20, 40 } });     // SRAM layer for TSMC internal use
SRM_41            = assign({ { 20, 41 } });     // SRAM layer for TSMC internal use
SRM_42            = assign({ { 20, 42 } });     // SRAM layer for TSMC internal use
SRM_43            = assign({ { 20, 43 } });     // SRAM layer for TSMC internal use
SRM_44            = assign({ { 20, 44 } });     // SRAM layer for TSMC internal use
SRM_45            = assign({ { 20, 45 } });     // SRAM layer for TSMC internal use
SRM_46            = assign({ { 20, 46 } });     // SRAM layer for TSMC internal use
SRM_47            = assign({ { 20, 47 } });     // SRAM layer for TSMC internal use
SRM_48            = assign({ { 20, 48 } });     // SRAM layer for TSMC internal use
SRM_49            = assign({ { 20, 49 } });     // SRAM layer for TSMC internal use

/* TSMC internal use */
SET0_5 = assign({ { 20, 61 } }); 
/* TSMC internal use */
SET6_M = assign({ { 20, 62 } }); 
/* TSMC internal use */
SET6_E = assign({ { 20, 63 } });
/* LVS dummy layer for SRAM process to exclude OD area and DRC dummy layer exclusion, TSMC internally used layer. Please review with TSMC whenever used */
RODMY = assign({ { 20, 100 } });
/* define SRAM BEOL region */
SRAMDMY   = assign({ { 186, 0 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* SRAMDMY (TSMC internal use) */
SRAMDMY_1 = assign({ { 186, 1 } }); 
/* SRAMDMY (TSMC internal use) */
SRAMDMY_2 = assign({ { 186, 2 } }); 
/* Marker layer for SRAM PERI monitor circuit */
PERI_MONITOR = assign({ { 186, 95 } }); 
/* Maker layer for P-strap D25 spec relax */
ULHD_WLD     = assign({ { 186, 96 } }); 
/* define SRAM BEOL region */
SRAM_PERI_STD = assign({ { 186, 97 } }); 
/* define SRAM BEOL region */
SRAM_PERI = assign({ { 186, 98 } }); 
/* SRAM abut STD Cell marker layer */
SRAM_MACRO = assign({ { 186, 100 } }); 
/* Marker layer for ISO-CPODE effect relaxation for specific layout */
ISO_CPODE_WLD = assign({ { 186, 101 } }); 
/* DaisyC_RES_Myy is proposed on Myy for HV and ESD DRC to identify the net is disconnection */
DAISYC_RES_M12 = assign({ { 188, 42 } }); 
/* DaisyC_RES_Myy is proposed on Myy for HV and ESD DRC to identify the net is disconnection */
DAISYC_RES_M13 = assign({ { 188, 43 } }); 
/* SRAM internal layer */
CO_SRAM   = assign({ { 82, 0 } }); 
CO_SRAM11  = assign({ { 82, 11 } }); // SRAM internal layer
CO_SRAM12  = assign({ { 82, 12 } }); // SRAM internal layer
CO_SRAM13  = assign({ { 82, 13 } }); // SRAM internal layer
CO_SRAM14  = assign({ { 82, 14 } }); // SRAM internal layer
CO_SRAM15  = assign({ { 82, 15 } }); // SRAM internal layer
CO_SRAM16  = assign({ { 82, 16 } }); // SRAM internal layer
CO_SRAM17  = assign({ { 82, 17 } }); // SRAM internal layer
CO_SRAM18  = assign({ { 82, 18 } }); // SRAM internal layer
CO_SRAM19  = assign({ { 82, 19 } }); // SRAM internal layer
CO_SRAM20  = assign({ { 82, 20 } }); // SRAM internal layer
CO_SRAM21  = assign({ { 82, 21 } }); // SRAM internal layer
CO_SRAM22  = assign({ { 82, 22 } }); // SRAM internal layer
CO_SRAM23  = assign({ { 82, 23 } }); // SRAM internal layer
CO_SRAM24  = assign({ { 82, 24 } }); // SRAM internal layer
CO_SRAM25  = assign({ { 82, 25 } }); // SRAM internal layer
CO_SRAM26  = assign({ { 82, 26 } }); // SRAM internal layer
CO_SRAM27  = assign({ { 82, 27 } }); // SRAM internal layer
CO_SRAM28  = assign({ { 82, 28 } }); // SRAM internal layer
CO_SRAM29  = assign({ { 82, 29 } }); // SRAM internal layer
CO_SRAM30  = assign({ { 82, 30 } }); // SRAM internal layer
CO_SRAM31  = assign({ { 82, 31 } }); // SRAM internal layer
CO_SRAM32  = assign({ { 82, 32 } }); // SRAM internal layer
CO_SRAM33  = assign({ { 82, 33 } }); // SRAM internal layer
CO_SRAM34  = assign({ { 82, 34 } }); // SRAM internal layer
CO_SRAM35  = assign({ { 82, 35 } }); // SRAM internal layer
CO_SRAM36  = assign({ { 82, 36 } }); // SRAM internal layer
CO_SRAM37  = assign({ { 82, 37 } }); // SRAM internal layer
CO_SRAM38  = assign({ { 82, 38 } }); // SRAM internal layer
CO_SRAM39  = assign({ { 82, 39 } }); // SRAM internal layer
CO_SRAM40  = assign({ { 82, 40 } }); // SRAM internal layer
CO_SRAM41  = assign({ { 82, 41 } }); // SRAM internal layer
CO_SRAM42  = assign({ { 82, 42 } }); // SRAM internal layer
CO_SRAM43  = assign({ { 82, 43 } }); // SRAM internal layer
CO_SRAM44  = assign({ { 82, 44 } }); // SRAM internal layer
CO_SRAM45  = assign({ { 82, 45 } }); // SRAM internal layer
CO_SRAM46  = assign({ { 82, 46 } }); // SRAM internal layer
CO_SRAM47  = assign({ { 82, 47 } }); // SRAM internal layer
CO_SRAM48  = assign({ { 82, 48 } }); // SRAM internal layer
CO_SRAM49  = assign({ { 82, 49 } }); // SRAM internal layer
CO_SRAM50  = assign({ { 82, 50 } }); // SRAM internal layer
CO_SRAM51  = assign({ { 82, 51 } }); // SRAM internal layer
CO_SRAM52  = assign({ { 82, 52 } }); // SRAM internal layer
CO_SRAM53  = assign({ { 82, 53 } }); // SRAM internal layer
CO_SRAM54  = assign({ { 82, 54 } }); // SRAM internal layer
CO_SRAM55  = assign({ { 82, 55 } }); // SRAM internal layer
CO_SRAM56  = assign({ { 82, 56 } }); // SRAM internal layer
CO_SRAM57  = assign({ { 82, 57 } }); // SRAM internal layer
CO_SRAM58  = assign({ { 82, 58 } }); // SRAM internal layer
CO_SRAM59  = assign({ { 82, 59 } }); // SRAM internal layer
CO_SRAM60  = assign({ { 82, 60 } }); // SRAM internal layer
/* SRAM internal layer */
M0_JUMP = assign({ { 82, 110 } });
/* SRAM internal layer */
M1_JUMP     = assign({ { 82, 111 } });
/* OPC special treatment on SRAM M2 jumper */
M2_JUMP = assign({ { 82, 112 } });
/* OPC special treatment on SRAM M3 jumper */
M3_JUMP     = assign({ { 82, 113 } }); 
/* M3 no opc block layer */
M3_NO_OPC   = assign({ { 82, 123 } }); 
/* CRAM block layer */
CRAM1       = assign({ { 255, 6 } }); 
/* SRAM DRC violations waive layer (FEOL) */
BLK_WF = assign({ { 255, 10 } }); 
/* SRAM DRC violations waive layer (BEOL) */
BLK_WB = assign({ { 255, 11 } }); 
/* SRAM boundary cell blocking layer */
BCWDMY = assign({ { 255, 14 } }, layer_intent = { LAYER_INTENT_FILL }); 
/* SRAM M0 block   */
BLK_M0 = assign({ { 255, 39 } }); 
/* SRAM M1 block   */
BLK_M1 = assign({ { 255, 40 } }); 
/* SRAM M2 block  */
BLK_M2 = assign({ { 255, 32 } }); 
/* SRAM M3 block */
BLK_M3 = assign({ { 255, 33 } }); 
/* SRAM M4 block   */
BLK_M4 = assign({ { 255, 34 } }); 
/*   Marker layer for Customized Daisy chain recognition */
DAISYC_BLK  = assign({ { 255, 155 } }); 

/* block FEOL dummy fill  */
FEOLBLK = assign({ { 150, 27 } }); 
/* block BEOL dummy fill */
BEOLBLK = assign({ { 150, 28 } }); 

DM0EXCL = assign({ {150, 30}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={30}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM1EXCL = assign({ {150, 31}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={31}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM2EXCL = assign({ {150, 32}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={32}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM3EXCL = assign({ {150, 33}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={33}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM4EXCL = assign({ {150, 34}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={34}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM5EXCL = assign({ {150, 35}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={35}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM6EXCL = assign({ {150, 36}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={36}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM7EXCL = assign({ {150, 37}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={37}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM8EXCL = assign({ {150, 38}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={38}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM9EXCL = assign({ {150, 39}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={39}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM10EXCL = assign({ {150, 40}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={40}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM11EXCL = assign({ {150, 41}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={41}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM12EXCL = assign({ {150, 42}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={42}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM13EXCL = assign({ {150, 43}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={43}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM14EXCL = assign({ {150, 44}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={44}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM15EXCL = assign({ {150, 45}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={45}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM16EXCL = assign({ {150, 46}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={46}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM17EXCL = assign({ {150, 47}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={47}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM18EXCL = assign({ {150, 48}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={48}, views = {DESIGN_VIEW, FRAME_VIEW} });

DM19EXCL = assign({ {150, 49}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={49}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV0EXCL = assign({ {150, 50}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={50}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV1EXCL = assign({ {150, 51}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={51}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV2EXCL = assign({ {150, 52}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={52}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV3EXCL = assign({ {150, 53}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={53}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV4EXCL = assign({ {150, 54}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={54}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV5EXCL = assign({ {150, 55}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={55}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV6EXCL = assign({ {150, 56}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={56}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV7EXCL = assign({ {150, 57}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={57}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV8EXCL = assign({ {150, 58}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={58}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV9EXCL = assign({ {150, 59}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={59}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV10EXCL = assign({ {150, 60}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={60}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV11EXCL = assign({ {150, 61}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={61}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV12EXCL = assign({ {150, 62}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={62}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV13EXCL = assign({ {150, 63}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={63}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV14EXCL = assign({ {150, 64}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={64}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV15EXCL = assign({ {150, 65}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={65}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV16EXCL = assign({ {150, 66}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={66}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV17EXCL = assign({ {150, 67}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={67}, views = {DESIGN_VIEW, FRAME_VIEW} });
DV18EXCL = assign({ {150, 68}, {NDM_SYSTEM_LAYER_ROUTING_BLOCKAGE} }, ndm = {blockage_layers={68}, views = {DESIGN_VIEW, FRAME_VIEW} });
/* block dummy Cu_RDL fill */
DCUEXCL        = assign({ { 150, 73 } }); 
/* TSMC internal used */
UNFEOLBLK        = assign({ { 150, 327 } }); 
/* TSMC internal used */
UNBEOLBLK        = assign({ { 150, 328 } }); 
UNDM0EXCL = assign({ { 150, 300 } });  // block dummy VIA0 fill

UNDM1EXCL = assign({ { 150, 301 } });  // block dummy VIA1 fill

UNDM2EXCL = assign({ { 150, 302 } });  // block dummy VIA2 fill

UNDM3EXCL = assign({ { 150, 303 } });  // block dummy VIA3 fill

UNDM4EXCL = assign({ { 150, 304 } });  // block dummy VIA4 fill

UNDM5EXCL = assign({ { 150, 305 } });  // block dummy VIA5 fill

UNDM6EXCL = assign({ { 150, 306 } });  // block dummy VIA6 fill

UNDM7EXCL = assign({ { 150, 307 } });  // block dummy VIA7 fill

UNDM8EXCL = assign({ { 150, 308 } });  // block dummy VIA8 fill

UNDM9EXCL = assign({ { 150, 309 } });  // block dummy VIA9 fill

UNDM10EXCL = assign({ { 150, 310 } });  // block dummy VIA10 fill

UNDM11EXCL = assign({ { 150, 311 } });  // block dummy VIA11 fill

UNDM12EXCL = assign({ { 150, 312 } });  // block dummy VIA12 fill

UNDM13EXCL = assign({ { 150, 313 } });  // block dummy VIA13 fill

UNDM14EXCL = assign({ { 150, 314 } });  // block dummy VIA14 fill

UNDM15EXCL = assign({ { 150, 315 } });  // block dummy VIA15 fill

UNDM16EXCL = assign({ { 150, 316 } });  // block dummy VIA16 fill

UNDM17EXCL = assign({ { 150, 317 } });  // block dummy VIA17 fill

UNDM18EXCL = assign({ { 150, 318 } });  // block dummy VIA18 fill

UNDM19EXCL = assign({ { 150, 319 } });  // block dummy VIA19 fill

DC1            = assign({ { 257, 11 } }); 
/* Dummy Cell marker layer */
DC2_MANDREL    = assign({ { 257, 21 } }); 
/* Dummy Cell marker layer */
DC2_CORE       = assign({ { 257, 22 } }); 
/* Dummy Cell marker layer */
DC2_CORE_TYPE3 = assign({ { 257, 25 } }); 
/* Dummy Cell marker layer */
DC2_IO         = assign({ { 257, 23 } }); 
/* Dummy Cell marker layer */
DC3_FB2        = assign({ { 257, 36 } }); 
/* Dummy Cell marker layer */
DC4_CORE       = assign({ { 257, 42 } }); 
/* Dummy Cell marker layer */
DC4_IO         = assign({ { 257, 43 } }); 
/* Dummy Cell marker layer */
DC4_CORE_TYPE2 = assign({ { 257, 44 } }); 
/* Dummy Cell marker layer */
DC5_1          = assign({ { 257, 51 } }); 
/* Dummy Cell marker layer */
DC5_2          = assign({ { 257, 52 } }); 
/* Dummy Cell marker layer */
DC6_1          = assign({ { 257, 61 } }); 
/* Dummy Cell marker layer  */
DC6_2          = assign({ { 257, 62 } }); 
/* Dummy Cell marker layer */
DC7            = assign({ { 257, 71 } }); 
/* Dummy Cell marker layer */
DC8_1          = assign({ { 257, 81 } }); 
/* Dummy Cell marker layer */
DC8_2          = assign({ { 257, 82 } }); 
/* Dummy Cell marker layer */
DC9         = assign({ { 257, 91 } }); 
/* low metal density */
LOWMEDN        = assign({ { 255, 15 } }); 
DFBC 		= assign({ { 257, 150 } }); 
DFBC_H 		= assign({ { 257, 151 } }); 
DFBC_V 		= assign({ { 257, 152 } }); 
DFBC_ALL 	= assign({ { 257, 153 } }); 
PCH_DC 	    = assign({ { 257, 201 } }); 
DI_WPO 	    = assign({ { 257, 202 } }); 
M0_PIN = assign({ { 202, 30 } }); // M0 pin shape layer 
M0_PIN_TEXT_exploded = assign_text({ { 202, 30 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M0 pin text layer
M0_PIN_TEXT = assign_text({ { 202, 30 } });  // M0 pin text layer
M1_PIN = assign({ { 202, 31 } }); // M1 pin shape layer 
M1_PIN_TEXT_exploded = assign_text({ { 202, 31 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M1 pin text layer
M1_PIN_TEXT = assign_text({ { 202, 31 } });  // M1 pin text layer
M2_PIN = assign({ { 202, 32 } }); // M2 pin shape layer 
M2_PIN_TEXT_exploded = assign_text({ { 202, 32 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M2 pin text layer
M2_PIN_TEXT = assign_text({ { 202, 32 } });  // M2 pin text layer
M3_PIN = assign({ { 202, 33 } }); // M3 pin shape layer 
M3_PIN_TEXT_exploded = assign_text({ { 202, 33 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M3 pin text layer
M3_PIN_TEXT = assign_text({ { 202, 33 } });  // M3 pin text layer
M4_PIN = assign({ { 202, 34 } }); // M4 pin shape layer 
M4_PIN_TEXT_exploded = assign_text({ { 202, 34 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M4 pin text layer
M4_PIN_TEXT = assign_text({ { 202, 34 } });  // M4 pin text layer
M5_PIN = assign({ { 202, 35 } }); // M5 pin shape layer 
M5_PIN_TEXT_exploded = assign_text({ { 202, 35 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M5 pin text layer
M5_PIN_TEXT = assign_text({ { 202, 35 } });  // M5 pin text layer
M6_PIN = assign({ { 202, 36 } }); // M6 pin shape layer 
M6_PIN_TEXT_exploded = assign_text({ { 202, 36 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M6 pin text layer
M6_PIN_TEXT = assign_text({ { 202, 36 } });  // M6 pin text layer
M7_PIN = assign({ { 202, 37 } }); // M7 pin shape layer 
M7_PIN_TEXT_exploded = assign_text({ { 202, 37 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M7 pin text layer
M7_PIN_TEXT = assign_text({ { 202, 37 } });  // M7 pin text layer
M8_PIN = assign({ { 202, 38 } }); // M8 pin shape layer 
M8_PIN_TEXT_exploded = assign_text({ { 202, 38 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M8 pin text layer
M8_PIN_TEXT = assign_text({ { 202, 38 } });  // M8 pin text layer
M9_PIN = assign({ { 202, 39 } }); // M9 pin shape layer 
M9_PIN_TEXT_exploded = assign_text({ { 202, 39 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M9 pin text layer
M9_PIN_TEXT = assign_text({ { 202, 39 } });  // M9 pin text layer
M10_PIN = assign({ { 202, 40 } }); // M10 pin shape layer 
M10_PIN_TEXT_exploded = assign_text({ { 202, 40 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M10 pin text layer
M10_PIN_TEXT = assign_text({ { 202, 40 } });  // M10 pin text layer
M11_PIN = assign({ { 202, 41 } }); // M11 pin shape layer 
M11_PIN_TEXT_exploded = assign_text({ { 202, 41 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M11 pin text layer
M11_PIN_TEXT = assign_text({ { 202, 41 } });  // M11 pin text layer
M12_PIN = assign({ { 202, 42 } }); // M12 pin shape layer 
M12_PIN_TEXT_exploded = assign_text({ { 202, 42 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M12 pin text layer
M12_PIN_TEXT = assign_text({ { 202, 42 } });  // M12 pin text layer
M13_PIN = assign({ { 202, 43 } }); // M13 pin shape layer 
M13_PIN_TEXT_exploded = assign_text({ { 202, 43 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M13 pin text layer
M13_PIN_TEXT = assign_text({ { 202, 43 } });  // M13 pin text layer
M14_PIN = assign({ { 202, 44 } }); // M14 pin shape layer 
M14_PIN_TEXT_exploded = assign_text({ { 202, 44 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M14 pin text layer
M14_PIN_TEXT = assign_text({ { 202, 44 } });  // M14 pin text layer
M15_PIN = assign({ { 202, 45 } }); // M15 pin shape layer 
M15_PIN_TEXT_exploded = assign_text({ { 202, 45 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M15 pin text layer
M15_PIN_TEXT = assign_text({ { 202, 45 } });  // M15 pin text layer
M16_PIN = assign({ { 202, 46 } }); // M16 pin shape layer 
M16_PIN_TEXT_exploded = assign_text({ { 202, 46 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M16 pin text layer
M16_PIN_TEXT = assign_text({ { 202, 46 } });  // M16 pin text layer
M17_PIN = assign({ { 202, 47 } }); // M17 pin shape layer 
M17_PIN_TEXT_exploded = assign_text({ { 202, 47 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M17 pin text layer
M17_PIN_TEXT = assign_text({ { 202, 47 } });  // M17 pin text layer
M18_PIN = assign({ { 202, 48 } }); // M18 pin shape layer 
M18_PIN_TEXT_exploded = assign_text({ { 202, 48 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M18 pin text layer
M18_PIN_TEXT = assign_text({ { 202, 48 } });  // M18 pin text layer
M19_PIN = assign({ { 202, 49 } }); // M19 pin shape layer 
M19_PIN_TEXT_exploded = assign_text({ { 202, 49 } }, use_exploded_text = { { { "*" }, { "*" } } });  // M19 pin text layer
M19_PIN_TEXT = assign_text({ { 202, 49 } });  // M19 pin text layer
AP_PIN = assign({ { 202, 74 } } ); // AP pin shape layer
AP_PIN_TEXT_exploded = assign_text({ { 202, 74 } }, use_exploded_text = { { { "*" }, { "*" } } }); // AP pin text layer
AP_PIN_TEXT = assign_text({ { 202, 74 } }); // AP pin text layer
/* Cu_RDL pin shape layer */
CU_RDL_PIN      = assign({ { 202, 73 } }); 
/* Cu_RDL pin text layer */
CU_RDL_PIN_TEXT_exploded = assign_text({ { 202, 73 } }, use_exploded_text = { { { "*" }, { "*" } } });
CU_RDL_PIN_TEXT = assign_text({ { 202, 73 } });

IPTAG  = assign({ { 63, 63 } }); // IP TAG layer
IPTAG_TEXT = assign_text({ { 63, 63 } }, use_exploded_text = { { { "*" }, { "*" } } }); // IP TAG text layer 
/* marker layer for recommended DFM rule */
RRULERECOMMEND     = assign({ { 182, 2 } }); 
/* marker layer for analog guidelines */
RRULEANALOG        = assign({ { 182, 3 } }); 
/* marker layer for excluding DFM recommendations */
EXCLRRULERECOMMEND = assign({ { 182, 12 } }); 
/* marker layer for excluding analog guidelines  */
EXCLRRULEANALOG    = assign({ { 182, 13 } }); 
/* FEOL Rule tighten blocking layer */
FEOL_BLK_T         = assign({ { 255, 41 } }); 
/* FEOL Rule relax blocking layer */
FEOL_BLK_R         = assign({ { 255, 42 } }); 
/* BEOL Rule tighten blocking layer */
BEOL_BLK_T         = assign({ { 255, 43 } }); 
/* BEOL Rule relax blocking layer */
BEOL_BLK_R         = assign({ { 255, 44 } }); 
/* define highest operation voltage  */
tODV_HIGH = assign_text({ { 6, 8 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage  */
tODV_LOW  = assign_text({ { 6, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define highest operation voltage  */
tPOV_HIGH = assign_text({ { 17, 8 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage  */
tPOV_LOW  = assign_text({ { 17, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define highest operation voltage  */
tMDV_HIGH = assign_text({ { 82, 8 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage  */
tMDV_LOW  = assign_text({ { 82, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define two nets are synchronous (High/Low at same time) , for MD/PO */
MDV_SYNC = assign({ { 82, 3 } }); 
/* define 1.2V */
MD_12V = assign({ { 382, 22 } }); 
/* define 2.5V */
MD_25V = assign({ { 382, 29 } }); 
/* define 3.3V */
MD_33V = assign({ { 382, 30 } });
/* Define a net pair whose delta voltage follows UserDV (for MD)  */
MD_USERDV_M   = assign({ { 382, 111 } }); 
/* Define the delta voltage of a net pair (for MD) */
tMD_USERDV     = assign_text({ { 382, 112 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for MD) */
tMD_USERDV_TOP = assign_text({ { 382, 113 } }, use_exploded_text = { { { "*" }, { "*" } } });

M0_USERDV_M = assign({ { 300, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M0)
tM0_USERDV = assign_text({ { 300, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M0)
tM0_USERDV_TOP = assign_text({ { 300, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M0)
tM0V_HIGH = assign_text({ { 300, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM0V_LOW = assign_text({ { 300, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM0V_HIGH_TOP = assign_text({ { 300, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM0V_LOW_TOP = assign_text({ { 300, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M0V_SYNC = assign({ { 300, 3 } });  // define two nets are synchronous (High/Low at same time) 
M0_00V = assign({ { 300, 10 } });  // define 0.0V net
M0_01V = assign({ { 300, 11 } });  // define 0.1V net
M0_02V = assign({ { 300, 12 } });  // define 0.2V net
M0_03V = assign({ { 300, 13 } });  // define 0.3V net
M0_04V = assign({ { 300, 14 } });  // define 0.4V net
M0_05V = assign({ { 300, 15 } });  // define 0.5V net
M0_06V = assign({ { 300, 16 } });  // define 0.6V net
M0_07V = assign({ { 300, 17 } });  // define 0.7V net
M0_08V = assign({ { 300, 18 } });  // define 0.8V net
M0_09V = assign({ { 300, 19 } });  // define 0.9V net
M0_10V = assign({ { 300, 20 } });  // define 1.0V net
M0_11V = assign({ { 300, 21 } });  // define 1.1V net
M0_12V = assign({ { 300, 22 } });  // define 1.2V net
M0_13V = assign({ { 300, 23 } });  // define 1.3V net
M0_14V = assign({ { 300, 24 } });  // define 1.4V net
M0_15V = assign({ { 300, 25 } });  // define 1.5V net
M0_16V = assign({ { 300, 26 } });  // define 1.6V net
M0_17V = assign({ { 300, 27 } });  // define 1.7V net
M0_18V = assign({ { 300, 28 } });  // define 1.8V net
M0_25V = assign({ { 300, 29 } });  // define 2.5V net
M0_33V = assign({ { 300, 30 } });  // define 3.3V net
M0_50V = assign({ { 300, 31 } });  // define 5.0V net
M0_70V = assign({ { 300, 32 } });  // define 7.0V net
M1_USERDV_M = assign({ { 301, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M1)
tM1_USERDV = assign_text({ { 301, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M1)
tM1_USERDV_TOP = assign_text({ { 301, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M1)
tM1V_HIGH = assign_text({ { 301, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM1V_LOW = assign_text({ { 301, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM1V_HIGH_TOP = assign_text({ { 301, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM1V_LOW_TOP = assign_text({ { 301, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M1V_SYNC = assign({ { 301, 3 } });  // define two nets are synchronous (High/Low at same time) 
M1_00V = assign({ { 301, 10 } });  // define 0.0V net
M1_01V = assign({ { 301, 11 } });  // define 0.1V net
M1_02V = assign({ { 301, 12 } });  // define 0.2V net
M1_03V = assign({ { 301, 13 } });  // define 0.3V net
M1_04V = assign({ { 301, 14 } });  // define 0.4V net
M1_05V = assign({ { 301, 15 } });  // define 0.5V net
M1_06V = assign({ { 301, 16 } });  // define 0.6V net
M1_07V = assign({ { 301, 17 } });  // define 0.7V net
M1_08V = assign({ { 301, 18 } });  // define 0.8V net
M1_09V = assign({ { 301, 19 } });  // define 0.9V net
M1_10V = assign({ { 301, 20 } });  // define 1.0V net
M1_11V = assign({ { 301, 21 } });  // define 1.1V net
M1_12V = assign({ { 301, 22 } });  // define 1.2V net
M1_13V = assign({ { 301, 23 } });  // define 1.3V net
M1_14V = assign({ { 301, 24 } });  // define 1.4V net
M1_15V = assign({ { 301, 25 } });  // define 1.5V net
M1_16V = assign({ { 301, 26 } });  // define 1.6V net
M1_17V = assign({ { 301, 27 } });  // define 1.7V net
M1_18V = assign({ { 301, 28 } });  // define 1.8V net
M1_25V = assign({ { 301, 29 } });  // define 2.5V net
M1_33V = assign({ { 301, 30 } });  // define 3.3V net
M1_50V = assign({ { 301, 31 } });  // define 5.0V net
M1_70V = assign({ { 301, 32 } });  // define 7.0V net
M2_USERDV_M = assign({ { 302, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M2)
tM2_USERDV = assign_text({ { 302, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M2)
tM2_USERDV_TOP = assign_text({ { 302, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M2)
tM2V_HIGH = assign_text({ { 302, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM2V_LOW = assign_text({ { 302, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM2V_HIGH_TOP = assign_text({ { 302, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM2V_LOW_TOP = assign_text({ { 302, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M2V_SYNC = assign({ { 302, 3 } });  // define two nets are synchronous (High/Low at same time) 
M2_00V = assign({ { 302, 10 } });  // define 0.0V net
M2_01V = assign({ { 302, 11 } });  // define 0.1V net
M2_02V = assign({ { 302, 12 } });  // define 0.2V net
M2_03V = assign({ { 302, 13 } });  // define 0.3V net
M2_04V = assign({ { 302, 14 } });  // define 0.4V net
M2_05V = assign({ { 302, 15 } });  // define 0.5V net
M2_06V = assign({ { 302, 16 } });  // define 0.6V net
M2_07V = assign({ { 302, 17 } });  // define 0.7V net
M2_08V = assign({ { 302, 18 } });  // define 0.8V net
M2_09V = assign({ { 302, 19 } });  // define 0.9V net
M2_10V = assign({ { 302, 20 } });  // define 1.0V net
M2_11V = assign({ { 302, 21 } });  // define 1.1V net
M2_12V = assign({ { 302, 22 } });  // define 1.2V net
M2_13V = assign({ { 302, 23 } });  // define 1.3V net
M2_14V = assign({ { 302, 24 } });  // define 1.4V net
M2_15V = assign({ { 302, 25 } });  // define 1.5V net
M2_16V = assign({ { 302, 26 } });  // define 1.6V net
M2_17V = assign({ { 302, 27 } });  // define 1.7V net
M2_18V = assign({ { 302, 28 } });  // define 1.8V net
M2_25V = assign({ { 302, 29 } });  // define 2.5V net
M2_33V = assign({ { 302, 30 } });  // define 3.3V net
M2_50V = assign({ { 302, 31 } });  // define 5.0V net
M2_70V = assign({ { 302, 32 } });  // define 7.0V net
M3_USERDV_M = assign({ { 303, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M3)
tM3_USERDV = assign_text({ { 303, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M3)
tM3_USERDV_TOP = assign_text({ { 303, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M3)
tM3V_HIGH = assign_text({ { 303, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM3V_LOW = assign_text({ { 303, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM3V_HIGH_TOP = assign_text({ { 303, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM3V_LOW_TOP = assign_text({ { 303, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M3V_SYNC = assign({ { 303, 3 } });  // define two nets are synchronous (High/Low at same time) 
M3_00V = assign({ { 303, 10 } });  // define 0.0V net
M3_01V = assign({ { 303, 11 } });  // define 0.1V net
M3_02V = assign({ { 303, 12 } });  // define 0.2V net
M3_03V = assign({ { 303, 13 } });  // define 0.3V net
M3_04V = assign({ { 303, 14 } });  // define 0.4V net
M3_05V = assign({ { 303, 15 } });  // define 0.5V net
M3_06V = assign({ { 303, 16 } });  // define 0.6V net
M3_07V = assign({ { 303, 17 } });  // define 0.7V net
M3_08V = assign({ { 303, 18 } });  // define 0.8V net
M3_09V = assign({ { 303, 19 } });  // define 0.9V net
M3_10V = assign({ { 303, 20 } });  // define 1.0V net
M3_11V = assign({ { 303, 21 } });  // define 1.1V net
M3_12V = assign({ { 303, 22 } });  // define 1.2V net
M3_13V = assign({ { 303, 23 } });  // define 1.3V net
M3_14V = assign({ { 303, 24 } });  // define 1.4V net
M3_15V = assign({ { 303, 25 } });  // define 1.5V net
M3_16V = assign({ { 303, 26 } });  // define 1.6V net
M3_17V = assign({ { 303, 27 } });  // define 1.7V net
M3_18V = assign({ { 303, 28 } });  // define 1.8V net
M3_25V = assign({ { 303, 29 } });  // define 2.5V net
M3_33V = assign({ { 303, 30 } });  // define 3.3V net
M3_50V = assign({ { 303, 31 } });  // define 5.0V net
M3_70V = assign({ { 303, 32 } });  // define 7.0V net
M4_USERDV_M = assign({ { 304, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M4)
tM4_USERDV = assign_text({ { 304, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M4)
tM4_USERDV_TOP = assign_text({ { 304, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M4)
tM4V_HIGH = assign_text({ { 304, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM4V_LOW = assign_text({ { 304, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM4V_HIGH_TOP = assign_text({ { 304, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM4V_LOW_TOP = assign_text({ { 304, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M4V_SYNC = assign({ { 304, 3 } });  // define two nets are synchronous (High/Low at same time) 
M4_00V = assign({ { 304, 10 } });  // define 0.0V net
M4_01V = assign({ { 304, 11 } });  // define 0.1V net
M4_02V = assign({ { 304, 12 } });  // define 0.2V net
M4_03V = assign({ { 304, 13 } });  // define 0.3V net
M4_04V = assign({ { 304, 14 } });  // define 0.4V net
M4_05V = assign({ { 304, 15 } });  // define 0.5V net
M4_06V = assign({ { 304, 16 } });  // define 0.6V net
M4_07V = assign({ { 304, 17 } });  // define 0.7V net
M4_08V = assign({ { 304, 18 } });  // define 0.8V net
M4_09V = assign({ { 304, 19 } });  // define 0.9V net
M4_10V = assign({ { 304, 20 } });  // define 1.0V net
M4_11V = assign({ { 304, 21 } });  // define 1.1V net
M4_12V = assign({ { 304, 22 } });  // define 1.2V net
M4_13V = assign({ { 304, 23 } });  // define 1.3V net
M4_14V = assign({ { 304, 24 } });  // define 1.4V net
M4_15V = assign({ { 304, 25 } });  // define 1.5V net
M4_16V = assign({ { 304, 26 } });  // define 1.6V net
M4_17V = assign({ { 304, 27 } });  // define 1.7V net
M4_18V = assign({ { 304, 28 } });  // define 1.8V net
M4_25V = assign({ { 304, 29 } });  // define 2.5V net
M4_33V = assign({ { 304, 30 } });  // define 3.3V net
M4_50V = assign({ { 304, 31 } });  // define 5.0V net
M4_70V = assign({ { 304, 32 } });  // define 7.0V net
M5_USERDV_M = assign({ { 305, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M5)
tM5_USERDV = assign_text({ { 305, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M5)
tM5_USERDV_TOP = assign_text({ { 305, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M5)
tM5V_HIGH = assign_text({ { 305, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM5V_LOW = assign_text({ { 305, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM5V_HIGH_TOP = assign_text({ { 305, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM5V_LOW_TOP = assign_text({ { 305, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M5V_SYNC = assign({ { 305, 3 } });  // define two nets are synchronous (High/Low at same time) 
M5_00V = assign({ { 305, 10 } });  // define 0.0V net
M5_01V = assign({ { 305, 11 } });  // define 0.1V net
M5_02V = assign({ { 305, 12 } });  // define 0.2V net
M5_03V = assign({ { 305, 13 } });  // define 0.3V net
M5_04V = assign({ { 305, 14 } });  // define 0.4V net
M5_05V = assign({ { 305, 15 } });  // define 0.5V net
M5_06V = assign({ { 305, 16 } });  // define 0.6V net
M5_07V = assign({ { 305, 17 } });  // define 0.7V net
M5_08V = assign({ { 305, 18 } });  // define 0.8V net
M5_09V = assign({ { 305, 19 } });  // define 0.9V net
M5_10V = assign({ { 305, 20 } });  // define 1.0V net
M5_11V = assign({ { 305, 21 } });  // define 1.1V net
M5_12V = assign({ { 305, 22 } });  // define 1.2V net
M5_13V = assign({ { 305, 23 } });  // define 1.3V net
M5_14V = assign({ { 305, 24 } });  // define 1.4V net
M5_15V = assign({ { 305, 25 } });  // define 1.5V net
M5_16V = assign({ { 305, 26 } });  // define 1.6V net
M5_17V = assign({ { 305, 27 } });  // define 1.7V net
M5_18V = assign({ { 305, 28 } });  // define 1.8V net
M5_25V = assign({ { 305, 29 } });  // define 2.5V net
M5_33V = assign({ { 305, 30 } });  // define 3.3V net
M5_50V = assign({ { 305, 31 } });  // define 5.0V net
M5_70V = assign({ { 305, 32 } });  // define 7.0V net
M6_USERDV_M = assign({ { 306, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M6)
tM6_USERDV = assign_text({ { 306, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M6)
tM6_USERDV_TOP = assign_text({ { 306, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M6)
tM6V_HIGH = assign_text({ { 306, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM6V_LOW = assign_text({ { 306, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM6V_HIGH_TOP = assign_text({ { 306, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM6V_LOW_TOP = assign_text({ { 306, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M6V_SYNC = assign({ { 306, 3 } });  // define two nets are synchronous (High/Low at same time) 
M6_00V = assign({ { 306, 10 } });  // define 0.0V net
M6_01V = assign({ { 306, 11 } });  // define 0.1V net
M6_02V = assign({ { 306, 12 } });  // define 0.2V net
M6_03V = assign({ { 306, 13 } });  // define 0.3V net
M6_04V = assign({ { 306, 14 } });  // define 0.4V net
M6_05V = assign({ { 306, 15 } });  // define 0.5V net
M6_06V = assign({ { 306, 16 } });  // define 0.6V net
M6_07V = assign({ { 306, 17 } });  // define 0.7V net
M6_08V = assign({ { 306, 18 } });  // define 0.8V net
M6_09V = assign({ { 306, 19 } });  // define 0.9V net
M6_10V = assign({ { 306, 20 } });  // define 1.0V net
M6_11V = assign({ { 306, 21 } });  // define 1.1V net
M6_12V = assign({ { 306, 22 } });  // define 1.2V net
M6_13V = assign({ { 306, 23 } });  // define 1.3V net
M6_14V = assign({ { 306, 24 } });  // define 1.4V net
M6_15V = assign({ { 306, 25 } });  // define 1.5V net
M6_16V = assign({ { 306, 26 } });  // define 1.6V net
M6_17V = assign({ { 306, 27 } });  // define 1.7V net
M6_18V = assign({ { 306, 28 } });  // define 1.8V net
M6_25V = assign({ { 306, 29 } });  // define 2.5V net
M6_33V = assign({ { 306, 30 } });  // define 3.3V net
M6_50V = assign({ { 306, 31 } });  // define 5.0V net
M6_70V = assign({ { 306, 32 } });  // define 7.0V net
M7_USERDV_M = assign({ { 307, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M7)
tM7_USERDV = assign_text({ { 307, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M7)
tM7_USERDV_TOP = assign_text({ { 307, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M7)
tM7V_HIGH = assign_text({ { 307, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM7V_LOW = assign_text({ { 307, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM7V_HIGH_TOP = assign_text({ { 307, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM7V_LOW_TOP = assign_text({ { 307, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M7V_SYNC = assign({ { 307, 3 } });  // define two nets are synchronous (High/Low at same time) 
M7_00V = assign({ { 307, 10 } });  // define 0.0V net
M7_01V = assign({ { 307, 11 } });  // define 0.1V net
M7_02V = assign({ { 307, 12 } });  // define 0.2V net
M7_03V = assign({ { 307, 13 } });  // define 0.3V net
M7_04V = assign({ { 307, 14 } });  // define 0.4V net
M7_05V = assign({ { 307, 15 } });  // define 0.5V net
M7_06V = assign({ { 307, 16 } });  // define 0.6V net
M7_07V = assign({ { 307, 17 } });  // define 0.7V net
M7_08V = assign({ { 307, 18 } });  // define 0.8V net
M7_09V = assign({ { 307, 19 } });  // define 0.9V net
M7_10V = assign({ { 307, 20 } });  // define 1.0V net
M7_11V = assign({ { 307, 21 } });  // define 1.1V net
M7_12V = assign({ { 307, 22 } });  // define 1.2V net
M7_13V = assign({ { 307, 23 } });  // define 1.3V net
M7_14V = assign({ { 307, 24 } });  // define 1.4V net
M7_15V = assign({ { 307, 25 } });  // define 1.5V net
M7_16V = assign({ { 307, 26 } });  // define 1.6V net
M7_17V = assign({ { 307, 27 } });  // define 1.7V net
M7_18V = assign({ { 307, 28 } });  // define 1.8V net
M7_25V = assign({ { 307, 29 } });  // define 2.5V net
M7_33V = assign({ { 307, 30 } });  // define 3.3V net
M7_50V = assign({ { 307, 31 } });  // define 5.0V net
M7_70V = assign({ { 307, 32 } });  // define 7.0V net
M8_USERDV_M = assign({ { 308, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M8)
tM8_USERDV = assign_text({ { 308, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M8)
tM8_USERDV_TOP = assign_text({ { 308, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M8)
tM8V_HIGH = assign_text({ { 308, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM8V_LOW = assign_text({ { 308, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM8V_HIGH_TOP = assign_text({ { 308, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM8V_LOW_TOP = assign_text({ { 308, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M8V_SYNC = assign({ { 308, 3 } });  // define two nets are synchronous (High/Low at same time) 
M8_00V = assign({ { 308, 10 } });  // define 0.0V net
M8_01V = assign({ { 308, 11 } });  // define 0.1V net
M8_02V = assign({ { 308, 12 } });  // define 0.2V net
M8_03V = assign({ { 308, 13 } });  // define 0.3V net
M8_04V = assign({ { 308, 14 } });  // define 0.4V net
M8_05V = assign({ { 308, 15 } });  // define 0.5V net
M8_06V = assign({ { 308, 16 } });  // define 0.6V net
M8_07V = assign({ { 308, 17 } });  // define 0.7V net
M8_08V = assign({ { 308, 18 } });  // define 0.8V net
M8_09V = assign({ { 308, 19 } });  // define 0.9V net
M8_10V = assign({ { 308, 20 } });  // define 1.0V net
M8_11V = assign({ { 308, 21 } });  // define 1.1V net
M8_12V = assign({ { 308, 22 } });  // define 1.2V net
M8_13V = assign({ { 308, 23 } });  // define 1.3V net
M8_14V = assign({ { 308, 24 } });  // define 1.4V net
M8_15V = assign({ { 308, 25 } });  // define 1.5V net
M8_16V = assign({ { 308, 26 } });  // define 1.6V net
M8_17V = assign({ { 308, 27 } });  // define 1.7V net
M8_18V = assign({ { 308, 28 } });  // define 1.8V net
M8_25V = assign({ { 308, 29 } });  // define 2.5V net
M8_33V = assign({ { 308, 30 } });  // define 3.3V net
M8_50V = assign({ { 308, 31 } });  // define 5.0V net
M8_70V = assign({ { 308, 32 } });  // define 7.0V net
M9_USERDV_M = assign({ { 309, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M9)
tM9_USERDV = assign_text({ { 309, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M9)
tM9_USERDV_TOP = assign_text({ { 309, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M9)
tM9V_HIGH = assign_text({ { 309, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM9V_LOW = assign_text({ { 309, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM9V_HIGH_TOP = assign_text({ { 309, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM9V_LOW_TOP = assign_text({ { 309, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M9V_SYNC = assign({ { 309, 3 } });  // define two nets are synchronous (High/Low at same time) 
M9_00V = assign({ { 309, 10 } });  // define 0.0V net
M9_01V = assign({ { 309, 11 } });  // define 0.1V net
M9_02V = assign({ { 309, 12 } });  // define 0.2V net
M9_03V = assign({ { 309, 13 } });  // define 0.3V net
M9_04V = assign({ { 309, 14 } });  // define 0.4V net
M9_05V = assign({ { 309, 15 } });  // define 0.5V net
M9_06V = assign({ { 309, 16 } });  // define 0.6V net
M9_07V = assign({ { 309, 17 } });  // define 0.7V net
M9_08V = assign({ { 309, 18 } });  // define 0.8V net
M9_09V = assign({ { 309, 19 } });  // define 0.9V net
M9_10V = assign({ { 309, 20 } });  // define 1.0V net
M9_11V = assign({ { 309, 21 } });  // define 1.1V net
M9_12V = assign({ { 309, 22 } });  // define 1.2V net
M9_13V = assign({ { 309, 23 } });  // define 1.3V net
M9_14V = assign({ { 309, 24 } });  // define 1.4V net
M9_15V = assign({ { 309, 25 } });  // define 1.5V net
M9_16V = assign({ { 309, 26 } });  // define 1.6V net
M9_17V = assign({ { 309, 27 } });  // define 1.7V net
M9_18V = assign({ { 309, 28 } });  // define 1.8V net
M9_25V = assign({ { 309, 29 } });  // define 2.5V net
M9_33V = assign({ { 309, 30 } });  // define 3.3V net
M9_50V = assign({ { 309, 31 } });  // define 5.0V net
M9_70V = assign({ { 309, 32 } });  // define 7.0V net
M10_USERDV_M = assign({ { 310, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M10)
tM10_USERDV = assign_text({ { 310, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M10)
tM10_USERDV_TOP = assign_text({ { 310, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M10)
tM10V_HIGH = assign_text({ { 310, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM10V_LOW = assign_text({ { 310, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM10V_HIGH_TOP = assign_text({ { 310, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM10V_LOW_TOP = assign_text({ { 310, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M10V_SYNC = assign({ { 310, 3 } });  // define two nets are synchronous (High/Low at same time) 
M10_00V = assign({ { 310, 10 } });  // define 0.0V net
M10_01V = assign({ { 310, 11 } });  // define 0.1V net
M10_02V = assign({ { 310, 12 } });  // define 0.2V net
M10_03V = assign({ { 310, 13 } });  // define 0.3V net
M10_04V = assign({ { 310, 14 } });  // define 0.4V net
M10_05V = assign({ { 310, 15 } });  // define 0.5V net
M10_06V = assign({ { 310, 16 } });  // define 0.6V net
M10_07V = assign({ { 310, 17 } });  // define 0.7V net
M10_08V = assign({ { 310, 18 } });  // define 0.8V net
M10_09V = assign({ { 310, 19 } });  // define 0.9V net
M10_10V = assign({ { 310, 20 } });  // define 1.0V net
M10_11V = assign({ { 310, 21 } });  // define 1.1V net
M10_12V = assign({ { 310, 22 } });  // define 1.2V net
M10_13V = assign({ { 310, 23 } });  // define 1.3V net
M10_14V = assign({ { 310, 24 } });  // define 1.4V net
M10_15V = assign({ { 310, 25 } });  // define 1.5V net
M10_16V = assign({ { 310, 26 } });  // define 1.6V net
M10_17V = assign({ { 310, 27 } });  // define 1.7V net
M10_18V = assign({ { 310, 28 } });  // define 1.8V net
M10_25V = assign({ { 310, 29 } });  // define 2.5V net
M10_33V = assign({ { 310, 30 } });  // define 3.3V net
M10_50V = assign({ { 310, 31 } });  // define 5.0V net
M10_70V = assign({ { 310, 32 } });  // define 7.0V net
M11_USERDV_M = assign({ { 311, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M11)
tM11_USERDV = assign_text({ { 311, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M11)
tM11_USERDV_TOP = assign_text({ { 311, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M11)
tM11V_HIGH = assign_text({ { 311, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM11V_LOW = assign_text({ { 311, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM11V_HIGH_TOP = assign_text({ { 311, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM11V_LOW_TOP = assign_text({ { 311, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M11V_SYNC = assign({ { 311, 3 } });  // define two nets are synchronous (High/Low at same time) 
M11_00V = assign({ { 311, 10 } });  // define 0.0V net
M11_01V = assign({ { 311, 11 } });  // define 0.1V net
M11_02V = assign({ { 311, 12 } });  // define 0.2V net
M11_03V = assign({ { 311, 13 } });  // define 0.3V net
M11_04V = assign({ { 311, 14 } });  // define 0.4V net
M11_05V = assign({ { 311, 15 } });  // define 0.5V net
M11_06V = assign({ { 311, 16 } });  // define 0.6V net
M11_07V = assign({ { 311, 17 } });  // define 0.7V net
M11_08V = assign({ { 311, 18 } });  // define 0.8V net
M11_09V = assign({ { 311, 19 } });  // define 0.9V net
M11_10V = assign({ { 311, 20 } });  // define 1.0V net
M11_11V = assign({ { 311, 21 } });  // define 1.1V net
M11_12V = assign({ { 311, 22 } });  // define 1.2V net
M11_13V = assign({ { 311, 23 } });  // define 1.3V net
M11_14V = assign({ { 311, 24 } });  // define 1.4V net
M11_15V = assign({ { 311, 25 } });  // define 1.5V net
M11_16V = assign({ { 311, 26 } });  // define 1.6V net
M11_17V = assign({ { 311, 27 } });  // define 1.7V net
M11_18V = assign({ { 311, 28 } });  // define 1.8V net
M11_25V = assign({ { 311, 29 } });  // define 2.5V net
M11_33V = assign({ { 311, 30 } });  // define 3.3V net
M11_50V = assign({ { 311, 31 } });  // define 5.0V net
M11_70V = assign({ { 311, 32 } });  // define 7.0V net
M12_USERDV_M = assign({ { 312, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M12)
tM12_USERDV = assign_text({ { 312, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M12)
tM12_USERDV_TOP = assign_text({ { 312, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M12)
tM12V_HIGH = assign_text({ { 312, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM12V_LOW = assign_text({ { 312, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM12V_HIGH_TOP = assign_text({ { 312, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM12V_LOW_TOP = assign_text({ { 312, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M12V_SYNC = assign({ { 312, 3 } });  // define two nets are synchronous (High/Low at same time) 
M12_00V = assign({ { 312, 10 } });  // define 0.0V net
M12_01V = assign({ { 312, 11 } });  // define 0.1V net
M12_02V = assign({ { 312, 12 } });  // define 0.2V net
M12_03V = assign({ { 312, 13 } });  // define 0.3V net
M12_04V = assign({ { 312, 14 } });  // define 0.4V net
M12_05V = assign({ { 312, 15 } });  // define 0.5V net
M12_06V = assign({ { 312, 16 } });  // define 0.6V net
M12_07V = assign({ { 312, 17 } });  // define 0.7V net
M12_08V = assign({ { 312, 18 } });  // define 0.8V net
M12_09V = assign({ { 312, 19 } });  // define 0.9V net
M12_10V = assign({ { 312, 20 } });  // define 1.0V net
M12_11V = assign({ { 312, 21 } });  // define 1.1V net
M12_12V = assign({ { 312, 22 } });  // define 1.2V net
M12_13V = assign({ { 312, 23 } });  // define 1.3V net
M12_14V = assign({ { 312, 24 } });  // define 1.4V net
M12_15V = assign({ { 312, 25 } });  // define 1.5V net
M12_16V = assign({ { 312, 26 } });  // define 1.6V net
M12_17V = assign({ { 312, 27 } });  // define 1.7V net
M12_18V = assign({ { 312, 28 } });  // define 1.8V net
M12_25V = assign({ { 312, 29 } });  // define 2.5V net
M12_33V = assign({ { 312, 30 } });  // define 3.3V net
M12_50V = assign({ { 312, 31 } });  // define 5.0V net
M12_70V = assign({ { 312, 32 } });  // define 7.0V net
M13_USERDV_M = assign({ { 313, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M13)
tM13_USERDV = assign_text({ { 313, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M13)
tM13_USERDV_TOP = assign_text({ { 313, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M13)
tM13V_HIGH = assign_text({ { 313, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM13V_LOW = assign_text({ { 313, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM13V_HIGH_TOP = assign_text({ { 313, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM13V_LOW_TOP = assign_text({ { 313, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M13V_SYNC = assign({ { 313, 3 } });  // define two nets are synchronous (High/Low at same time) 
M13_00V = assign({ { 313, 10 } });  // define 0.0V net
M13_01V = assign({ { 313, 11 } });  // define 0.1V net
M13_02V = assign({ { 313, 12 } });  // define 0.2V net
M13_03V = assign({ { 313, 13 } });  // define 0.3V net
M13_04V = assign({ { 313, 14 } });  // define 0.4V net
M13_05V = assign({ { 313, 15 } });  // define 0.5V net
M13_06V = assign({ { 313, 16 } });  // define 0.6V net
M13_07V = assign({ { 313, 17 } });  // define 0.7V net
M13_08V = assign({ { 313, 18 } });  // define 0.8V net
M13_09V = assign({ { 313, 19 } });  // define 0.9V net
M13_10V = assign({ { 313, 20 } });  // define 1.0V net
M13_11V = assign({ { 313, 21 } });  // define 1.1V net
M13_12V = assign({ { 313, 22 } });  // define 1.2V net
M13_13V = assign({ { 313, 23 } });  // define 1.3V net
M13_14V = assign({ { 313, 24 } });  // define 1.4V net
M13_15V = assign({ { 313, 25 } });  // define 1.5V net
M13_16V = assign({ { 313, 26 } });  // define 1.6V net
M13_17V = assign({ { 313, 27 } });  // define 1.7V net
M13_18V = assign({ { 313, 28 } });  // define 1.8V net
M13_25V = assign({ { 313, 29 } });  // define 2.5V net
M13_33V = assign({ { 313, 30 } });  // define 3.3V net
M13_50V = assign({ { 313, 31 } });  // define 5.0V net
M13_70V = assign({ { 313, 32 } });  // define 7.0V net
M14_USERDV_M = assign({ { 314, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M14)
tM14_USERDV = assign_text({ { 314, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M14)
tM14_USERDV_TOP = assign_text({ { 314, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M14)
tM14V_HIGH = assign_text({ { 314, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM14V_LOW = assign_text({ { 314, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM14V_HIGH_TOP = assign_text({ { 314, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM14V_LOW_TOP = assign_text({ { 314, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M14V_SYNC = assign({ { 314, 3 } });  // define two nets are synchronous (High/Low at same time) 
M14_00V = assign({ { 314, 10 } });  // define 0.0V net
M14_01V = assign({ { 314, 11 } });  // define 0.1V net
M14_02V = assign({ { 314, 12 } });  // define 0.2V net
M14_03V = assign({ { 314, 13 } });  // define 0.3V net
M14_04V = assign({ { 314, 14 } });  // define 0.4V net
M14_05V = assign({ { 314, 15 } });  // define 0.5V net
M14_06V = assign({ { 314, 16 } });  // define 0.6V net
M14_07V = assign({ { 314, 17 } });  // define 0.7V net
M14_08V = assign({ { 314, 18 } });  // define 0.8V net
M14_09V = assign({ { 314, 19 } });  // define 0.9V net
M14_10V = assign({ { 314, 20 } });  // define 1.0V net
M14_11V = assign({ { 314, 21 } });  // define 1.1V net
M14_12V = assign({ { 314, 22 } });  // define 1.2V net
M14_13V = assign({ { 314, 23 } });  // define 1.3V net
M14_14V = assign({ { 314, 24 } });  // define 1.4V net
M14_15V = assign({ { 314, 25 } });  // define 1.5V net
M14_16V = assign({ { 314, 26 } });  // define 1.6V net
M14_17V = assign({ { 314, 27 } });  // define 1.7V net
M14_18V = assign({ { 314, 28 } });  // define 1.8V net
M14_25V = assign({ { 314, 29 } });  // define 2.5V net
M14_33V = assign({ { 314, 30 } });  // define 3.3V net
M14_50V = assign({ { 314, 31 } });  // define 5.0V net
M14_70V = assign({ { 314, 32 } });  // define 7.0V net
M15_USERDV_M = assign({ { 315, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M15)
tM15_USERDV = assign_text({ { 315, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M15)
tM15_USERDV_TOP = assign_text({ { 315, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M15)
tM15V_HIGH = assign_text({ { 315, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM15V_LOW = assign_text({ { 315, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM15V_HIGH_TOP = assign_text({ { 315, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM15V_LOW_TOP = assign_text({ { 315, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M15V_SYNC = assign({ { 315, 3 } });  // define two nets are synchronous (High/Low at same time) 
M15_00V = assign({ { 315, 10 } });  // define 0.0V net
M15_01V = assign({ { 315, 11 } });  // define 0.1V net
M15_02V = assign({ { 315, 12 } });  // define 0.2V net
M15_03V = assign({ { 315, 13 } });  // define 0.3V net
M15_04V = assign({ { 315, 14 } });  // define 0.4V net
M15_05V = assign({ { 315, 15 } });  // define 0.5V net
M15_06V = assign({ { 315, 16 } });  // define 0.6V net
M15_07V = assign({ { 315, 17 } });  // define 0.7V net
M15_08V = assign({ { 315, 18 } });  // define 0.8V net
M15_09V = assign({ { 315, 19 } });  // define 0.9V net
M15_10V = assign({ { 315, 20 } });  // define 1.0V net
M15_11V = assign({ { 315, 21 } });  // define 1.1V net
M15_12V = assign({ { 315, 22 } });  // define 1.2V net
M15_13V = assign({ { 315, 23 } });  // define 1.3V net
M15_14V = assign({ { 315, 24 } });  // define 1.4V net
M15_15V = assign({ { 315, 25 } });  // define 1.5V net
M15_16V = assign({ { 315, 26 } });  // define 1.6V net
M15_17V = assign({ { 315, 27 } });  // define 1.7V net
M15_18V = assign({ { 315, 28 } });  // define 1.8V net
M15_25V = assign({ { 315, 29 } });  // define 2.5V net
M15_33V = assign({ { 315, 30 } });  // define 3.3V net
M15_50V = assign({ { 315, 31 } });  // define 5.0V net
M15_70V = assign({ { 315, 32 } });  // define 7.0V net
M16_USERDV_M = assign({ { 316, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M16)
tM16_USERDV = assign_text({ { 316, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M16)
tM16_USERDV_TOP = assign_text({ { 316, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M16)
tM16V_HIGH = assign_text({ { 316, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM16V_LOW = assign_text({ { 316, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM16V_HIGH_TOP = assign_text({ { 316, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM16V_LOW_TOP = assign_text({ { 316, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M16V_SYNC = assign({ { 316, 3 } });  // define two nets are synchronous (High/Low at same time) 
M16_00V = assign({ { 316, 10 } });  // define 0.0V net
M16_01V = assign({ { 316, 11 } });  // define 0.1V net
M16_02V = assign({ { 316, 12 } });  // define 0.2V net
M16_03V = assign({ { 316, 13 } });  // define 0.3V net
M16_04V = assign({ { 316, 14 } });  // define 0.4V net
M16_05V = assign({ { 316, 15 } });  // define 0.5V net
M16_06V = assign({ { 316, 16 } });  // define 0.6V net
M16_07V = assign({ { 316, 17 } });  // define 0.7V net
M16_08V = assign({ { 316, 18 } });  // define 0.8V net
M16_09V = assign({ { 316, 19 } });  // define 0.9V net
M16_10V = assign({ { 316, 20 } });  // define 1.0V net
M16_11V = assign({ { 316, 21 } });  // define 1.1V net
M16_12V = assign({ { 316, 22 } });  // define 1.2V net
M16_13V = assign({ { 316, 23 } });  // define 1.3V net
M16_14V = assign({ { 316, 24 } });  // define 1.4V net
M16_15V = assign({ { 316, 25 } });  // define 1.5V net
M16_16V = assign({ { 316, 26 } });  // define 1.6V net
M16_17V = assign({ { 316, 27 } });  // define 1.7V net
M16_18V = assign({ { 316, 28 } });  // define 1.8V net
M16_25V = assign({ { 316, 29 } });  // define 2.5V net
M16_33V = assign({ { 316, 30 } });  // define 3.3V net
M16_50V = assign({ { 316, 31 } });  // define 5.0V net
M16_70V = assign({ { 316, 32 } });  // define 7.0V net
M17_USERDV_M = assign({ { 317, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M17)
tM17_USERDV = assign_text({ { 317, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M17)
tM17_USERDV_TOP = assign_text({ { 317, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M17)
tM17V_HIGH = assign_text({ { 317, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM17V_LOW = assign_text({ { 317, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM17V_HIGH_TOP = assign_text({ { 317, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM17V_LOW_TOP = assign_text({ { 317, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M17V_SYNC = assign({ { 317, 3 } });  // define two nets are synchronous (High/Low at same time) 
M17_00V = assign({ { 317, 10 } });  // define 0.0V net
M17_01V = assign({ { 317, 11 } });  // define 0.1V net
M17_02V = assign({ { 317, 12 } });  // define 0.2V net
M17_03V = assign({ { 317, 13 } });  // define 0.3V net
M17_04V = assign({ { 317, 14 } });  // define 0.4V net
M17_05V = assign({ { 317, 15 } });  // define 0.5V net
M17_06V = assign({ { 317, 16 } });  // define 0.6V net
M17_07V = assign({ { 317, 17 } });  // define 0.7V net
M17_08V = assign({ { 317, 18 } });  // define 0.8V net
M17_09V = assign({ { 317, 19 } });  // define 0.9V net
M17_10V = assign({ { 317, 20 } });  // define 1.0V net
M17_11V = assign({ { 317, 21 } });  // define 1.1V net
M17_12V = assign({ { 317, 22 } });  // define 1.2V net
M17_13V = assign({ { 317, 23 } });  // define 1.3V net
M17_14V = assign({ { 317, 24 } });  // define 1.4V net
M17_15V = assign({ { 317, 25 } });  // define 1.5V net
M17_16V = assign({ { 317, 26 } });  // define 1.6V net
M17_17V = assign({ { 317, 27 } });  // define 1.7V net
M17_18V = assign({ { 317, 28 } });  // define 1.8V net
M17_25V = assign({ { 317, 29 } });  // define 2.5V net
M17_33V = assign({ { 317, 30 } });  // define 3.3V net
M17_50V = assign({ { 317, 31 } });  // define 5.0V net
M17_70V = assign({ { 317, 32 } });  // define 7.0V net
M18_USERDV_M = assign({ { 318, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M18)
tM18_USERDV = assign_text({ { 318, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M18)
tM18_USERDV_TOP = assign_text({ { 318, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M18)
tM18V_HIGH = assign_text({ { 318, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM18V_LOW = assign_text({ { 318, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM18V_HIGH_TOP = assign_text({ { 318, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM18V_LOW_TOP = assign_text({ { 318, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M18V_SYNC = assign({ { 318, 3 } });  // define two nets are synchronous (High/Low at same time) 
M18_00V = assign({ { 318, 10 } });  // define 0.0V net
M18_01V = assign({ { 318, 11 } });  // define 0.1V net
M18_02V = assign({ { 318, 12 } });  // define 0.2V net
M18_03V = assign({ { 318, 13 } });  // define 0.3V net
M18_04V = assign({ { 318, 14 } });  // define 0.4V net
M18_05V = assign({ { 318, 15 } });  // define 0.5V net
M18_06V = assign({ { 318, 16 } });  // define 0.6V net
M18_07V = assign({ { 318, 17 } });  // define 0.7V net
M18_08V = assign({ { 318, 18 } });  // define 0.8V net
M18_09V = assign({ { 318, 19 } });  // define 0.9V net
M18_10V = assign({ { 318, 20 } });  // define 1.0V net
M18_11V = assign({ { 318, 21 } });  // define 1.1V net
M18_12V = assign({ { 318, 22 } });  // define 1.2V net
M18_13V = assign({ { 318, 23 } });  // define 1.3V net
M18_14V = assign({ { 318, 24 } });  // define 1.4V net
M18_15V = assign({ { 318, 25 } });  // define 1.5V net
M18_16V = assign({ { 318, 26 } });  // define 1.6V net
M18_17V = assign({ { 318, 27 } });  // define 1.7V net
M18_18V = assign({ { 318, 28 } });  // define 1.8V net
M18_25V = assign({ { 318, 29 } });  // define 2.5V net
M18_33V = assign({ { 318, 30 } });  // define 3.3V net
M18_50V = assign({ { 318, 31 } });  // define 5.0V net
M18_70V = assign({ { 318, 32 } });  // define 7.0V net
M19_USERDV_M = assign({ { 319, 111 } }); // Define a net pair whose delta voltage follows UserDV (for M19)
tM19_USERDV = assign_text({ { 319, 112 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair (for M19)
tM19_USERDV_TOP = assign_text({ { 319, 113 } }, use_exploded_text = { { { "*" }, { "*" } } }); // Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for M19)
tM19V_HIGH = assign_text({ { 319, 8 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage 
tM19V_LOW = assign_text({ { 319, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });  // define lowest operation voltage
tM19V_HIGH_TOP = assign_text({ { 319, 6 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define highest operation voltage in top level to overwrite IP's voltage information
tM19V_LOW_TOP = assign_text({ { 319, 7 } }, use_exploded_text = { { { "*" }, { "*" } } }); // define lowest operation voltage in top level to overwrite IP's voltage information
M19V_SYNC = assign({ { 319, 3 } });  // define two nets are synchronous (High/Low at same time) 
M19_00V = assign({ { 319, 10 } });  // define 0.0V net
M19_01V = assign({ { 319, 11 } });  // define 0.1V net
M19_02V = assign({ { 319, 12 } });  // define 0.2V net
M19_03V = assign({ { 319, 13 } });  // define 0.3V net
M19_04V = assign({ { 319, 14 } });  // define 0.4V net
M19_05V = assign({ { 319, 15 } });  // define 0.5V net
M19_06V = assign({ { 319, 16 } });  // define 0.6V net
M19_07V = assign({ { 319, 17 } });  // define 0.7V net
M19_08V = assign({ { 319, 18 } });  // define 0.8V net
M19_09V = assign({ { 319, 19 } });  // define 0.9V net
M19_10V = assign({ { 319, 20 } });  // define 1.0V net
M19_11V = assign({ { 319, 21 } });  // define 1.1V net
M19_12V = assign({ { 319, 22 } });  // define 1.2V net
M19_13V = assign({ { 319, 23 } });  // define 1.3V net
M19_14V = assign({ { 319, 24 } });  // define 1.4V net
M19_15V = assign({ { 319, 25 } });  // define 1.5V net
M19_16V = assign({ { 319, 26 } });  // define 1.6V net
M19_17V = assign({ { 319, 27 } });  // define 1.7V net
M19_18V = assign({ { 319, 28 } });  // define 1.8V net
M19_25V = assign({ { 319, 29 } });  // define 2.5V net
M19_33V = assign({ { 319, 30 } });  // define 3.3V net
M19_50V = assign({ { 319, 31 } });  // define 5.0V net
M19_70V = assign({ { 319, 32 } });  // define 7.0V net
/* define highest operation voltage  */
tCU_RDLV_HIGH = assign_text({ { 73, 8 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage  */
tCU_RDLV_LOW = assign_text({ { 73, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define highest operation voltage in top level to overwrite IP's voltage information */
tCU_RDLV_HIGH_TOP = assign_text({ { 73, 6 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage in top level to overwrite IP's voltage information */
tCU_RDLV_LOW_TOP = assign_text({ { 73, 7 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define two nets are synchronous (High/Low at same time) */
CU_RDLV_SYNC = assign({ { 73, 3 } }); 
/* Define a net pair whose delta voltage follows UserDV (for AP) */
CU_RDL_USERDV_M = assign({ { 73, 111 } }); 
/* Define the delta voltage of a net pair (for AP) */
tCU_RDL_USERDV = assign_text({ { 73, 112 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for AP) */
tCU_RDL_USERDV_TOP = assign_text({ { 73, 113 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define RDL highest operating voltage on a net by text */ 
/*  Dummy AP metal layer for dummy pattern */
AP_DUMMY    = assign({ { 74, 1 } });
/* define highest operation voltage  */
tAPV_HIGH     = assign_text({ { 74, 8 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage */
tAPV_LOW      = assign_text({ { 74, 9 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define highest operation voltage in top level to overwrite IP's voltage information */
tAPV_HIGH_TOP = assign_text({ { 74, 6 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define lowest operation voltage in top level to overwrite IP's voltage information */
tAPV_LOW_TOP  = assign_text({ { 74, 7 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* define two nets are synchronous (High/Low at same time)  */
APV_SYNC     = assign({ { 74, 3 } }); 
/* Define a net pair whose delta voltage follows UserDV (for AP)  */
AP_USERDV_M   = assign({ { 74, 111 } }); 
/* Define the delta voltage of a net pair (for AP) */
tAP_USERDV     = assign_text({ { 74, 112 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* Define the delta voltage of a net pair at top level to overwrite UserDV tag with lower priority (for AP) */
tAP_USERDV_TOP = assign_text({ { 74, 113 } }, use_exploded_text = { { { "*" }, { "*" } } });
/* For CM0 utility used, internal waive RT0EXCL region */
RT0EXCL   = assign({ { 150, 130 } }); 
/* Cut M0_CA */
CM0A_MAIN = assign({ { 430, 150 } }); 
/* Cut M0_CB */
CM0B_MAIN = assign({ { 430, 155 } }); 
/* Dummy Cut M0_CA */
DCM0A     = assign({ { 530, 150 } }); 
/* Dummy Cut M0_CB */
DCM0B     = assign({ { 530, 155 } }); 
/* CM0 horizontal merge Blocking Layer */
BCM0H     = assign({ { 430, 100 } }); 
/* CM0 horizontal merge Blocking Layer */
BCM0V     = assign({ { 430, 110 } }); 



M0_BASE = assign({ { 30, 150 } });             
M0_MAIN_CA = assign({ { 30, 151 } });
M0_MAIN_CB = assign({ { 30, 152 } });
DM0_O_CA = assign({ { 330, 151 } }, layer_intent = { LAYER_INTENT_FILL });
DM0_O_CB = assign({ { 330, 152 } }, layer_intent = { LAYER_INTENT_FILL });
DM0_CA  = assign({ { 330, 161 } }, layer_intent = { LAYER_INTENT_FILL });
DM0_CB = assign({ { 330, 162 } }, layer_intent = { LAYER_INTENT_FILL });


M1_MAIN = assign({ { 31, 420 } });
DM1_O = assign({ { 331, 420 } }, layer_intent = { LAYER_INTENT_FILL });
DM1  = assign({ { 331, 430 } }, layer_intent = { LAYER_INTENT_FILL });


M2_BASE_H = assign({ { 32, 200 } });
M2_MAIN_CA_H = assign({ { 32, 201 } });
M2_MAIN_CB_H = assign({ { 32, 202 } });
DM2_O_CA_H = assign({ { 332, 201 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_O_CB_H = assign({ { 332, 202 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_CA_H = assign({ { 332, 211 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_CB_H = assign({ { 332, 212 } }, layer_intent = { LAYER_INTENT_FILL });
M2_BASE_V = assign({ { 32, 220 } });
M2_MAIN_CA_V = assign({ { 32, 221 } });
M2_MAIN_CB_V = assign({ { 32, 222 } });
DM2_O_CA_V = assign({ { 332, 221 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_O_CB_V = assign({ { 332, 222 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_CA_V = assign({ { 332, 231 } }, layer_intent = { LAYER_INTENT_FILL });
DM2_CB_V = assign({ { 332, 232 } }, layer_intent = { LAYER_INTENT_FILL });


M3_MAIN_H = assign({ { 33, 250 } });
DM3_O_H = assign({ { 333, 250 } }, layer_intent = { LAYER_INTENT_FILL });
DM3_H = assign({ { 333, 260 } }, layer_intent = { LAYER_INTENT_FILL });
M3_MAIN_V = assign({ { 33, 270 } });
DM3_O_V = assign({ { 333, 270 } }, layer_intent = { LAYER_INTENT_FILL });
DM3_V = assign({ { 333, 280 } }, layer_intent = { LAYER_INTENT_FILL });


M4_MAIN_H = assign({ { 34, 300 } });
DM4_O_H = assign({ { 334, 300 } }, layer_intent = { LAYER_INTENT_FILL });
DM4_H = assign({ { 334, 310 } }, layer_intent = { LAYER_INTENT_FILL });
M4_MAIN_V = assign({ { 34, 320 } });
DM4_O_V = assign({ { 334, 320 } }, layer_intent = { LAYER_INTENT_FILL });
DM4_V = assign({ { 334, 330 } }, layer_intent = { LAYER_INTENT_FILL });


M5_BASE_H = assign({ { 35, 350 } });
M5_MAIN_CA_H = assign({ { 35, 351 } });
M5_MAIN_CB_H = assign({ { 35, 352 } });
DM5_O_CA_H = assign({ { 335, 351 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_O_CB_H = assign({ { 335, 352 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_CA_H = assign({ { 335, 361 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_CB_H = assign({ { 335, 362 } }, layer_intent = { LAYER_INTENT_FILL });
M5_BASE_V = assign({ { 35, 370 } });
M5_MAIN_CA_V = assign({ { 35, 371 } });
M5_MAIN_CB_V = assign({ { 35, 372 } });
DM5_O_CA_V = assign({ { 335, 371 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_O_CB_V = assign({ { 335, 372 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_CA_V = assign({ { 335, 381 } }, layer_intent = { LAYER_INTENT_FILL });
DM5_CB_V = assign({ { 335, 382 } }, layer_intent = { LAYER_INTENT_FILL });


M6_MAIN_H = assign({ { 36, 950 } });
DM6_O_H = assign({ { 336, 950 } }, layer_intent = { LAYER_INTENT_FILL });
DM6_H = assign({ { 336, 955 } }, layer_intent = { LAYER_INTENT_FILL });
M6_MAIN_V = assign({ { 36, 960 } });
DM6_O_V = assign({ { 336, 960 } }, layer_intent = { LAYER_INTENT_FILL });
DM6_V = assign({ { 336, 965 } }, layer_intent = { LAYER_INTENT_FILL });


M7_MAIN_H = assign({ { 37, 800 } });
DM7_O_H = assign({ { 337, 800 } }, layer_intent = { LAYER_INTENT_FILL });
DM7_H = assign({ { 337, 805 } }, layer_intent = { LAYER_INTENT_FILL });
M7_MAIN_V = assign({ { 37, 810 } });
DM7_O_V = assign({ { 337, 810 } }, layer_intent = { LAYER_INTENT_FILL });
DM7_V = assign({ { 337, 815 } }, layer_intent = { LAYER_INTENT_FILL });


M8_MAIN_H = assign({ { 38, 970 } });
DM8_O_H = assign({ { 338, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM8_H = assign({ { 338, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M8_MAIN_V = assign({ { 38, 980 } });
DM8_O_V = assign({ { 338, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM8_V = assign({ { 338, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M9_MAIN_H = assign({ { 39, 970 } });
DM9_O_H = assign({ { 339, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM9_H = assign({ { 339, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M9_MAIN_V = assign({ { 39, 980 } });
DM9_O_V = assign({ { 339, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM9_V = assign({ { 339, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M10_MAIN_H = assign({ { 40, 970 } });
DM10_O_H = assign({ { 340, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM10_H = assign({ { 340, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M10_MAIN_V = assign({ { 40, 980 } });
DM10_O_V = assign({ { 340, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM10_V = assign({ { 340, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M11_MAIN_H = assign({ { 41, 970 } });
DM11_O_H = assign({ { 341, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM11_H = assign({ { 341, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M11_MAIN_V = assign({ { 41, 980 } });
DM11_O_V = assign({ { 341, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM11_V = assign({ { 341, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M12_MAIN_H = assign({ { 42, 970 } });
DM12_O_H = assign({ { 342, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM12_H = assign({ { 342, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M12_MAIN_V = assign({ { 42, 980 } });
DM12_O_V = assign({ { 342, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM12_V = assign({ { 342, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M13_MAIN_H = assign({ { 43, 970 } });
DM13_O_H = assign({ { 343, 970 } }, layer_intent = { LAYER_INTENT_FILL });
DM13_H = assign({ { 343, 975 } }, layer_intent = { LAYER_INTENT_FILL });
M13_MAIN_V = assign({ { 43, 980 } });
DM13_O_V = assign({ { 343, 980 } }, layer_intent = { LAYER_INTENT_FILL });
DM13_V = assign({ { 343, 985 } }, layer_intent = { LAYER_INTENT_FILL });


M14_MAIN = assign({ { 44, 90 } });
DM14_O = assign({ { 344, 90 } }, layer_intent = { LAYER_INTENT_FILL });
DM14 = assign({ { 344, 95 } }, layer_intent = { LAYER_INTENT_FILL });


M15_MAIN = assign({ { 45, 90 } });
DM15_O = assign({ { 345, 90 } }, layer_intent = { LAYER_INTENT_FILL });
DM15 = assign({ { 345, 95 } }, layer_intent = { LAYER_INTENT_FILL });


M16_MAIN = assign({ { 46, 70 } });
DM16 = assign({ { 346, 75 } }, layer_intent = { LAYER_INTENT_FILL });


M17_MAIN = assign({ { 47, 70 } });
DM17 = assign({ { 347, 75 } }, layer_intent = { LAYER_INTENT_FILL });


M18_MAIN = assign({ { 48, 80 } });
DM18 = assign({ { 348, 85 } }, layer_intent = { LAYER_INTENT_FILL });


M19_MAIN = assign({ { 49, 80 } });
DM19 = assign({ { 349, 85 } }, layer_intent = { LAYER_INTENT_FILL });




 NOUSEM2 = assign({              { 32, 150 }, { 32, 151 }, { 32, 152 }, { 32, 170 }, { 32, 171 }, { 32, 172 }, { 332, 151 }, { 332, 152 }, { 332, 171 }, { 332, 172 }, { 332, 161 }, { 332, 162 }, { 332, 181 }, { 332, 182 },   { 32, 250 }, { 32, 270 }, { 332, 250 }, { 332, 260 }, { 332, 270 }, { 332, 280 },  { 32, 300 }, { 32, 320 }, { 332, 300 }, { 332, 310 }, { 332, 320 }, { 332, 330 },  { 32, 500 }, { 32, 501 }, { 32, 502 }, { 32, 520 }, { 32, 521 }, { 32, 522 }, { 332, 501 }, { 332, 502 }, { 332, 521 }, { 332, 522 }, { 332, 511 }, { 332, 512 }, { 332, 531 }, { 332, 532 },  { 32, 550 }, { 32, 551 }, { 32, 552 }, { 32, 570 }, { 32, 571 }, { 32, 572 }, { 332, 551 }, { 332, 552 }, { 332, 571 }, { 332, 572 }, { 332, 561 }, { 332, 562 }, { 332, 581 }, { 332, 582 },  { 32, 350 }, { 32, 351 }, { 32, 352 }, { 32, 370 }, { 32, 371 }, { 32, 372 }, { 332, 351 }, { 332, 352 }, { 332, 371 }, { 332, 372 }, { 332, 361 }, { 332, 362 }, { 332, 381 }, { 332, 382 }, { 332, 353 }, { 332, 354 }, { 332, 373 }, { 332, 374 },  { 32, 400 }, { 32, 401 }, { 32, 402 }, { 32, 420 }, { 32, 421 }, { 32, 422 }, { 332, 401 },  { 332, 402 },  { 332, 421 },  { 332, 422 },  { 332, 411 },  { 332, 412 },  { 332, 431 },  { 332, 432 },  { 32, 950 }, { 32, 960 }, { 332, 950 }, { 332, 960 }, { 332, 955 }, { 332, 965 },  { 32, 800 }, { 32, 810 }, { 332, 800 }, { 332, 810 }, { 332, 805 }, { 332, 815 },  { 32, 920 }, { 32, 930 }, { 332, 920 }, { 332, 930 }, { 332, 925 }, { 332, 935 },  { 32, 970 }, { 32, 980 }, { 332, 970 }, { 332, 980 }, { 332, 975 }, { 332, 985 },  { 32, 90 }, { 332, 90 }, { 332, 95 },  { 32, 70 }, { 332, 70 }, { 332, 75 },  { 32, 50 }, { 332, 55 },  { 32, 40 },  { 332, 45 }, { 332, 40 },  { 32, 80 }, { 332, 85 }, { 332, 80 },  { 32, 60 }, { 332, 65 },  });




 NOUSEM3 = assign({              { 33, 150 }, { 33, 151 }, { 33, 152 }, { 33, 170 }, { 33, 171 }, { 33, 172 }, { 333, 151 }, { 333, 152 }, { 333, 171 }, { 333, 172 }, { 333, 161 }, { 333, 162 }, { 333, 181 }, { 333, 182 },  { 33, 200 }, { 33, 201 }, { 33, 202 }, { 33, 220 }, { 33, 221 }, { 33, 222 }, { 333, 201 }, { 333, 202 }, { 333, 221 }, { 333, 222 }, { 333, 211 }, { 333, 212 }, { 333, 231 }, { 333, 232 },   { 33, 300 }, { 33, 320 }, { 333, 300 }, { 333, 310 }, { 333, 320 }, { 333, 330 },  { 33, 500 }, { 33, 501 }, { 33, 502 }, { 33, 520 }, { 33, 521 }, { 33, 522 }, { 333, 501 }, { 333, 502 }, { 333, 521 }, { 333, 522 }, { 333, 511 }, { 333, 512 }, { 333, 531 }, { 333, 532 },  { 33, 550 }, { 33, 551 }, { 33, 552 }, { 33, 570 }, { 33, 571 }, { 33, 572 }, { 333, 551 }, { 333, 552 }, { 333, 571 }, { 333, 572 }, { 333, 561 }, { 333, 562 }, { 333, 581 }, { 333, 582 },  { 33, 350 }, { 33, 351 }, { 33, 352 }, { 33, 370 }, { 33, 371 }, { 33, 372 }, { 333, 351 }, { 333, 352 }, { 333, 371 }, { 333, 372 }, { 333, 361 }, { 333, 362 }, { 333, 381 }, { 333, 382 }, { 333, 353 }, { 333, 354 }, { 333, 373 }, { 333, 374 },  { 33, 400 }, { 33, 401 }, { 33, 402 }, { 33, 420 }, { 33, 421 }, { 33, 422 }, { 333, 401 },  { 333, 402 },  { 333, 421 },  { 333, 422 },  { 333, 411 },  { 333, 412 },  { 333, 431 },  { 333, 432 },  { 33, 950 }, { 33, 960 }, { 333, 950 }, { 333, 960 }, { 333, 955 }, { 333, 965 },  { 33, 800 }, { 33, 810 }, { 333, 800 }, { 333, 810 }, { 333, 805 }, { 333, 815 },  { 33, 920 }, { 33, 930 }, { 333, 920 }, { 333, 930 }, { 333, 925 }, { 333, 935 },  { 33, 970 }, { 33, 980 }, { 333, 970 }, { 333, 980 }, { 333, 975 }, { 333, 985 },  { 33, 90 }, { 333, 90 }, { 333, 95 },  { 33, 70 }, { 333, 70 }, { 333, 75 },  { 33, 50 }, { 333, 55 },  { 33, 40 },  { 333, 45 }, { 333, 40 },  { 33, 80 }, { 333, 85 }, { 333, 80 },  { 33, 60 }, { 333, 65 },  });




 NOUSEM4 = assign({              { 34, 150 }, { 34, 151 }, { 34, 152 }, { 34, 170 }, { 34, 171 }, { 34, 172 }, { 334, 151 }, { 334, 152 }, { 334, 171 }, { 334, 172 }, { 334, 161 }, { 334, 162 }, { 334, 181 }, { 334, 182 },  { 34, 200 }, { 34, 201 }, { 34, 202 }, { 34, 220 }, { 34, 221 }, { 34, 222 }, { 334, 201 }, { 334, 202 }, { 334, 221 }, { 334, 222 }, { 334, 211 }, { 334, 212 }, { 334, 231 }, { 334, 232 },  { 34, 250 }, { 34, 270 }, { 334, 250 }, { 334, 260 }, { 334, 270 }, { 334, 280 },   { 34, 500 }, { 34, 501 }, { 34, 502 }, { 34, 520 }, { 34, 521 }, { 34, 522 }, { 334, 501 }, { 334, 502 }, { 334, 521 }, { 334, 522 }, { 334, 511 }, { 334, 512 }, { 334, 531 }, { 334, 532 },  { 34, 550 }, { 34, 551 }, { 34, 552 }, { 34, 570 }, { 34, 571 }, { 34, 572 }, { 334, 551 }, { 334, 552 }, { 334, 571 }, { 334, 572 }, { 334, 561 }, { 334, 562 }, { 334, 581 }, { 334, 582 },  { 34, 350 }, { 34, 351 }, { 34, 352 }, { 34, 370 }, { 34, 371 }, { 34, 372 }, { 334, 351 }, { 334, 352 }, { 334, 371 }, { 334, 372 }, { 334, 361 }, { 334, 362 }, { 334, 381 }, { 334, 382 }, { 334, 353 }, { 334, 354 }, { 334, 373 }, { 334, 374 },  { 34, 400 }, { 34, 401 }, { 34, 402 }, { 34, 420 }, { 34, 421 }, { 34, 422 }, { 334, 401 },  { 334, 402 },  { 334, 421 },  { 334, 422 },  { 334, 411 },  { 334, 412 },  { 334, 431 },  { 334, 432 },  { 34, 950 }, { 34, 960 }, { 334, 950 }, { 334, 960 }, { 334, 955 }, { 334, 965 },  { 34, 800 }, { 34, 810 }, { 334, 800 }, { 334, 810 }, { 334, 805 }, { 334, 815 },  { 34, 920 }, { 34, 930 }, { 334, 920 }, { 334, 930 }, { 334, 925 }, { 334, 935 },  { 34, 970 }, { 34, 980 }, { 334, 970 }, { 334, 980 }, { 334, 975 }, { 334, 985 },  { 34, 90 }, { 334, 90 }, { 334, 95 },  { 34, 70 }, { 334, 70 }, { 334, 75 },  { 34, 50 }, { 334, 55 },  { 34, 40 },  { 334, 45 }, { 334, 40 },  { 34, 80 }, { 334, 85 }, { 334, 80 },  { 34, 60 }, { 334, 65 },  });




 NOUSEM5 = assign({              { 35, 150 }, { 35, 151 }, { 35, 152 }, { 35, 170 }, { 35, 171 }, { 35, 172 }, { 335, 151 }, { 335, 152 }, { 335, 171 }, { 335, 172 }, { 335, 161 }, { 335, 162 }, { 335, 181 }, { 335, 182 },  { 35, 200 }, { 35, 201 }, { 35, 202 }, { 35, 220 }, { 35, 221 }, { 35, 222 }, { 335, 201 }, { 335, 202 }, { 335, 221 }, { 335, 222 }, { 335, 211 }, { 335, 212 }, { 335, 231 }, { 335, 232 },  { 35, 250 }, { 35, 270 }, { 335, 250 }, { 335, 260 }, { 335, 270 }, { 335, 280 },  { 35, 300 }, { 35, 320 }, { 335, 300 }, { 335, 310 }, { 335, 320 }, { 335, 330 },  { 35, 500 }, { 35, 501 }, { 35, 502 }, { 35, 520 }, { 35, 521 }, { 35, 522 }, { 335, 501 }, { 335, 502 }, { 335, 521 }, { 335, 522 }, { 335, 511 }, { 335, 512 }, { 335, 531 }, { 335, 532 },  { 35, 550 }, { 35, 551 }, { 35, 552 }, { 35, 570 }, { 35, 571 }, { 35, 572 }, { 335, 551 }, { 335, 552 }, { 335, 571 }, { 335, 572 }, { 335, 561 }, { 335, 562 }, { 335, 581 }, { 335, 582 },   { 35, 400 }, { 35, 401 }, { 35, 402 }, { 35, 420 }, { 35, 421 }, { 35, 422 }, { 335, 401 },  { 335, 402 },  { 335, 421 },  { 335, 422 },  { 335, 411 },  { 335, 412 },  { 335, 431 },  { 335, 432 },  { 35, 950 }, { 35, 960 }, { 335, 950 }, { 335, 960 }, { 335, 955 }, { 335, 965 },  { 35, 800 }, { 35, 810 }, { 335, 800 }, { 335, 810 }, { 335, 805 }, { 335, 815 },  { 35, 920 }, { 35, 930 }, { 335, 920 }, { 335, 930 }, { 335, 925 }, { 335, 935 },  { 35, 970 }, { 35, 980 }, { 335, 970 }, { 335, 980 }, { 335, 975 }, { 335, 985 },  { 35, 90 }, { 335, 90 }, { 335, 95 },  { 35, 70 }, { 335, 70 }, { 335, 75 },  { 35, 50 }, { 335, 55 },  { 35, 40 },  { 335, 45 }, { 335, 40 },  { 35, 80 }, { 335, 85 }, { 335, 80 },  { 35, 60 }, { 335, 65 },  });




 NOUSEM6 = assign({              { 36, 150 }, { 36, 151 }, { 36, 152 }, { 36, 170 }, { 36, 171 }, { 36, 172 }, { 336, 151 }, { 336, 152 }, { 336, 171 }, { 336, 172 }, { 336, 161 }, { 336, 162 }, { 336, 181 }, { 336, 182 },  { 36, 200 }, { 36, 201 }, { 36, 202 }, { 36, 220 }, { 36, 221 }, { 36, 222 }, { 336, 201 }, { 336, 202 }, { 336, 221 }, { 336, 222 }, { 336, 211 }, { 336, 212 }, { 336, 231 }, { 336, 232 },  { 36, 250 }, { 36, 270 }, { 336, 250 }, { 336, 260 }, { 336, 270 }, { 336, 280 },  { 36, 300 }, { 36, 320 }, { 336, 300 }, { 336, 310 }, { 336, 320 }, { 336, 330 },  { 36, 500 }, { 36, 501 }, { 36, 502 }, { 36, 520 }, { 36, 521 }, { 36, 522 }, { 336, 501 }, { 336, 502 }, { 336, 521 }, { 336, 522 }, { 336, 511 }, { 336, 512 }, { 336, 531 }, { 336, 532 },  { 36, 550 }, { 36, 551 }, { 36, 552 }, { 36, 570 }, { 36, 571 }, { 36, 572 }, { 336, 551 }, { 336, 552 }, { 336, 571 }, { 336, 572 }, { 336, 561 }, { 336, 562 }, { 336, 581 }, { 336, 582 },  { 36, 350 }, { 36, 351 }, { 36, 352 }, { 36, 370 }, { 36, 371 }, { 36, 372 }, { 336, 351 }, { 336, 352 }, { 336, 371 }, { 336, 372 }, { 336, 361 }, { 336, 362 }, { 336, 381 }, { 336, 382 }, { 336, 353 }, { 336, 354 }, { 336, 373 }, { 336, 374 },  { 36, 400 }, { 36, 401 }, { 36, 402 }, { 36, 420 }, { 36, 421 }, { 36, 422 }, { 336, 401 },  { 336, 402 },  { 336, 421 },  { 336, 422 },  { 336, 411 },  { 336, 412 },  { 336, 431 },  { 336, 432 },   { 36, 800 }, { 36, 810 }, { 336, 800 }, { 336, 810 }, { 336, 805 }, { 336, 815 },  { 36, 920 }, { 36, 930 }, { 336, 920 }, { 336, 930 }, { 336, 925 }, { 336, 935 },  { 36, 970 }, { 36, 980 }, { 336, 970 }, { 336, 980 }, { 336, 975 }, { 336, 985 },  { 36, 90 }, { 336, 90 }, { 336, 95 },  { 36, 70 }, { 336, 70 }, { 336, 75 },  { 36, 50 }, { 336, 55 },  { 36, 40 },  { 336, 45 }, { 336, 40 },  { 36, 80 }, { 336, 85 }, { 336, 80 },  { 36, 60 }, { 336, 65 },  });




 NOUSEM7 = assign({              { 37, 150 }, { 37, 151 }, { 37, 152 }, { 37, 170 }, { 37, 171 }, { 37, 172 }, { 337, 151 }, { 337, 152 }, { 337, 171 }, { 337, 172 }, { 337, 161 }, { 337, 162 }, { 337, 181 }, { 337, 182 },  { 37, 200 }, { 37, 201 }, { 37, 202 }, { 37, 220 }, { 37, 221 }, { 37, 222 }, { 337, 201 }, { 337, 202 }, { 337, 221 }, { 337, 222 }, { 337, 211 }, { 337, 212 }, { 337, 231 }, { 337, 232 },  { 37, 250 }, { 37, 270 }, { 337, 250 }, { 337, 260 }, { 337, 270 }, { 337, 280 },  { 37, 300 }, { 37, 320 }, { 337, 300 }, { 337, 310 }, { 337, 320 }, { 337, 330 },  { 37, 500 }, { 37, 501 }, { 37, 502 }, { 37, 520 }, { 37, 521 }, { 37, 522 }, { 337, 501 }, { 337, 502 }, { 337, 521 }, { 337, 522 }, { 337, 511 }, { 337, 512 }, { 337, 531 }, { 337, 532 },  { 37, 550 }, { 37, 551 }, { 37, 552 }, { 37, 570 }, { 37, 571 }, { 37, 572 }, { 337, 551 }, { 337, 552 }, { 337, 571 }, { 337, 572 }, { 337, 561 }, { 337, 562 }, { 337, 581 }, { 337, 582 },  { 37, 350 }, { 37, 351 }, { 37, 352 }, { 37, 370 }, { 37, 371 }, { 37, 372 }, { 337, 351 }, { 337, 352 }, { 337, 371 }, { 337, 372 }, { 337, 361 }, { 337, 362 }, { 337, 381 }, { 337, 382 }, { 337, 353 }, { 337, 354 }, { 337, 373 }, { 337, 374 },  { 37, 400 }, { 37, 401 }, { 37, 402 }, { 37, 420 }, { 37, 421 }, { 37, 422 }, { 337, 401 },  { 337, 402 },  { 337, 421 },  { 337, 422 },  { 337, 411 },  { 337, 412 },  { 337, 431 },  { 337, 432 },  { 37, 950 }, { 37, 960 }, { 337, 950 }, { 337, 960 }, { 337, 955 }, { 337, 965 },   { 37, 920 }, { 37, 930 }, { 337, 920 }, { 337, 930 }, { 337, 925 }, { 337, 935 },  { 37, 970 }, { 37, 980 }, { 337, 970 }, { 337, 980 }, { 337, 975 }, { 337, 985 },  { 37, 90 }, { 337, 90 }, { 337, 95 },  { 37, 70 }, { 337, 70 }, { 337, 75 },  { 37, 50 }, { 337, 55 },  { 37, 40 },  { 337, 45 }, { 337, 40 },  { 37, 80 }, { 337, 85 }, { 337, 80 },  { 37, 60 }, { 337, 65 },  });




 NOUSEM8 = assign({              { 38, 150 }, { 38, 151 }, { 38, 152 }, { 38, 170 }, { 38, 171 }, { 38, 172 }, { 338, 151 }, { 338, 152 }, { 338, 171 }, { 338, 172 }, { 338, 161 }, { 338, 162 }, { 338, 181 }, { 338, 182 },  { 38, 200 }, { 38, 201 }, { 38, 202 }, { 38, 220 }, { 38, 221 }, { 38, 222 }, { 338, 201 }, { 338, 202 }, { 338, 221 }, { 338, 222 }, { 338, 211 }, { 338, 212 }, { 338, 231 }, { 338, 232 },  { 38, 250 }, { 38, 270 }, { 338, 250 }, { 338, 260 }, { 338, 270 }, { 338, 280 },  { 38, 300 }, { 38, 320 }, { 338, 300 }, { 338, 310 }, { 338, 320 }, { 338, 330 },  { 38, 500 }, { 38, 501 }, { 38, 502 }, { 38, 520 }, { 38, 521 }, { 38, 522 }, { 338, 501 }, { 338, 502 }, { 338, 521 }, { 338, 522 }, { 338, 511 }, { 338, 512 }, { 338, 531 }, { 338, 532 },  { 38, 550 }, { 38, 551 }, { 38, 552 }, { 38, 570 }, { 38, 571 }, { 38, 572 }, { 338, 551 }, { 338, 552 }, { 338, 571 }, { 338, 572 }, { 338, 561 }, { 338, 562 }, { 338, 581 }, { 338, 582 },  { 38, 350 }, { 38, 351 }, { 38, 352 }, { 38, 370 }, { 38, 371 }, { 38, 372 }, { 338, 351 }, { 338, 352 }, { 338, 371 }, { 338, 372 }, { 338, 361 }, { 338, 362 }, { 338, 381 }, { 338, 382 }, { 338, 353 }, { 338, 354 }, { 338, 373 }, { 338, 374 },  { 38, 400 }, { 38, 401 }, { 38, 402 }, { 38, 420 }, { 38, 421 }, { 38, 422 }, { 338, 401 },  { 338, 402 },  { 338, 421 },  { 338, 422 },  { 338, 411 },  { 338, 412 },  { 338, 431 },  { 338, 432 },  { 38, 950 }, { 38, 960 }, { 338, 950 }, { 338, 960 }, { 338, 955 }, { 338, 965 },  { 38, 800 }, { 38, 810 }, { 338, 800 }, { 338, 810 }, { 338, 805 }, { 338, 815 },  { 38, 920 }, { 38, 930 }, { 338, 920 }, { 338, 930 }, { 338, 925 }, { 338, 935 },   { 38, 90 }, { 338, 90 }, { 338, 95 },  { 38, 70 }, { 338, 70 }, { 338, 75 },  { 38, 50 }, { 338, 55 },  { 38, 40 },  { 338, 45 }, { 338, 40 },  { 38, 80 }, { 338, 85 }, { 338, 80 },  { 38, 60 }, { 338, 65 },  });




 NOUSEM9 = assign({              { 39, 150 }, { 39, 151 }, { 39, 152 }, { 39, 170 }, { 39, 171 }, { 39, 172 }, { 339, 151 }, { 339, 152 }, { 339, 171 }, { 339, 172 }, { 339, 161 }, { 339, 162 }, { 339, 181 }, { 339, 182 },  { 39, 200 }, { 39, 201 }, { 39, 202 }, { 39, 220 }, { 39, 221 }, { 39, 222 }, { 339, 201 }, { 339, 202 }, { 339, 221 }, { 339, 222 }, { 339, 211 }, { 339, 212 }, { 339, 231 }, { 339, 232 },  { 39, 250 }, { 39, 270 }, { 339, 250 }, { 339, 260 }, { 339, 270 }, { 339, 280 },  { 39, 300 }, { 39, 320 }, { 339, 300 }, { 339, 310 }, { 339, 320 }, { 339, 330 },  { 39, 500 }, { 39, 501 }, { 39, 502 }, { 39, 520 }, { 39, 521 }, { 39, 522 }, { 339, 501 }, { 339, 502 }, { 339, 521 }, { 339, 522 }, { 339, 511 }, { 339, 512 }, { 339, 531 }, { 339, 532 },  { 39, 550 }, { 39, 551 }, { 39, 552 }, { 39, 570 }, { 39, 571 }, { 39, 572 }, { 339, 551 }, { 339, 552 }, { 339, 571 }, { 339, 572 }, { 339, 561 }, { 339, 562 }, { 339, 581 }, { 339, 582 },  { 39, 350 }, { 39, 351 }, { 39, 352 }, { 39, 370 }, { 39, 371 }, { 39, 372 }, { 339, 351 }, { 339, 352 }, { 339, 371 }, { 339, 372 }, { 339, 361 }, { 339, 362 }, { 339, 381 }, { 339, 382 }, { 339, 353 }, { 339, 354 }, { 339, 373 }, { 339, 374 },  { 39, 400 }, { 39, 401 }, { 39, 402 }, { 39, 420 }, { 39, 421 }, { 39, 422 }, { 339, 401 },  { 339, 402 },  { 339, 421 },  { 339, 422 },  { 339, 411 },  { 339, 412 },  { 339, 431 },  { 339, 432 },  { 39, 950 }, { 39, 960 }, { 339, 950 }, { 339, 960 }, { 339, 955 }, { 339, 965 },  { 39, 800 }, { 39, 810 }, { 339, 800 }, { 339, 810 }, { 339, 805 }, { 339, 815 },  { 39, 920 }, { 39, 930 }, { 339, 920 }, { 339, 930 }, { 339, 925 }, { 339, 935 },   { 39, 90 }, { 339, 90 }, { 339, 95 },  { 39, 70 }, { 339, 70 }, { 339, 75 },  { 39, 50 }, { 339, 55 },  { 39, 40 },  { 339, 45 }, { 339, 40 },  { 39, 80 }, { 339, 85 }, { 339, 80 },  { 39, 60 }, { 339, 65 },  });




 NOUSEM10 = assign({              { 40, 150 }, { 40, 151 }, { 40, 152 }, { 40, 170 }, { 40, 171 }, { 40, 172 }, { 340, 151 }, { 340, 152 }, { 340, 171 }, { 340, 172 }, { 340, 161 }, { 340, 162 }, { 340, 181 }, { 340, 182 },  { 40, 200 }, { 40, 201 }, { 40, 202 }, { 40, 220 }, { 40, 221 }, { 40, 222 }, { 340, 201 }, { 340, 202 }, { 340, 221 }, { 340, 222 }, { 340, 211 }, { 340, 212 }, { 340, 231 }, { 340, 232 },  { 40, 250 }, { 40, 270 }, { 340, 250 }, { 340, 260 }, { 340, 270 }, { 340, 280 },  { 40, 300 }, { 40, 320 }, { 340, 300 }, { 340, 310 }, { 340, 320 }, { 340, 330 },  { 40, 500 }, { 40, 501 }, { 40, 502 }, { 40, 520 }, { 40, 521 }, { 40, 522 }, { 340, 501 }, { 340, 502 }, { 340, 521 }, { 340, 522 }, { 340, 511 }, { 340, 512 }, { 340, 531 }, { 340, 532 },  { 40, 550 }, { 40, 551 }, { 40, 552 }, { 40, 570 }, { 40, 571 }, { 40, 572 }, { 340, 551 }, { 340, 552 }, { 340, 571 }, { 340, 572 }, { 340, 561 }, { 340, 562 }, { 340, 581 }, { 340, 582 },  { 40, 350 }, { 40, 351 }, { 40, 352 }, { 40, 370 }, { 40, 371 }, { 40, 372 }, { 340, 351 }, { 340, 352 }, { 340, 371 }, { 340, 372 }, { 340, 361 }, { 340, 362 }, { 340, 381 }, { 340, 382 }, { 340, 353 }, { 340, 354 }, { 340, 373 }, { 340, 374 },  { 40, 400 }, { 40, 401 }, { 40, 402 }, { 40, 420 }, { 40, 421 }, { 40, 422 }, { 340, 401 },  { 340, 402 },  { 340, 421 },  { 340, 422 },  { 340, 411 },  { 340, 412 },  { 340, 431 },  { 340, 432 },  { 40, 950 }, { 40, 960 }, { 340, 950 }, { 340, 960 }, { 340, 955 }, { 340, 965 },  { 40, 800 }, { 40, 810 }, { 340, 800 }, { 340, 810 }, { 340, 805 }, { 340, 815 },  { 40, 920 }, { 40, 930 }, { 340, 920 }, { 340, 930 }, { 340, 925 }, { 340, 935 },   { 40, 90 }, { 340, 90 }, { 340, 95 },  { 40, 70 }, { 340, 70 }, { 340, 75 },  { 40, 50 }, { 340, 55 },  { 40, 40 },  { 340, 45 }, { 340, 40 },  { 40, 80 }, { 340, 85 }, { 340, 80 },  { 40, 60 }, { 340, 65 },  });




 NOUSEM11 = assign({              { 41, 150 }, { 41, 151 }, { 41, 152 }, { 41, 170 }, { 41, 171 }, { 41, 172 }, { 341, 151 }, { 341, 152 }, { 341, 171 }, { 341, 172 }, { 341, 161 }, { 341, 162 }, { 341, 181 }, { 341, 182 },  { 41, 200 }, { 41, 201 }, { 41, 202 }, { 41, 220 }, { 41, 221 }, { 41, 222 }, { 341, 201 }, { 341, 202 }, { 341, 221 }, { 341, 222 }, { 341, 211 }, { 341, 212 }, { 341, 231 }, { 341, 232 },  { 41, 250 }, { 41, 270 }, { 341, 250 }, { 341, 260 }, { 341, 270 }, { 341, 280 },  { 41, 300 }, { 41, 320 }, { 341, 300 }, { 341, 310 }, { 341, 320 }, { 341, 330 },  { 41, 500 }, { 41, 501 }, { 41, 502 }, { 41, 520 }, { 41, 521 }, { 41, 522 }, { 341, 501 }, { 341, 502 }, { 341, 521 }, { 341, 522 }, { 341, 511 }, { 341, 512 }, { 341, 531 }, { 341, 532 },  { 41, 550 }, { 41, 551 }, { 41, 552 }, { 41, 570 }, { 41, 571 }, { 41, 572 }, { 341, 551 }, { 341, 552 }, { 341, 571 }, { 341, 572 }, { 341, 561 }, { 341, 562 }, { 341, 581 }, { 341, 582 },  { 41, 350 }, { 41, 351 }, { 41, 352 }, { 41, 370 }, { 41, 371 }, { 41, 372 }, { 341, 351 }, { 341, 352 }, { 341, 371 }, { 341, 372 }, { 341, 361 }, { 341, 362 }, { 341, 381 }, { 341, 382 }, { 341, 353 }, { 341, 354 }, { 341, 373 }, { 341, 374 },  { 41, 400 }, { 41, 401 }, { 41, 402 }, { 41, 420 }, { 41, 421 }, { 41, 422 }, { 341, 401 },  { 341, 402 },  { 341, 421 },  { 341, 422 },  { 341, 411 },  { 341, 412 },  { 341, 431 },  { 341, 432 },  { 41, 950 }, { 41, 960 }, { 341, 950 }, { 341, 960 }, { 341, 955 }, { 341, 965 },  { 41, 800 }, { 41, 810 }, { 341, 800 }, { 341, 810 }, { 341, 805 }, { 341, 815 },  { 41, 920 }, { 41, 930 }, { 341, 920 }, { 341, 930 }, { 341, 925 }, { 341, 935 },   { 41, 90 }, { 341, 90 }, { 341, 95 },  { 41, 70 }, { 341, 70 }, { 341, 75 },  { 41, 50 }, { 341, 55 },  { 41, 40 },  { 341, 45 }, { 341, 40 },  { 41, 80 }, { 341, 85 }, { 341, 80 },  { 41, 60 }, { 341, 65 },  });




 NOUSEM12 = assign({              { 42, 150 }, { 42, 151 }, { 42, 152 }, { 42, 170 }, { 42, 171 }, { 42, 172 }, { 342, 151 }, { 342, 152 }, { 342, 171 }, { 342, 172 }, { 342, 161 }, { 342, 162 }, { 342, 181 }, { 342, 182 },  { 42, 200 }, { 42, 201 }, { 42, 202 }, { 42, 220 }, { 42, 221 }, { 42, 222 }, { 342, 201 }, { 342, 202 }, { 342, 221 }, { 342, 222 }, { 342, 211 }, { 342, 212 }, { 342, 231 }, { 342, 232 },  { 42, 250 }, { 42, 270 }, { 342, 250 }, { 342, 260 }, { 342, 270 }, { 342, 280 },  { 42, 300 }, { 42, 320 }, { 342, 300 }, { 342, 310 }, { 342, 320 }, { 342, 330 },  { 42, 500 }, { 42, 501 }, { 42, 502 }, { 42, 520 }, { 42, 521 }, { 42, 522 }, { 342, 501 }, { 342, 502 }, { 342, 521 }, { 342, 522 }, { 342, 511 }, { 342, 512 }, { 342, 531 }, { 342, 532 },  { 42, 550 }, { 42, 551 }, { 42, 552 }, { 42, 570 }, { 42, 571 }, { 42, 572 }, { 342, 551 }, { 342, 552 }, { 342, 571 }, { 342, 572 }, { 342, 561 }, { 342, 562 }, { 342, 581 }, { 342, 582 },  { 42, 350 }, { 42, 351 }, { 42, 352 }, { 42, 370 }, { 42, 371 }, { 42, 372 }, { 342, 351 }, { 342, 352 }, { 342, 371 }, { 342, 372 }, { 342, 361 }, { 342, 362 }, { 342, 381 }, { 342, 382 }, { 342, 353 }, { 342, 354 }, { 342, 373 }, { 342, 374 },  { 42, 400 }, { 42, 401 }, { 42, 402 }, { 42, 420 }, { 42, 421 }, { 42, 422 }, { 342, 401 },  { 342, 402 },  { 342, 421 },  { 342, 422 },  { 342, 411 },  { 342, 412 },  { 342, 431 },  { 342, 432 },  { 42, 950 }, { 42, 960 }, { 342, 950 }, { 342, 960 }, { 342, 955 }, { 342, 965 },  { 42, 800 }, { 42, 810 }, { 342, 800 }, { 342, 810 }, { 342, 805 }, { 342, 815 },  { 42, 920 }, { 42, 930 }, { 342, 920 }, { 342, 930 }, { 342, 925 }, { 342, 935 },   { 42, 90 }, { 342, 90 }, { 342, 95 },  { 42, 70 }, { 342, 70 }, { 342, 75 },  { 42, 50 }, { 342, 55 },  { 42, 40 },  { 342, 45 }, { 342, 40 },  { 42, 80 }, { 342, 85 }, { 342, 80 },  { 42, 60 }, { 342, 65 },  });




 NOUSEM13 = assign({              { 43, 150 }, { 43, 151 }, { 43, 152 }, { 43, 170 }, { 43, 171 }, { 43, 172 }, { 343, 151 }, { 343, 152 }, { 343, 171 }, { 343, 172 }, { 343, 161 }, { 343, 162 }, { 343, 181 }, { 343, 182 },  { 43, 200 }, { 43, 201 }, { 43, 202 }, { 43, 220 }, { 43, 221 }, { 43, 222 }, { 343, 201 }, { 343, 202 }, { 343, 221 }, { 343, 222 }, { 343, 211 }, { 343, 212 }, { 343, 231 }, { 343, 232 },  { 43, 250 }, { 43, 270 }, { 343, 250 }, { 343, 260 }, { 343, 270 }, { 343, 280 },  { 43, 300 }, { 43, 320 }, { 343, 300 }, { 343, 310 }, { 343, 320 }, { 343, 330 },  { 43, 500 }, { 43, 501 }, { 43, 502 }, { 43, 520 }, { 43, 521 }, { 43, 522 }, { 343, 501 }, { 343, 502 }, { 343, 521 }, { 343, 522 }, { 343, 511 }, { 343, 512 }, { 343, 531 }, { 343, 532 },  { 43, 550 }, { 43, 551 }, { 43, 552 }, { 43, 570 }, { 43, 571 }, { 43, 572 }, { 343, 551 }, { 343, 552 }, { 343, 571 }, { 343, 572 }, { 343, 561 }, { 343, 562 }, { 343, 581 }, { 343, 582 },  { 43, 350 }, { 43, 351 }, { 43, 352 }, { 43, 370 }, { 43, 371 }, { 43, 372 }, { 343, 351 }, { 343, 352 }, { 343, 371 }, { 343, 372 }, { 343, 361 }, { 343, 362 }, { 343, 381 }, { 343, 382 }, { 343, 353 }, { 343, 354 }, { 343, 373 }, { 343, 374 },  { 43, 400 }, { 43, 401 }, { 43, 402 }, { 43, 420 }, { 43, 421 }, { 43, 422 }, { 343, 401 },  { 343, 402 },  { 343, 421 },  { 343, 422 },  { 343, 411 },  { 343, 412 },  { 343, 431 },  { 343, 432 },  { 43, 950 }, { 43, 960 }, { 343, 950 }, { 343, 960 }, { 343, 955 }, { 343, 965 },  { 43, 800 }, { 43, 810 }, { 343, 800 }, { 343, 810 }, { 343, 805 }, { 343, 815 },  { 43, 920 }, { 43, 930 }, { 343, 920 }, { 343, 930 }, { 343, 925 }, { 343, 935 },   { 43, 90 }, { 343, 90 }, { 343, 95 },  { 43, 70 }, { 343, 70 }, { 343, 75 },  { 43, 50 }, { 343, 55 },  { 43, 40 },  { 343, 45 }, { 343, 40 },  { 43, 80 }, { 343, 85 }, { 343, 80 },  { 43, 60 }, { 343, 65 },  });




 NOUSEM14 = assign({              { 44, 150 }, { 44, 151 }, { 44, 152 }, { 44, 170 }, { 44, 171 }, { 44, 172 }, { 344, 151 }, { 344, 152 }, { 344, 171 }, { 344, 172 }, { 344, 161 }, { 344, 162 }, { 344, 181 }, { 344, 182 },  { 44, 200 }, { 44, 201 }, { 44, 202 }, { 44, 220 }, { 44, 221 }, { 44, 222 }, { 344, 201 }, { 344, 202 }, { 344, 221 }, { 344, 222 }, { 344, 211 }, { 344, 212 }, { 344, 231 }, { 344, 232 },  { 44, 250 }, { 44, 270 }, { 344, 250 }, { 344, 260 }, { 344, 270 }, { 344, 280 },  { 44, 300 }, { 44, 320 }, { 344, 300 }, { 344, 310 }, { 344, 320 }, { 344, 330 },  { 44, 500 }, { 44, 501 }, { 44, 502 }, { 44, 520 }, { 44, 521 }, { 44, 522 }, { 344, 501 }, { 344, 502 }, { 344, 521 }, { 344, 522 }, { 344, 511 }, { 344, 512 }, { 344, 531 }, { 344, 532 },  { 44, 550 }, { 44, 551 }, { 44, 552 }, { 44, 570 }, { 44, 571 }, { 44, 572 }, { 344, 551 }, { 344, 552 }, { 344, 571 }, { 344, 572 }, { 344, 561 }, { 344, 562 }, { 344, 581 }, { 344, 582 },  { 44, 350 }, { 44, 351 }, { 44, 352 }, { 44, 370 }, { 44, 371 }, { 44, 372 }, { 344, 351 }, { 344, 352 }, { 344, 371 }, { 344, 372 }, { 344, 361 }, { 344, 362 }, { 344, 381 }, { 344, 382 }, { 344, 353 }, { 344, 354 }, { 344, 373 }, { 344, 374 },  { 44, 400 }, { 44, 401 }, { 44, 402 }, { 44, 420 }, { 44, 421 }, { 44, 422 }, { 344, 401 },  { 344, 402 },  { 344, 421 },  { 344, 422 },  { 344, 411 },  { 344, 412 },  { 344, 431 },  { 344, 432 },  { 44, 950 }, { 44, 960 }, { 344, 950 }, { 344, 960 }, { 344, 955 }, { 344, 965 },  { 44, 800 }, { 44, 810 }, { 344, 800 }, { 344, 810 }, { 344, 805 }, { 344, 815 },  { 44, 920 }, { 44, 930 }, { 344, 920 }, { 344, 930 }, { 344, 925 }, { 344, 935 },  { 44, 970 }, { 44, 980 }, { 344, 970 }, { 344, 980 }, { 344, 975 }, { 344, 985 },   { 44, 70 }, { 344, 70 }, { 344, 75 },  { 44, 50 }, { 344, 55 },  { 44, 40 },  { 344, 45 }, { 344, 40 },  { 44, 80 }, { 344, 85 }, { 344, 80 },  { 44, 60 }, { 344, 65 },  });




 NOUSEM15 = assign({              { 45, 150 }, { 45, 151 }, { 45, 152 }, { 45, 170 }, { 45, 171 }, { 45, 172 }, { 345, 151 }, { 345, 152 }, { 345, 171 }, { 345, 172 }, { 345, 161 }, { 345, 162 }, { 345, 181 }, { 345, 182 },  { 45, 200 }, { 45, 201 }, { 45, 202 }, { 45, 220 }, { 45, 221 }, { 45, 222 }, { 345, 201 }, { 345, 202 }, { 345, 221 }, { 345, 222 }, { 345, 211 }, { 345, 212 }, { 345, 231 }, { 345, 232 },  { 45, 250 }, { 45, 270 }, { 345, 250 }, { 345, 260 }, { 345, 270 }, { 345, 280 },  { 45, 300 }, { 45, 320 }, { 345, 300 }, { 345, 310 }, { 345, 320 }, { 345, 330 },  { 45, 500 }, { 45, 501 }, { 45, 502 }, { 45, 520 }, { 45, 521 }, { 45, 522 }, { 345, 501 }, { 345, 502 }, { 345, 521 }, { 345, 522 }, { 345, 511 }, { 345, 512 }, { 345, 531 }, { 345, 532 },  { 45, 550 }, { 45, 551 }, { 45, 552 }, { 45, 570 }, { 45, 571 }, { 45, 572 }, { 345, 551 }, { 345, 552 }, { 345, 571 }, { 345, 572 }, { 345, 561 }, { 345, 562 }, { 345, 581 }, { 345, 582 },  { 45, 350 }, { 45, 351 }, { 45, 352 }, { 45, 370 }, { 45, 371 }, { 45, 372 }, { 345, 351 }, { 345, 352 }, { 345, 371 }, { 345, 372 }, { 345, 361 }, { 345, 362 }, { 345, 381 }, { 345, 382 }, { 345, 353 }, { 345, 354 }, { 345, 373 }, { 345, 374 },  { 45, 400 }, { 45, 401 }, { 45, 402 }, { 45, 420 }, { 45, 421 }, { 45, 422 }, { 345, 401 },  { 345, 402 },  { 345, 421 },  { 345, 422 },  { 345, 411 },  { 345, 412 },  { 345, 431 },  { 345, 432 },  { 45, 950 }, { 45, 960 }, { 345, 950 }, { 345, 960 }, { 345, 955 }, { 345, 965 },  { 45, 800 }, { 45, 810 }, { 345, 800 }, { 345, 810 }, { 345, 805 }, { 345, 815 },  { 45, 920 }, { 45, 930 }, { 345, 920 }, { 345, 930 }, { 345, 925 }, { 345, 935 },  { 45, 970 }, { 45, 980 }, { 345, 970 }, { 345, 980 }, { 345, 975 }, { 345, 985 },   { 45, 70 }, { 345, 70 }, { 345, 75 },  { 45, 50 }, { 345, 55 },  { 45, 40 },  { 345, 45 }, { 345, 40 },  { 45, 80 }, { 345, 85 }, { 345, 80 },  { 45, 60 }, { 345, 65 },  });




 NOUSEM16 = assign({              { 46, 150 }, { 46, 151 }, { 46, 152 }, { 46, 170 }, { 46, 171 }, { 46, 172 }, { 346, 151 }, { 346, 152 }, { 346, 171 }, { 346, 172 }, { 346, 161 }, { 346, 162 }, { 346, 181 }, { 346, 182 },  { 46, 200 }, { 46, 201 }, { 46, 202 }, { 46, 220 }, { 46, 221 }, { 46, 222 }, { 346, 201 }, { 346, 202 }, { 346, 221 }, { 346, 222 }, { 346, 211 }, { 346, 212 }, { 346, 231 }, { 346, 232 },  { 46, 250 }, { 46, 270 }, { 346, 250 }, { 346, 260 }, { 346, 270 }, { 346, 280 },  { 46, 300 }, { 46, 320 }, { 346, 300 }, { 346, 310 }, { 346, 320 }, { 346, 330 },  { 46, 500 }, { 46, 501 }, { 46, 502 }, { 46, 520 }, { 46, 521 }, { 46, 522 }, { 346, 501 }, { 346, 502 }, { 346, 521 }, { 346, 522 }, { 346, 511 }, { 346, 512 }, { 346, 531 }, { 346, 532 },  { 46, 550 }, { 46, 551 }, { 46, 552 }, { 46, 570 }, { 46, 571 }, { 46, 572 }, { 346, 551 }, { 346, 552 }, { 346, 571 }, { 346, 572 }, { 346, 561 }, { 346, 562 }, { 346, 581 }, { 346, 582 },  { 46, 350 }, { 46, 351 }, { 46, 352 }, { 46, 370 }, { 46, 371 }, { 46, 372 }, { 346, 351 }, { 346, 352 }, { 346, 371 }, { 346, 372 }, { 346, 361 }, { 346, 362 }, { 346, 381 }, { 346, 382 }, { 346, 353 }, { 346, 354 }, { 346, 373 }, { 346, 374 },  { 46, 400 }, { 46, 401 }, { 46, 402 }, { 46, 420 }, { 46, 421 }, { 46, 422 }, { 346, 401 },  { 346, 402 },  { 346, 421 },  { 346, 422 },  { 346, 411 },  { 346, 412 },  { 346, 431 },  { 346, 432 },  { 46, 950 }, { 46, 960 }, { 346, 950 }, { 346, 960 }, { 346, 955 }, { 346, 965 },  { 46, 800 }, { 46, 810 }, { 346, 800 }, { 346, 810 }, { 346, 805 }, { 346, 815 },  { 46, 920 }, { 46, 930 }, { 346, 920 }, { 346, 930 }, { 346, 925 }, { 346, 935 },  { 46, 970 }, { 46, 980 }, { 346, 970 }, { 346, 980 }, { 346, 975 }, { 346, 985 },  { 46, 90 }, { 346, 90 }, { 346, 95 },   { 46, 50 }, { 346, 55 },  { 46, 40 },  { 346, 45 }, { 346, 40 },  { 46, 80 }, { 346, 85 }, { 346, 80 },  { 46, 60 }, { 346, 65 },  });




 NOUSEM17 = assign({              { 47, 150 }, { 47, 151 }, { 47, 152 }, { 47, 170 }, { 47, 171 }, { 47, 172 }, { 347, 151 }, { 347, 152 }, { 347, 171 }, { 347, 172 }, { 347, 161 }, { 347, 162 }, { 347, 181 }, { 347, 182 },  { 47, 200 }, { 47, 201 }, { 47, 202 }, { 47, 220 }, { 47, 221 }, { 47, 222 }, { 347, 201 }, { 347, 202 }, { 347, 221 }, { 347, 222 }, { 347, 211 }, { 347, 212 }, { 347, 231 }, { 347, 232 },  { 47, 250 }, { 47, 270 }, { 347, 250 }, { 347, 260 }, { 347, 270 }, { 347, 280 },  { 47, 300 }, { 47, 320 }, { 347, 300 }, { 347, 310 }, { 347, 320 }, { 347, 330 },  { 47, 500 }, { 47, 501 }, { 47, 502 }, { 47, 520 }, { 47, 521 }, { 47, 522 }, { 347, 501 }, { 347, 502 }, { 347, 521 }, { 347, 522 }, { 347, 511 }, { 347, 512 }, { 347, 531 }, { 347, 532 },  { 47, 550 }, { 47, 551 }, { 47, 552 }, { 47, 570 }, { 47, 571 }, { 47, 572 }, { 347, 551 }, { 347, 552 }, { 347, 571 }, { 347, 572 }, { 347, 561 }, { 347, 562 }, { 347, 581 }, { 347, 582 },  { 47, 350 }, { 47, 351 }, { 47, 352 }, { 47, 370 }, { 47, 371 }, { 47, 372 }, { 347, 351 }, { 347, 352 }, { 347, 371 }, { 347, 372 }, { 347, 361 }, { 347, 362 }, { 347, 381 }, { 347, 382 }, { 347, 353 }, { 347, 354 }, { 347, 373 }, { 347, 374 },  { 47, 400 }, { 47, 401 }, { 47, 402 }, { 47, 420 }, { 47, 421 }, { 47, 422 }, { 347, 401 },  { 347, 402 },  { 347, 421 },  { 347, 422 },  { 347, 411 },  { 347, 412 },  { 347, 431 },  { 347, 432 },  { 47, 950 }, { 47, 960 }, { 347, 950 }, { 347, 960 }, { 347, 955 }, { 347, 965 },  { 47, 800 }, { 47, 810 }, { 347, 800 }, { 347, 810 }, { 347, 805 }, { 347, 815 },  { 47, 920 }, { 47, 930 }, { 347, 920 }, { 347, 930 }, { 347, 925 }, { 347, 935 },  { 47, 970 }, { 47, 980 }, { 347, 970 }, { 347, 980 }, { 347, 975 }, { 347, 985 },  { 47, 90 }, { 347, 90 }, { 347, 95 },   { 47, 50 }, { 347, 55 },  { 47, 40 },  { 347, 45 }, { 347, 40 },  { 47, 80 }, { 347, 85 }, { 347, 80 },  { 47, 60 }, { 347, 65 },  });




 NOUSEM18 = assign({              { 48, 150 }, { 48, 151 }, { 48, 152 }, { 48, 170 }, { 48, 171 }, { 48, 172 }, { 348, 151 }, { 348, 152 }, { 348, 171 }, { 348, 172 }, { 348, 161 }, { 348, 162 }, { 348, 181 }, { 348, 182 },  { 48, 200 }, { 48, 201 }, { 48, 202 }, { 48, 220 }, { 48, 221 }, { 48, 222 }, { 348, 201 }, { 348, 202 }, { 348, 221 }, { 348, 222 }, { 348, 211 }, { 348, 212 }, { 348, 231 }, { 348, 232 },  { 48, 250 }, { 48, 270 }, { 348, 250 }, { 348, 260 }, { 348, 270 }, { 348, 280 },  { 48, 300 }, { 48, 320 }, { 348, 300 }, { 348, 310 }, { 348, 320 }, { 348, 330 },  { 48, 500 }, { 48, 501 }, { 48, 502 }, { 48, 520 }, { 48, 521 }, { 48, 522 }, { 348, 501 }, { 348, 502 }, { 348, 521 }, { 348, 522 }, { 348, 511 }, { 348, 512 }, { 348, 531 }, { 348, 532 },  { 48, 550 }, { 48, 551 }, { 48, 552 }, { 48, 570 }, { 48, 571 }, { 48, 572 }, { 348, 551 }, { 348, 552 }, { 348, 571 }, { 348, 572 }, { 348, 561 }, { 348, 562 }, { 348, 581 }, { 348, 582 },  { 48, 350 }, { 48, 351 }, { 48, 352 }, { 48, 370 }, { 48, 371 }, { 48, 372 }, { 348, 351 }, { 348, 352 }, { 348, 371 }, { 348, 372 }, { 348, 361 }, { 348, 362 }, { 348, 381 }, { 348, 382 }, { 348, 353 }, { 348, 354 }, { 348, 373 }, { 348, 374 },  { 48, 400 }, { 48, 401 }, { 48, 402 }, { 48, 420 }, { 48, 421 }, { 48, 422 }, { 348, 401 },  { 348, 402 },  { 348, 421 },  { 348, 422 },  { 348, 411 },  { 348, 412 },  { 348, 431 },  { 348, 432 },  { 48, 950 }, { 48, 960 }, { 348, 950 }, { 348, 960 }, { 348, 955 }, { 348, 965 },  { 48, 800 }, { 48, 810 }, { 348, 800 }, { 348, 810 }, { 348, 805 }, { 348, 815 },  { 48, 920 }, { 48, 930 }, { 348, 920 }, { 348, 930 }, { 348, 925 }, { 348, 935 },  { 48, 970 }, { 48, 980 }, { 348, 970 }, { 348, 980 }, { 348, 975 }, { 348, 985 },  { 48, 90 }, { 348, 90 }, { 348, 95 },  { 48, 70 }, { 348, 70 }, { 348, 75 },  { 48, 50 }, { 348, 55 },  { 48, 40 },  { 348, 45 }, { 348, 40 },   { 48, 60 }, { 348, 65 },  });




 NOUSEM19 = assign({              { 49, 150 }, { 49, 151 }, { 49, 152 }, { 49, 170 }, { 49, 171 }, { 49, 172 }, { 349, 151 }, { 349, 152 }, { 349, 171 }, { 349, 172 }, { 349, 161 }, { 349, 162 }, { 349, 181 }, { 349, 182 },  { 49, 200 }, { 49, 201 }, { 49, 202 }, { 49, 220 }, { 49, 221 }, { 49, 222 }, { 349, 201 }, { 349, 202 }, { 349, 221 }, { 349, 222 }, { 349, 211 }, { 349, 212 }, { 349, 231 }, { 349, 232 },  { 49, 250 }, { 49, 270 }, { 349, 250 }, { 349, 260 }, { 349, 270 }, { 349, 280 },  { 49, 300 }, { 49, 320 }, { 349, 300 }, { 349, 310 }, { 349, 320 }, { 349, 330 },  { 49, 500 }, { 49, 501 }, { 49, 502 }, { 49, 520 }, { 49, 521 }, { 49, 522 }, { 349, 501 }, { 349, 502 }, { 349, 521 }, { 349, 522 }, { 349, 511 }, { 349, 512 }, { 349, 531 }, { 349, 532 },  { 49, 550 }, { 49, 551 }, { 49, 552 }, { 49, 570 }, { 49, 571 }, { 49, 572 }, { 349, 551 }, { 349, 552 }, { 349, 571 }, { 349, 572 }, { 349, 561 }, { 349, 562 }, { 349, 581 }, { 349, 582 },  { 49, 350 }, { 49, 351 }, { 49, 352 }, { 49, 370 }, { 49, 371 }, { 49, 372 }, { 349, 351 }, { 349, 352 }, { 349, 371 }, { 349, 372 }, { 349, 361 }, { 349, 362 }, { 349, 381 }, { 349, 382 }, { 349, 353 }, { 349, 354 }, { 349, 373 }, { 349, 374 },  { 49, 400 }, { 49, 401 }, { 49, 402 }, { 49, 420 }, { 49, 421 }, { 49, 422 }, { 349, 401 },  { 349, 402 },  { 349, 421 },  { 349, 422 },  { 349, 411 },  { 349, 412 },  { 349, 431 },  { 349, 432 },  { 49, 950 }, { 49, 960 }, { 349, 950 }, { 349, 960 }, { 349, 955 }, { 349, 965 },  { 49, 800 }, { 49, 810 }, { 349, 800 }, { 349, 810 }, { 349, 805 }, { 349, 815 },  { 49, 920 }, { 49, 930 }, { 349, 920 }, { 349, 930 }, { 349, 925 }, { 349, 935 },  { 49, 970 }, { 49, 980 }, { 349, 970 }, { 349, 980 }, { 349, 975 }, { 349, 985 },  { 49, 90 }, { 349, 90 }, { 349, 95 },  { 49, 70 }, { 349, 70 }, { 349, 75 },  { 49, 50 }, { 349, 55 },  { 49, 40 },  { 349, 45 }, { 349, 40 },   { 49, 60 }, { 349, 65 },  });





VIA0 = assign({ { 50, 200 } });

DVIA0_O = assign({ { 350, 200 } }, layer_intent = { LAYER_INTENT_FILL });


VIA1  = assign({ { 51, 200 } });
DVIA1_O = assign({ { 351, 200 } }, layer_intent = { LAYER_INTENT_FILL });


VIA2 = assign({ { 52, 250 } });
DVIA2_O = assign({ { 352, 250 } }, layer_intent = { LAYER_INTENT_FILL });


VIA3 = assign({ { 53, 300 } });
VIA3_CA = assign({ { 53, 301 } });
VIA3_CB = assign({ { 53, 302 } });
DVIA3_O_CA = assign({ { 353, 301 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA3_O_CB = assign({ { 353, 302 } }, layer_intent = { LAYER_INTENT_FILL });
VIA3_CA_HINT = assign({ { 53, 131 } });
VIA3_CB_HINT = assign({ { 53, 132 } });
VIA3_DA = assign({ { 53, 321 } });
VIA3_DB = assign({ { 53, 322 } });


VIA4 = assign({ { 54, 350 } });
VIA4_CA = assign({ { 54, 351 } });
VIA4_CB = assign({ { 54, 352 } });
DVIA4_O_CA = assign({ { 354, 351 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA4_O_CB = assign({ { 354, 352 } }, layer_intent = { LAYER_INTENT_FILL });
VIA4_DA = assign({ { 54, 371 } });
VIA4_DB = assign({ { 54, 372 } });


VIA5 = assign({ { 55, 950 } });
DVIA5 = assign({ { 355, 955 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA5_O = assign({ { 355, 950 } }, layer_intent = { LAYER_INTENT_FILL });


VIA6 = assign({ { 56, 800 } });
DVIA6 = assign({ { 356, 805 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA6_O = assign({ { 356, 800 } }, layer_intent = { LAYER_INTENT_FILL });


VIA7 = assign({ { 57, 970 } });
DVIA7 = assign({ { 357, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA7_O = assign({ { 357, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA8 = assign({ { 58, 970 } });
DVIA8 = assign({ { 358, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA8_O = assign({ { 358, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA9 = assign({ { 59, 970 } });
DVIA9 = assign({ { 359, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA9_O = assign({ { 359, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA10 = assign({ { 60, 970 } });
DVIA10 = assign({ { 360, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA10_O = assign({ { 360, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA11 = assign({ { 61, 970 } });
DVIA11 = assign({ { 361, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA11_O = assign({ { 361, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA12 = assign({ { 62, 970 } });
DVIA12 = assign({ { 362, 975 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA12_O = assign({ { 362, 970 } }, layer_intent = { LAYER_INTENT_FILL });


VIA13 = assign({ { 63, 90 } });
DVIA13 = assign({ { 363, 95 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA13_O = assign({ { 363, 90 } }, layer_intent = { LAYER_INTENT_FILL });


VIA14 = assign({ { 64, 90 } });
DVIA14 = assign({ { 364, 95 } }, layer_intent = { LAYER_INTENT_FILL });
DVIA14_O = assign({ { 364, 90 } }, layer_intent = { LAYER_INTENT_FILL });


VIA15 = assign({ { 65, 70 } });
DVIA15 = assign({ { 365, 75 } }, layer_intent = { LAYER_INTENT_FILL });


VIA16 = assign({ { 66, 70 } });
DVIA16 = assign({ { 366, 75 } }, layer_intent = { LAYER_INTENT_FILL });


VIA17 = assign({ { 67, 80 } });


VIA18 = assign({ { 68, 80 } });



 NOUSEV1 = assign({  { 51, 150 }, { 51, 171 }, { 51, 172 }, { 351, 151 }, { 351, 152 }, { 51, 101 }, { 51, 102 },   { 51, 250 }, { 351, 250 },  { 51, 300 }, { 51, 301 }, { 51, 302 }, { 51, 321 }, { 51, 322 }, { 351, 301 }, { 351, 302 }, { 51, 131 }, { 51, 132 },  { 51, 500 }, { 351, 500 },  { 51, 550 }, { 51, 551 }, { 51, 552 }, { 51, 571 }, { 51, 572 }, { 351, 551 }, { 351, 552 },  { 51, 350 }, { 51, 351 }, { 51, 352 }, { 51, 371 }, { 51, 372 }, { 351, 351 }, { 351, 352 },  { 51, 400 }, { 351, 400 },  { 51, 950 }, { 351, 955 }, { 351, 950 },  { 51, 800 }, { 351, 805 }, { 351, 800 },  { 51, 920 }, { 351, 925 },  { 51, 970 }, { 351, 975 }, { 351, 970 },  { 51, 90 }, { 351, 95 }, { 351, 90 },  { 51, 70 }, { 351, 75 },  { 51, 50 },  { 51, 40 }, { 351, 45 },  { 51, 80 },  { 51, 60 },  });



 NOUSEV2 = assign({  { 52, 150 }, { 52, 171 }, { 52, 172 }, { 352, 151 }, { 352, 152 }, { 52, 101 }, { 52, 102 },  { 52, 200 }, { 352, 200 },   { 52, 300 }, { 52, 301 }, { 52, 302 }, { 52, 321 }, { 52, 322 }, { 352, 301 }, { 352, 302 }, { 52, 131 }, { 52, 132 },  { 52, 500 }, { 352, 500 },  { 52, 550 }, { 52, 551 }, { 52, 552 }, { 52, 571 }, { 52, 572 }, { 352, 551 }, { 352, 552 },  { 52, 350 }, { 52, 351 }, { 52, 352 }, { 52, 371 }, { 52, 372 }, { 352, 351 }, { 352, 352 },  { 52, 400 }, { 352, 400 },  { 52, 950 }, { 352, 955 }, { 352, 950 },  { 52, 800 }, { 352, 805 }, { 352, 800 },  { 52, 920 }, { 352, 925 },  { 52, 970 }, { 352, 975 }, { 352, 970 },  { 52, 90 }, { 352, 95 }, { 352, 90 },  { 52, 70 }, { 352, 75 },  { 52, 50 },  { 52, 40 }, { 352, 45 },  { 52, 80 },  { 52, 60 },  });



 NOUSEV3 = assign({  { 53, 150 }, { 53, 171 }, { 53, 172 }, { 353, 151 }, { 353, 152 }, { 53, 101 }, { 53, 102 },  { 53, 200 }, { 353, 200 },  { 53, 250 }, { 353, 250 },   { 53, 500 }, { 353, 500 },  { 53, 550 }, { 53, 551 }, { 53, 552 }, { 53, 571 }, { 53, 572 }, { 353, 551 }, { 353, 552 },  { 53, 350 }, { 53, 351 }, { 53, 352 }, { 53, 371 }, { 53, 372 }, { 353, 351 }, { 353, 352 },  { 53, 400 }, { 353, 400 },  { 53, 950 }, { 353, 955 }, { 353, 950 },  { 53, 800 }, { 353, 805 }, { 353, 800 },  { 53, 920 }, { 353, 925 },  { 53, 970 }, { 353, 975 }, { 353, 970 },  { 53, 90 }, { 353, 95 }, { 353, 90 },  { 53, 70 }, { 353, 75 },  { 53, 50 },  { 53, 40 }, { 353, 45 },  { 53, 80 },  { 53, 60 },  });



 NOUSEV4 = assign({  { 54, 150 }, { 54, 171 }, { 54, 172 }, { 354, 151 }, { 354, 152 }, { 54, 101 }, { 54, 102 },  { 54, 200 }, { 354, 200 },  { 54, 250 }, { 354, 250 },  { 54, 300 }, { 54, 301 }, { 54, 302 }, { 54, 321 }, { 54, 322 }, { 354, 301 }, { 354, 302 }, { 54, 131 }, { 54, 132 },  { 54, 500 }, { 354, 500 },  { 54, 550 }, { 54, 551 }, { 54, 552 }, { 54, 571 }, { 54, 572 }, { 354, 551 }, { 354, 552 },   { 54, 400 }, { 354, 400 },  { 54, 950 }, { 354, 955 }, { 354, 950 },  { 54, 800 }, { 354, 805 }, { 354, 800 },  { 54, 920 }, { 354, 925 },  { 54, 970 }, { 354, 975 }, { 354, 970 },  { 54, 90 }, { 354, 95 }, { 354, 90 },  { 54, 70 }, { 354, 75 },  { 54, 50 },  { 54, 40 }, { 354, 45 },  { 54, 80 },  { 54, 60 },  });



 NOUSEV5 = assign({  { 55, 150 }, { 55, 171 }, { 55, 172 }, { 355, 151 }, { 355, 152 }, { 55, 101 }, { 55, 102 },  { 55, 200 }, { 355, 200 },  { 55, 250 }, { 355, 250 },  { 55, 300 }, { 55, 301 }, { 55, 302 }, { 55, 321 }, { 55, 322 }, { 355, 301 }, { 355, 302 }, { 55, 131 }, { 55, 132 },  { 55, 500 }, { 355, 500 },  { 55, 550 }, { 55, 551 }, { 55, 552 }, { 55, 571 }, { 55, 572 }, { 355, 551 }, { 355, 552 },  { 55, 350 }, { 55, 351 }, { 55, 352 }, { 55, 371 }, { 55, 372 }, { 355, 351 }, { 355, 352 },  { 55, 400 }, { 355, 400 },   { 55, 800 }, { 355, 805 }, { 355, 800 },  { 55, 920 }, { 355, 925 },  { 55, 970 }, { 355, 975 }, { 355, 970 },  { 55, 90 }, { 355, 95 }, { 355, 90 },  { 55, 70 }, { 355, 75 },  { 55, 50 },  { 55, 40 }, { 355, 45 },  { 55, 80 },  { 55, 60 },  });



 NOUSEV6 = assign({  { 56, 150 }, { 56, 171 }, { 56, 172 }, { 356, 151 }, { 356, 152 }, { 56, 101 }, { 56, 102 },  { 56, 200 }, { 356, 200 },  { 56, 250 }, { 356, 250 },  { 56, 300 }, { 56, 301 }, { 56, 302 }, { 56, 321 }, { 56, 322 }, { 356, 301 }, { 356, 302 }, { 56, 131 }, { 56, 132 },  { 56, 500 }, { 356, 500 },  { 56, 550 }, { 56, 551 }, { 56, 552 }, { 56, 571 }, { 56, 572 }, { 356, 551 }, { 356, 552 },  { 56, 350 }, { 56, 351 }, { 56, 352 }, { 56, 371 }, { 56, 372 }, { 356, 351 }, { 356, 352 },  { 56, 400 }, { 356, 400 },  { 56, 950 }, { 356, 955 }, { 356, 950 },   { 56, 920 }, { 356, 925 },  { 56, 970 }, { 356, 975 }, { 356, 970 },  { 56, 90 }, { 356, 95 }, { 356, 90 },  { 56, 70 }, { 356, 75 },  { 56, 50 },  { 56, 40 }, { 356, 45 },  { 56, 80 },  { 56, 60 },  });



 NOUSEV7 = assign({  { 57, 150 }, { 57, 171 }, { 57, 172 }, { 357, 151 }, { 357, 152 }, { 57, 101 }, { 57, 102 },  { 57, 200 }, { 357, 200 },  { 57, 250 }, { 357, 250 },  { 57, 300 }, { 57, 301 }, { 57, 302 }, { 57, 321 }, { 57, 322 }, { 357, 301 }, { 357, 302 }, { 57, 131 }, { 57, 132 },  { 57, 500 }, { 357, 500 },  { 57, 550 }, { 57, 551 }, { 57, 552 }, { 57, 571 }, { 57, 572 }, { 357, 551 }, { 357, 552 },  { 57, 350 }, { 57, 351 }, { 57, 352 }, { 57, 371 }, { 57, 372 }, { 357, 351 }, { 357, 352 },  { 57, 400 }, { 357, 400 },  { 57, 950 }, { 357, 955 }, { 357, 950 },  { 57, 800 }, { 357, 805 }, { 357, 800 },  { 57, 920 }, { 357, 925 },   { 57, 90 }, { 357, 95 }, { 357, 90 },  { 57, 70 }, { 357, 75 },  { 57, 50 },  { 57, 40 }, { 357, 45 },  { 57, 80 },  { 57, 60 },  });



 NOUSEV8 = assign({  { 58, 150 }, { 58, 171 }, { 58, 172 }, { 358, 151 }, { 358, 152 }, { 58, 101 }, { 58, 102 },  { 58, 200 }, { 358, 200 },  { 58, 250 }, { 358, 250 },  { 58, 300 }, { 58, 301 }, { 58, 302 }, { 58, 321 }, { 58, 322 }, { 358, 301 }, { 358, 302 }, { 58, 131 }, { 58, 132 },  { 58, 500 }, { 358, 500 },  { 58, 550 }, { 58, 551 }, { 58, 552 }, { 58, 571 }, { 58, 572 }, { 358, 551 }, { 358, 552 },  { 58, 350 }, { 58, 351 }, { 58, 352 }, { 58, 371 }, { 58, 372 }, { 358, 351 }, { 358, 352 },  { 58, 400 }, { 358, 400 },  { 58, 950 }, { 358, 955 }, { 358, 950 },  { 58, 800 }, { 358, 805 }, { 358, 800 },  { 58, 920 }, { 358, 925 },   { 58, 90 }, { 358, 95 }, { 358, 90 },  { 58, 70 }, { 358, 75 },  { 58, 50 },  { 58, 40 }, { 358, 45 },  { 58, 80 },  { 58, 60 },  });



 NOUSEV9 = assign({  { 59, 150 }, { 59, 171 }, { 59, 172 }, { 359, 151 }, { 359, 152 }, { 59, 101 }, { 59, 102 },  { 59, 200 }, { 359, 200 },  { 59, 250 }, { 359, 250 },  { 59, 300 }, { 59, 301 }, { 59, 302 }, { 59, 321 }, { 59, 322 }, { 359, 301 }, { 359, 302 }, { 59, 131 }, { 59, 132 },  { 59, 500 }, { 359, 500 },  { 59, 550 }, { 59, 551 }, { 59, 552 }, { 59, 571 }, { 59, 572 }, { 359, 551 }, { 359, 552 },  { 59, 350 }, { 59, 351 }, { 59, 352 }, { 59, 371 }, { 59, 372 }, { 359, 351 }, { 359, 352 },  { 59, 400 }, { 359, 400 },  { 59, 950 }, { 359, 955 }, { 359, 950 },  { 59, 800 }, { 359, 805 }, { 359, 800 },  { 59, 920 }, { 359, 925 },   { 59, 90 }, { 359, 95 }, { 359, 90 },  { 59, 70 }, { 359, 75 },  { 59, 50 },  { 59, 40 }, { 359, 45 },  { 59, 80 },  { 59, 60 },  });



 NOUSEV10 = assign({  { 60, 150 }, { 60, 171 }, { 60, 172 }, { 360, 151 }, { 360, 152 }, { 60, 101 }, { 60, 102 },  { 60, 200 }, { 360, 200 },  { 60, 250 }, { 360, 250 },  { 60, 300 }, { 60, 301 }, { 60, 302 }, { 60, 321 }, { 60, 322 }, { 360, 301 }, { 360, 302 }, { 60, 131 }, { 60, 132 },  { 60, 500 }, { 360, 500 },  { 60, 550 }, { 60, 551 }, { 60, 552 }, { 60, 571 }, { 60, 572 }, { 360, 551 }, { 360, 552 },  { 60, 350 }, { 60, 351 }, { 60, 352 }, { 60, 371 }, { 60, 372 }, { 360, 351 }, { 360, 352 },  { 60, 400 }, { 360, 400 },  { 60, 950 }, { 360, 955 }, { 360, 950 },  { 60, 800 }, { 360, 805 }, { 360, 800 },  { 60, 920 }, { 360, 925 },   { 60, 90 }, { 360, 95 }, { 360, 90 },  { 60, 70 }, { 360, 75 },  { 60, 50 },  { 60, 40 }, { 360, 45 },  { 60, 80 },  { 60, 60 },  });



 NOUSEV11 = assign({  { 61, 150 }, { 61, 171 }, { 61, 172 }, { 361, 151 }, { 361, 152 }, { 61, 101 }, { 61, 102 },  { 61, 200 }, { 361, 200 },  { 61, 250 }, { 361, 250 },  { 61, 300 }, { 61, 301 }, { 61, 302 }, { 61, 321 }, { 61, 322 }, { 361, 301 }, { 361, 302 }, { 61, 131 }, { 61, 132 },  { 61, 500 }, { 361, 500 },  { 61, 550 }, { 61, 551 }, { 61, 552 }, { 61, 571 }, { 61, 572 }, { 361, 551 }, { 361, 552 },  { 61, 350 }, { 61, 351 }, { 61, 352 }, { 61, 371 }, { 61, 372 }, { 361, 351 }, { 361, 352 },  { 61, 400 }, { 361, 400 },  { 61, 950 }, { 361, 955 }, { 361, 950 },  { 61, 800 }, { 361, 805 }, { 361, 800 },  { 61, 920 }, { 361, 925 },   { 61, 90 }, { 361, 95 }, { 361, 90 },  { 61, 70 }, { 361, 75 },  { 61, 50 },  { 61, 40 }, { 361, 45 },  { 61, 80 },  { 61, 60 },  });



 NOUSEV12 = assign({  { 62, 150 }, { 62, 171 }, { 62, 172 }, { 362, 151 }, { 362, 152 }, { 62, 101 }, { 62, 102 },  { 62, 200 }, { 362, 200 },  { 62, 250 }, { 362, 250 },  { 62, 300 }, { 62, 301 }, { 62, 302 }, { 62, 321 }, { 62, 322 }, { 362, 301 }, { 362, 302 }, { 62, 131 }, { 62, 132 },  { 62, 500 }, { 362, 500 },  { 62, 550 }, { 62, 551 }, { 62, 552 }, { 62, 571 }, { 62, 572 }, { 362, 551 }, { 362, 552 },  { 62, 350 }, { 62, 351 }, { 62, 352 }, { 62, 371 }, { 62, 372 }, { 362, 351 }, { 362, 352 },  { 62, 400 }, { 362, 400 },  { 62, 950 }, { 362, 955 }, { 362, 950 },  { 62, 800 }, { 362, 805 }, { 362, 800 },  { 62, 920 }, { 362, 925 },   { 62, 90 }, { 362, 95 }, { 362, 90 },  { 62, 70 }, { 362, 75 },  { 62, 50 },  { 62, 40 }, { 362, 45 },  { 62, 80 },  { 62, 60 },  });



 NOUSEV13 = assign({  { 63, 150 }, { 63, 171 }, { 63, 172 }, { 363, 151 }, { 363, 152 }, { 63, 101 }, { 63, 102 },  { 63, 200 }, { 363, 200 },  { 63, 250 }, { 363, 250 },  { 63, 300 }, { 63, 301 }, { 63, 302 }, { 63, 321 }, { 63, 322 }, { 363, 301 }, { 363, 302 }, { 63, 131 }, { 63, 132 },  { 63, 500 }, { 363, 500 },  { 63, 550 }, { 63, 551 }, { 63, 552 }, { 63, 571 }, { 63, 572 }, { 363, 551 }, { 363, 552 },  { 63, 350 }, { 63, 351 }, { 63, 352 }, { 63, 371 }, { 63, 372 }, { 363, 351 }, { 363, 352 },  { 63, 400 }, { 363, 400 },  { 63, 950 }, { 363, 955 }, { 363, 950 },  { 63, 800 }, { 363, 805 }, { 363, 800 },  { 63, 920 }, { 363, 925 },  { 63, 970 }, { 363, 975 }, { 363, 970 },   { 63, 70 }, { 363, 75 },  { 63, 50 },  { 63, 40 }, { 363, 45 },  { 63, 80 },  { 63, 60 },  });



 NOUSEV14 = assign({  { 64, 150 }, { 64, 171 }, { 64, 172 }, { 364, 151 }, { 364, 152 }, { 64, 101 }, { 64, 102 },  { 64, 200 }, { 364, 200 },  { 64, 250 }, { 364, 250 },  { 64, 300 }, { 64, 301 }, { 64, 302 }, { 64, 321 }, { 64, 322 }, { 364, 301 }, { 364, 302 }, { 64, 131 }, { 64, 132 },  { 64, 500 }, { 364, 500 },  { 64, 550 }, { 64, 551 }, { 64, 552 }, { 64, 571 }, { 64, 572 }, { 364, 551 }, { 364, 552 },  { 64, 350 }, { 64, 351 }, { 64, 352 }, { 64, 371 }, { 64, 372 }, { 364, 351 }, { 364, 352 },  { 64, 400 }, { 364, 400 },  { 64, 950 }, { 364, 955 }, { 364, 950 },  { 64, 800 }, { 364, 805 }, { 364, 800 },  { 64, 920 }, { 364, 925 },  { 64, 970 }, { 364, 975 }, { 364, 970 },   { 64, 70 }, { 364, 75 },  { 64, 50 },  { 64, 40 }, { 364, 45 },  { 64, 80 },  { 64, 60 },  });



 NOUSEV15 = assign({  { 65, 150 }, { 65, 171 }, { 65, 172 }, { 365, 151 }, { 365, 152 }, { 65, 101 }, { 65, 102 },  { 65, 200 }, { 365, 200 },  { 65, 250 }, { 365, 250 },  { 65, 300 }, { 65, 301 }, { 65, 302 }, { 65, 321 }, { 65, 322 }, { 365, 301 }, { 365, 302 }, { 65, 131 }, { 65, 132 },  { 65, 500 }, { 365, 500 },  { 65, 550 }, { 65, 551 }, { 65, 552 }, { 65, 571 }, { 65, 572 }, { 365, 551 }, { 365, 552 },  { 65, 350 }, { 65, 351 }, { 65, 352 }, { 65, 371 }, { 65, 372 }, { 365, 351 }, { 365, 352 },  { 65, 400 }, { 365, 400 },  { 65, 950 }, { 365, 955 }, { 365, 950 },  { 65, 800 }, { 365, 805 }, { 365, 800 },  { 65, 920 }, { 365, 925 },  { 65, 970 }, { 365, 975 }, { 365, 970 },  { 65, 90 }, { 365, 95 }, { 365, 90 },   { 65, 50 },  { 65, 40 }, { 365, 45 },  { 65, 80 },  { 65, 60 },  });



 NOUSEV16 = assign({  { 66, 150 }, { 66, 171 }, { 66, 172 }, { 366, 151 }, { 366, 152 }, { 66, 101 }, { 66, 102 },  { 66, 200 }, { 366, 200 },  { 66, 250 }, { 366, 250 },  { 66, 300 }, { 66, 301 }, { 66, 302 }, { 66, 321 }, { 66, 322 }, { 366, 301 }, { 366, 302 }, { 66, 131 }, { 66, 132 },  { 66, 500 }, { 366, 500 },  { 66, 550 }, { 66, 551 }, { 66, 552 }, { 66, 571 }, { 66, 572 }, { 366, 551 }, { 366, 552 },  { 66, 350 }, { 66, 351 }, { 66, 352 }, { 66, 371 }, { 66, 372 }, { 366, 351 }, { 366, 352 },  { 66, 400 }, { 366, 400 },  { 66, 950 }, { 366, 955 }, { 366, 950 },  { 66, 800 }, { 366, 805 }, { 366, 800 },  { 66, 920 }, { 366, 925 },  { 66, 970 }, { 366, 975 }, { 366, 970 },  { 66, 90 }, { 366, 95 }, { 366, 90 },   { 66, 50 },  { 66, 40 }, { 366, 45 },  { 66, 80 },  { 66, 60 },  });



 NOUSEV17 = assign({  { 67, 150 }, { 67, 171 }, { 67, 172 }, { 367, 151 }, { 367, 152 }, { 67, 101 }, { 67, 102 },  { 67, 200 }, { 367, 200 },  { 67, 250 }, { 367, 250 },  { 67, 300 }, { 67, 301 }, { 67, 302 }, { 67, 321 }, { 67, 322 }, { 367, 301 }, { 367, 302 }, { 67, 131 }, { 67, 132 },  { 67, 500 }, { 367, 500 },  { 67, 550 }, { 67, 551 }, { 67, 552 }, { 67, 571 }, { 67, 572 }, { 367, 551 }, { 367, 552 },  { 67, 350 }, { 67, 351 }, { 67, 352 }, { 67, 371 }, { 67, 372 }, { 367, 351 }, { 367, 352 },  { 67, 400 }, { 367, 400 },  { 67, 950 }, { 367, 955 }, { 367, 950 },  { 67, 800 }, { 367, 805 }, { 367, 800 },  { 67, 920 }, { 367, 925 },  { 67, 970 }, { 367, 975 }, { 367, 970 },  { 67, 90 }, { 367, 95 }, { 367, 90 },  { 67, 70 }, { 367, 75 },  { 67, 50 },  { 67, 40 }, { 367, 45 },   { 67, 60 },  });



 NOUSEV18 = assign({  { 68, 150 }, { 68, 171 }, { 68, 172 }, { 368, 151 }, { 368, 152 }, { 68, 101 }, { 68, 102 },  { 68, 200 }, { 368, 200 },  { 68, 250 }, { 368, 250 },  { 68, 300 }, { 68, 301 }, { 68, 302 }, { 68, 321 }, { 68, 322 }, { 368, 301 }, { 368, 302 }, { 68, 131 }, { 68, 132 },  { 68, 500 }, { 368, 500 },  { 68, 550 }, { 68, 551 }, { 68, 552 }, { 68, 571 }, { 68, 572 }, { 368, 551 }, { 368, 552 },  { 68, 350 }, { 68, 351 }, { 68, 352 }, { 68, 371 }, { 68, 372 }, { 368, 351 }, { 368, 352 },  { 68, 400 }, { 368, 400 },  { 68, 950 }, { 368, 955 }, { 368, 950 },  { 68, 800 }, { 368, 805 }, { 368, 800 },  { 68, 920 }, { 368, 925 },  { 68, 970 }, { 368, 975 }, { 368, 970 },  { 68, 90 }, { 368, 95 }, { 368, 90 },  { 68, 70 }, { 368, 75 },  { 68, 50 },  { 68, 40 }, { 368, 45 },   { 68, 60 },  });




/* M0 must-join pin marker used for must-join checking */
M0_PIN_MRK  = assign({ { 630, 0 } });
/* DRC marker layer to waive MJ_M* violations */
MJ_WAV = assign({ { 630, 1 } });
/* M0 must-join pin marker used for must-join checking */
M0_MJ_PIN_0 = assign({ { 630, 20 } }); 
/* M0 must-join pin marker used for must-join checking */
M0_MJ_PIN_1 = assign({ { 630, 21 } }); 
/* M0 must-join pin marker used for must-join checking */
M0_MJ_PIN_2 = assign({ { 630, 22 } }); 
/* M0 must-join pin marker used for must-join checking */
M0_MJ_PIN_3 = assign({ { 630, 23 } }); 
/* M0 must-join pin marker used for must-join checking */
M0_MJ_PIN_4 = assign({ { 630, 24 } }); 
/* M0 must-join Grp marker used for must-join checking */
M0_MJ_GRP_0 = assign({ { 630, 40 } }); 
/* M0 must-join Grp marker used for must-join checking */
M0_MJ_GRP_1 = assign({ { 630, 41 } }); 
/* M0 must-join Grp marker used for must-join checking */
M0_MJ_GRP_2 = assign({ { 630, 42 } }); 
/* M0 must-join Grp marker used for must-join checking */
M0_MJ_GRP_3 = assign({ { 630, 43 } }); 
/* M0 must-join Grp marker used for must-join checking */
M0_MJ_GRP_4 = assign({ { 630, 44 } }); 


/* M1 must-join pin marker used for must-join checking */
M1_PIN_MRK  = assign({ { 631, 0 } }); 
/* M1 must-join pin marker used for must-join checking */
M1_MJ_PIN_0 = assign({ { 631, 20 } }); 
/* M1 must-join pin marker used for must-join checking */
M1_MJ_PIN_1 = assign({ { 631, 21 } }); 
/* M1 must-join pin marker used for must-join checking */
M1_MJ_PIN_2 = assign({ { 631, 22 } }); 
/* M1 must-join pin marker used for must-join checking */
M1_MJ_PIN_3 = assign({ { 631, 23 } }); 
/* M1 must-join pin marker used for must-join checking */
M1_MJ_PIN_4 = assign({ { 631, 24 } }); 
/* M1 must-join Grp marker used for must-join checking */
M1_MJ_GRP_0 = assign({ { 631, 40 } }); 
/* M1 must-join Grp marker used for must-join checking */
M1_MJ_GRP_1 = assign({ { 631, 41 } }); 
/* M1 must-join Grp marker used for must-join checking */
M1_MJ_GRP_2 = assign({ { 631, 42 } }); 
/* M1 must-join Grp marker used for must-join checking */
M1_MJ_GRP_3 = assign({ { 631, 43 } }); 
/* M1 must-join Grp marker used for must-join checking */
M1_MJ_GRP_4 = assign({ { 631, 44 } }); 

/* M2 must-join pin marker used for must-join checking */
M2_PIN_MRK  = assign({ { 632, 0 } }); 
/* M2 must-join pin marker used for must-join checking */
M2_MJ_PIN_0 = assign({ { 632, 20 } }); 
/* M2 must-join pin marker used for must-join checking */
M2_MJ_PIN_1 = assign({ { 632, 21 } }); 
/* M2 must-join pin marker used for must-join checking */
M2_MJ_PIN_2 = assign({ { 632, 22 } }); 
/* M2 must-join pin marker used for must-join checking */
M2_MJ_PIN_3 = assign({ { 632, 23 } }); 
/* M2 must-join pin marker used for must-join checking */
M2_MJ_PIN_4 = assign({ { 632, 24 } }); 
/* M2 must-join Grp marker used for must-join checking */
M2_MJ_GRP_0 = assign({ { 632, 40 } }); 
/* M2 must-join Grp marker used for must-join checking */
M2_MJ_GRP_1 = assign({ { 632, 41 } }); 
/* M2 must-join Grp marker used for must-join checking */
M2_MJ_GRP_2 = assign({ { 632, 42 } }); 
/* M2 must-join Grp marker used for must-join checking */
M2_MJ_GRP_3 = assign({ { 632, 43 } }); 
/* M2 must-join Grp marker used for must-join checking */
M2_MJ_GRP_4 = assign({ { 632, 44 } }); 

/* ICOVL pattern layers, forbid to use */
NOUSE_ICOVL = assign({ { 165, [80, 309] }, { 165, 321 }, { 165, [500, 514] }, { 165, [870, 879] } }); 



/* Beginning of rule select section */
/* End of rule select section */

FORBID_31_170 = assign({ { 31, 170 } }); // N3 layer, cannot be used in N3E

FORBID_31_171 = assign({ { 31, 171 } }); // N3 layer, cannot be used in N3E

FORBID_31_172 = assign({ { 31, 172 } }); // N3 layer, cannot be used in N3E

FORBID_50_101 = assign({ { 50, 101 } }); // N3 layer, cannot be used in N3E

FORBID_50_102 = assign({ { 50, 102 } }); // N3 layer, cannot be used in N3E

FORBID_50_150 = assign({ { 50, 150 } }); // N3 layer, cannot be used in N3E

FORBID_50_151 = assign({ { 50, 151 } }); // N3 layer, cannot be used in N3E

FORBID_50_152 = assign({ { 50, 152 } }); // N3 layer, cannot be used in N3E

FORBID_50_171 = assign({ { 50, 171 } }); // N3 layer, cannot be used in N3E

FORBID_50_172 = assign({ { 50, 172 } }); // N3 layer, cannot be used in N3E

FORBID_331_171 = assign({ { 331, 171 } }); // N3 layer, cannot be used in N3E

FORBID_331_172 = assign({ { 331, 172 } }); // N3 layer, cannot be used in N3E

FORBID_331_181 = assign({ { 331, 181 } }); // N3 layer, cannot be used in N3E

FORBID_331_182 = assign({ { 331, 182 } }); // N3 layer, cannot be used in N3E

FORBID_350_151 = assign({ { 350, 151 } }); // N3 layer, cannot be used in N3E

FORBID_350_152 = assign({ { 350, 152 } }); // N3 layer, cannot be used in N3E

FORBID_255_125 = assign({ { 255, 125 } }); // N3 layer, cannot be used in N3E

FORBID_255_126 = assign({ { 255, 126 } }); // N3 layer, cannot be used in N3E

FORBID_255_127 = assign({ { 255, 127 } }); // N3 layer, cannot be used in N3E

FORBID_431_170 = assign({ { 431, 170 } }); // N3 layer, cannot be used in N3E

FORBID_431_175 = assign({ { 431, 175 } }); // N3 layer, cannot be used in N3E

FORBID_531_170 = assign({ { 531, 170 } }); // N3 layer, cannot be used in N3E

FORBID_531_175 = assign({ { 531, 175 } }); // N3 layer, cannot be used in N3E




METAL_ABOVE_TOP = assign({ { 550 } });

VIA_ABOVE_TOP = assign({ { 69 } });



CHIPWINDOW = assign({ { 1000 } }); // Pseduo layer to construct chip boundary by user's input coordinate  





#pragma icv insert patch_assigns

/* Added from other EV files */







CHIP_MT = layer_extent_list({
 APBLK, INDDMY_APCHECK, CHIP_BOUNDARY, PRBOUNDARY, TD_CHIP_BOUNDARY, TDSBOUNDARY, ARL_S_F2F, ARL_S_F2F_T1, ARL_S_F2F_T2, ARL_S_F2F_T3, ARL_S_F2F_T4, ARL_S_F2F_T5, ARL_S_F2B, ARL_S_F2B_T1, ARL_S_F2B_T2, ARL_S_F2B_T3, ARL_S_F2B_T4, ARL_S_F2B_T5, ARL_C_TDUB, ARL_I_TDBP, ARL_I_BDBP, ARL_I_TDPM0, ARL_I_INFO3D, ARL_F_TD, ARL_DOW_TDUB, ARL_WOW, ARL_WOW_T1, ARL_WOW_T2, ARL_WOW_T3, ARL_WOW_T4, ARL_WOW_T5, ARL_S_F2F_TF, ARL_S_F2F_T1_FC, ARL_S_F2F_T1_INFO, ARL_S_F2F_T1_DOW, ARL_S_F2F_T1_COWOS, ARL_S_F2F_T1_INFO3D, ARL_S_F2B_TF, ARL_S_F2B_T1_FC, ARL_S_F2B_T1_INFO, ARL_S_F2B_T1_DOW, ARL_S_F2B_T1_COWOS, ARL_S_F2B_T1_INFO3D, ARL_WOW_BD, ARL_WOW_TD_FC, ARL_WOW_TD_INFO, ARL_WOW_TD_DOW, ARL_WOW_TD_COWOS, ARL_WOW_TD_INFO3D, FB_1, FB_2, FB_3, FB_4, FB_5, FB_6, FB_7, FB_8, FB_9, FB_10, FB_11, FB_12, FB_13, FB_14, FB_15, FB_16, FB_17, FB_18, FB_19, FB_26, FB_28, FB_29, FB_31, FB_36, FB_38, FB1_STD, FB_A, FB_B, FB_C, FB_31_A, FB_31_B, FB_31_C, FB_HS, SRM_1R1W, SRM_2R1W, SRM_2R2W, SRM_1R1W_2ROW, SRM_ROM, SRM_12R6W, SRM_4R1W_2W, SRM_2R2W_T2, SRM_1RST2R1W, FB_10_H, FB_10_F, FB_AN, FB_AN_OD, T16_STD, T18_STD, AN_HD, AN_U1, AN_C1, ANA_EXP, AN_HDU1M0_3T, AN_HDU1M0_4T, AN_HDC1M0, AN_HDU3M0, AN_HDC2M0, AN_HDU4M0, BE_3T, BE_4T, AN_HD_V2_18, AN_HD_V1_18, AN_HD_V0_16, AN_HD_V1_16, AN_HD_V2_16, ECO_REGION, ECO_DECAP, ECO_TAP_DMY, ECO_ACT, D130_P45_2FN, D130_P45_2FP, D208_P45_4FN, D208_P45_4FP, D260_P45_2_2FN, D260_P45_2_2FP, D260_P45_6FN, D260_P45_6FP, D260_P45_8FN, D260_P45_8FP, D260_P135_2_2FN, D260_P135_2_2FP, D260_P135_6FN, D260_P135_6FP, D260_P135_8FN, D260_P135_8FP, D280_P135_6FN, D280_P135_6FP, D336_P135_6FN, D336_P135_6FP, D280_P166_6FN, D280_P166_6FP, D336_P166_8FN, D336_P166_8FP, D130_PL_2FN, D130_PL_2FP, D208_PL_4FN, D208_PL_4FP, D260_PL_2_2FN, D260_PL_2_2FP, D260_PL_6FN, D260_PL_6FP, C260_PL_2FN2FP, C260_PL_2FN2FP_G, C520_PL_2FN2FP, C520_PL_2X2FN2FP, C520_PL_6FN6FP, S208_P45_4FN, S208_P45_4FP, C260_P45_2FN2FP, C260_P45_2FN2FP_G, C520_P45_2FN2FP, C520_P45_2X2FN2FP, C520_P45_6FN6FP, C560_P166_6FN6FP, C672_P166_6FN6FP, C672_P166_8FN8FP, CCP_3, CCP_4, CCP_5, CCP_6, CCP_7, CCP_8, CCP_9, CCP_10, CCP_11, CCP_12, CCP_13, CCP_14, CCP_15, CCP_16, CCP_17, CCP_18, CCP_19, CCP_26, CCP_28, CCP_29, CCP_31, CCP_36, CCP_38, STD_FILLER_1, STD_FILLER_4, STD_FILLER, STD_FILLER_H_BOUND, PADDED_DPO, DNW, NW, OD, SR_DOD, OD_SRAM1, OD_20, OD_DA, OD_DN_BLK, FB_BOUNDARY_BLK_H, FB_BOUNDARY_BLK, FB_CORNER_BLK, FB6_1X_BLK, FB_26_1X_BLK, COD_H, COD_V, COD_V2, COD_BLOCK, ODMMB, DCOD_H, DCOD_V, DCOD_V2, DCOD_BLOCK, GCOD_H, GCOD_V, ODMUO, PO, SR_DPO, CPO_SRAM, TPO, CPO, SR_DCPO, BPO, BPO_2, PO_P42, PO_P48, PO_P51, PO_P81, PO_P81_WPO, PO_P57, PO_P54, PA_CORE_MIN, EPI_BLK, PODE_GATE, M2_PG_MARKER, M3_PG_MARKER, M4_PG_MARKER, M5_PG_MARKER, M6_PG_MARKER, M7_PG_MARKER, M8_PG_MARKER, M9_PG_MARKER, M10_PG_MARKER, M11_PG_MARKER, M12_PG_MARKER, M13_PG_MARKER, M14_PG_MARKER, M15_PG_MARKER, M16_PG_MARKER, M17_PG_MARKER, M18_PG_MARKER, M19_PG_MARKER, M20_PG_MARKER, M21_PG_MARKER, MPG_MARKER_M2, MPG_MARKER_M3, MPG_MARKER_M4, MPG_MARKER_M5, MPG_MARKER_M6, MPG_MARKER_M7, MPG_MARKER_M8, MPG_MARKER_M9, MPG_MARKER_M10, MPG_MARKER_M11, MPG_MARKER_M12, MPG_MARKER_M13, MPG_MARKER_M14, MPG_MARKER_M15, MPG_MARKER_M16, MPG_MARKER_M17, MPG_MARKER_M18, MPG_MARKER_M19, MPG_MARKER_M20, MPG_MARKER_M21, MOSDMY, CPODE, DCPODE, MD, SR_DMD, CMD, SR_DCMD, BCMD, MP, VDR, VG, BVG, VD, VD2, BVD2, OD_12, OD12_10, OD12_15, OD_15, OD15_12, OD_18, OD18_12, OD18_15, OD18_10, PP, gNP, NP_BOUNDARY_BLK, VTS_N, VTSN_LL, VTS_P, VTSP_LL, VTL_N, VTLN_LL, VTL_P, VTLP_LL, VTXL_N, VTXL_P, VTH_N, VTH_P, VTUL_N, VTULN_LL, VTUL_P, VTULP_LL, VTML_N, VTML_P, VTEL_N, VTEL_P, NT_N, VAR, CB, CBD, RV, AP, APS, BPMT, D_BPMT, CU_RV, CU_RDL, DCU_RDL, BTSV, HBC, HBL, BSHBC, IFO_VIA, CPS, CPS2, MCBAM, AP_14P5_MARKER, CU_28_MARKER, CU_PAD_MARKER, CU_UPAD_MARKER, CU_UPAD_MARKER_P36, CU_UPAD_MARKER_P25, CU_UPAD_MARKER_P90, COWAP_MARKER, AP_UPAD_MARKER, CB2_WB, CB2_FC, DR_CB2, CB2_SAC, CB2_SAC_ISO, CB2B, CB2S, CB2_F2B, CU_CB2_FC, CU_CB2_FCU, CU_CB2_FCU_P36, CU_CB2_FCU_P25, CU_CB2_FCU_P90, PM, PM_IN, PM_INU, PM0, PM0_SAC, PM0_IN, PM0_INU, PM0_PAD, UBM, UBM_FC, UBM_FCU, UBM_F2B, UUBM, V_UUBM, PM_FC, PM_FCU, BSAM, CB2_FCU, CB2_IN, CB2_INU, TSV, DRTSV, BTPM, NWDMY_0, NWDMY_1, RH_TN, SR_DTN, RH_TNB, RHDMY_ALL, RH_TNE, RH_MATCHING_2, RHDMY0, RHDMY1, RHDMY2, RHDMY3, RHDMY4, RHDMY5, RHDMY6, RHDMY7, RHDMY8, RHDMY9, RHDMY10, RHDMY11, RHDMY12, RHDMY13, RHDMY14, RHDMY15, RHDMY16, RHDMY17, RHDMY18, RHDMY19, GR_TSV_OD_DA, GR_TSV_PO, GR_TSV_MD, GR_TSV_VDR, TSV_BLK, DIODMY, AN_SD, AN_SD_4, HIA_DUMMY, IHIADMY, BJTDMY, BJTEDMY, IBJTDMY, PBJT_COR, IBJT_COR, BJTDMY_C2, BJTEDMY_C2, BJTDMY_CD1, BJTEDMY_CD1, DECAPDMY, MATCHING, CRAM_LP, BUMP_BLOCKAGE, ANARRAY_H, ANARRAY_M, ANARRAY_HS, ANARRAY_S, RH_MATCHING, METALFUSE, METALFUSELINK, METALFUSE_B1, INDDMY, LOGO, TCDDMY, TCDDMY_ALL, CAP_18V, RDR_ANALOG, RDR, TCDDMY_NON_OPC, TCDDMY_NON_OPC_STACK, TCDDMY_NON_OPC_BEOL0, TCDDMY_NON_OPC_BEOL1, TCDDMY_NON_OPC_BEOL2, TCDDMY_NON_OPC_BEOL3, TCDDMY_NON_OPC_BEOL4, TCDDMY_NON_OPC_BEOL5, TCDDMY_NON_OPC_BEOL6, TCDDMY_NON_OPC_BEOL7, TCDDMY_NON_OPC_BEOL8, TCDDMY_M0, TCDDMY_M1, TCDDMY_M2, TCDDMY_M3, TCDDMY_M4, TCDDMY_M5, TCDDMY_M6, TCDDMY_M7, TCDDMY_M8, TCDDMY_M9, TCDDMY_M10, TCDDMY_M11, TCDDMY_M12, TCDDMY_M13, TCDDMY_M14, TCDDMY_M15, TCDDMY_M16, TCDDMY_M17, TCDDMY_M18, TCDDMY_M19, TCDDMY_V0, TCDDMY_V1, TCDDMY_V2, TCDDMY_V3, TCDDMY_V4, TCDDMY_V5, TCDDMY_V6, TCDDMY_V7, TCDDMY_V8, TCDDMY_V9, TCDDMY_V10, TCDDMY_V11, TCDDMY_V12, TCDDMY_V13, TCDDMY_V14, TCDDMY_V15, TCDDMY_V16, TCDDMY_V17, TCDDMY_V18, RTMOMDMY, MOMDMY, VIAMOMDMY, MOMDMY_0, MOMDMY_1, MOMDMY_2, MOMDMY_3, MOMDMY_4, MOMDMY_5, MOMDMY_6, MOMDMY_7, MOMDMY_8, MOMDMY_9, MOMDMY_10, MOMDMY_11, MOMDMY_12, MOMDMY_13, MOMDMY_14, MOMDMY_15, MOMDMY_16, MOMDMY_17, MOMDMY_18, MOMDMY_19, MOMDMY_20, MOMDMY_21, MOMDMY_CU, MOMDMY_AP, MOM_WAIVE_FLOAT_M0, MOM_WAIVE_FLOAT_M1, MOMCAP_FS, MOMDMY_QCM, MOMDMY_QFM, ICOVL_A, ICOVL_B, ICOVL_C, ICOVL_D, ICOVL_E, ICOVL_F, ICOVL_G, ICOVL_H, ICOVL_I, ICOVL_J, ICOVL_SINGLE, TPC, TPC_O, TPC_RVDMY, TPCDMY, TPC2_O, MPC, MPC_O, MPC_RVDMY, MPCDMY, BPC, BPC_O, BPC_RVDMY, BPCDMY, TPCDMY_CU, TPCDMY_AP, TPCDMY_AP2, TPCDMY_AP3, PMIM_1, PMIM_2, PMIM2_1, AN_GM_SENS, BPVT, BPVB, BPC_LV, BPC_LV_O, BPC_LVHV_DMY, BPC_HV1, BPC_HV2, BPC_HV2_O, BPC_HV1_O, BPC_GND, BPC_GND_O, BPC_GND_DMY, MPC_LV, MPC_LV_O, MPC_LV_DMY, TPC_GND, TPC_GND_O, TPC_GND_DMY, TPC_LV, TPC_LV_O, TPC_LV_DMY, M0_BREAK_BLK, VIRT_M1_TRACK, ODBLK, POBLK, MDBLK, SIGE_DRAW, SIC_DRAW, SEALRING, SEALRING_DB, SEALRING_ALL, SEALRING_EN, SEALRING_RE, SEALRING_IN, SEALRING_OUT, SEALRING_CORNER, SEALRING_EPT_S, LMARK, COWAM, COWAMS, AP_AMDMY, SR_ESD, SDI, SDI_2, SDI_3, LUPWDMY, LUPWDMY_2, PAD_WAV, LUP6IEDMY_ENG, LUPDWDMY, CNODWVR, LUP_VTR170_LOGIC, LUP_VTR180_LOGIC, LUP_VTR160_SRM, LUPWDMY_ENG, IODMYI, LC_DMY, LUPIEDMY, LUPVIEDMY, LUPVIEDMY_BUMP, LUP15VIEDMY, LUP15VIEDMY_BUMP, LUP18VIEDMY, LUP18VIEDMY_BUMP, PADDMY, LUPULVIEDMY, LUPULVIEDMY_BUMP, SRM, SRM_1, SRM_3, SRM_4, SRM_7, SRM_9, SRM_10, SRM_11, SRM_12, SRM_13, SRM_14, SRM_15, SRM_16, SRM_17, SRM_18, SRM_19, SRM_20, SRM_21, SRM_22, SRM_23, SRM_24, SRM_25, SRM_26, SRM_27, SRM_28, SRM_29, SRM_30, SRM_31, SRM_32, SRM_33, SRM_34, SRM_35, SRM_36, SRM_37, SRM_38, SRM_39, SRM_40, SRM_41, SRM_42, SRM_43, SRM_44, SRM_45, SRM_46, SRM_47, SRM_48, SRM_49, SET0_5, SET6_M, SET6_E, RODMY, SRAMDMY, SRAMDMY_1, SRAMDMY_2, PERI_MONITOR, ULHD_WLD, SRAM_PERI_STD, SRAM_PERI, SRAM_MACRO, ISO_CPODE_WLD, DAISYC_RES_M12, DAISYC_RES_M13, CO_SRAM, CO_SRAM11, CO_SRAM12, CO_SRAM13, CO_SRAM14, CO_SRAM15, CO_SRAM16, CO_SRAM17, CO_SRAM18, CO_SRAM19, CO_SRAM20, CO_SRAM21, CO_SRAM22, CO_SRAM23, CO_SRAM24, CO_SRAM25, CO_SRAM26, CO_SRAM27, CO_SRAM28, CO_SRAM29, CO_SRAM30, CO_SRAM31, CO_SRAM32, CO_SRAM33, CO_SRAM34, CO_SRAM35, CO_SRAM36, CO_SRAM37, CO_SRAM38, CO_SRAM39, CO_SRAM40, CO_SRAM41, CO_SRAM42, CO_SRAM43, CO_SRAM44, CO_SRAM45, CO_SRAM46, CO_SRAM47, CO_SRAM48, CO_SRAM49, CO_SRAM50, CO_SRAM51, CO_SRAM52, CO_SRAM53, CO_SRAM54, CO_SRAM55, CO_SRAM56, CO_SRAM57, CO_SRAM58, CO_SRAM59, CO_SRAM60, M0_JUMP, M1_JUMP, M2_JUMP, M3_JUMP, M3_NO_OPC, CRAM1, BLK_WF, BLK_WB, BCWDMY, BLK_M0, BLK_M1, BLK_M2, BLK_M3, BLK_M4, DAISYC_BLK, UNFEOLBLK, UNBEOLBLK, DC1, DC2_MANDREL, DC2_CORE, DC2_CORE_TYPE3, DC2_IO, DC3_FB2, DC4_CORE, DC4_IO, DC4_CORE_TYPE2, DC5_1, DC5_2, DC6_1, DC6_2, DC7, DC8_1, DC8_2, DC9, LOWMEDN, DFBC, DFBC_H, DFBC_V, DFBC_ALL, PCH_DC, DI_WPO, FEOL_BLK_T, FEOL_BLK_R, BEOL_BLK_T, BEOL_BLK_R, AP_DUMMY, CM0A_MAIN, CM0B_MAIN, DCM0A, DCM0B, BCM0H, BCM0V, M0_BASE, M0_MAIN_CA, M0_MAIN_CB, DM0_O_CA, DM0_O_CB, DM0_CA, DM0_CB, M1_MAIN, DM1_O, DM1, M2_BASE_H, M2_MAIN_CA_H, M2_MAIN_CB_H, DM2_O_CA_H, DM2_O_CB_H, DM2_CA_H, DM2_CB_H, M2_BASE_V, M2_MAIN_CA_V, M2_MAIN_CB_V, DM2_O_CA_V, DM2_O_CB_V, DM2_CA_V, DM2_CB_V, M3_MAIN_H, DM3_O_H, DM3_H, M3_MAIN_V, DM3_O_V, DM3_V, M4_MAIN_H, DM4_O_H, DM4_H, M4_MAIN_V, DM4_O_V, DM4_V, M5_BASE_H, M5_MAIN_CA_H, M5_MAIN_CB_H, DM5_O_CA_H, DM5_O_CB_H, DM5_CA_H, DM5_CB_H, M5_BASE_V, M5_MAIN_CA_V, M5_MAIN_CB_V, DM5_O_CA_V, DM5_O_CB_V, DM5_CA_V, DM5_CB_V, M6_MAIN_H, DM6_O_H, DM6_H, M6_MAIN_V, DM6_O_V, DM6_V, M7_MAIN_H, DM7_O_H, DM7_H, M7_MAIN_V, DM7_O_V, DM7_V, M8_MAIN_H, DM8_O_H, DM8_H, M8_MAIN_V, DM8_O_V, DM8_V, M9_MAIN_H, DM9_O_H, DM9_H, M9_MAIN_V, DM9_O_V, DM9_V, M10_MAIN_H, DM10_O_H, DM10_H, M10_MAIN_V, DM10_O_V, DM10_V, M11_MAIN_H, DM11_O_H, DM11_H, M11_MAIN_V, DM11_O_V, DM11_V, M12_MAIN_H, DM12_O_H, DM12_H, M12_MAIN_V, DM12_O_V, DM12_V, M13_MAIN_H, DM13_O_H, DM13_H, M13_MAIN_V, DM13_O_V, DM13_V, M14_MAIN, DM14_O, DM14, M15_MAIN, DM15_O, DM15, M16_MAIN, DM16, M17_MAIN, DM17, M18_MAIN, DM18, M19_MAIN, DM19, VIA0, DVIA0_O, VIA1, DVIA1_O, VIA2, DVIA2_O, VIA3, VIA3_CA, VIA3_CB, DVIA3_O_CA, DVIA3_O_CB, VIA3_CA_HINT, VIA3_CB_HINT, VIA3_DA, VIA3_DB, VIA4, VIA4_CA, VIA4_CB, DVIA4_O_CA, DVIA4_O_CB, VIA4_DA, VIA4_DB, VIA5, DVIA5, DVIA5_O, VIA6, DVIA6, DVIA6_O, VIA7, DVIA7, DVIA7_O, VIA8, DVIA8, DVIA8_O, VIA9, DVIA9, DVIA9_O, VIA10, DVIA10, DVIA10_O, VIA11, DVIA11, DVIA11_O, VIA12, DVIA12, DVIA12_O, VIA13, DVIA13, DVIA13_O, VIA14, DVIA14, DVIA14_O, VIA15, DVIA15, VIA16, DVIA16, VIA17, VIA18, M0_PIN_MRK, MJ_WAV, M0_MJ_PIN_0, M0_MJ_PIN_1, M0_MJ_PIN_2, M0_MJ_PIN_3, M0_MJ_PIN_4, M0_MJ_GRP_0, M0_MJ_GRP_1, M0_MJ_GRP_2, M0_MJ_GRP_3, M0_MJ_GRP_4, M1_PIN_MRK, M1_MJ_PIN_0, M1_MJ_PIN_1, M1_MJ_PIN_2, M1_MJ_PIN_3, M1_MJ_PIN_4, M1_MJ_GRP_0, M1_MJ_GRP_1, M1_MJ_GRP_2, M1_MJ_GRP_3, M1_MJ_GRP_4, M2_PIN_MRK, M2_MJ_PIN_0, M2_MJ_PIN_1, M2_MJ_PIN_2, M2_MJ_PIN_3, M2_MJ_PIN_4, M2_MJ_GRP_0, M2_MJ_GRP_1, M2_MJ_GRP_2, M2_MJ_GRP_3, M2_MJ_GRP_4, 
});



PRECISION : double = 20000;
CONNECT_DB : connect_database = NULL_CONNECT_DATABASE;
CONNECT_DB_DV : connect_database = NULL_CONNECT_DATABASE;
CONNECT_DB_C : connect_database = NULL_CONNECT_DATABASE;
CONNECT_DB_U : connect_database = NULL_CONNECT_DATABASE;
CONNECT_DB_J : connect_database = NULL_CONNECT_DATABASE;

dv_trace_error_nets_input : list of dv_voltage_source_s = { }; 
dv_error_voltage_source_error_nets : published function (
    dv_error_in : error_layer,
    properties_in : list of string,
    cdb_in : connect_database,
    layer1_in : data_layer,
    layer2_in : data_layer = NULL_DATA_LAYER,
    layer2_voltage_from_in : property_source_e = CONNECT_DATABASE
) returning void {
    dv_error_voltage_source( dv_error_in, properties_in, cdb_in, layer1_in, layer2_in, layer2_voltage_from_in );
    dv_trace_error_nets_input.push_back({ dv_error_in, layer1_in, layer2_in, layer2_voltage_from = layer2_voltage_from_in });
}

_dfm_rdb_layer : string;
_dfm_rdb_comment : string;
u_dv_switch : integer;
u_dv_layer1 : string;
u_dv_layer2 : string;
u_dv_space_val : double;
u_dv_space_val_low : double;
full_neighborhood : list of window_offset_e = {
    UPPER_LEFT, UP, UPPER_RIGHT,
    LEFT, RIGHT,
    LOWER_LEFT, DOWN, LOWER_RIGHT
};
adjacent_neighborhood : list of window_offset_e = {
    UP, LEFT, RIGHT, DOWN
};

corner_neighborhood : list of window_offset_e = {
    UPPER_LEFT, UPPER_RIGHT,
    LOWER_LEFT, LOWER_RIGHT
};
HV_ID_TOP_tag :  list of string = {};
LV_ID_TOP_tag :  list of string = {};
HV_marker_tag :  list of string = {};
HV_marker_voltage : list of double = {};


GAP : double;
SHIFT : double;
_den_print : boolean = false;
_den_print_only : boolean;
_den_con : constraint of double;
_den_con_val : double;
_den_win_val : double;
_den_step_val : double;
_den_half_win_area_val : double;
_den_polygon_area_clip : boolean;
_gden_con : constraint of double;
_gden_gcon : constraint of double;
_gden_exc_val : double;
_gden_absolute : boolean;
_gden_corner : boolean;
_gden_corner_value : double;
_gden_polygon_area_clip : boolean = false;
_gden_print : boolean = false;
_gden_print_only : boolean;
//Double compare function
dbl_gt : function (val1 : double, val2 : double ) returning dblgt_result : double
{
    dblgt_result = (dblgt(val1, val2) ? 1.0 : 0.0);
}
dbl_lt : function (val1 : double, val2 : double ) returning dbllt_result : double
{
    dbllt_result = (dbllt(val1, val2) ? 1.0 : 0.0);
}
dbl_or : function (val1 : double, val2 : double ) returning dblor_result : double
{
    dblor_result = (((((val1) < 0.0) || ((val1) > 0.0)) || (((val2) < 0.0) || ((val2) > 0.0))) ? 1.0 : 0.0);
}
dbl_qc : function (test : double, val1 : double, val2 : double ) returning dblqc_result : double
{
    dblqc_result = ((((test) < 0.0) || ((test) > 0.0)) ? val1 : val2);
}
dbl_eq : function (val1 : double, val2 : double ) returning dbleq_result : double 
{
    dbleq_result = (dbleq(val1, val2) ? 1.0 : 0.0);
}
dbl_and : function (val1 : double, val2 : double ) returning dbland_result : double 
{
    dbland_result = (((((val1) < 0.0) || ((val1) > 0.0)) && (((val2) < 0.0) || ((val2) > 0.0))) ? 1.0 : 0.0);
}
dblnp : function (value : double) returning dblnp_result : double
{
    dblnp_result = ((value > 0.0) ? 0.0 : 1.0);
}
dblnz : function (value : double) returning dblnz_result : double
{
    dblnz_result = (((value < 0.0) || (value > 0.0)) ? 1.0 : 0.0);
}
dblp : function (value : double) returning dblp_result : double
{
    dblp_result = ((value > 0.0) ? 1.0 : 0.0);
}
dblz : function (value : double) returning dblz_result : double
{
    dblz_result = (((value < 0.0) || (value > 0.0)) ? 0.0 : 1.0);
}
dbl_ne : function (val1 : double, val2 : double ) returning dblne_result : double 
{
    dblne_result = (dblne(val1, val2) ? 1.0 : 0.0);
}
dbl_ge : function (val1 : double, val2 : double ) returning dblge_result : double 
{
    dblge_result = (dblge(val1, val2) ? 1.0 : 0.0);
}
double_constraint_contains : published function (
    con : constraint of double,
    val : double
)
    returning result : boolean
{
    cat = con.category();

    result = false;

    if (cat == CONSTRAINT_EQ) {
        result = dbleq(val, con.lo());
    }
    elif (cat == CONSTRAINT_NE) {
        result = dblne(val, con.lo());
    }
    elif (cat == CONSTRAINT_GE) {
        result = dblge(val, con.lo());
    }
    elif (cat == CONSTRAINT_GT) {
        result = dblgt(val, con.lo());
    }
    elif (cat == CONSTRAINT_LE) {
        result = dblle(val, con.hi());
    }
    elif (cat == CONSTRAINT_LT) {
        result = dbllt(val, con.hi());
    }
    elif (cat == CONSTRAINT_GELE) {
        result = (dblge(val, con.lo()) && dblle(val, con.hi()));
    }
    elif (cat == CONSTRAINT_GELT) {
        result = (dblge(val, con.lo()) && dbllt(val, con.hi()));
    }
    elif (cat == CONSTRAINT_GTLE) {
        result = (dblgt(val, con.lo()) && dblle(val, con.hi()));
    }
    elif (cat == CONSTRAINT_GTLT) {
        result = (dblgt(val, con.lo()) && dbllt(val, con.hi()));
    }
}
nar_funcs_e : newtype enum of {
    UNKNOWN,
    FLOAT_TRGATE_FUNC_1,
    FLOAT_NSD_PSD_FUNC_1 
};
nar_void_func_s : newtype struct of {
    func : function (void) returning void;
};
nar_void_func_h : newtype hash of nar_funcs_e to nar_void_func_s;
nar_constrained_area_s : newtype struct of {
    area    : constraint of double = > 0;
    layer1  : string               = "";
    factor1 : double               = 1.0;
    layer2  : string               = "";
    factor2 : double               = 1.0;
};
nar_constrained_areas_h : newtype hash of string to nar_constrained_area_s;

net_area_ratio : published function (
    cdb_in            : connect_database,
    con               : constraint of double,
    layer_groups      : layer_groups_h,
    denominator_start : integer,
    denominator_end   : integer,
    constrained_areas : nar_constrained_areas_h = { },
    func_enum         : nar_funcs_e             = UNKNOWN,
    expr_is_default   : boolean                 = false
)
    returning net_area_ratio_result : polygon_layer
{
    nar_funcs   : nar_void_func_h = { };
    nar_func    : function (void) returning void;
    con2any     : list of polygon_layer = { };
    not_con2any : list of polygon_layer = { };
    n_layer_0   : polygon_layer;

    /* Declare and register equation code function. */
    float_trgate_func_1 : function (void) returning void
    {
        areaL2 = ns_net_area("layer2");
        areaL3 = ns_net_area("layer3");
        areaL4 = ns_net_area("layer4");
        areaL5 = ns_net_area("layer5");
        areaL6 = ns_net_area("layer6");
        areaL7 = ns_net_area("layer7");
        areaL8 = ns_net_area("layer8");
        areaL9 = ns_net_area("layer9");
        areaL10 = ns_net_area("layer10");

        ratio = dblz(areaL2) * dblz(areaL3) * dblz(areaL4) * dblz(areaL5) * dblz(areaL6) * dblz(areaL7) * dblz(areaL8) * dblz(areaL9) + dblz(areaL10);

        if (double_constraint_contains(con, ratio)) {
            ns_save_net({"ratio"}, {ratio});
        }
    }
    nar_funcs[FLOAT_TRGATE_FUNC_1] = { float_trgate_func_1 };
 
    /* Declare and register equation code function. */
    float_nsd_psd_func_1 : function (void) returning void
    {
        countL1 = ns_net_data_count("layer1");
        areaL2 = ns_net_area("layer2");
        areaL3 = ns_net_area("layer3");
        areaL4 = ns_net_area("layer4");
        areaL5 = ns_net_area("layer5");
        areaL6 = ns_net_area("layer6");
        areaL7 = ns_net_area("layer7");
        areaL8 = ns_net_area("layer8");
        areaL9 = ns_net_area("layer9");

        ratio = dblnp( countL1 - 1 ) * dblz(areaL2) * dblz(areaL3) * dblz(areaL4) * dblz(areaL5) * dblz(areaL6) * dblz(areaL7) * dblz(areaL8) * dblz(areaL9);

        if (double_constraint_contains(con, ratio)) {
            ns_save_net({"ratio"}, {ratio});
        }
    }
    nar_funcs[FLOAT_NSD_PSD_FUNC_1] = { float_nsd_psd_func_1 };

    /* Lookup the net_function to use in this num/den instance. */
    nar_func = nar_funcs[func_enum].func;

    n_layer_0 = layer_groups["layer1"][0];

    if (expr_is_default && (layer_groups.size() > 1)) {
        d_layers : list of polygon_layer = { };

        for (i = denominator_start to denominator_end) {
            d_layers.push_back(layer_groups["layer" + i][0]);
        }

        if ((con.category() == CONSTRAINT_EQ) && !((con.lo() > 0.0) || (con.lo() < 0.0))) {
            not_con2any = d_layers;
        }
        else {
            con2any = d_layers;
        }
    }

    net_area_ratio_result = net_select(
        connect_sequence     = cdb_in,
        net_function         = nar_func,
        layer_groups         = layer_groups,
        connected_to_all     = { n_layer_0 },
        connected_to_any     = con2any,
        not_connected_to_any = not_con2any,
        output_from_layers   = { n_layer_0 }
    );
}

round_to : published function (
    value  : double,
    target : double = 0.0/0.0
)
    returning round_to_result : double
{
    if (isnan(target)) {
        /* ROUND(x) : rounds x to nearest integer. */
        round_to_result = round(value);
    }
    else {
        /* ROUND(x,y) : rounds x to nearest multiple of y (n*y, where n is an integer and result [n*y] is a double). */
        recip = 1.0 / target;
        round_to_result = round(value * recip) / recip;
    }
}

floor_to : published function (
    value  : double,
    target : double = 0.0/0.0
)
    returning floor_to_result : double
{
    if (isnan(target)) {
        /* FLOOR(x) : rounds x to down to the nearest integer. */
        floor_to_result = floor(value);
    }
    else {
        /* FLOOR(x,y) : rounds x down to nearest multiple of y (n*y, where n is an integer and result [n*y] is a double). */
        recip = 1.0 / target;
        floor_to_result = floor(value * recip) / recip;
    }
}


size_inside_wrapper : published function (
    layer1           : polygon_layer,
    bounding         : polygon_layer,
    distance         : double,
    increment        : double = 0.0,
    clip_acute       : clip_acute_e = NONE,
    corner_extension : corner_extension_e = INTERSECTION,
    radial_sectors   : integer = 0
)
    returning size_inside_wrapper_result : polygon_layer
{
    size_pl : polygon_layer;

    if (dblge(increment, distance) || dbleq(increment, 0.0)) {
        size_pl  = size(layer1, distance, clip_acute = clip_acute, corner_extension = corner_extension, radial_sectors   = radial_sectors);
        size_inside_wrapper_result = and(size_pl, bounding);
    }
    else {
        size_pl  = size(layer1, increment, clip_acute = clip_acute, corner_extension = corner_extension, radial_sectors   = radial_sectors);
        size_inside_wrapper_result =
            size_inside(size_pl,
                        bounding,
                        distance         = distance - increment,
                        increment        = increment,
                        output_type      = OVERSIZE,
                        corner_extension = corner_extension,
                        radial_sectors   = radial_sectors);
    }
}
ec_proj_constraint : constraint;
dfm_property_func_ec_proj : function (void) returning void
{
    primary_data = df_get_current_data();
    rlayer1_set = df_error_layer(primary_data, "");
    projection_lengthL1 = df_error_sum_projection_length(rlayer1_set);

    v1 = projection_lengthL1;

    if (double_constraint_contains( ec_proj_constraint, v1)) {
        df_save_data(primary_data);
    }
}


extents_squares : published function (
    layer1 : polygon_layer
)
    returning extents_squares_result : polygon_layer
{
    square_function : function (void) returning void {
        pgon_extent = pf_polygon_extent(pf_get_current_polygon());

        delta_x = abs(pf_polygon_coordinate_x(pgon_extent, 2) - pf_polygon_coordinate_x(pgon_extent, 0));
        delta_y = abs(pf_polygon_coordinate_y(pgon_extent, 2) - pf_polygon_coordinate_y(pgon_extent, 0));

        side_length : double = (delta_x > delta_y) ? delta_x : delta_y;

        pgon_square = pf_polygon_center_square(pgon_extent, side_length);

        pf_save_polygon(pgon_square);
    }

    extents_squares_result = polygon_features(layer1, square_function);
}



Mn_R_18_dfm_property_func_173 : function (void) returning void
{
    primary_data = df_get_current_data();
    player2_set = df_polygon_layer(primary_data, "layer2");
    countL2 = df_polygon_count(player2_set);

    VIA_COUNT = countL2; 

    if (double_constraint_contains(> 0, VIA_COUNT)) { 
        df_save_properties(primary_data, { { "VIA_COUNT", VIA_COUNT } }); 
        df_save_data(primary_data);
    }
}

Mn_R_18_dfm_property_func_174 : function (void) returning void
{
    primary_data = df_get_current_data();
    player1_set = df_polygon_layer(primary_data, "");
    sum_propL1_VIA_COUNT_valid = df_get_polygon_sum_double_property(player1_set, "VIA_COUNT", sum_propL1_VIA_COUNT);

    v1 = sum_propL1_VIA_COUNT;

    if (double_constraint_contains(>= 4, v1) && sum_propL1_VIA_COUNT_valid && !(isinf(v1) || isnan(v1))) {
        df_save_data(primary_data);
    }
}

Mn_R_18_dfm_property_func_175 : function (void) returning void
{
    primary_data = df_get_current_data();
    player1_set = df_polygon_layer(primary_data, "");
    sum_propL1_VIA_COUNT_valid = df_get_polygon_sum_double_property(player1_set, "VIA_COUNT", sum_propL1_VIA_COUNT);

    v1 = sum_propL1_VIA_COUNT;

    if (double_constraint_contains(== 3, v1) && sum_propL1_VIA_COUNT_valid && !(isinf(v1) || isnan(v1))) {
        df_save_data(primary_data);
    }
}

Mn_R_18_dfm_property_func_176 : function (void) returning void
{
    primary_data = df_get_current_data();
    player2_set = df_polygon_layer(primary_data, "layer2");
    countL2 = df_polygon_count(player2_set);

    v1 = countL2;

    if (double_constraint_contains(>= 4, v1)) {
        df_save_data(primary_data);
    }
}


Mn_R_18_dfm_property_func_177 : function (void) returning void
{
    primary_data = df_get_current_data();
    player1_set = df_polygon_layer(primary_data, "");
    sum_propL1_VIA_COUNT_valid = df_get_polygon_sum_double_property(player1_set, "VIA_COUNT", sum_propL1_VIA_COUNT);

    v1 = sum_propL1_VIA_COUNT;

    if (double_constraint_contains(== 4, v1) && sum_propL1_VIA_COUNT_valid && !(isinf(v1) || isnan(v1))) {
        df_save_data(primary_data);
    }
}

contain_xy : function (
	    inlayer : polygon_layer,
	    value_x : double,
	    value_y : double
) returning result : polygon_layer {
    pre2 : polygon_layer;
  if ( dblgt(value_x,value_y) ){
    pre1 = shrink(inlayer, north = 0, south = 0, east = (value_x - value_y)/2, west = (value_x - value_y)/2);
    pre2 = contains(pre1, dimensions = {value_y, value_y}, rotate = NONE);
  } elseif ( dbllt(value_x,value_y) ) {
    pre1 = shrink(inlayer, north = (value_y - value_x)/2, south = (value_y - value_x)/2, east = 0, west = 0 );
    pre2 = contains(pre1, dimensions = {value_x, value_x}, rotate = NONE);
  } elseif ( dbleq(value_x,value_y) ) {
    pre1 = copy(inlayer);
    pre2 = contains(pre1, dimensions = {value_x, value_y}, rotate = NONE);
  }
  result = inlayer interacting pre2; 
}
contain_xy : function (
	    inlayer : polygon_layer,
	    value_x : double,
	    value_y : double
) returning void {
    pre2 : polygon_layer;
  if ( dblgt(value_x,value_y) ){
    pre1 = shrink(inlayer, north = 0, south = 0, east = (value_x - value_y)/2, west = (value_x - value_y)/2);
    pre2 = contains(pre1, dimensions = {value_y, value_y}, rotate = NONE);
  } elseif ( dbllt(value_x,value_y) ) {
    pre1 = shrink(inlayer, north = (value_y - value_x)/2, south = (value_y - value_x)/2, east = 0, west = 0 );
    pre2 = contains(pre1, dimensions = {value_x, value_x}, rotate = NONE);
  } elseif ( dbleq(value_x,value_y) ) {
    pre1 = copy(inlayer);
    pre2 = contains(pre1, dimensions = {value_x, value_y}, rotate = NONE);
  }
  inlayer interacting pre2; 
}

mn_dn_1_3_1_func_1 : function (void) returning void
{
    areaL1 = den_polygon_area("layer1", clip = _den_polygon_area_clip);
    areaL2 = den_polygon_area("layer2", clip = _den_polygon_area_clip);
    
    ratio = areaL1 / areaL2;

    if (double_constraint_contains(_den_con, ratio) && !isinf(ratio) && !isnan(ratio)) {
        if (!_den_print_only) {
            den_save_window(error_names = { "ratio", "areaL1", "areaL2" },
                            values      = { ratio, areaL1, areaL2 }
            );
        }
    
        if (_den_print || _den_print_only) {
            den_window_statistics(
                which_file  = 0,
                error_names = { "ratio", "areaL1", "areaL2" },
                values      = { ratio, areaL1, areaL2 }
            );
        }
    }
}
contains_xy : published function (
    layer1     : polygon_layer,
    dimensions : rectangle_dimensions_s,
    rotate     : rectangle_rotate_e = NONE
)
    returning contains_xy_result : polygon_layer
{
    pre2 : polygon_layer;
    value_x : double = dimensions.length1;
    value_y : double = dimensions.length2;

    if (dblgt(value_x, value_y)){
        pre1 = shrink(layer1, north = 0, south = 0, east = (value_x - value_y)/2, west = (value_x - value_y)/2);
        pre2 = contains(pre1, dimensions = { value_y, value_y }, rotate = rotate);
    }
    elseif (dbllt(value_x, value_y)){
        pre1 = shrink(layer1, north = (value_y - value_x)/2, south = (value_y - value_x)/2, east = 0, west = 0);
        pre2 = contains(pre1, dimensions = { value_x, value_x }, rotate = rotate);
    }
    else {
        pre2 = contains(layer1, dimensions = { value_x, value_y }, rotate = rotate);
    }

    contains_xy_result = layer1 interacting pre2;
}

rectangle_xy : function (
	    inlayer : polygon_layer,
	    orien : rect_orientation_e,
	    const_x : positive_constraint_t,
	    const_y : positive_constraint_t
	) returning void {
	pre1 = rectangles( inlayer, orientation = ORTHOGONAL, sides = { const_x, const_y } );
	in_x = angle_edge( layer1 = pre1, angles = 0 );
	pre2 = adjacent_edge( layer1 = pre1, length = const_x, angle1 = 90, angle2 = 90, adjacent_length1 = const_y, adjacent_length2 = const_y );
	pre3 = interacting_edge( pre2, in_x, include_touch = EDGE );
	pre1 interacting pre3;
	}
rectangle_xy : function (
	    inlayer : polygon_layer,
	    orien : rect_orientation_e,
	    const_x : positive_constraint_t,
	    const_y : positive_constraint_t
	) returning result : polygon_layer  {
	pre1 = rectangles( inlayer, orientation = ORTHOGONAL, sides = { const_x, const_y } );
	in_x = angle_edge( layer1 = pre1, angles = 0 );
	pre2 = adjacent_edge( layer1 = pre1, length = const_x, angle1 = 90, angle2 = 90, adjacent_length1 = const_y, adjacent_length2 = const_y );
	pre3 = interacting_edge( pre2, in_x, include_touch = EDGE );
	result = pre1 interacting pre3;
	}

ceil_to : published function (
    value  : double,
    target : double = 0.0/0.0
)
    returning ceil_to_result : double
{
    if (isnan(target)) {
        /* CEIL(x) : rounds x up to the nearest integer. */
        ceil_to_result = ceil(value);
    }
    else {
        /* CEIL(x,y) : rounds x up to the nearest multiple of y (n*y, where n is an integer and result [n*y] is a double). */
        recip = 1.0 / target;
        ceil_to_result = ceil(round_to((value * recip), (target * 10))) / recip;
    }
}
discrete_width_vertical_func_3 : function (void) returning void
{
    primary_data = df_get_current_data();
    elayer1_set = df_edge_layer(primary_data, "");
    lengthL1 = df_edge_sum_length(elayer1_set);

    v1 = fmod(round_to((lengthL1-SHIFT)*10000),round_to(GAP*10000));

    if (double_constraint_contains(!= 0, v1)) {
            df_save_data(primary_data);
    }
}
discrete_width_horizontal_func_3 : function (void) returning void
{
    primary_data = df_get_current_data();
    elayer1_set = df_edge_layer(primary_data, "");
    lengthL1 = df_edge_sum_length(elayer1_set);

    v1 = fmod(round_to((lengthL1-SHIFT)*10000),round_to(GAP*10000));

    if (double_constraint_contains(!= 0, v1)) {
            df_save_data(primary_data);
    }
}
discrete_270_270_edge_length_vertical_func_3 : function (void) returning void
{
    primary_data = df_get_current_data();
    elayer1_set = df_edge_layer(primary_data, "");
    lengthL1 = df_edge_sum_length(elayer1_set);

    v1 = fmod(round_to((lengthL1-SHIFT)*10000),round_to(GAP*10000));

    if (double_constraint_contains(!= 0, v1)) {
            df_save_data(primary_data);
    }
}

density_global_min_func_1 : function (void) returning void
{
    areaL1 = den_polygon_area("layer1", clip = _den_polygon_area_clip);
    areaL2 = den_polygon_area("layer2", clip = _den_polygon_area_clip);
    
    ratio = areaL1 / areaL2;

    if (double_constraint_contains(_den_con, ratio) && !isinf(ratio) && !isnan(ratio)) {
        if (!_den_print_only) {
            den_save_window(error_names = { "ratio", "areaL1", "areaL2" },
                            values      = { ratio, areaL1, areaL2 }
            );
        }
    
        if (_den_print || _den_print_only) {
            den_window_statistics(
                which_file  = 0,
                error_names = { "ratio", "areaL1", "areaL2" },
                values      = { ratio, areaL1, areaL2 }
            );
        }
    }
}
density_global_max_func_1 : function (void) returning void
{
    areaL1 = den_polygon_area("layer1", clip = _den_polygon_area_clip);
    areaL2 = den_polygon_area("layer2", clip = _den_polygon_area_clip);
    
    ratio = areaL1 / areaL2;

    if (double_constraint_contains(_den_con, ratio) && !isinf(ratio) && !isnan(ratio)) {
        if (!_den_print_only) {
            den_save_window(error_names = { "ratio", "areaL1", "areaL2" },
                            values      = { ratio, areaL1, areaL2 }
            );
        }
    
        if (_den_print || _den_print_only) {
            den_window_statistics(
                which_file  = 0,
                error_names = { "ratio", "areaL1", "areaL2" },
                values      = { ratio, areaL1, areaL2 }
            );
        }
    }
}

density_local_min_func_1 : function (void) returning void
{
    areaL1 = den_polygon_area("layer1", clip = _den_polygon_area_clip);
    areaL2 = den_polygon_area("layer2", clip = _den_polygon_area_clip);
    areaL3 = den_polygon_area("layer3", clip = _den_polygon_area_clip);
    areaL4 = den_polygon_area("layer4", clip = _den_polygon_area_clip);
    areaL5 = den_polygon_area("layer5", clip = _den_polygon_area_clip);
    
    ratio = dblnp( areaL1 - _den_half_win_area_val) * dblnz( areaL1 - _den_half_win_area_val ) + areaL4 / areaL5 + dblp( areaL2 / areaL3 - _den_con_val) + dblz( areaL2 / areaL3 - _den_con_val);

    if (double_constraint_contains(_den_con, ratio) && !isinf(ratio) && !isnan(ratio)) {
        if (!_den_print_only) {
            den_save_window(error_names = { "ratio", "areaL1", "areaL2", "areaL3", "areaL4", "areaL5" },
                            values      = { ratio, areaL1, areaL2, areaL3, areaL4, areaL5 }
            );
        }
    
        if (_den_print || _den_print_only) {
            den_window_statistics(
                which_file  = 0,
                error_names = { "ratio", "areaL1", "areaL2", "areaL3", "areaL4", "areaL5" },
                values      = { ratio, areaL1, areaL2, areaL3, areaL4, areaL5 }
            );
        }
    }
}
density_local_max_func_1 : function (void) returning void
{
    areaL1 = den_polygon_area("layer1", clip = _den_polygon_area_clip);
    areaL2 = den_polygon_area("layer2", clip = _den_polygon_area_clip);
    areaL3 = den_polygon_area("layer3", clip = _den_polygon_area_clip);
    areaL4 = den_polygon_area("layer4", clip = _den_polygon_area_clip);
    areaL5 = den_polygon_area("layer5", clip = _den_polygon_area_clip);
    
    ratio = dblnp( _den_half_win_area_val - areaL1 ) * areaL4 / areaL5 * dblp( areaL2 / areaL3 - _den_con_val);

    if (double_constraint_contains(_den_con, ratio) && !isinf(ratio) && !isnan(ratio)) {
        if (!_den_print_only) {
            den_save_window(error_names = { "ratio", "areaL1", "areaL2", "areaL3", "areaL4", "areaL5" },
                            values      = { ratio, areaL1, areaL2, areaL3, areaL4, areaL5 }
            );
        }
    
        if (_den_print || _den_print_only) {
            den_window_statistics(
                which_file  = 0,
                error_names = { "ratio", "areaL1", "areaL2", "areaL3", "areaL4", "areaL5" },
                values      = { ratio, areaL1, areaL2, areaL3, areaL4, areaL5 }
            );
        }
    }
}

density_gradient_max_func_1 : function (void) returning void
{
    neighborhood : list of window_offset_e;
    ratio_center : double = 0.0;
    max_gradient_g : double = 0.0;
    abs_ratio_center_g : double;
    abs_ratio_neighbor_g : double;

    areaL1_center_g = gden_polygon_area("layer1", CENTER, clip = _gden_polygon_area_clip);
    areaL2_center_g = gden_polygon_area("layer2", CENTER, clip = _gden_polygon_area_clip);
    areaL3_center_g = gden_polygon_area("layer3", CENTER, clip = _gden_polygon_area_clip);

    if (dblne(areaL3_center_g, 0)) {
        ratio_center = ( areaL1_center_g + areaL2_center_g * _gden_exc_val ) / areaL3_center_g;
        abs_ratio_center_g = abs(ratio_center);
    
        neighborhood = (_gden_corner) ? full_neighborhood : adjacent_neighborhood;
    
        foreach (neighbor in neighborhood) {
            if (gden_window_valid(neighbor)) {
                areaL1_neighbor_g = gden_polygon_area("layer1", neighbor, clip = _gden_polygon_area_clip);
                areaL2_neighbor_g = gden_polygon_area("layer2", neighbor, clip = _gden_polygon_area_clip);
                areaL3_neighbor_g = gden_polygon_area("layer3", neighbor, clip = _gden_polygon_area_clip);
    
                if (dblne(areaL3_neighbor_g, 0)) {
                    ratio_neighbor = ( areaL1_neighbor_g + areaL2_neighbor_g * _gden_exc_val ) / areaL3_neighbor_g;
                    abs_ratio_neighbor_g = abs(ratio_neighbor);
        
                    gradient = (dbleq(abs_ratio_center_g, abs_ratio_neighbor_g))
                                 ? 0
                                 : (_gden_absolute)
                                     ? abs(abs_ratio_center_g - abs_ratio_neighbor_g)
                                     : abs(abs_ratio_center_g - abs_ratio_neighbor_g) / max(abs_ratio_center_g, abs_ratio_neighbor_g);
        
                    if (dblne(_gden_corner_value, -1.0) && corner_neighborhood.contains(neighbor)) {
                        gradient = gradient * _gden_corner_value;
                    }
        
                    max_gradient_g = max(max_gradient_g, gradient);
                }
            }
        }
    
        if (double_constraint_contains(_gden_con, ratio_center) && !isinf(ratio_center) && !isnan(ratio_center) &&
            double_constraint_contains(_gden_gcon, max_gradient_g) && !isinf(max_gradient_g) && !isnan(max_gradient_g)) {
            if (!_gden_print_only) {
                gden_save_window(error_names = { "ratio_center", "areaL1_center_g", "areaL2_center_g", "areaL3_center_g", "Unsigned Gradient" },
                                 values      = { ratio_center, areaL1_center_g, areaL2_center_g, areaL3_center_g, max_gradient_g },
                                 offset      = CENTER
                );
            }
    
            if (_gden_print || _gden_print_only) {
                gden_window_statistics(
                    which_file  = 0,
                    error_names = { "ratio_center", "areaL1_center_g", "areaL2_center_g", "areaL3_center_g", "Unsigned Gradient" },
                    values      = { ratio_center, areaL1_center_g, areaL2_center_g, areaL3_center_g, max_gradient_g },
                    offset      = CENTER
                );
            }
        }
    }
}




//******************************************************************************
//      CHIP_snps BOUNDARY
//******************************************************************************
GRID    : const double = 0.001;
CSR_R_1 : const double = 66.3485;
vGRID : double = 0.0005;
SQRT2 : double = 1.415; 

DRCGRID : const double = 0.00005; //user value



#ifdef UseprBoundary
    #ifdef FULL_CHIP
        BULK_PRE = layer_extent( PRBOUNDARY );
    #else
        BULK_PRE = copy( PRBOUNDARY );
    #endif
#else
    #ifdef ChipWindowUsed
        BULK_PRE = polygons( { { { xLB, yLB }, { xRT, yRT } } } );
    #else
        BULK_PRE = layer_extent( CHIP_MT );	    
    #endif
#endif


#ifdef FULL_CHIP
    #ifdef WITH_SEALRING
        CHIP_snps = BULK_PRE not SEALRING_ALL; // sealring + SLDB +  CSR corner + Assembly isolation
    #else
	CHIP_snps = BULK_PRE not vertex( BULK_PRE, shape = TRIANGLE, angles = { 90 }, shape_size = CSR_R_1 );
    #endif
#else
    CHIP_snps = copy( BULK_PRE );
#endif



// GLOBAL DERIVED LAYER
//=====================

gCHIP = chip_extent();
CHIPX = copy( gCHIP, ancestry = true );    /* for density DRC coding */


gBULK = size( gCHIP, clip_acute = NONE, distance = 1 );
gEMPTY = empty_layer();                     /* for DRC coding */
EMPTYC = empty_layer();
EMPTYS = empty_layer();
EMPTYJ = empty_layer();
EMPTYU = empty_layer();
EMPTYV = empty_layer();
CHIPA = copy( gCHIP, ancestry = true );                   /* for density DRC coding */ 



EMPTY_EDGE = angle_edge( gEMPTY, == 0 );    /* for DRC coding */ 


IODMY = copy( IODMYI, ancestry = true ); 




CHIP_W = angle_edge( CHIPX, == 0 ); 
CHIP_L = angle_edge( CHIPX, == 90 );

PW = gBULK not NW; 
layerdef_derive_5 = interacting( NW, DNW ); 
layerdef_derive_4 = donut_holes( layerdef_derive_5, outer_boundary_point_touch = CLOSED_OUTER_BOUNDARY );
layerdef_derive_3 = layerdef_derive_4 not NW; 
RW = layerdef_derive_3 inside DNW; 
NWDMY = NWDMY_0 or NWDMY_1; 
layerdef_derive_7 = NW and NWDMY; 
layerdef_derive_6 = layerdef_derive_7 not OD; 
NWRSTI = interacting( NW, layerdef_derive_6 ); 

ALL_SRM = ( SRM or SRAMDMY ) or SRM_1;
ALL_MD = MD or SR_DMD; 
ALL_CMD = CMD or SR_DCMD; 

SRAM_CMD = copy( CO_SRAM12, ancestry = true ); 
FINAL_CMD = ALL_CMD or SRAM_CMD; 

gFINAL_CMD_SM_PRE = ALL_CMD or SRAM_CMD; 
FINAL_CMD_SM = shrink( grow( gFINAL_CMD_SM_PRE, north = 0.0065, south = 0.0065 ), north = 0.0065, south = 0.0065 );

gREAL_ALL_MD_SM_PRE1 = ALL_CMD or SRAM_CMD; 
gREAL_ALL_MD_SM_PRE2 = shrink( grow( gREAL_ALL_MD_SM_PRE1, north = 0.0065, south = 0.0065 ), north = 0.0065, south = 0.0065 );
REAL_ALL_MD_SM = ALL_MD not gREAL_ALL_MD_SM_PRE2; 

REAL_ALL_MD = ALL_MD not FINAL_CMD; 
REAL_ALL_MD_LOGIC = ALL_MD not ALL_CMD;
gREAL_MD_PRE = CMD or SRAM_CMD; 
REAL_MD = MD not gREAL_MD_PRE; 



ALL_MD_HE = angle_edge( ALL_MD, == 0 ); 
ALL_MD_VE = angle_edge( ALL_MD, == 90 ); 
MD_HE = angle_edge( MD, == 0 ); 
MD_VE = angle_edge( MD, == 90 ); 

ALL_CMD_HE = angle_edge( ALL_CMD, == 0 ); 
ALL_CMD_VE = angle_edge( ALL_CMD, == 90 ); 






CMD_MD = CMD and MD; 
ALL_OD = OD or SR_DOD; 
ALL_OD_SM = shrink( grow( ALL_OD, north = 0.010, south = 0.010 ), north = 0.010, south = 0.010 ); 
ALL_PO = PO or SR_DPO; 

gALL_OD_SR_NW_PRE_2 = ALL_OD or OD_DA; 
gALL_OD_SR_NW_PRE_1 = interacting( gALL_OD_SR_NW_PRE_2, SEALRING_ALL ); 
ALL_OD_SR_NW = interacting( gALL_OD_SR_NW_PRE_1, NW );


ALL_CPO = CPO or SR_DCPO; 
FINAL_CPO = ALL_CPO or CPO_SRAM; 

OD2 = OD_12 or OD12_15;








// VT layers













gVT_E_1_PRE1 = VTS_P and FB_A; 
gVT_E_1_PRE2 = gVT_E_1_PRE1 or VTL_P; 
gVT_E_1_PRE3 = gVT_E_1_PRE2 or VTUL_P; 
gVT_E_1_PRE4 = gVT_E_1_PRE3 or VTUL_N; 
gVT_E_1_PRE5 = gVT_E_1_PRE4 or VTLN_LL; 
gVT_E_1_PRE6 = VTS_N not FB_A; 
VT_E_1 = gVT_E_1_PRE5 or gVT_E_1_PRE6; 
gVT_E_2_PRE1 = VTS_P not FB_A; 
gVT_E_2_PRE2 = gVT_E_2_PRE1 or VTEL_P; 
gVT_E_2_PRE3 = gVT_E_2_PRE2 or VTULN_LL; 
gVT_E_2_PRE4 = VTS_N and FB_A; 
VT_E_2 = gVT_E_2_PRE3 or gVT_E_2_PRE4; 
VT_E_3 = or_list({ VTULP_LL, VTUL_P, VTEL_P, VTS_N });
VT_E_4 = or_list({ VTLP_LL, VTL_P, VTL_N, VTLN_LL });
VT_E_5 = or_list({ VTS_P, VTEL_N, VTUL_N, VTULN_LL });


VTEL_N_AND_FB_A = VTEL_N and FB_A; 
VTEL_P_AND_FB_A = VTEL_P and FB_A; 
VTL_N_AND_FB_A = VTL_N and FB_A; 
VTLN_LL_AND_FB_A = VTLN_LL and FB_A; 
VTL_P_AND_FB_A = VTL_P and FB_A; 
VTLP_LL_AND_FB_A = VTLP_LL and FB_A; 
VTS_N_AND_FB_A = VTS_N and FB_A; 
VTS_P_AND_FB_A = VTS_P and FB_A; 
VTUL_N_AND_FB_A = VTUL_N and FB_A; 
VTULN_LL_AND_FB_A = VTULN_LL and FB_A; 
VTUL_P_AND_FB_A = VTUL_P and FB_A; 
VTULP_LL_AND_FB_A = VTULP_LL and FB_A; 



    gVT_5_WPO_PRE1 = angle_edge( ALL_PO, == 90 ); 
    gVT_5_WPO_PRE2 = internal1( gVT_5_WPO_PRE1, ( 0.003, 0.136 ), extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC );
    gVT_5_WPO_PRE3 = or_list({ VTL_N, VTS_N, VTUL_P });
    VT_5_WPO = interacting( gVT_5_WPO_PRE3, gVT_5_WPO_PRE2 ); 
    
    
    gVT_8_WPO_PRE1 = or_list( { VTUL_N, VTL_N, VTL_P } ); 
    gVT_8_WPO_PRE2 = angle_edge( ALL_PO, == 90 ); 
    gVT_8_WPO_PRE3 = internal1( gVT_8_WPO_PRE2, ( 0.003, 0.136 ), extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC );
    VT_8_WPO = interacting( gVT_8_WPO_PRE1, gVT_8_WPO_PRE3);
     
    gVT_9_WPO_PRE2 = angle_edge( ALL_PO, == 90 ); 
    gVT_9_WPO_PRE3 = internal1( gVT_9_WPO_PRE2, ( 0.003, 0.136 ), extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC );
    VT_9_WPO = interacting( VTS_P, gVT_9_WPO_PRE3); 















   ALL_STD_20 = or_list( { FB_29, FB_28, FB_26, FB_31, FB_36, FB_38 } ); 
   ALL_STD_20_HE = angle_edge( ALL_STD_20, == 0 ); 
   ALL_STD_20_VE = angle_edge( ALL_STD_20, == 90 ); 



VC = VG or VD; 


NPOD = OD and gNP; 
PPOD = OD and PP; 
layerdef_derive_11 = OD and gNP; 
NACT = layerdef_derive_11 not NW; 
layerdef_derive_12 = OD and PP; 
PACT = layerdef_derive_12 and NW; 

layerdef_derive_14 = OD and gNP; 
layerdef_derive_15 = interacting( NW, NWDMY ); 
layerdef_derive_16 = NW not layerdef_derive_15; 
NSTP = layerdef_derive_14 and layerdef_derive_16; 

layerdef_derive_17 = OD and PP; 
PSTP = layerdef_derive_17 not NW; 
ACTIVE = NACT or PACT; 
NWSTRAP = copy( NSTP, ancestry = true );
PWSTRAP = copy( PSTP, ancestry = true );
RWSTRAP = PSTP and RW;

IOPMOS_NSTRAP = (( OD12_15 and NW ) and ( PP or gNP )) or ( ( OD12_15 not NW ) and PP );

STRAP = NSTP or PSTP; 





PP_OD2 = PP and OD2;
IO_PW = OD2 not ( NW or NT_N ); 
IO_NW = ( OD2 and NW ) not NT_N; 
GATE = PO and OD; 

TPCFINAL = TPC not TPC_O; 
MPCFINAL = MPC not MPC_O; 
BPCFINAL = BPC not BPC_O; 
MIM_CHIP = interacting( CHIPX, BPC ); 
BPC_ALL = BPC or BPCDMY; 

MIM_CHIPA = copy( MIM_CHIP, ancestry = true ); // for density DRC coding
MIM_CHIPA = copy( MIM_CHIP, ancestry = true ); // for density DRC coding
















DVIA3_O = DVIA3_O_CA or DVIA3_O_CB; 






DVIA4_O = DVIA4_O_CA or DVIA4_O_CB; 


























































DVIA0 = empty_layer();

DVIA1 = empty_layer();

DVIA2 = empty_layer();

DVIA3 = empty_layer();

DVIA4 = empty_layer();











DVIA15_O = size( gEMPTY, clip_acute = TRUNCATE, distance = 7 ); 

DVIA16_O = size( gEMPTY, clip_acute = TRUNCATE, distance = 7 ); 



DVIA17 = size( gEMPTY, clip_acute = TRUNCATE, distance = 7 ); 
DVIA17_O = size( gEMPTY, clip_acute = TRUNCATE, distance = 8 );




DVIA18 = size( gEMPTY, clip_acute = TRUNCATE, distance = 8 ); 
DVIA18_O = size( gEMPTY, clip_acute = TRUNCATE, distance = 9 );



ALL_DVIA0 = DVIA0 or DVIA0_O; 
ALL_VIA0 = VIA0 or ALL_DVIA0;
ALL_DVIA1 = DVIA1 or DVIA1_O; 
ALL_VIA1 = VIA1 or ALL_DVIA1;
ALL_DVIA2 = DVIA2 or DVIA2_O; 
ALL_VIA2 = VIA2 or ALL_DVIA2;
ALL_DVIA3 = DVIA3 or DVIA3_O; 
ALL_VIA3 = VIA3 or ALL_DVIA3;
ALL_DVIA4 = DVIA4 or DVIA4_O; 
ALL_VIA4 = VIA4 or ALL_DVIA4;
ALL_DVIA5 = DVIA5 or DVIA5_O; 
ALL_VIA5 = VIA5 or ALL_DVIA5;
ALL_DVIA6 = DVIA6 or DVIA6_O; 
ALL_VIA6 = VIA6 or ALL_DVIA6;
ALL_DVIA7 = DVIA7 or DVIA7_O; 
ALL_VIA7 = VIA7 or ALL_DVIA7;
ALL_DVIA8 = DVIA8 or DVIA8_O; 
ALL_VIA8 = VIA8 or ALL_DVIA8;
ALL_DVIA9 = DVIA9 or DVIA9_O; 
ALL_VIA9 = VIA9 or ALL_DVIA9;
ALL_DVIA10 = DVIA10 or DVIA10_O; 
ALL_VIA10 = VIA10 or ALL_DVIA10;
ALL_DVIA11 = DVIA11 or DVIA11_O; 
ALL_VIA11 = VIA11 or ALL_DVIA11;
ALL_DVIA12 = DVIA12 or DVIA12_O; 
ALL_VIA12 = VIA12 or ALL_DVIA12;
ALL_DVIA13 = DVIA13 or DVIA13_O; 
ALL_VIA13 = VIA13 or ALL_DVIA13;
ALL_DVIA14 = DVIA14 or DVIA14_O; 
ALL_VIA14 = VIA14 or ALL_DVIA14;
ALL_DVIA15 = DVIA15 or DVIA15_O; 
ALL_VIA15 = VIA15 or ALL_DVIA15;
ALL_DVIA16 = DVIA16 or DVIA16_O; 
ALL_VIA16 = VIA16 or ALL_DVIA16;
ALL_DVIA17 = DVIA17 or DVIA17_O; 
ALL_VIA17 = VIA17 or ALL_DVIA17;
ALL_DVIA18 = DVIA18 or DVIA18_O; 
ALL_VIA18 = VIA18 or ALL_DVIA18;


STRAP_ALLOD = (  gNP and ALL_OD ) and ( NW not interacting( NW, NWDMY ) ) or ( ( PP and ALL_OD ) not NW ); 








layerdef_derive_24 = enclosing( ACTIVE, GATE ); 
SD = layerdef_derive_24 not GATE;                 /* Source, drain areas (ACTIVE) */ 
IMP = gNP or PP; 




layerdef_derive_119 = CPO or CPO_SRAM;
layerdef_derive_120 = PO not layerdef_derive_119;
ILP1I = copy( layerdef_derive_120, ancestry = true );             /* Final_CPO = OR ALL_CPO CPO_SRAM */

layerdef_derive_117 = CMD or SRAM_CMD;
layerdef_derive_118 = MD not layerdef_derive_117;
MD_NOT_CMDI = copy( layerdef_derive_118, ancestry = true );       /* SRAM_CMD = OR CO_SRAM12 CO_SRAM13 CO_SRAM14  */





M0_MAIN = M0_MAIN_CA or M0_MAIN_CB;
M0_MAIN_NOT_SR = M0_MAIN not SEALRING_ALL;

DM0_O = DM0_O_CA or DM0_O_CB; 
DM0 = DM0_CA or DM0_CB; 
M0_CA = M0_MAIN_CA or DM0_O_CA; 
M0_CB = M0_MAIN_CB or DM0_O_CB; 
ALL_M0_CA = or_list( { M0_MAIN_CA, DM0_O_CA, DM0_CA } ); 
ALL_M0_CB = or_list( { M0_MAIN_CB, DM0_O_CB, DM0_CB } ); 
ALL_DM0 = DM0_O or DM0; 
ALL_DM0_CA = DM0_O_CA or DM0_CA; 
ALL_DM0_CB = DM0_O_CB or DM0_CB; 
CM0A = CM0A_MAIN or DCM0A; 
CM0B = CM0B_MAIN or DCM0B; 
M0_CA_SIZE = size( M0_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 
DM0_CA_SIZE = size( DM0_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 
ALL_CM0 = CM0A or CM0B;
REAL_M0_CA = M0_CA not CM0A; 
REAL_M0_CB = M0_CB not CM0B; 
REAL_M0 = REAL_M0_CA or REAL_M0_CB; 
REAL_M0_MAIN_CA = M0_MAIN_CA not CM0A_MAIN; 
REAL_M0_MAIN_CB = M0_MAIN_CB not CM0B_MAIN; 
REAL_M0_MAIN = REAL_M0_MAIN_CA or REAL_M0_MAIN_CB; 

gDM0_O_GT42_PRE = internal1( DM0_O, <= 0.042, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC, direction = VERTICAL, orthogonal = BOTH );
DM0_O_GT42 = DM0_O not gDM0_O_GT42_PRE; 

gDM1_O_GT42_PRE = internal1( DM1_O, <= 0.042, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC, direction = HORIZONTAL, orthogonal = BOTH );
DM1_O_GT42 = DM1_O not gDM1_O_GT42_PRE; 



REAL_DM0_O_CA = DM0_O_CA not DCM0A; 
REAL_DM0_O_CB = DM0_O_CB not DCM0B; 
REAL_DM0_O = REAL_DM0_O_CA or REAL_DM0_O_CB; 
CM0A_M0CA = CM0A and M0_CA;
CM0B_M0CB = CM0B and M0_CB;
CM0B_M0CA = CM0B and M0_CA;
CM0A_NOTM0CA = CM0A not M0_CA;
CM0B_NOTM0CB = CM0B not M0_CB;

REAL_ALL_DM0 = or_list({ REAL_DM0_O_CA, REAL_DM0_O_CB, DM0 });

M0_CA_ANDBLK = M0_CA and BLK_M0; 
M0_CB_ANDBLK = M0_CB and BLK_M0;
M0_CA_ANDBLK_NOTJUMP = M0_CA_ANDBLK not M0_JUMP;
M0_CB_ANDBLK_NOTJUMP = M0_CB_ANDBLK not M0_JUMP;
M0_MAIN_NOTPAD = M0_MAIN not PAD_WAV; 
M0_MAIN_NOTBLK_PAD = M0_MAIN not ( BLK_M0 or PAD_WAV );




M1_MAIN_NOT_SR = M1_MAIN not SEALRING_ALL;


ALL_DM1 = DM1_O or DM1; 
















M2_BASE = M2_BASE_H or M2_BASE_V;
M2_MAIN_CA = M2_MAIN_CA_H or M2_MAIN_CA_V; 
M2_MAIN_CB = M2_MAIN_CB_H or M2_MAIN_CB_V; 

DM2_O_CA = DM2_O_CA_H or DM2_O_CA_V; 
DM2_O_CB = DM2_O_CB_H or DM2_O_CB_V; 
DM2_CA = DM2_CA_H or DM2_CA_V; 
DM2_CB = DM2_CB_H or DM2_CB_V; 
M2_MAIN = M2_MAIN_CA or M2_MAIN_CB; 
M2_MAIN_NOT_SR = M2_MAIN not SEALRING_ALL;
DM2_O = DM2_O_CA or DM2_O_CB; 
DM2 = DM2_CA or DM2_CB; 
M2_CA = M2_MAIN_CA or DM2_O_CA; 
M2_CB = M2_MAIN_CB or DM2_O_CB; 
ALL_M2_CA = or_list( { M2_MAIN_CA, DM2_O_CA, DM2_CA } ); 
ALL_M2_CB = or_list( { M2_MAIN_CB, DM2_O_CB, DM2_CB } );
ALL_DM2_CA = DM2_O_CA or DM2_CA; 
ALL_DM2_CB = DM2_O_CB or DM2_CB; 
ALL_DM2 = ALL_DM2_CA or ALL_DM2_CB;




M3_MAIN = M3_MAIN_H or M3_MAIN_V; 



M3DX = M3_MAIN_H or DM3_O_H; 
M3DY = M3_MAIN_V or DM3_O_V; 

DM3_O = DM3_O_H or DM3_O_V; 
DM3 = DM3_H or DM3_V; 
ALL_DM3 = DM3_O or DM3;
M3_MAIN_NOT_SR = M3_MAIN not SEALRING_ALL;

M3_MAIN_NOTPAD = M3_MAIN not PAD_WAV; 
M3_MAIN_NOTBLK_PAD = M3_MAIN not ( BLK_M3 or PAD_WAV );



M4_MAIN = M4_MAIN_H or M4_MAIN_V; 



M4DX = M4_MAIN_H or DM4_O_H; 
M4DY = M4_MAIN_V or DM4_O_V; 

DM4_O = DM4_O_H or DM4_O_V; 
DM4 = DM4_H or DM4_V; 
ALL_DM4 = DM4_O or DM4;
M4_MAIN_NOT_SR = M4_MAIN not SEALRING_ALL;

M4_MAIN_NOTPAD = M4_MAIN not PAD_WAV;



M5_BASE = M5_BASE_H or M5_BASE_V;
M5_MAIN_CA = M5_MAIN_CA_H or M5_MAIN_CA_V; 
M5_MAIN_CB = M5_MAIN_CB_H or M5_MAIN_CB_V; 

M5DX_CA = M5_MAIN_CA_H or DM5_O_CA_H; 
M5DY_CA = M5_MAIN_CA_V or DM5_O_CA_V; 
M5DX_CB = M5_MAIN_CB_H or DM5_O_CB_H; 
M5DY_CB = M5_MAIN_CB_V or DM5_O_CB_V; 

DM5_O_CA = DM5_O_CA_H or DM5_O_CA_V; 
DM5_O_CB = DM5_O_CB_H or DM5_O_CB_V; 
DM5_CA = DM5_CA_H or DM5_CA_V; 
DM5_CB = DM5_CB_H or DM5_CB_V; 
M5_MAIN = M5_MAIN_CA or M5_MAIN_CB; 
DM5_O = DM5_O_CA or DM5_O_CB; 
DM5 = DM5_CA or DM5_CB; 
M5_MAIN_NOT_SR = M5_MAIN not SEALRING_ALL;
M5_CA = M5_MAIN_CA or DM5_O_CA; 
M5_CB = M5_MAIN_CB or DM5_O_CB; 
ALL_M5_CA = or_list( { M5_MAIN_CA, DM5_O_CA, DM5_CA } ); 
ALL_M5_CB = or_list( { M5_MAIN_CB, DM5_O_CB, DM5_CB } ); 
ALL_DM5_CA = DM5_O_CA or DM5_CA; 
ALL_DM5_CB = DM5_O_CB or DM5_CB; 
ALL_DM5 = ALL_DM5_CA or ALL_DM5_CB; 

M5_MAIN_NOTPAD = M5_MAIN not PAD_WAV;
M5_CA_SIZE = size( M5_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 
DM5_CA_SIZE = size( DM5_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 

M5DX = M5DX_CA or M5DX_CB; 
M5DY = M5DY_CA or M5DY_CB; 


M6_MAIN = M6_MAIN_H or M6_MAIN_V; 

M6DX = M6_MAIN_H or DM6_O_H; 
M6DY = M6_MAIN_V or DM6_O_V; 

DM6_O = DM6_O_H or DM6_O_V; 
DM6 = DM6_H or DM6_V; 
ALL_DM6 = DM6_O or DM6;
M6_MAIN_NOT_SR = M6_MAIN not SEALRING_ALL;





M7_MAIN = M7_MAIN_H or M7_MAIN_V; 

M7DX = M7_MAIN_H or DM7_O_H; 
M7DY = M7_MAIN_V or DM7_O_V; 

DM7_O = DM7_O_H or DM7_O_V; 
DM7 = DM7_H or DM7_V; 
ALL_DM7 = DM7_O or DM7;
M7_MAIN_NOT_SR = M7_MAIN not SEALRING_ALL;





M8_MAIN = M8_MAIN_H or M8_MAIN_V; 

M8DX = M8_MAIN_H or DM8_O_H; 
M8DY = M8_MAIN_V or DM8_O_V; 

DM8_O = DM8_O_H or DM8_O_V; 
DM8 = DM8_H or DM8_V; 
ALL_DM8 = DM8_O or DM8;
M8_MAIN_NOT_SR = M8_MAIN not SEALRING_ALL;





M9_MAIN = M9_MAIN_H or M9_MAIN_V; 

M9DX = M9_MAIN_H or DM9_O_H; 
M9DY = M9_MAIN_V or DM9_O_V; 

DM9_O = DM9_O_H or DM9_O_V; 
DM9 = DM9_H or DM9_V; 
ALL_DM9 = DM9_O or DM9;
M9_MAIN_NOT_SR = M9_MAIN not SEALRING_ALL;





M10_MAIN = M10_MAIN_H or M10_MAIN_V; 

M10DX = M10_MAIN_H or DM10_O_H; 
M10DY = M10_MAIN_V or DM10_O_V; 

DM10_O = DM10_O_H or DM10_O_V; 
DM10 = DM10_H or DM10_V; 
ALL_DM10 = DM10_O or DM10;
M10_MAIN_NOT_SR = M10_MAIN not SEALRING_ALL;





M11_MAIN = M11_MAIN_H or M11_MAIN_V; 

M11DX = M11_MAIN_H or DM11_O_H; 
M11DY = M11_MAIN_V or DM11_O_V; 

DM11_O = DM11_O_H or DM11_O_V; 
DM11 = DM11_H or DM11_V; 
ALL_DM11 = DM11_O or DM11;
M11_MAIN_NOT_SR = M11_MAIN not SEALRING_ALL;





M12_MAIN = M12_MAIN_H or M12_MAIN_V; 

M12DX = M12_MAIN_H or DM12_O_H; 
M12DY = M12_MAIN_V or DM12_O_V; 

DM12_O = DM12_O_H or DM12_O_V; 
DM12 = DM12_H or DM12_V; 
ALL_DM12 = DM12_O or DM12;
M12_MAIN_NOT_SR = M12_MAIN not SEALRING_ALL;





M13_MAIN = M13_MAIN_H or M13_MAIN_V; 

M13DX = M13_MAIN_H or DM13_O_H; 
M13DY = M13_MAIN_V or DM13_O_V; 

DM13_O = DM13_O_H or DM13_O_V; 
DM13 = DM13_H or DM13_V; 
ALL_DM13 = DM13_O or DM13;
M13_MAIN_NOT_SR = M13_MAIN not SEALRING_ALL;





ALL_DM14 = DM14_O or DM14;

ALL_DM15 = DM15_O or DM15;

DM16_O = empty_layer();
ALL_DM16 = DM16_O or DM16;



DM17_O = empty_layer();
ALL_DM17 = DM17_O or DM17;




DM18_O = empty_layer();
ALL_DM18 = DM18;



DM19_O = empty_layer();
ALL_DM19 = DM19;



M0 = M0_MAIN or DM0_O; 
ALL_M0 = or_list( { M0_MAIN, DM0_O, DM0 } );

M1 = M1_MAIN or DM1_O; 
ALL_M1 = or_list( { M1_MAIN, DM1_O, DM1 } );

M2 = M2_MAIN or DM2_O; 
ALL_M2 = or_list( { M2_MAIN, DM2_O, DM2 } );

M3 = M3_MAIN or DM3_O; 
ALL_M3 = or_list( { M3_MAIN, DM3_O, DM3 } );

M4 = M4_MAIN or DM4_O; 
ALL_M4 = or_list( { M4_MAIN, DM4_O, DM4 } );

M5 = M5_MAIN or DM5_O; 
ALL_M5 = or_list( { M5_MAIN, DM5_O, DM5 } );

M6 = M6_MAIN or DM6_O; 
ALL_M6 = or_list( { M6_MAIN, DM6_O, DM6 } );

M7 = M7_MAIN or DM7_O; 
ALL_M7 = or_list( { M7_MAIN, DM7_O, DM7 } );

M8 = M8_MAIN or DM8_O; 
ALL_M8 = or_list( { M8_MAIN, DM8_O, DM8 } );

M9 = M9_MAIN or DM9_O; 
ALL_M9 = or_list( { M9_MAIN, DM9_O, DM9 } );

M10 = M10_MAIN or DM10_O; 
ALL_M10 = or_list( { M10_MAIN, DM10_O, DM10 } );

M11 = M11_MAIN or DM11_O; 
ALL_M11 = or_list( { M11_MAIN, DM11_O, DM11 } );

M12 = M12_MAIN or DM12_O; 
ALL_M12 = or_list( { M12_MAIN, DM12_O, DM12 } );

M13 = M13_MAIN or DM13_O; 
ALL_M13 = or_list( { M13_MAIN, DM13_O, DM13 } );

M14 = M14_MAIN or DM14_O; 
ALL_M14 = or_list( { M14_MAIN, DM14_O, DM14 } );

M15 = M15_MAIN or DM15_O; 
ALL_M15 = or_list( { M15_MAIN, DM15_O, DM15 } );

M16 = M16_MAIN or DM16_O; 
ALL_M16 = or_list( { M16_MAIN, DM16_O, DM16 } );

M17 = M17_MAIN or DM17_O; 
ALL_M17 = or_list( { M17_MAIN, DM17_O, DM17 } );

M18 = M18_MAIN or DM18_O; 
ALL_M18 = or_list( { M18_MAIN, DM18_O, DM18 } );

M19 = M19_MAIN or DM19_O; 
ALL_M19 = or_list( { M19_MAIN, DM19_O, DM19 } );




REAL_M0_CA_AND_CM0B_AND_SRAMDMY = ( REAL_M0_CA and CM0B ) and SRAMDMY;
FLOATING_M0_JUMPER = M0 inside M0_JUMP;

M0_LT16 = wide( M0, < 0.016, forty_five = INTERNAL );
M0_LT18 = wide( M0, < 0.018, forty_five = INTERNAL );
M0_LT20 = wide( M0, < 0.02, forty_five = INTERNAL );
M0_LT24 = wide( M0, < 0.024, forty_five = INTERNAL );
M0_LT28 = wide( M0, < 0.028, forty_five = INTERNAL );
M0_MAIN_W39 = internal1( M0_MAIN, == 0.039, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC, direction = VERTICAL, orthogonal = BOTH ); 
REAL_M0_INSIDE_BCM0H = REAL_M0 inside BCM0H; 
DENSE_W13_PRE = shrink( grow( wide( M0, == 0.013, forty_five = INTERNAL ), north = 0.005, south = 0.005 ), north = 0.005, south = 0.005 );
DENSE_W13 = shrink( DENSE_W13_PRE, north = 0.046, south = 0.046 );
DENSE_W14_PRE = shrink( grow( wide( M0, == 0.014, forty_five = INTERNAL ), north = 0.005, south = 0.005 ), north = 0.005, south = 0.005 );
DENSE_W14 = shrink( DENSE_W14_PRE, north = 0.048, south = 0.048 );
DENSE_W16_PRE = shrink( grow( wide( M0, == 0.016, forty_five = INTERNAL ), north = 0.005, south = 0.005 ), north = 0.005, south = 0.005 );
DENSE_W16 = shrink( DENSE_W16_PRE, north = 0.052, south = 0.052 );




























METALFUSELINK_99NM = grow( METALFUSELINK, north = 0.099, south = 0.099 ); 
METALFUSELINK_M2_1NM = grow( ( M2 and METALFUSELINK ), north = 0.001, south = 0.001 ); 
SLR_PO = SEALRING_ALL and ALL_PO;
CHIP_CB2_FC = gCHIP interacting CB2_FC; 
CHIP_PM = ( gCHIP not SEALRING_ALL ) interacting PM; 

CHIP_PMA = CHIP_PM or gEMPTY;             /* fOR density DRC coding */
CHIP_CB2_FCA = CHIP_CB2_FC or gEMPTY;     /* fOR density DRC coding */

CHIP_AP_UPAD_MARKER = interacting( gCHIP, AP_UPAD_MARKER ); 
CHIP_RV = interacting( gCHIP, RV ); 
CHIP_CU_RV = interacting( gCHIP, CU_RV ); 
CHIP_AP = interacting( gCHIP, AP ); 
CHIP_CU_RDL = interacting( gCHIP, CU_RDL ); 

CHIP_CU_CB2_FC = gCHIP interacting ( CU_CB2_FC or CU_CB2_FCU ); 






M0_NOTJUMP = M0 not M0_JUMP;
M1_NOTJUMP = M1 not M1_JUMP;
M1_JUMP_BLK_M2 = M1_JUMP and BLK_M2;

M0_MAIN_OR_BREAK = M0_MAIN or M0_BREAK_BLK;
M0_MAIN_W14 = internal1( M0_MAIN, == 0.014, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC, direction = VERTICAL, orthogonal = BOTH );






M1_NOT_INT_BLK = not_interacting( M1, BLK_M1 ); 
M1_MAIN_NOTPAD = M1_MAIN not PAD_WAV; 
M1_MAIN_NOTBLK_PAD = M1_MAIN not ( BLK_M1 or PAD_WAV );






















M2_CA_SIZE = size( M2_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 
DM2_CA_SIZE = size( DM2_CA, clip_acute = TRUNCATE, distance = 0.0005 ); 
M2_NOT_INT_BLK = not_interacting( M2, BLK_M2 ); 
M2_CA_NOT_INT_BLK = M2_CA not_interacting BLK_M2;
M2_CB_NOT_INT_BLK = M2_CB not_interacting BLK_M2;
M2_MAIN_NOTBLK_PAD = M2_MAIN not ( BLK_M2 or PAD_WAV );
M2_CA_ANDBLK = M2_CA and BLK_M2 ;
M2_CB_ANDBLK = M2_CB and BLK_M2;
M2_CA_ANDBLK_NOTJUMP = M2_CA_ANDBLK not M2_JUMP;
M2_CB_ANDBLK_NOTJUMP = M2_CB_ANDBLK not M2_JUMP;
FLOATING_M2_JUMPER = M2 inside M2_JUMP;




























TPC_GND_FINAL = TPC_GND not TPC_GND_O; 
MPC_LV_FINAL = MPC_LV not MPC_LV_O; 
BPC_GND_FINAL = BPC_GND not BPC_GND_O; 
BPC_HV1_FINAL = BPC_HV1 not BPC_HV1_O; 

BPC_HV2_FINAL = BPC_HV2 not BPC_HV2_O; 
BPC_LV_FINAL = BPC_LV not BPC_LV_O; 
PMIM_BPC = or_list({ BPC_LV_FINAL, BPC_HV1_FINAL, BPC_HV2_FINAL }); 

PMIM_CHIP = interacting( gCHIP, PMIM_BPC ); 
GND_FINAL = TPC_GND_FINAL or BPC_GND_FINAL; 
LV_FINAL = or_list({ MPC_LV_FINAL, BPC_LV_FINAL }); 

GND_RV = ((((CU_RV interacting PMIM_CHIP) interacting GND_FINAL) not_interacting LV_FINAL) not_interacting BPC_HV1_FINAL) not_interacting BPC_HV2_FINAL;
HV_RV = (((CU_RV interacting PMIM_CHIP) interacting (BPC_HV1_FINAL or BPC_HV2_FINAL)) not_interacting LV_FINAL) not_interacting GND_FINAL;
LV_RV = ((((CU_RV interacting PMIM_CHIP) interacting LV_FINAL) not_interacting GND_FINAL) not_interacting BPC_HV1_FINAL) not_interacting BPC_HV2_FINAL;


TPC_GND_FINALI = copy( TPC_GND_FINAL, ancestry = true ); 
BPC_GND_FINALI = copy( BPC_GND_FINAL, ancestry = true ); 
MPC_LV_FINALI = copy( MPC_LV_FINAL, ancestry = true ); 
BPC_LV_FINALI = copy( BPC_LV_FINAL, ancestry = true ); 
BPC_HV1_FINALI = copy( BPC_HV1_FINAL, ancestry = true ); 
BPC_HV2_FINALI = copy( BPC_HV2_FINAL, ancestry = true ); 
GND_RVI = copy( GND_RV, ancestry = true ); 
HV_RVI = copy( HV_RV, ancestry = true ); 
LV_RVI = copy( LV_RV, ancestry = true ); 







DNWI = copy( DNW, ancestry = true ); 
NWI = copy( NW, ancestry = true ); 
layerdef_derive_113 = interacting( NW, NWDMY ); 
layerdef_derive_114 = layerdef_derive_113 not NWDMY; 
NWRIT = copy( layerdef_derive_114, ancestry = true ); 
PWI = copy( PW, ancestry = true ); 
RWI = copy( RW, ancestry = true ); 
NSTPI = copy( NSTP, ancestry = true ); 
PSTPI = copy( PSTP, ancestry = true ); 
layerdef_derive_115 = NACT not ALL_PO; 
NSDC = copy( layerdef_derive_115, ancestry = true );
layerdef_derive_116 = PACT not ALL_PO; 
PSDC = copy( layerdef_derive_116, ancestry = true );
ODC = or_list( { NSTPI, PSTPI, NSDC, PSDC } ); 
MPI = copy( MP, ancestry = true ); 
GATEI = copy( GATE, ancestry = true );
CPODE_NET = ILP1I and CPODE;
VDI = copy( VD, ancestry = true ); 
VD_NOT_M0 = VD not M0;
VGI = copy( VG, ancestry = true ); 
VDRI = copy( VDR, ancestry = true );
VD2I = copy( VD2, ancestry = true ); 

layerdef_derive_121 = RH_TN not RHDMY_ALL; 
RHTNC = copy( layerdef_derive_121, ancestry = true );


OD_HV_ID = text_to_double_property( tODV_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
OD_LV_ID = text_to_double_property( tODV_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
PO_HV_ID = text_to_double_property( tPOV_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
PO_LV_ID = text_to_double_property( tPOV_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
MD_HV_ID = text_to_double_property( tMDV_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
MD_LV_ID = text_to_double_property( tMDV_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
MD_USERDV_ID = text_to_double_property( tMD_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
MD_USERDV_TOP_ID = text_to_double_property( tMD_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M0_HV_ID = text_to_double_property( tM0V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M0_LV_ID = text_to_double_property( tM0V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M0_USERDV_ID = text_to_double_property( tM0_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M1_HV_ID = text_to_double_property( tM1V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M1_LV_ID = text_to_double_property( tM1V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M1_USERDV_ID = text_to_double_property( tM1_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M2_HV_ID = text_to_double_property( tM2V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M2_LV_ID = text_to_double_property( tM2V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M2_USERDV_ID = text_to_double_property( tM2_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M3_HV_ID = text_to_double_property( tM3V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M3_LV_ID = text_to_double_property( tM3V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M3_USERDV_ID = text_to_double_property( tM3_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M4_HV_ID = text_to_double_property( tM4V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M4_LV_ID = text_to_double_property( tM4V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M4_USERDV_ID = text_to_double_property( tM4_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M5_HV_ID = text_to_double_property( tM5V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M5_LV_ID = text_to_double_property( tM5V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M5_USERDV_ID = text_to_double_property( tM5_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M6_HV_ID = text_to_double_property( tM6V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M6_LV_ID = text_to_double_property( tM6V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M6_USERDV_ID = text_to_double_property( tM6_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M7_HV_ID = text_to_double_property( tM7V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M7_LV_ID = text_to_double_property( tM7V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M7_USERDV_ID = text_to_double_property( tM7_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M8_HV_ID = text_to_double_property( tM8V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M8_LV_ID = text_to_double_property( tM8V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M8_USERDV_ID = text_to_double_property( tM8_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M9_HV_ID = text_to_double_property( tM9V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M9_LV_ID = text_to_double_property( tM9V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M9_USERDV_ID = text_to_double_property( tM9_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M10_HV_ID = text_to_double_property( tM10V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M10_LV_ID = text_to_double_property( tM10V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M10_USERDV_ID = text_to_double_property( tM10_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M11_HV_ID = text_to_double_property( tM11V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M11_LV_ID = text_to_double_property( tM11V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M11_USERDV_ID = text_to_double_property( tM11_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M12_HV_ID = text_to_double_property( tM12V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M12_LV_ID = text_to_double_property( tM12V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M12_USERDV_ID = text_to_double_property( tM12_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M13_HV_ID = text_to_double_property( tM13V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M13_LV_ID = text_to_double_property( tM13V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M13_USERDV_ID = text_to_double_property( tM13_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M14_HV_ID = text_to_double_property( tM14V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M14_LV_ID = text_to_double_property( tM14V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M14_USERDV_ID = text_to_double_property( tM14_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M15_HV_ID = text_to_double_property( tM15V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M15_LV_ID = text_to_double_property( tM15V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M15_USERDV_ID = text_to_double_property( tM15_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M16_HV_ID = text_to_double_property( tM16V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M16_LV_ID = text_to_double_property( tM16V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M16_USERDV_ID = text_to_double_property( tM16_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M17_HV_ID = text_to_double_property( tM17V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M17_LV_ID = text_to_double_property( tM17V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M17_USERDV_ID = text_to_double_property( tM17_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M18_HV_ID = text_to_double_property( tM18V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M18_LV_ID = text_to_double_property( tM18V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M18_USERDV_ID = text_to_double_property( tM18_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M19_HV_ID = text_to_double_property( tM19V_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M19_LV_ID = text_to_double_property( tM19V_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M19_USERDV_ID = text_to_double_property( tM19_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);

M0_HV_ID_TOP = text_to_double_property( tM0V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M0_LV_ID_TOP = text_to_double_property( tM0V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M0_USERDV_TOP_ID = text_to_double_property( tM0_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M1_HV_ID_TOP = text_to_double_property( tM1V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M1_LV_ID_TOP = text_to_double_property( tM1V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M1_USERDV_TOP_ID = text_to_double_property( tM1_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M2_HV_ID_TOP = text_to_double_property( tM2V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M2_LV_ID_TOP = text_to_double_property( tM2V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M2_USERDV_TOP_ID = text_to_double_property( tM2_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M3_HV_ID_TOP = text_to_double_property( tM3V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M3_LV_ID_TOP = text_to_double_property( tM3V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M3_USERDV_TOP_ID = text_to_double_property( tM3_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M4_HV_ID_TOP = text_to_double_property( tM4V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M4_LV_ID_TOP = text_to_double_property( tM4V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M4_USERDV_TOP_ID = text_to_double_property( tM4_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M5_HV_ID_TOP = text_to_double_property( tM5V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M5_LV_ID_TOP = text_to_double_property( tM5V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M5_USERDV_TOP_ID = text_to_double_property( tM5_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M6_HV_ID_TOP = text_to_double_property( tM6V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M6_LV_ID_TOP = text_to_double_property( tM6V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M6_USERDV_TOP_ID = text_to_double_property( tM6_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M7_HV_ID_TOP = text_to_double_property( tM7V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M7_LV_ID_TOP = text_to_double_property( tM7V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M7_USERDV_TOP_ID = text_to_double_property( tM7_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M8_HV_ID_TOP = text_to_double_property( tM8V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M8_LV_ID_TOP = text_to_double_property( tM8V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M8_USERDV_TOP_ID = text_to_double_property( tM8_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M9_HV_ID_TOP = text_to_double_property( tM9V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M9_LV_ID_TOP = text_to_double_property( tM9V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M9_USERDV_TOP_ID = text_to_double_property( tM9_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M10_HV_ID_TOP = text_to_double_property( tM10V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M10_LV_ID_TOP = text_to_double_property( tM10V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M10_USERDV_TOP_ID = text_to_double_property( tM10_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M11_HV_ID_TOP = text_to_double_property( tM11V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M11_LV_ID_TOP = text_to_double_property( tM11V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M11_USERDV_TOP_ID = text_to_double_property( tM11_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M12_HV_ID_TOP = text_to_double_property( tM12V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M12_LV_ID_TOP = text_to_double_property( tM12V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M12_USERDV_TOP_ID = text_to_double_property( tM12_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M13_HV_ID_TOP = text_to_double_property( tM13V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M13_LV_ID_TOP = text_to_double_property( tM13V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M13_USERDV_TOP_ID = text_to_double_property( tM13_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M14_HV_ID_TOP = text_to_double_property( tM14V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M14_LV_ID_TOP = text_to_double_property( tM14V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M14_USERDV_TOP_ID = text_to_double_property( tM14_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M15_HV_ID_TOP = text_to_double_property( tM15V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M15_LV_ID_TOP = text_to_double_property( tM15V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M15_USERDV_TOP_ID = text_to_double_property( tM15_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M16_HV_ID_TOP = text_to_double_property( tM16V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M16_LV_ID_TOP = text_to_double_property( tM16V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M16_USERDV_TOP_ID = text_to_double_property( tM16_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M17_HV_ID_TOP = text_to_double_property( tM17V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M17_LV_ID_TOP = text_to_double_property( tM17V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M17_USERDV_TOP_ID = text_to_double_property( tM17_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M18_HV_ID_TOP = text_to_double_property( tM18V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M18_LV_ID_TOP = text_to_double_property( tM18V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M18_USERDV_TOP_ID = text_to_double_property( tM18_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);
M19_HV_ID_TOP = text_to_double_property( tM19V_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
M19_LV_ID_TOP = text_to_double_property( tM19V_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
M19_USERDV_TOP_ID = text_to_double_property( tM19_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);

AP_HV_ID = text_to_double_property( tAPV_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
AP_LV_ID = text_to_double_property( tAPV_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
AP_USERDV_ID = text_to_double_property( tAP_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);

AP_HV_ID_TOP = text_to_double_property( tAPV_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
AP_LV_ID_TOP = text_to_double_property( tAPV_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
AP_USERDV_TOP_ID = text_to_double_property( tAP_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);


CU_RDL_HV_ID = text_to_double_property( tCU_RDLV_HIGH, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
CU_RDL_LV_ID = text_to_double_property( tCU_RDLV_LOW, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
CU_RDL_USERDV_ID = text_to_double_property( tCU_RDL_USERDV, "userdv", MAX, report_errors = { }, box_size = DRCGRID);

CU_RDL_HV_ID_TOP = text_to_double_property( tCU_RDLV_HIGH_TOP, "high", MAX, report_errors = { }, box_size = DRCGRID ); 
CU_RDL_LV_ID_TOP = text_to_double_property( tCU_RDLV_LOW_TOP, "low", MIN, report_errors = { }, box_size = DRCGRID ); 
CU_RDL_USERDV_TOP_ID = text_to_double_property( tCU_RDL_USERDV_TOP, "userdv", MAX, report_errors = { }, box_size = DRCGRID);



M0_NOT_CM0I = copy( REAL_M0_MAIN, ancestry = true ); 

M0_NOT_CM0I = M0_NOT_CM0I or (size(M0_HV_ID, clip_acute = TRUNCATE, distance = GRID ) and M0_NOT_CM0I) or (size(M0_LV_ID, clip_acute = TRUNCATE, distance = GRID ) and M0_NOT_CM0I);


M1I = copy( M1_MAIN, ancestry = true ); 

M2I = copy( M2_MAIN, ancestry = true ); 

M3I = copy( M3_MAIN, ancestry = true ); 


M4I = copy( M4_MAIN, ancestry = true ); 


M5I = copy( M5_MAIN, ancestry = true ); 


M6I = copy( M6_MAIN, ancestry = true ); 


M7I = copy( M7_MAIN, ancestry = true ); 


M8I = copy( M8_MAIN, ancestry = true ); 


M9I = copy( M9_MAIN, ancestry = true ); 


M10I = copy( M10_MAIN, ancestry = true ); 


M11I = copy( M11_MAIN, ancestry = true ); 


M12I = copy( M12_MAIN, ancestry = true ); 


M13I = copy( M13_MAIN, ancestry = true ); 


M14I = copy( M14_MAIN, ancestry = true );

M15I = copy( M15_MAIN, ancestry = true );

M16I = copy( M16_MAIN, ancestry = true ); 


M17I = copy( M17_MAIN, ancestry = true ); 


M18I = copy( M18_MAIN, ancestry = true ); 


M19I = copy( M19_MAIN, ancestry = true ); 





VIA0I = copy( VIA0, ancestry = true ); 

VIA1I = copy( VIA1, ancestry = true ); 

VIA2I = copy( VIA2, ancestry = true ); 

VIA3I = copy( VIA3, ancestry = true ); 

VIA4I = copy( VIA4, ancestry = true ); 

VIA5I = copy( VIA5, ancestry = true ); 

VIA6I = copy( VIA6, ancestry = true ); 

VIA7I = copy( VIA7, ancestry = true ); 

VIA8I = copy( VIA8, ancestry = true ); 

VIA9I = copy( VIA9, ancestry = true ); 

VIA10I = copy( VIA10, ancestry = true ); 

VIA11I = copy( VIA11, ancestry = true ); 

VIA12I = copy( VIA12, ancestry = true ); 

VIA13I = copy( VIA13, ancestry = true ); 

VIA14I = copy( VIA14, ancestry = true ); 

VIA15I = copy( VIA15, ancestry = true ); 

VIA16I = copy( VIA16, ancestry = true ); 

VIA17I = copy( VIA17, ancestry = true ); 

VIA18I = copy( VIA18, ancestry = true ); 

TSVI = copy( TSV, ancestry = true ); 

RVI = copy( RV, ancestry = true ); 

CU_RVI = copy( CU_RV, ancestry = true ); 

CBI = copy( CB, ancestry = true ); 
HBCI = copy( HBC, ancestry = true ); 
API = copy( AP, ancestry = true ); 

CU_RDLI = copy( CU_RDL, ancestry = true );
HBLI = copy( HBL, ancestry = true ); 


CU_CB2_FCI = copy( CU_CB2_FC, ancestry = true ); 
CU_CB2_FCUI = copy( CU_CB2_FCU, ancestry = true ); 
CU_CB2_FCU_P36I = copy( CU_CB2_FCU_P36, ancestry = true ); 

CB2WI = copy( CB2_WB, ancestry = true ); 
CB2FI = copy( CB2_FC, ancestry = true );  // duplicate with CB2_FCi to keep old derived term for general customer
UBMI = copy( UBM, ancestry = true ); 
UUBMI = copy( UUBM, ancestry = true ); 
V_UUBMI = copy( V_UUBM, ancestry = true ); 
PM0I = copy( PM0, ancestry = true ); 
PMI = copy( PM, ancestry = true ); 
CB2_FCI = copy( CB2_FC, ancestry = true ); 
PM_FCI = copy( PM_FC, ancestry = true ); 
UBM_FCI = copy( UBM_FC, ancestry = true ); 
CB2_FCUI = copy( CB2_FCU, ancestry = true ); 
PM_FCUI = copy( PM_FCU, ancestry = true ); 
UBM_FCUI = copy( UBM_FCU, ancestry = true ); 
CB2_INI = copy( CB2_IN, ancestry = true ); 
PM_INI = copy( PM_IN, ancestry = true ); 
PM0_INI = copy( PM0_IN, ancestry = true ); 
CB2_INUI = copy( CB2_INU, ancestry = true ); 
PM_INUI = copy( PM_INU, ancestry = true ); 
PM0_INUI = copy( PM0_INU, ancestry = true ); 
BPMTI = copy( BPMT, ancestry = true ); 
BPVTI = copy( BPVT, ancestry = true ); 
CB2_SACI = copy( CB2_SAC, ancestry = true );
PM0_SACI = copy( PM0_SAC, ancestry = true );

BPCI = BPCFINAL inside TPCDMY_AP;
MPCI = MPCFINAL inside TPCDMY_AP;
TPCI = TPCFINAL inside TPCDMY_AP;

BPC_CUI = BPCFINAL inside TPCDMY_CU;  // BPCFINAL_Cu_net (BPCFINAL tsmc_inside TPCDMY_Cu) with net connection property (connection broken after HiR Resistor). DRC use BPC_Cui as connection terms.
MPC_CUI = MPCFINAL inside TPCDMY_CU;  // MPCFINAL_Cu_net (MPCFINAL tsmc_inside TPCDMY_Cu) with net connection property (connection broken after HiR Resistor). DRC use MPC_Cui as connection terms.
TPC_CUI = TPCFINAL inside TPCDMY_CU;  // TPCFINAL_Cu_net (TPCFINAL tsmc_inside TPCDMY_Cu) with net connection property (connection broken after HiR Resistor). DRC use TPC_Cui as connection terms.








//================ FBE connection layer derived start :Combo1+Combo2 ====================

//================ FBE connection layer derived end :Combo1+Combo2 ====================
// i connection start


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ NWI, DNWI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ NSTPI, NWI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ PSTPI, PWI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ PSTPI, RWI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ NSTPI, PSDC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ PSTPI, NSDC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ NSDC, ODC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ PSDC, ODC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ PSTPI, ODC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ NSTPI, ODC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ MD_NOT_CMDI, NWRIT }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ MD_NOT_CMDI, NSDC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ MD_NOT_CMDI, PSDC }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ MD_NOT_CMDI, PSTPI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ MD_NOT_CMDI, NSTPI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ VDI, MD_NOT_CMDI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ VGI, ILP1I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ VDRI, MD_NOT_CMDI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ GATEI, ILP1I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ VGI, VDRI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M0_NOT_CM0I, VDI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M0_NOT_CM0I, VGI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M0_NOT_CM0I, VDRI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M1I, M0_NOT_CM0I }, VIA0I, NONE }} ); 

CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M2I, M1I }, VIA1I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M3I, M2I }, VIA2I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M4I, M3I }, VIA3I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M5I, M4I }, VIA4I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M6I, M5I }, VIA5I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M7I, RHTNC, M6I }, VIA6I, NONE, SHIELDED_OVERLAP }} ); 



CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M8I, M7I }, VIA7I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M9I, M8I }, VIA8I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M10I, M9I }, VIA9I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M11I, M10I }, VIA10I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M12I, M11I }, VIA11I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M13I, M12I }, VIA12I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M14I, M13I }, VIA13I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M15I, M14I }, VIA14I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M16I, M15I }, VIA15I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M17I, M16I }, VIA16I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M18I, M17I }, VIA17I, NONE }} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M19I, M18I }, VIA18I, NONE }} ); 



CONNECT_DB = incremental_connect( CONNECT_DB, {{{ TSVI, M18I }}} ); 

CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M19I, RVI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M19I, CBI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M19I, CU_RVI }}} );
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ M19I, HBCI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ RVI, API }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CBI, API }}} );

CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CBI, CU_RDLI }}} );
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RVI, CU_RDLI }}} );
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ HBCI, HBLI }}} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ RVI, M19I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ RVI, BPCI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ RVI, MPCI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ RVI, TPCI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ API, RVI }}} ); 


CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RVI, M19I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RVI, BPC_CUI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RVI, MPC_CUI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RVI, TPC_CUI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RDLI, CU_RVI }}} ); 



CONNECT_DB = incremental_connect( CONNECT_DB, {{{ LV_RVI, M19I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ LV_RVI, BPC_LV_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ LV_RVI, MPC_LV_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RDLI, LV_RVI }}} ); 

CONNECT_DB = incremental_connect( CONNECT_DB, {{{ GND_RVI, M19I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ GND_RVI, BPC_GND_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ GND_RVI, TPC_GND_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RDLI, GND_RVI }}} ); 

CONNECT_DB = incremental_connect( CONNECT_DB, {{{ HV_RVI, M19I }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ HV_RVI, BPC_HV1_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ HV_RVI, BPC_HV2_FINALI }}} ); 
CONNECT_DB = incremental_connect( CONNECT_DB, {{{ CU_RDLI, HV_RVI }}} ); 


//================ FBE connection start :Combo1+Combo2 ====================



// i connection end
//================ FBE connection end :Combo1+Combo2 ====================












TSV_VIA0 = VIA0 and TSV_BLK; 
TSV_M1 = M1_MAIN and TSV_BLK; 


TSV_VIA1 = VIA1 and TSV_BLK; 
TSV_M2 = M2_MAIN and TSV_BLK; 



TSV_VIA2 = VIA2 and TSV_BLK; 
TSV_M3 = M3_MAIN and TSV_BLK; 



TSV_VIA3 = VIA3 and TSV_BLK; 
TSV_M4 = M4_MAIN and TSV_BLK; 



TSV_VIA4 = VIA4 and TSV_BLK; 
TSV_M5 = M5_MAIN and TSV_BLK; 



TSV_VIA5 = VIA5 and TSV_BLK; 
TSV_M6 = M6_MAIN and TSV_BLK; 



TSV_VIA6 = VIA6 and TSV_BLK; 
TSV_M7 = M7_MAIN and TSV_BLK; 



TSV_VIA7 = VIA7 and TSV_BLK; 
TSV_M8 = M8_MAIN and TSV_BLK; 


TSV_VIA8 = VIA8 and TSV_BLK; 
TSV_M9 = M9_MAIN and TSV_BLK; 


TSV_VIA9 = VIA9 and TSV_BLK; 
TSV_M10 = M10_MAIN and TSV_BLK; 


TSV_VIA10 = VIA10 and TSV_BLK; 
TSV_M11 = M11_MAIN and TSV_BLK; 


TSV_VIA11 = VIA11 and TSV_BLK; 
TSV_M12 = M12_MAIN and TSV_BLK; 


TSV_VIA12 = VIA12 and TSV_BLK; 
TSV_M13 = M13_MAIN and TSV_BLK; 



TSV_VIA13 = VIA13 and TSV_BLK; 
TSV_M14 = M14_MAIN and TSV_BLK; 


TSV_VIA14 = VIA14 and TSV_BLK; 
TSV_M15 = M15_MAIN and TSV_BLK; 



TSV_VIA15 = VIA15 and TSV_BLK; 
TSV_M16 = M16_MAIN and TSV_BLK; 


TSV_VIA16 = VIA16 and TSV_BLK; 
TSV_M17 = M17_MAIN and TSV_BLK; 







CORE_VOLT : const double = 0.75; 

voltage_1 = interacting( PSDC, GATE ); 
voltage_3 = DIODMY not OD2; 
voltage_2 = or_list({ BJTDMY, IBJTDMY, voltage_3 }); 
PSD_DEVICE = not_interacting( voltage_1, voltage_2 ); 

voltage_4 = interacting( NSDC, GATE ); 
voltage_6 = DIODMY not OD2; 
voltage_5 = or_list({ BJTDMY, IBJTDMY, voltage_6 }); 
NSD_DEVICE = not_interacting( voltage_4, voltage_5 ); 


VAR_DEVICE = interacting( NSTPI, VAR ); 

VOL_12 = OD_12 not OD12_15; 
VOL_15 = copy(OD12_15); 

voltage_7 = or_list( { PSD_DEVICE, NSD_DEVICE, VAR_DEVICE } ); 
GATE_DEVICE = interacting( GATEI, voltage_7 ); 
GATE_CORE = GATE_DEVICE not OD2; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB, {{{ GATE_CORE, GATEI }}} );
GATE_12 = GATE_DEVICE and VOL_12; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ GATE_12, GATEI }}} );
GATE_15 = GATE_DEVICE and VOL_15; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ GATE_15, GATEI }}} );
PSD_CORE = PSD_DEVICE outside OD2; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PSD_CORE, PSDC }}} );
PSD_12 = PSD_DEVICE not_outside VOL_12; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PSD_12, PSDC }}} );
PSD_15 = PSD_DEVICE not_outside VOL_15; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PSD_15, PSDC }}} );
NSD_CORE = NSD_DEVICE outside OD2; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ NSD_CORE, NSDC }}} );
NSD_12 = NSD_DEVICE not_outside VOL_12; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ NSD_12, NSDC }}} );
NSD_15 = NSD_DEVICE not_outside VOL_15; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ NSD_15, NSDC }}} );
VAR_CORE = VAR_DEVICE outside OD2; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ VAR_CORE, NSTPI }}} );
VAR_12 = VAR_DEVICE not_outside VOL_12; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ VAR_12, NSTPI }}} );
VAR_15 = VAR_DEVICE not_outside VOL_15; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ VAR_15, NSTPI }}} );
PSTP_00 = PSTPI not_inside RW; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PSTP_00, PSTPI }}} );









CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ OD_HV_ID, ODC }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ OD_LV_ID, ODC }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PO_HV_ID, ILP1I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ PO_LV_ID, ILP1I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ MD_HV_ID, MD_NOT_CMDI }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ MD_LV_ID, MD_NOT_CMDI }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_HV_ID, M0_NOT_CM0I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_LV_ID, M0_NOT_CM0I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_HV_ID_TOP, M0_NOT_CM0I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_LV_ID_TOP, M0_NOT_CM0I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_HV_ID, M1I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_LV_ID, M1I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_HV_ID_TOP, M1I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_LV_ID_TOP, M1I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_HV_ID, M2I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_LV_ID, M2I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_HV_ID_TOP, M2I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_LV_ID_TOP, M2I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_HV_ID, M3I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_LV_ID, M3I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_HV_ID_TOP, M3I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_LV_ID_TOP, M3I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_HV_ID, M4I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_LV_ID, M4I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_HV_ID_TOP, M4I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_LV_ID_TOP, M4I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_HV_ID, M5I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_LV_ID, M5I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_HV_ID_TOP, M5I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_LV_ID_TOP, M5I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_HV_ID, M6I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_LV_ID, M6I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_HV_ID_TOP, M6I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_LV_ID_TOP, M6I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_HV_ID, M7I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_LV_ID, M7I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_HV_ID_TOP, M7I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_LV_ID_TOP, M7I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_HV_ID, M8I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_LV_ID, M8I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_HV_ID_TOP, M8I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_LV_ID_TOP, M8I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_HV_ID, M9I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_LV_ID, M9I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_HV_ID_TOP, M9I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_LV_ID_TOP, M9I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_HV_ID, M10I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_LV_ID, M10I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_HV_ID_TOP, M10I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_LV_ID_TOP, M10I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_HV_ID, M11I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_LV_ID, M11I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_HV_ID_TOP, M11I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_LV_ID_TOP, M11I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_HV_ID, M12I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_LV_ID, M12I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_HV_ID_TOP, M12I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_LV_ID_TOP, M12I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_HV_ID, M13I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_LV_ID, M13I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_HV_ID_TOP, M13I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_LV_ID_TOP, M13I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_HV_ID, M14I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_LV_ID, M14I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_HV_ID_TOP, M14I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_LV_ID_TOP, M14I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_HV_ID, M15I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_LV_ID, M15I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_HV_ID_TOP, M15I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_LV_ID_TOP, M15I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_HV_ID, M16I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_LV_ID, M16I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_HV_ID_TOP, M16I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_LV_ID_TOP, M16I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_HV_ID, M17I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_LV_ID, M17I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_HV_ID_TOP, M17I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_LV_ID_TOP, M17I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_HV_ID, M18I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_LV_ID, M18I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_HV_ID_TOP, M18I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_LV_ID_TOP, M18I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_HV_ID, M19I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_LV_ID, M19I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_HV_ID_TOP, M19I }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_LV_ID_TOP, M19I }}} ); 

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ AP_HV_ID, API }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ AP_LV_ID, API }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ AP_HV_ID_TOP, API }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ AP_LV_ID_TOP, API }}} );

CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ CU_RDL_HV_ID, CU_RDLI }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ CU_RDL_LV_ID, CU_RDLI }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ CU_RDL_HV_ID_TOP, CU_RDLI }}} ); 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ CU_RDL_LV_ID_TOP, CU_RDLI }}} );


MD_12VM = MD_NOT_CMDI and MD_12V;
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ MD_12VM, MD_NOT_CMDI}}} ); 
MD_25VM = MD_NOT_CMDI and MD_25V;
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ MD_25VM, MD_NOT_CMDI}}} ); 
MD_33VM = MD_NOT_CMDI and MD_33V;
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ MD_33VM, MD_NOT_CMDI}}} ); 

M0_00VM = M0_NOT_CM0I and M0_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_00VM, M0_NOT_CM0I }}} ); 
M0_01VM = M0_NOT_CM0I and M0_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_01VM, M0_NOT_CM0I }}} ); 
M0_02VM = M0_NOT_CM0I and M0_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_02VM, M0_NOT_CM0I }}} ); 
M0_03VM = M0_NOT_CM0I and M0_03V; CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_03VM, M0_NOT_CM0I }}} ); 
M0_04VM = M0_NOT_CM0I and M0_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_04VM, M0_NOT_CM0I }}} ); 
M0_05VM = M0_NOT_CM0I and M0_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_05VM, M0_NOT_CM0I }}} ); 
M0_06VM = M0_NOT_CM0I and M0_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_06VM, M0_NOT_CM0I }}} ); 
M0_07VM = M0_NOT_CM0I and M0_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_07VM, M0_NOT_CM0I }}} ); 
M0_08VM = M0_NOT_CM0I and M0_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_08VM, M0_NOT_CM0I }}} ); 
M0_09VM = M0_NOT_CM0I and M0_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_09VM, M0_NOT_CM0I }}} ); 
M0_10VM = M0_NOT_CM0I and M0_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_10VM, M0_NOT_CM0I }}} ); 
M0_11VM = M0_NOT_CM0I and M0_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_11VM, M0_NOT_CM0I }}} ); 
M0_12VM = M0_NOT_CM0I and M0_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_12VM, M0_NOT_CM0I }}} ); 
M0_13VM = M0_NOT_CM0I and M0_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_13VM, M0_NOT_CM0I }}} ); 
M0_14VM = M0_NOT_CM0I and M0_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_14VM, M0_NOT_CM0I }}} ); 
M0_15VM = M0_NOT_CM0I and M0_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_15VM, M0_NOT_CM0I }}} ); 
M0_16VM = M0_NOT_CM0I and M0_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_16VM, M0_NOT_CM0I }}} ); 
M0_17VM = M0_NOT_CM0I and M0_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_17VM, M0_NOT_CM0I }}} ); 
M0_18VM = M0_NOT_CM0I and M0_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_18VM, M0_NOT_CM0I }}} ); 
M0_25VM = M0_NOT_CM0I and M0_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_25VM, M0_NOT_CM0I }}} ); 
M0_33VM = M0_NOT_CM0I and M0_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_33VM, M0_NOT_CM0I }}} ); 
M0_50VM = M0_NOT_CM0I and M0_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_50VM, M0_NOT_CM0I }}} ); 
M0_70VM = M0_NOT_CM0I and M0_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0_70VM, M0_NOT_CM0I }}} ); 
M1_00VM = M1I and M1_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_00VM, M1I }}} ); 
M1_01VM = M1I and M1_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_01VM, M1I }}} ); 
M1_02VM = M1I and M1_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_02VM, M1I }}} ); 
M1_03VM = M1I and M1_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_03VM, M1I }}} ); 
M1_04VM = M1I and M1_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_04VM, M1I }}} ); 
M1_05VM = M1I and M1_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_05VM, M1I }}} ); 
M1_06VM = M1I and M1_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_06VM, M1I }}} ); 
M1_07VM = M1I and M1_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_07VM, M1I }}} ); 
M1_08VM = M1I and M1_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_08VM, M1I }}} ); 
M1_09VM = M1I and M1_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_09VM, M1I }}} ); 
M1_10VM = M1I and M1_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_10VM, M1I }}} ); 
M1_11VM = M1I and M1_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_11VM, M1I }}} ); 
M1_12VM = M1I and M1_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_12VM, M1I }}} ); 
M1_13VM = M1I and M1_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_13VM, M1I }}} ); 
M1_14VM = M1I and M1_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_14VM, M1I }}} ); 
M1_15VM = M1I and M1_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_15VM, M1I }}} ); 
M1_16VM = M1I and M1_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_16VM, M1I }}} ); 
M1_17VM = M1I and M1_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_17VM, M1I }}} ); 
M1_18VM = M1I and M1_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_18VM, M1I }}} ); 
M1_25VM = M1I and M1_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_25VM, M1I }}} ); 
M1_33VM = M1I and M1_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_33VM, M1I }}} ); 
M1_50VM = M1I and M1_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_50VM, M1I }}} ); 
M1_70VM = M1I and M1_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1_70VM, M1I }}} ); 

M2_00VM = M2I and M2_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_00VM, M2I }}} ); 
M2_01VM = M2I and M2_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_01VM, M2I }}} ); 
M2_02VM = M2I and M2_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_02VM, M2I }}} ); 
M2_03VM = M2I and M2_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_03VM, M2I }}} ); 
M2_04VM = M2I and M2_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_04VM, M2I }}} ); 
M2_05VM = M2I and M2_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_05VM, M2I }}} ); 
M2_06VM = M2I and M2_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_06VM, M2I }}} ); 
M2_07VM = M2I and M2_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_07VM, M2I }}} ); 
M2_08VM = M2I and M2_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_08VM, M2I }}} ); 
M2_09VM = M2I and M2_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_09VM, M2I }}} ); 
M2_10VM = M2I and M2_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_10VM, M2I }}} ); 
M2_11VM = M2I and M2_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_11VM, M2I }}} ); 
M2_12VM = M2I and M2_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_12VM, M2I }}} ); 
M2_13VM = M2I and M2_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_13VM, M2I }}} ); 
M2_14VM = M2I and M2_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_14VM, M2I }}} ); 
M2_15VM = M2I and M2_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_15VM, M2I }}} ); 
M2_16VM = M2I and M2_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_16VM, M2I }}} ); 
M2_17VM = M2I and M2_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_17VM, M2I }}} ); 
M2_18VM = M2I and M2_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_18VM, M2I }}} ); 
M2_25VM = M2I and M2_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_25VM, M2I }}} ); 
M2_33VM = M2I and M2_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_33VM, M2I }}} ); 
M2_50VM = M2I and M2_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_50VM, M2I }}} ); 
M2_70VM = M2I and M2_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2_70VM, M2I }}} ); 

M3_00VM = M3I and M3_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_00VM, M3I }}} ); 
M3_01VM = M3I and M3_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_01VM, M3I }}} ); 
M3_02VM = M3I and M3_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_02VM, M3I }}} ); 
M3_03VM = M3I and M3_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_03VM, M3I }}} ); 
M3_04VM = M3I and M3_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_04VM, M3I }}} ); 
M3_05VM = M3I and M3_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_05VM, M3I }}} ); 
M3_06VM = M3I and M3_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_06VM, M3I }}} ); 
M3_07VM = M3I and M3_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_07VM, M3I }}} ); 
M3_08VM = M3I and M3_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_08VM, M3I }}} ); 
M3_09VM = M3I and M3_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_09VM, M3I }}} ); 
M3_10VM = M3I and M3_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_10VM, M3I }}} ); 
M3_11VM = M3I and M3_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_11VM, M3I }}} ); 
M3_12VM = M3I and M3_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_12VM, M3I }}} ); 
M3_13VM = M3I and M3_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_13VM, M3I }}} ); 
M3_14VM = M3I and M3_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_14VM, M3I }}} ); 
M3_15VM = M3I and M3_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_15VM, M3I }}} ); 
M3_16VM = M3I and M3_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_16VM, M3I }}} ); 
M3_17VM = M3I and M3_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_17VM, M3I }}} ); 
M3_18VM = M3I and M3_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_18VM, M3I }}} ); 
M3_25VM = M3I and M3_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_25VM, M3I }}} ); 
M3_33VM = M3I and M3_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_33VM, M3I }}} ); 
M3_50VM = M3I and M3_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_50VM, M3I }}} ); 
M3_70VM = M3I and M3_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3_70VM, M3I }}} ); 

M4_00VM = M4I and M4_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_00VM, M4I }}} ); 
M4_01VM = M4I and M4_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_01VM, M4I }}} ); 
M4_02VM = M4I and M4_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_02VM, M4I }}} ); 
M4_03VM = M4I and M4_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_03VM, M4I }}} ); 
M4_04VM = M4I and M4_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_04VM, M4I }}} ); 
M4_05VM = M4I and M4_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_05VM, M4I }}} ); 
M4_06VM = M4I and M4_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_06VM, M4I }}} ); 
M4_07VM = M4I and M4_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_07VM, M4I }}} ); 
M4_08VM = M4I and M4_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_08VM, M4I }}} ); 
M4_09VM = M4I and M4_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_09VM, M4I }}} ); 
M4_10VM = M4I and M4_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_10VM, M4I }}} ); 
M4_11VM = M4I and M4_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_11VM, M4I }}} ); 
M4_12VM = M4I and M4_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_12VM, M4I }}} ); 
M4_13VM = M4I and M4_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_13VM, M4I }}} ); 
M4_14VM = M4I and M4_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_14VM, M4I }}} ); 
M4_15VM = M4I and M4_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_15VM, M4I }}} ); 
M4_16VM = M4I and M4_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_16VM, M4I }}} ); 
M4_17VM = M4I and M4_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_17VM, M4I }}} ); 
M4_18VM = M4I and M4_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_18VM, M4I }}} ); 
M4_25VM = M4I and M4_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_25VM, M4I }}} ); 
M4_33VM = M4I and M4_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_33VM, M4I }}} ); 
M4_50VM = M4I and M4_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_50VM, M4I }}} ); 
M4_70VM = M4I and M4_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4_70VM, M4I }}} ); 

M5_00VM = M5I and M5_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_00VM, M5I }}} ); 
M5_01VM = M5I and M5_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_01VM, M5I }}} ); 
M5_02VM = M5I and M5_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_02VM, M5I }}} ); 
M5_03VM = M5I and M5_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_03VM, M5I }}} ); 
M5_04VM = M5I and M5_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_04VM, M5I }}} ); 
M5_05VM = M5I and M5_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_05VM, M5I }}} ); 
M5_06VM = M5I and M5_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_06VM, M5I }}} ); 
M5_07VM = M5I and M5_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_07VM, M5I }}} ); 
M5_08VM = M5I and M5_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_08VM, M5I }}} ); 
M5_09VM = M5I and M5_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_09VM, M5I }}} ); 
M5_10VM = M5I and M5_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_10VM, M5I }}} ); 
M5_11VM = M5I and M5_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_11VM, M5I }}} ); 
M5_12VM = M5I and M5_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_12VM, M5I }}} ); 
M5_13VM = M5I and M5_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_13VM, M5I }}} ); 
M5_14VM = M5I and M5_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_14VM, M5I }}} ); 
M5_15VM = M5I and M5_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_15VM, M5I }}} ); 
M5_16VM = M5I and M5_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_16VM, M5I }}} ); 
M5_17VM = M5I and M5_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_17VM, M5I }}} ); 
M5_18VM = M5I and M5_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_18VM, M5I }}} ); 
M5_25VM = M5I and M5_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_25VM, M5I }}} ); 
M5_33VM = M5I and M5_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_33VM, M5I }}} ); 
M5_50VM = M5I and M5_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_50VM, M5I }}} ); 
M5_70VM = M5I and M5_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5_70VM, M5I }}} ); 

M6_00VM = M6I and M6_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_00VM, M6I }}} ); 
M6_01VM = M6I and M6_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_01VM, M6I }}} ); 
M6_02VM = M6I and M6_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_02VM, M6I }}} ); 
M6_03VM = M6I and M6_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_03VM, M6I }}} ); 
M6_04VM = M6I and M6_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_04VM, M6I }}} ); 
M6_05VM = M6I and M6_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_05VM, M6I }}} ); 
M6_06VM = M6I and M6_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_06VM, M6I }}} ); 
M6_07VM = M6I and M6_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_07VM, M6I }}} ); 
M6_08VM = M6I and M6_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_08VM, M6I }}} ); 
M6_09VM = M6I and M6_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_09VM, M6I }}} ); 
M6_10VM = M6I and M6_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_10VM, M6I }}} ); 
M6_11VM = M6I and M6_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_11VM, M6I }}} ); 
M6_12VM = M6I and M6_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_12VM, M6I }}} ); 
M6_13VM = M6I and M6_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_13VM, M6I }}} ); 
M6_14VM = M6I and M6_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_14VM, M6I }}} ); 
M6_15VM = M6I and M6_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_15VM, M6I }}} ); 
M6_16VM = M6I and M6_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_16VM, M6I }}} ); 
M6_17VM = M6I and M6_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_17VM, M6I }}} ); 
M6_18VM = M6I and M6_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_18VM, M6I }}} ); 
M6_25VM = M6I and M6_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_25VM, M6I }}} ); 
M6_33VM = M6I and M6_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_33VM, M6I }}} ); 
M6_50VM = M6I and M6_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_50VM, M6I }}} ); 
M6_70VM = M6I and M6_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6_70VM, M6I }}} ); 

M7_00VM = M7I and M7_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_00VM, M7I }}} ); 
M7_01VM = M7I and M7_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_01VM, M7I }}} ); 
M7_02VM = M7I and M7_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_02VM, M7I }}} ); 
M7_03VM = M7I and M7_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_03VM, M7I }}} ); 
M7_04VM = M7I and M7_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_04VM, M7I }}} ); 
M7_05VM = M7I and M7_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_05VM, M7I }}} ); 
M7_06VM = M7I and M7_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_06VM, M7I }}} ); 
M7_07VM = M7I and M7_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_07VM, M7I }}} ); 
M7_08VM = M7I and M7_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_08VM, M7I }}} ); 
M7_09VM = M7I and M7_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_09VM, M7I }}} ); 
M7_10VM = M7I and M7_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_10VM, M7I }}} ); 
M7_11VM = M7I and M7_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_11VM, M7I }}} ); 
M7_12VM = M7I and M7_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_12VM, M7I }}} ); 
M7_13VM = M7I and M7_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_13VM, M7I }}} ); 
M7_14VM = M7I and M7_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_14VM, M7I }}} ); 
M7_15VM = M7I and M7_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_15VM, M7I }}} ); 
M7_16VM = M7I and M7_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_16VM, M7I }}} ); 
M7_17VM = M7I and M7_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_17VM, M7I }}} ); 
M7_18VM = M7I and M7_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_18VM, M7I }}} ); 
M7_25VM = M7I and M7_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_25VM, M7I }}} ); 
M7_33VM = M7I and M7_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_33VM, M7I }}} ); 
M7_50VM = M7I and M7_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_50VM, M7I }}} ); 
M7_70VM = M7I and M7_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7_70VM, M7I }}} ); 

M8_00VM = M8I and M8_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_00VM, M8I }}} ); 
M8_01VM = M8I and M8_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_01VM, M8I }}} ); 
M8_02VM = M8I and M8_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_02VM, M8I }}} ); 
M8_03VM = M8I and M8_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_03VM, M8I }}} ); 
M8_04VM = M8I and M8_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_04VM, M8I }}} ); 
M8_05VM = M8I and M8_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_05VM, M8I }}} ); 
M8_06VM = M8I and M8_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_06VM, M8I }}} ); 
M8_07VM = M8I and M8_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_07VM, M8I }}} ); 
M8_08VM = M8I and M8_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_08VM, M8I }}} ); 
M8_09VM = M8I and M8_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_09VM, M8I }}} ); 
M8_10VM = M8I and M8_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_10VM, M8I }}} ); 
M8_11VM = M8I and M8_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_11VM, M8I }}} ); 
M8_12VM = M8I and M8_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_12VM, M8I }}} ); 
M8_13VM = M8I and M8_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_13VM, M8I }}} ); 
M8_14VM = M8I and M8_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_14VM, M8I }}} ); 
M8_15VM = M8I and M8_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_15VM, M8I }}} ); 
M8_16VM = M8I and M8_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_16VM, M8I }}} ); 
M8_17VM = M8I and M8_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_17VM, M8I }}} ); 
M8_18VM = M8I and M8_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_18VM, M8I }}} ); 
M8_25VM = M8I and M8_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_25VM, M8I }}} ); 
M8_33VM = M8I and M8_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_33VM, M8I }}} ); 
M8_50VM = M8I and M8_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_50VM, M8I }}} ); 
M8_70VM = M8I and M8_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8_70VM, M8I }}} ); 

M9_00VM = M9I and M9_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_00VM, M9I }}} ); 
M9_01VM = M9I and M9_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_01VM, M9I }}} ); 
M9_02VM = M9I and M9_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_02VM, M9I }}} ); 
M9_03VM = M9I and M9_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_03VM, M9I }}} ); 
M9_04VM = M9I and M9_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_04VM, M9I }}} ); 
M9_05VM = M9I and M9_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_05VM, M9I }}} ); 
M9_06VM = M9I and M9_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_06VM, M9I }}} ); 
M9_07VM = M9I and M9_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_07VM, M9I }}} ); 
M9_08VM = M9I and M9_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_08VM, M9I }}} ); 
M9_09VM = M9I and M9_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_09VM, M9I }}} ); 
M9_10VM = M9I and M9_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_10VM, M9I }}} ); 
M9_11VM = M9I and M9_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_11VM, M9I }}} ); 
M9_12VM = M9I and M9_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_12VM, M9I }}} ); 
M9_13VM = M9I and M9_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_13VM, M9I }}} ); 
M9_14VM = M9I and M9_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_14VM, M9I }}} ); 
M9_15VM = M9I and M9_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_15VM, M9I }}} ); 
M9_16VM = M9I and M9_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_16VM, M9I }}} ); 
M9_17VM = M9I and M9_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_17VM, M9I }}} ); 
M9_18VM = M9I and M9_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_18VM, M9I }}} ); 
M9_25VM = M9I and M9_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_25VM, M9I }}} ); 
M9_33VM = M9I and M9_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_33VM, M9I }}} ); 
M9_50VM = M9I and M9_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_50VM, M9I }}} ); 
M9_70VM = M9I and M9_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9_70VM, M9I }}} ); 

M10_00VM = M10I and M10_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_00VM, M10I }}} ); 
M10_01VM = M10I and M10_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_01VM, M10I }}} ); 
M10_02VM = M10I and M10_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_02VM, M10I }}} ); 
M10_03VM = M10I and M10_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_03VM, M10I }}} ); 
M10_04VM = M10I and M10_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_04VM, M10I }}} ); 
M10_05VM = M10I and M10_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_05VM, M10I }}} ); 
M10_06VM = M10I and M10_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_06VM, M10I }}} ); 
M10_07VM = M10I and M10_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_07VM, M10I }}} ); 
M10_08VM = M10I and M10_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_08VM, M10I }}} ); 
M10_09VM = M10I and M10_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_09VM, M10I }}} ); 
M10_10VM = M10I and M10_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_10VM, M10I }}} ); 
M10_11VM = M10I and M10_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_11VM, M10I }}} ); 
M10_12VM = M10I and M10_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_12VM, M10I }}} ); 
M10_13VM = M10I and M10_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_13VM, M10I }}} ); 
M10_14VM = M10I and M10_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_14VM, M10I }}} ); 
M10_15VM = M10I and M10_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_15VM, M10I }}} ); 
M10_16VM = M10I and M10_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_16VM, M10I }}} ); 
M10_17VM = M10I and M10_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_17VM, M10I }}} ); 
M10_18VM = M10I and M10_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_18VM, M10I }}} ); 
M10_25VM = M10I and M10_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_25VM, M10I }}} ); 
M10_33VM = M10I and M10_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_33VM, M10I }}} ); 
M10_50VM = M10I and M10_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_50VM, M10I }}} ); 
M10_70VM = M10I and M10_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10_70VM, M10I }}} ); 

M11_00VM = M11I and M11_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_00VM, M11I }}} ); 
M11_01VM = M11I and M11_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_01VM, M11I }}} ); 
M11_02VM = M11I and M11_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_02VM, M11I }}} ); 
M11_03VM = M11I and M11_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_03VM, M11I }}} ); 
M11_04VM = M11I and M11_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_04VM, M11I }}} ); 
M11_05VM = M11I and M11_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_05VM, M11I }}} ); 
M11_06VM = M11I and M11_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_06VM, M11I }}} ); 
M11_07VM = M11I and M11_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_07VM, M11I }}} ); 
M11_08VM = M11I and M11_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_08VM, M11I }}} ); 
M11_09VM = M11I and M11_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_09VM, M11I }}} ); 
M11_10VM = M11I and M11_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_10VM, M11I }}} ); 
M11_11VM = M11I and M11_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_11VM, M11I }}} ); 
M11_12VM = M11I and M11_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_12VM, M11I }}} ); 
M11_13VM = M11I and M11_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_13VM, M11I }}} ); 
M11_14VM = M11I and M11_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_14VM, M11I }}} ); 
M11_15VM = M11I and M11_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_15VM, M11I }}} ); 
M11_16VM = M11I and M11_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_16VM, M11I }}} ); 
M11_17VM = M11I and M11_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_17VM, M11I }}} ); 
M11_18VM = M11I and M11_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_18VM, M11I }}} ); 
M11_25VM = M11I and M11_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_25VM, M11I }}} ); 
M11_33VM = M11I and M11_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_33VM, M11I }}} ); 
M11_50VM = M11I and M11_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_50VM, M11I }}} ); 
M11_70VM = M11I and M11_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11_70VM, M11I }}} ); 

M12_00VM = M12I and M12_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_00VM, M12I }}} ); 
M12_01VM = M12I and M12_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_01VM, M12I }}} ); 
M12_02VM = M12I and M12_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_02VM, M12I }}} ); 
M12_03VM = M12I and M12_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_03VM, M12I }}} ); 
M12_04VM = M12I and M12_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_04VM, M12I }}} ); 
M12_05VM = M12I and M12_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_05VM, M12I }}} ); 
M12_06VM = M12I and M12_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_06VM, M12I }}} ); 
M12_07VM = M12I and M12_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_07VM, M12I }}} ); 
M12_08VM = M12I and M12_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_08VM, M12I }}} ); 
M12_09VM = M12I and M12_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_09VM, M12I }}} ); 
M12_10VM = M12I and M12_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_10VM, M12I }}} ); 
M12_11VM = M12I and M12_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_11VM, M12I }}} ); 
M12_12VM = M12I and M12_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_12VM, M12I }}} ); 
M12_13VM = M12I and M12_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_13VM, M12I }}} ); 
M12_14VM = M12I and M12_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_14VM, M12I }}} ); 
M12_15VM = M12I and M12_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_15VM, M12I }}} ); 
M12_16VM = M12I and M12_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_16VM, M12I }}} ); 
M12_17VM = M12I and M12_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_17VM, M12I }}} ); 
M12_18VM = M12I and M12_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_18VM, M12I }}} ); 
M12_25VM = M12I and M12_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_25VM, M12I }}} ); 
M12_33VM = M12I and M12_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_33VM, M12I }}} ); 
M12_50VM = M12I and M12_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_50VM, M12I }}} ); 
M12_70VM = M12I and M12_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12_70VM, M12I }}} ); 

M13_00VM = M13I and M13_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_00VM, M13I }}} ); 
M13_01VM = M13I and M13_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_01VM, M13I }}} ); 
M13_02VM = M13I and M13_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_02VM, M13I }}} ); 
M13_03VM = M13I and M13_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_03VM, M13I }}} ); 
M13_04VM = M13I and M13_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_04VM, M13I }}} ); 
M13_05VM = M13I and M13_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_05VM, M13I }}} ); 
M13_06VM = M13I and M13_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_06VM, M13I }}} ); 
M13_07VM = M13I and M13_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_07VM, M13I }}} ); 
M13_08VM = M13I and M13_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_08VM, M13I }}} ); 
M13_09VM = M13I and M13_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_09VM, M13I }}} ); 
M13_10VM = M13I and M13_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_10VM, M13I }}} ); 
M13_11VM = M13I and M13_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_11VM, M13I }}} ); 
M13_12VM = M13I and M13_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_12VM, M13I }}} ); 
M13_13VM = M13I and M13_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_13VM, M13I }}} ); 
M13_14VM = M13I and M13_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_14VM, M13I }}} ); 
M13_15VM = M13I and M13_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_15VM, M13I }}} ); 
M13_16VM = M13I and M13_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_16VM, M13I }}} ); 
M13_17VM = M13I and M13_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_17VM, M13I }}} ); 
M13_18VM = M13I and M13_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_18VM, M13I }}} ); 
M13_25VM = M13I and M13_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_25VM, M13I }}} ); 
M13_33VM = M13I and M13_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_33VM, M13I }}} ); 
M13_50VM = M13I and M13_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_50VM, M13I }}} ); 
M13_70VM = M13I and M13_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13_70VM, M13I }}} ); 

M14_00VM = M14I and M14_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_00VM, M14I }}} ); 
M14_01VM = M14I and M14_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_01VM, M14I }}} ); 
M14_02VM = M14I and M14_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_02VM, M14I }}} ); 
M14_03VM = M14I and M14_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_03VM, M14I }}} ); 
M14_04VM = M14I and M14_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_04VM, M14I }}} ); 
M14_05VM = M14I and M14_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_05VM, M14I }}} ); 
M14_06VM = M14I and M14_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_06VM, M14I }}} ); 
M14_07VM = M14I and M14_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_07VM, M14I }}} ); 
M14_08VM = M14I and M14_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_08VM, M14I }}} ); 
M14_09VM = M14I and M14_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_09VM, M14I }}} ); 
M14_10VM = M14I and M14_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_10VM, M14I }}} ); 
M14_11VM = M14I and M14_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_11VM, M14I }}} ); 
M14_12VM = M14I and M14_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_12VM, M14I }}} ); 
M14_13VM = M14I and M14_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_13VM, M14I }}} ); 
M14_14VM = M14I and M14_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_14VM, M14I }}} ); 
M14_15VM = M14I and M14_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_15VM, M14I }}} ); 
M14_16VM = M14I and M14_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_16VM, M14I }}} ); 
M14_17VM = M14I and M14_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_17VM, M14I }}} ); 
M14_18VM = M14I and M14_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_18VM, M14I }}} ); 
M14_25VM = M14I and M14_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_25VM, M14I }}} ); 
M14_33VM = M14I and M14_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_33VM, M14I }}} ); 
M14_50VM = M14I and M14_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_50VM, M14I }}} ); 
M14_70VM = M14I and M14_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14_70VM, M14I }}} ); 

M15_00VM = M15I and M15_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_00VM, M15I }}} ); 
M15_01VM = M15I and M15_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_01VM, M15I }}} ); 
M15_02VM = M15I and M15_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_02VM, M15I }}} ); 
M15_03VM = M15I and M15_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_03VM, M15I }}} ); 
M15_04VM = M15I and M15_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_04VM, M15I }}} ); 
M15_05VM = M15I and M15_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_05VM, M15I }}} ); 
M15_06VM = M15I and M15_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_06VM, M15I }}} ); 
M15_07VM = M15I and M15_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_07VM, M15I }}} ); 
M15_08VM = M15I and M15_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_08VM, M15I }}} ); 
M15_09VM = M15I and M15_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_09VM, M15I }}} ); 
M15_10VM = M15I and M15_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_10VM, M15I }}} ); 
M15_11VM = M15I and M15_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_11VM, M15I }}} ); 
M15_12VM = M15I and M15_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_12VM, M15I }}} ); 
M15_13VM = M15I and M15_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_13VM, M15I }}} ); 
M15_14VM = M15I and M15_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_14VM, M15I }}} ); 
M15_15VM = M15I and M15_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_15VM, M15I }}} ); 
M15_16VM = M15I and M15_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_16VM, M15I }}} ); 
M15_17VM = M15I and M15_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_17VM, M15I }}} ); 
M15_18VM = M15I and M15_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_18VM, M15I }}} ); 
M15_25VM = M15I and M15_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_25VM, M15I }}} ); 
M15_33VM = M15I and M15_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_33VM, M15I }}} ); 
M15_50VM = M15I and M15_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_50VM, M15I }}} ); 
M15_70VM = M15I and M15_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15_70VM, M15I }}} ); 

M16_00VM = M16I and M16_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_00VM, M16I }}} ); 
M16_01VM = M16I and M16_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_01VM, M16I }}} ); 
M16_02VM = M16I and M16_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_02VM, M16I }}} ); 
M16_03VM = M16I and M16_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_03VM, M16I }}} ); 
M16_04VM = M16I and M16_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_04VM, M16I }}} ); 
M16_05VM = M16I and M16_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_05VM, M16I }}} ); 
M16_06VM = M16I and M16_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_06VM, M16I }}} ); 
M16_07VM = M16I and M16_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_07VM, M16I }}} ); 
M16_08VM = M16I and M16_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_08VM, M16I }}} ); 
M16_09VM = M16I and M16_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_09VM, M16I }}} ); 
M16_10VM = M16I and M16_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_10VM, M16I }}} ); 
M16_11VM = M16I and M16_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_11VM, M16I }}} ); 
M16_12VM = M16I and M16_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_12VM, M16I }}} ); 
M16_13VM = M16I and M16_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_13VM, M16I }}} ); 
M16_14VM = M16I and M16_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_14VM, M16I }}} ); 
M16_15VM = M16I and M16_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_15VM, M16I }}} ); 
M16_16VM = M16I and M16_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_16VM, M16I }}} ); 
M16_17VM = M16I and M16_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_17VM, M16I }}} ); 
M16_18VM = M16I and M16_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_18VM, M16I }}} ); 
M16_25VM = M16I and M16_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_25VM, M16I }}} ); 
M16_33VM = M16I and M16_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_33VM, M16I }}} ); 
M16_50VM = M16I and M16_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_50VM, M16I }}} ); 
M16_70VM = M16I and M16_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16_70VM, M16I }}} ); 

M17_00VM = M17I and M17_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_00VM, M17I }}} ); 
M17_01VM = M17I and M17_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_01VM, M17I }}} ); 
M17_02VM = M17I and M17_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_02VM, M17I }}} ); 
M17_03VM = M17I and M17_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_03VM, M17I }}} ); 
M17_04VM = M17I and M17_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_04VM, M17I }}} ); 
M17_05VM = M17I and M17_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_05VM, M17I }}} ); 
M17_06VM = M17I and M17_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_06VM, M17I }}} ); 
M17_07VM = M17I and M17_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_07VM, M17I }}} ); 
M17_08VM = M17I and M17_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_08VM, M17I }}} ); 
M17_09VM = M17I and M17_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_09VM, M17I }}} ); 
M17_10VM = M17I and M17_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_10VM, M17I }}} ); 
M17_11VM = M17I and M17_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_11VM, M17I }}} ); 
M17_12VM = M17I and M17_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_12VM, M17I }}} ); 
M17_13VM = M17I and M17_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_13VM, M17I }}} ); 
M17_14VM = M17I and M17_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_14VM, M17I }}} ); 
M17_15VM = M17I and M17_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_15VM, M17I }}} ); 
M17_16VM = M17I and M17_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_16VM, M17I }}} ); 
M17_17VM = M17I and M17_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_17VM, M17I }}} ); 
M17_18VM = M17I and M17_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_18VM, M17I }}} ); 
M17_25VM = M17I and M17_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_25VM, M17I }}} ); 
M17_33VM = M17I and M17_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_33VM, M17I }}} ); 
M17_50VM = M17I and M17_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_50VM, M17I }}} ); 
M17_70VM = M17I and M17_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17_70VM, M17I }}} ); 

M18_00VM = M18I and M18_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_00VM, M18I }}} ); 
M18_01VM = M18I and M18_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_01VM, M18I }}} ); 
M18_02VM = M18I and M18_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_02VM, M18I }}} ); 
M18_03VM = M18I and M18_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_03VM, M18I }}} ); 
M18_04VM = M18I and M18_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_04VM, M18I }}} ); 
M18_05VM = M18I and M18_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_05VM, M18I }}} ); 
M18_06VM = M18I and M18_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_06VM, M18I }}} ); 
M18_07VM = M18I and M18_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_07VM, M18I }}} ); 
M18_08VM = M18I and M18_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_08VM, M18I }}} ); 
M18_09VM = M18I and M18_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_09VM, M18I }}} ); 
M18_10VM = M18I and M18_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_10VM, M18I }}} ); 
M18_11VM = M18I and M18_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_11VM, M18I }}} ); 
M18_12VM = M18I and M18_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_12VM, M18I }}} ); 
M18_13VM = M18I and M18_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_13VM, M18I }}} ); 
M18_14VM = M18I and M18_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_14VM, M18I }}} ); 
M18_15VM = M18I and M18_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_15VM, M18I }}} ); 
M18_16VM = M18I and M18_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_16VM, M18I }}} ); 
M18_17VM = M18I and M18_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_17VM, M18I }}} ); 
M18_18VM = M18I and M18_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_18VM, M18I }}} ); 
M18_25VM = M18I and M18_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_25VM, M18I }}} ); 
M18_33VM = M18I and M18_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_33VM, M18I }}} ); 
M18_50VM = M18I and M18_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_50VM, M18I }}} ); 
M18_70VM = M18I and M18_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18_70VM, M18I }}} ); 

M19_00VM = M19I and M19_00V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_00VM, M19I }}} ); 
M19_01VM = M19I and M19_01V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_01VM, M19I }}} ); 
M19_02VM = M19I and M19_02V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_02VM, M19I }}} ); 
M19_03VM = M19I and M19_03V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_03VM, M19I }}} ); 
M19_04VM = M19I and M19_04V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_04VM, M19I }}} ); 
M19_05VM = M19I and M19_05V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_05VM, M19I }}} ); 
M19_06VM = M19I and M19_06V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_06VM, M19I }}} ); 
M19_07VM = M19I and M19_07V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_07VM, M19I }}} ); 
M19_08VM = M19I and M19_08V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_08VM, M19I }}} ); 
M19_09VM = M19I and M19_09V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_09VM, M19I }}} ); 
M19_10VM = M19I and M19_10V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_10VM, M19I }}} ); 
M19_11VM = M19I and M19_11V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_11VM, M19I }}} ); 
M19_12VM = M19I and M19_12V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_12VM, M19I }}} ); 
M19_13VM = M19I and M19_13V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_13VM, M19I }}} ); 
M19_14VM = M19I and M19_14V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_14VM, M19I }}} ); 
M19_15VM = M19I and M19_15V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_15VM, M19I }}} ); 
M19_16VM = M19I and M19_16V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_16VM, M19I }}} ); 
M19_17VM = M19I and M19_17V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_17VM, M19I }}} ); 
M19_18VM = M19I and M19_18V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_18VM, M19I }}} ); 
M19_25VM = M19I and M19_25V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_25VM, M19I }}} ); 
M19_33VM = M19I and M19_33V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_33VM, M19I }}} ); 
M19_50VM = M19I and M19_50V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_50VM, M19I }}} ); 
M19_70VM = M19I and M19_70V; 
CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19_70VM, M19I }}} ); 


//DV recognition start

HV_ID_TOP_tag.push_back("AP_HV_ID_TOP");
HV_ID_TOP_tag.push_back("CU_RDL_HV_ID_TOP");

HV_ID_TOP_tag.push_back("M19_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M18_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M17_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M16_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M15_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M14_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M13_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M12_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M11_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M10_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M9_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M8_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M7_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M6_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M5_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M4_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M3_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M2_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M1_HV_ID_TOP");
HV_ID_TOP_tag.push_back("M0_HV_ID_TOP");

LV_ID_TOP_tag.push_back("AP_LV_ID_TOP");
LV_ID_TOP_tag.push_back("CU_RDL_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M19_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M18_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M17_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M16_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M15_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M14_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M13_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M12_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M11_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M10_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M9_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M8_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M7_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M6_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M5_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M4_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M3_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M2_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M1_LV_ID_TOP");
LV_ID_TOP_tag.push_back("M0_LV_ID_TOP");

HV_marker_tag.push_back("MALL_70VM");
HV_marker_voltage.push_back(7.0);

HV_marker_tag.push_back("MALL_50VM");
HV_marker_voltage.push_back(5.0);

HV_marker_tag.push_back("MD_33VM");
HV_marker_voltage.push_back(3.3);

HV_marker_tag.push_back("MALL_33VM");
HV_marker_voltage.push_back(3.3);

HV_marker_tag.push_back("MD_25VM");
HV_marker_voltage.push_back(2.5);

HV_marker_tag.push_back("MALL_25VM");
HV_marker_voltage.push_back(2.5);

HV_marker_tag.push_back("MALL_18VM");
HV_marker_voltage.push_back(1.8);

HV_marker_tag.push_back("MALL_17VM");
HV_marker_voltage.push_back(1.7);

HV_marker_tag.push_back("MALL_16VM");
HV_marker_voltage.push_back(1.6);

HV_marker_tag.push_back("MALL_15VM");
HV_marker_voltage.push_back(1.5);

HV_marker_tag.push_back("MALL_14VM");
HV_marker_voltage.push_back(1.4);

HV_marker_tag.push_back("MALL_13VM");
HV_marker_voltage.push_back(1.3);

HV_marker_tag.push_back("MD_12VM");
HV_marker_voltage.push_back(1.2);

HV_marker_tag.push_back("MALL_12VM");
HV_marker_voltage.push_back(1.2);

HV_marker_tag.push_back("MALL_11VM");
HV_marker_voltage.push_back(1.1);

HV_marker_tag.push_back("MALL_10VM");
HV_marker_voltage.push_back(1.0);

HV_marker_tag.push_back("MALL_09VM");
HV_marker_voltage.push_back(0.9);

HV_marker_tag.push_back("MALL_08VM");
HV_marker_voltage.push_back(0.8);

HV_marker_tag.push_back("MALL_07VM");
HV_marker_voltage.push_back(0.7);

HV_marker_tag.push_back("MALL_06VM");
HV_marker_voltage.push_back(0.6);

HV_marker_tag.push_back("MALL_05VM");
HV_marker_voltage.push_back(0.5);

HV_marker_tag.push_back("MALL_04VM");
HV_marker_voltage.push_back(0.4);

HV_marker_tag.push_back("MALL_03VM");
HV_marker_voltage.push_back(0.3);

HV_marker_tag.push_back("MALL_02VM");
HV_marker_voltage.push_back(0.2);

HV_marker_tag.push_back("MALL_01VM");
HV_marker_voltage.push_back(0.1);

HV_marker_tag.push_back("MALL_00VM");
HV_marker_voltage.push_back(0.0);

		// device connection part (connect core/IO devices, choose IO voltage)
 		HV_marker_tag.push_back("PSTP_00");
		HV_marker_voltage.push_back(0);

 		HV_marker_tag.push_back("PSD_15");
		HV_marker_voltage.push_back(1.5);
 		HV_marker_tag.push_back("NSD_15");
		HV_marker_voltage.push_back(1.5);
 		HV_marker_tag.push_back("VAR_15"); 
		HV_marker_voltage.push_back(1.5);
 		HV_marker_tag.push_back("GATE_15"); 
		HV_marker_voltage.push_back(1.5);

 		HV_marker_tag.push_back("PSD_12");
		HV_marker_voltage.push_back(1.32);
 		HV_marker_tag.push_back("NSD_12"); 
		HV_marker_voltage.push_back(1.32);
 		HV_marker_tag.push_back("VAR_12");
		HV_marker_voltage.push_back(1.32);
 		HV_marker_tag.push_back("GATE_12");
		HV_marker_voltage.push_back(1.32);
		
 		HV_marker_tag.push_back("PSD_CORE");
		HV_marker_voltage.push_back(CORE_VOLT);
 		HV_marker_tag.push_back("NSD_CORE");
		HV_marker_voltage.push_back(CORE_VOLT);
 		HV_marker_tag.push_back("VAR_CORE"); 
		HV_marker_voltage.push_back(CORE_VOLT);
 		HV_marker_tag.push_back("GATE_CORE"); 
		HV_marker_voltage.push_back(CORE_VOLT);


//DV recognition end

u_net_voltage : function (void) returning void
{
    vh_temp : double;
    vh : double;
    vl_temp : double;
    vl : double;
    vh = 0.0;
    vl = 0.0;
    vh_top : double;
    vl_top : double;
    top_flag1 : boolean = false;
    top_flag2 : boolean = false;

    // volt high
    for (i = 0 to HV_ID_TOP_tag.size()-1) {
        if (!top_flag1) {
            top_flag1 = ptn_get_max_double_property(HV_ID_TOP_tag[i], "high", vh_top);
        }
    }

    if(top_flag1) {
	    vh = vh_top;
    } elseif (ptn_get_max_double_property("MVH", "high", vh_temp)) {
	    vh = vh_temp;
    } else {
            mkrflag : boolean = false;
            for (i = 0 to HV_marker_tag.size()-1) {
	        if (!mkrflag) {
                    mkrflag = mkrflag || ptn_net_data_exist(HV_marker_tag[i]);
                    if (mkrflag) { 
            			vh = HV_marker_voltage[i]; 
		            }
                }
	    }
            if (!mkrflag) { 
		        vh = 0.0; 
	        }
    } 
    
    // volt low
    for (i = 0 to LV_ID_TOP_tag.size()-1) {
        if (!top_flag2) {
            top_flag2 = ptn_get_min_double_property(LV_ID_TOP_tag[i], "low", vl_top);
        }
    }

    if (top_flag2) { 
	    vl = vl_top;
    } elseif (ptn_get_min_double_property("MVL", "low", vl_temp)) {
	    vl = vl_temp;
    } else {
	    vl = 0.0;
    }

    ptn_save_double_property("high", vh);
    ptn_save_double_property("low", vl);
}







































CONNECT_DB_DV_without_prop = CONNECT_DB_DV;

u_net_voltage_id : function (void) returning void
{
    flag : double = 0;
    if (ptn_net_data_exist("ID"))
    {
        flag = 1;
    }
    ptn_save_double_property("flag", flag);
}


CONNECT_DB_DV_LUP_UNDEF = property_to_net( 
	connect_sequence = CONNECT_DB_DV_without_prop,
	net_property_function = u_net_voltage_id,
	layer_groups = {
	    "ID" => { OD_HV_ID, PO_HV_ID, MD_HV_ID, M0_HV_ID, M1_HV_ID, M2_HV_ID, M3_HV_ID, M4_HV_ID, M5_HV_ID, M6_HV_ID, M7_HV_ID, M8_HV_ID, M9_HV_ID, M10_HV_ID, M11_HV_ID, M12_HV_ID, M13_HV_ID, M14_HV_ID, M15_HV_ID, M16_HV_ID, M17_HV_ID, M18_HV_ID, M19_HV_ID, AP_HV_ID, CU_RDL_HV_ID, OD_LV_ID, PO_LV_ID, MD_LV_ID, M0_LV_ID, M1_LV_ID, M2_LV_ID, M3_LV_ID, M4_LV_ID, M5_LV_ID, M6_LV_ID, M7_LV_ID, M8_LV_ID, M9_LV_ID, M10_LV_ID, M11_LV_ID, M12_LV_ID, M13_LV_ID, M14_LV_ID, M15_LV_ID, M16_LV_ID, M17_LV_ID, M18_LV_ID, M19_LV_ID, AP_LV_ID, CU_RDL_LV_ID,
	    M0_HV_ID_TOP,
	    M1_HV_ID_TOP,
	    M2_HV_ID_TOP,
	    M3_HV_ID_TOP,
	    M4_HV_ID_TOP,
	    M5_HV_ID_TOP,
	    M6_HV_ID_TOP,
	    M7_HV_ID_TOP,
	    M8_HV_ID_TOP,
	    M9_HV_ID_TOP,
	    M10_HV_ID_TOP,
	    M11_HV_ID_TOP,
	    M12_HV_ID_TOP,
	    M13_HV_ID_TOP,
	    M14_HV_ID_TOP,
	    M15_HV_ID_TOP,
	    M16_HV_ID_TOP,
	    M17_HV_ID_TOP,
	    M18_HV_ID_TOP,
	    M19_HV_ID_TOP,
	    M0_LV_ID_TOP,
	    M1_LV_ID_TOP,
	    M2_LV_ID_TOP,
	    M3_LV_ID_TOP,
	    M4_LV_ID_TOP,
	    M5_LV_ID_TOP,
	    M6_LV_ID_TOP,
	    M7_LV_ID_TOP,
	    M8_LV_ID_TOP,
	    M9_LV_ID_TOP,
	    M10_LV_ID_TOP,
	    M11_LV_ID_TOP,
	    M12_LV_ID_TOP,
	    M13_LV_ID_TOP,
	    M14_LV_ID_TOP,
	    M15_LV_ID_TOP,
	    M16_LV_ID_TOP,
	    M17_LV_ID_TOP,
	    M18_LV_ID_TOP,
	    M19_LV_ID_TOP,
	    AP_HV_ID_TOP,
	    AP_LV_ID_TOP,
	    CU_RDL_HV_ID_TOP,
	    CU_RDL_LV_ID_TOP,
	    PSTP_00,
	    PSD_15, 
	    NSD_15, 
	    VAR_15,
	    GATE_15, 
	    PSD_12,
	    NSD_12,
	    VAR_12,
	    GATE_12,
	    PSD_CORE,
	    NSD_CORE,
	    VAR_CORE,
	    GATE_CORE,
	    MD_12VM,
	    MD_25VM,
	    MD_33VM,
	    M0_00VM, M1_00VM, M2_00VM, M3_00VM, M4_00VM, M5_00VM, M6_00VM, M7_00VM, M8_00VM, M9_00VM, M10_00VM, M11_00VM, M12_00VM, M13_00VM, M14_00VM, M15_00VM, M16_00VM, M17_00VM, M18_00VM, M19_00VM,
	    M0_01VM, M1_01VM, M2_01VM, M3_01VM, M4_01VM, M5_01VM, M6_01VM, M7_01VM, M8_01VM, M9_01VM, M10_01VM, M11_01VM, M12_01VM, M13_01VM, M14_01VM, M15_01VM, M16_01VM, M17_01VM, M18_01VM, M19_01VM,
	    M0_02VM, M1_02VM, M2_02VM, M3_02VM, M4_02VM, M5_02VM, M6_02VM, M7_02VM, M8_02VM, M9_02VM, M10_02VM, M11_02VM, M12_02VM, M13_02VM, M14_02VM, M15_02VM, M16_02VM, M17_02VM, M18_02VM, M19_02VM,
	    M0_03VM, M1_03VM, M2_03VM, M3_03VM, M4_03VM, M5_03VM, M6_03VM, M7_03VM, M8_03VM, M9_03VM, M10_03VM, M11_03VM, M12_03VM, M13_03VM, M14_03VM, M15_03VM, M16_03VM, M17_03VM, M18_03VM, M19_03VM,
	    M0_04VM, M1_04VM, M2_04VM, M3_04VM, M4_04VM, M5_04VM, M6_04VM, M7_04VM, M8_04VM, M9_04VM, M10_04VM, M11_04VM, M12_04VM, M13_04VM, M14_04VM, M15_04VM, M16_04VM, M17_04VM, M18_04VM, M19_04VM,
	    M0_05VM, M1_05VM, M2_05VM, M3_05VM, M4_05VM, M5_05VM, M6_05VM, M7_05VM, M8_05VM, M9_05VM, M10_05VM, M11_05VM, M12_05VM, M13_05VM, M14_05VM, M15_05VM, M16_05VM, M17_05VM, M18_05VM, M19_05VM,
	    M0_06VM, M1_06VM, M2_06VM, M3_06VM, M4_06VM, M5_06VM, M6_06VM, M7_06VM, M8_06VM, M9_06VM, M10_06VM, M11_06VM, M12_06VM, M13_06VM, M14_06VM, M15_06VM, M16_06VM, M17_06VM, M18_06VM, M19_06VM,
	    M0_07VM, M1_07VM, M2_07VM, M3_07VM, M4_07VM, M5_07VM, M6_07VM, M7_07VM, M8_07VM, M9_07VM, M10_07VM, M11_07VM, M12_07VM, M13_07VM, M14_07VM, M15_07VM, M16_07VM, M17_07VM, M18_07VM, M19_07VM,
	    M0_08VM, M1_08VM, M2_08VM, M3_08VM, M4_08VM, M5_08VM, M6_08VM, M7_08VM, M8_08VM, M9_08VM, M10_08VM, M11_08VM, M12_08VM, M13_08VM, M14_08VM, M15_08VM, M16_08VM, M17_08VM, M18_08VM, M19_08VM,
	    M0_09VM, M1_09VM, M2_09VM, M3_09VM, M4_09VM, M5_09VM, M6_09VM, M7_09VM, M8_09VM, M9_09VM, M10_09VM, M11_09VM, M12_09VM, M13_09VM, M14_09VM, M15_09VM, M16_09VM, M17_09VM, M18_09VM, M19_09VM,
	    M0_10VM, M1_10VM, M2_10VM, M3_10VM, M4_10VM, M5_10VM, M6_10VM, M7_10VM, M8_10VM, M9_10VM, M10_10VM, M11_10VM, M12_10VM, M13_10VM, M14_10VM, M15_10VM, M16_10VM, M17_10VM, M18_10VM, M19_10VM,
	    M0_11VM, M1_11VM, M2_11VM, M3_11VM, M4_11VM, M5_11VM, M6_11VM, M7_11VM, M8_11VM, M9_11VM, M10_11VM, M11_11VM, M12_11VM, M13_11VM, M14_11VM, M15_11VM, M16_11VM, M17_11VM, M18_11VM, M19_11VM,
	    M0_12VM, M1_12VM, M2_12VM, M3_12VM, M4_12VM, M5_12VM, M6_12VM, M7_12VM, M8_12VM, M9_12VM, M10_12VM, M11_12VM, M12_12VM, M13_12VM, M14_12VM, M15_12VM, M16_12VM, M17_12VM, M18_12VM, M19_12VM,
	    M0_13VM, M1_13VM, M2_13VM, M3_13VM, M4_13VM, M5_13VM, M6_13VM, M7_13VM, M8_13VM, M9_13VM, M10_13VM, M11_13VM, M12_13VM, M13_13VM, M14_13VM, M15_13VM, M16_13VM, M17_13VM, M18_13VM, M19_13VM,
	    M0_14VM, M1_14VM, M2_14VM, M3_14VM, M4_14VM, M5_14VM, M6_14VM, M7_14VM, M8_14VM, M9_14VM, M10_14VM, M11_14VM, M12_14VM, M13_14VM, M14_14VM, M15_14VM, M16_14VM, M17_14VM, M18_14VM, M19_14VM,
	    M0_15VM, M1_15VM, M2_15VM, M3_15VM, M4_15VM, M5_15VM, M6_15VM, M7_15VM, M8_15VM, M9_15VM, M10_15VM, M11_15VM, M12_15VM, M13_15VM, M14_15VM, M15_15VM, M16_15VM, M17_15VM, M18_15VM, M19_15VM,
	    M0_16VM, M1_16VM, M2_16VM, M3_16VM, M4_16VM, M5_16VM, M6_16VM, M7_16VM, M8_16VM, M9_16VM, M10_16VM, M11_16VM, M12_16VM, M13_16VM, M14_16VM, M15_16VM, M16_16VM, M17_16VM, M18_16VM, M19_16VM,
	    M0_17VM, M1_17VM, M2_17VM, M3_17VM, M4_17VM, M5_17VM, M6_17VM, M7_17VM, M8_17VM, M9_17VM, M10_17VM, M11_17VM, M12_17VM, M13_17VM, M14_17VM, M15_17VM, M16_17VM, M17_17VM, M18_17VM, M19_17VM,
	    M0_18VM, M1_18VM, M2_18VM, M3_18VM, M4_18VM, M5_18VM, M6_18VM, M7_18VM, M8_18VM, M9_18VM, M10_18VM, M11_18VM, M12_18VM, M13_18VM, M14_18VM, M15_18VM, M16_18VM, M17_18VM, M18_18VM, M19_18VM,
	    M0_25VM, M1_25VM, M2_25VM, M3_25VM, M4_25VM, M5_25VM, M6_25VM, M7_25VM, M8_25VM, M9_25VM, M10_25VM, M11_25VM, M12_25VM, M13_25VM, M14_25VM, M15_25VM, M16_25VM, M17_25VM, M18_25VM, M19_25VM,
	    M0_33VM, M1_33VM, M2_33VM, M3_33VM, M4_33VM, M5_33VM, M6_33VM, M7_33VM, M8_33VM, M9_33VM, M10_33VM, M11_33VM, M12_33VM, M13_33VM, M14_33VM, M15_33VM, M16_33VM, M17_33VM, M18_33VM, M19_33VM,
	    M0_50VM, M1_50VM, M2_50VM, M3_50VM, M4_50VM, M5_50VM, M6_50VM, M7_50VM, M8_50VM, M9_50VM, M10_50VM, M11_50VM, M12_50VM, M13_50VM, M14_50VM, M15_50VM, M16_50VM, M17_50VM, M18_50VM, M19_50VM,
	    M0_70VM, M1_70VM, M2_70VM, M3_70VM, M4_70VM, M5_70VM, M6_70VM, M7_70VM, M8_70VM, M9_70VM, M10_70VM, M11_70VM, M12_70VM, M13_70VM, M14_70VM, M15_70VM, M16_70VM, M17_70VM, M18_70VM, M19_70VM,
	    }
	},
	sync_nets = {
        	{ ILP1I, MDV_SYNC },
	        { MD_NOT_CMDI, MDV_SYNC },
		{ M0_NOT_CM0I, M0V_SYNC },
		{ M1I, M1V_SYNC },
		{ M2I, M2V_SYNC },
		{ M3I, M3V_SYNC },
		{ M4I, M4V_SYNC },
		{ M5I, M5V_SYNC },
		{ M6I, M6V_SYNC },
		{ M7I, M7V_SYNC },
		{ M8I, M8V_SYNC },
		{ M9I, M9V_SYNC },
		{ M10I, M10V_SYNC },
		{ M11I, M11V_SYNC },
		{ M12I, M12V_SYNC },
		{ M13I, M13V_SYNC },
		{ M14I, M14V_SYNC },
		{ M15I, M15V_SYNC },
		{ M16I, M16V_SYNC },
		{ M17I, M17V_SYNC },
		{ M18I, M18V_SYNC },
		{ M19I, M19V_SYNC },
		{ API, APV_SYNC },
		{ CU_RDLI, CU_RDLV_SYNC }
	},

	sync_name = "sync"

);


CONNECT_DB_DV_MOM_UNDEF = property_to_net( 
	connect_sequence = CONNECT_DB_DV_without_prop,
	net_property_function = u_net_voltage_id,
	layer_groups = {
	    "ID" => { OD_HV_ID, PO_HV_ID, MD_HV_ID, M0_HV_ID, M1_HV_ID, M2_HV_ID, M3_HV_ID, M4_HV_ID, M5_HV_ID, M6_HV_ID, M7_HV_ID, M8_HV_ID, M9_HV_ID, M10_HV_ID, M11_HV_ID, M12_HV_ID, M13_HV_ID, M14_HV_ID, M15_HV_ID, M16_HV_ID, M17_HV_ID, M18_HV_ID, M19_HV_ID, AP_HV_ID, CU_RDL_HV_ID, OD_LV_ID, PO_LV_ID, MD_LV_ID, M0_LV_ID, M1_LV_ID, M2_LV_ID, M3_LV_ID, M4_LV_ID, M5_LV_ID, M6_LV_ID, M7_LV_ID, M8_LV_ID, M9_LV_ID, M10_LV_ID, M11_LV_ID, M12_LV_ID, M13_LV_ID, M14_LV_ID, M15_LV_ID, M16_LV_ID, M17_LV_ID, M18_LV_ID, M19_LV_ID, AP_LV_ID, CU_RDL_LV_ID, 
	    M0_HV_ID_TOP,
	    M1_HV_ID_TOP,
	    M2_HV_ID_TOP,
	    M3_HV_ID_TOP,
	    M4_HV_ID_TOP,
	    M5_HV_ID_TOP,
	    M6_HV_ID_TOP,
	    M7_HV_ID_TOP,
	    M8_HV_ID_TOP,
	    M9_HV_ID_TOP,
	    M10_HV_ID_TOP,
	    M11_HV_ID_TOP,
	    M12_HV_ID_TOP,
	    M13_HV_ID_TOP,
	    M14_HV_ID_TOP,
	    M15_HV_ID_TOP,
	    M16_HV_ID_TOP,
	    M17_HV_ID_TOP,
	    M18_HV_ID_TOP,
	    M19_HV_ID_TOP,
	    M0_LV_ID_TOP,
	    M1_LV_ID_TOP,
	    M2_LV_ID_TOP,
	    M3_LV_ID_TOP,
	    M4_LV_ID_TOP,
	    M5_LV_ID_TOP,
	    M6_LV_ID_TOP,
	    M7_LV_ID_TOP,
	    M8_LV_ID_TOP,
	    M9_LV_ID_TOP,
	    M10_LV_ID_TOP,
	    M11_LV_ID_TOP,
	    M12_LV_ID_TOP,
	    M13_LV_ID_TOP,
	    M14_LV_ID_TOP,
	    M15_LV_ID_TOP,
	    M16_LV_ID_TOP,
	    M17_LV_ID_TOP,
	    M18_LV_ID_TOP,
	    M19_LV_ID_TOP,
	    AP_HV_ID_TOP,
	    AP_LV_ID_TOP,
	    CU_RDL_HV_ID_TOP,
	    CU_RDL_LV_ID_TOP,
	    PSTP_00,
	    PSD_15, 
	    NSD_15, 
	    VAR_15,
	    GATE_15, 
	    PSD_12,
	    NSD_12,
	    VAR_12,
	    GATE_12,
	    PSD_CORE,
	    NSD_CORE,
	    VAR_CORE,
	    GATE_CORE,
	    MD_12VM,
	    MD_25VM,
	    MD_33VM,
	    M0_00VM, M1_00VM, M2_00VM, M3_00VM, M4_00VM, M5_00VM, M6_00VM, M7_00VM, M8_00VM, M9_00VM, M10_00VM, M11_00VM, M12_00VM, M13_00VM, M14_00VM, M15_00VM, M16_00VM, M17_00VM, M18_00VM, M19_00VM,
	    M0_01VM, M1_01VM, M2_01VM, M3_01VM, M4_01VM, M5_01VM, M6_01VM, M7_01VM, M8_01VM, M9_01VM, M10_01VM, M11_01VM, M12_01VM, M13_01VM, M14_01VM, M15_01VM, M16_01VM, M17_01VM, M18_01VM, M19_01VM,
	    M0_02VM, M1_02VM, M2_02VM, M3_02VM, M4_02VM, M5_02VM, M6_02VM, M7_02VM, M8_02VM, M9_02VM, M10_02VM, M11_02VM, M12_02VM, M13_02VM, M14_02VM, M15_02VM, M16_02VM, M17_02VM, M18_02VM, M19_02VM,
	    M0_03VM, M1_03VM, M2_03VM, M3_03VM, M4_03VM, M5_03VM, M6_03VM, M7_03VM, M8_03VM, M9_03VM, M10_03VM, M11_03VM, M12_03VM, M13_03VM, M14_03VM, M15_03VM, M16_03VM, M17_03VM, M18_03VM, M19_03VM,
	    M0_04VM, M1_04VM, M2_04VM, M3_04VM, M4_04VM, M5_04VM, M6_04VM, M7_04VM, M8_04VM, M9_04VM, M10_04VM, M11_04VM, M12_04VM, M13_04VM, M14_04VM, M15_04VM, M16_04VM, M17_04VM, M18_04VM, M19_04VM,
	    M0_05VM, M1_05VM, M2_05VM, M3_05VM, M4_05VM, M5_05VM, M6_05VM, M7_05VM, M8_05VM, M9_05VM, M10_05VM, M11_05VM, M12_05VM, M13_05VM, M14_05VM, M15_05VM, M16_05VM, M17_05VM, M18_05VM, M19_05VM,
	    M0_06VM, M1_06VM, M2_06VM, M3_06VM, M4_06VM, M5_06VM, M6_06VM, M7_06VM, M8_06VM, M9_06VM, M10_06VM, M11_06VM, M12_06VM, M13_06VM, M14_06VM, M15_06VM, M16_06VM, M17_06VM, M18_06VM, M19_06VM,
	    M0_07VM, M1_07VM, M2_07VM, M3_07VM, M4_07VM, M5_07VM, M6_07VM, M7_07VM, M8_07VM, M9_07VM, M10_07VM, M11_07VM, M12_07VM, M13_07VM, M14_07VM, M15_07VM, M16_07VM, M17_07VM, M18_07VM, M19_07VM,
	    M0_08VM, M1_08VM, M2_08VM, M3_08VM, M4_08VM, M5_08VM, M6_08VM, M7_08VM, M8_08VM, M9_08VM, M10_08VM, M11_08VM, M12_08VM, M13_08VM, M14_08VM, M15_08VM, M16_08VM, M17_08VM, M18_08VM, M19_08VM,
	    M0_09VM, M1_09VM, M2_09VM, M3_09VM, M4_09VM, M5_09VM, M6_09VM, M7_09VM, M8_09VM, M9_09VM, M10_09VM, M11_09VM, M12_09VM, M13_09VM, M14_09VM, M15_09VM, M16_09VM, M17_09VM, M18_09VM, M19_09VM,
	    M0_10VM, M1_10VM, M2_10VM, M3_10VM, M4_10VM, M5_10VM, M6_10VM, M7_10VM, M8_10VM, M9_10VM, M10_10VM, M11_10VM, M12_10VM, M13_10VM, M14_10VM, M15_10VM, M16_10VM, M17_10VM, M18_10VM, M19_10VM,
	    M0_11VM, M1_11VM, M2_11VM, M3_11VM, M4_11VM, M5_11VM, M6_11VM, M7_11VM, M8_11VM, M9_11VM, M10_11VM, M11_11VM, M12_11VM, M13_11VM, M14_11VM, M15_11VM, M16_11VM, M17_11VM, M18_11VM, M19_11VM,
	    M0_12VM, M1_12VM, M2_12VM, M3_12VM, M4_12VM, M5_12VM, M6_12VM, M7_12VM, M8_12VM, M9_12VM, M10_12VM, M11_12VM, M12_12VM, M13_12VM, M14_12VM, M15_12VM, M16_12VM, M17_12VM, M18_12VM, M19_12VM,
	    M0_13VM, M1_13VM, M2_13VM, M3_13VM, M4_13VM, M5_13VM, M6_13VM, M7_13VM, M8_13VM, M9_13VM, M10_13VM, M11_13VM, M12_13VM, M13_13VM, M14_13VM, M15_13VM, M16_13VM, M17_13VM, M18_13VM, M19_13VM,
	    M0_14VM, M1_14VM, M2_14VM, M3_14VM, M4_14VM, M5_14VM, M6_14VM, M7_14VM, M8_14VM, M9_14VM, M10_14VM, M11_14VM, M12_14VM, M13_14VM, M14_14VM, M15_14VM, M16_14VM, M17_14VM, M18_14VM, M19_14VM,
	    M0_15VM, M1_15VM, M2_15VM, M3_15VM, M4_15VM, M5_15VM, M6_15VM, M7_15VM, M8_15VM, M9_15VM, M10_15VM, M11_15VM, M12_15VM, M13_15VM, M14_15VM, M15_15VM, M16_15VM, M17_15VM, M18_15VM, M19_15VM,
	    M0_16VM, M1_16VM, M2_16VM, M3_16VM, M4_16VM, M5_16VM, M6_16VM, M7_16VM, M8_16VM, M9_16VM, M10_16VM, M11_16VM, M12_16VM, M13_16VM, M14_16VM, M15_16VM, M16_16VM, M17_16VM, M18_16VM, M19_16VM,
	    M0_17VM, M1_17VM, M2_17VM, M3_17VM, M4_17VM, M5_17VM, M6_17VM, M7_17VM, M8_17VM, M9_17VM, M10_17VM, M11_17VM, M12_17VM, M13_17VM, M14_17VM, M15_17VM, M16_17VM, M17_17VM, M18_17VM, M19_17VM,
	    M0_18VM, M1_18VM, M2_18VM, M3_18VM, M4_18VM, M5_18VM, M6_18VM, M7_18VM, M8_18VM, M9_18VM, M10_18VM, M11_18VM, M12_18VM, M13_18VM, M14_18VM, M15_18VM, M16_18VM, M17_18VM, M18_18VM, M19_18VM,
	    M0_25VM, M1_25VM, M2_25VM, M3_25VM, M4_25VM, M5_25VM, M6_25VM, M7_25VM, M8_25VM, M9_25VM, M10_25VM, M11_25VM, M12_25VM, M13_25VM, M14_25VM, M15_25VM, M16_25VM, M17_25VM, M18_25VM, M19_25VM,
	    M0_33VM, M1_33VM, M2_33VM, M3_33VM, M4_33VM, M5_33VM, M6_33VM, M7_33VM, M8_33VM, M9_33VM, M10_33VM, M11_33VM, M12_33VM, M13_33VM, M14_33VM, M15_33VM, M16_33VM, M17_33VM, M18_33VM, M19_33VM,
	    M0_50VM, M1_50VM, M2_50VM, M3_50VM, M4_50VM, M5_50VM, M6_50VM, M7_50VM, M8_50VM, M9_50VM, M10_50VM, M11_50VM, M12_50VM, M13_50VM, M14_50VM, M15_50VM, M16_50VM, M17_50VM, M18_50VM, M19_50VM,
	    M0_70VM, M1_70VM, M2_70VM, M3_70VM, M4_70VM, M5_70VM, M6_70VM, M7_70VM, M8_70VM, M9_70VM, M10_70VM, M11_70VM, M12_70VM, M13_70VM, M14_70VM, M15_70VM, M16_70VM, M17_70VM, M18_70VM, M19_70VM,
	    }
	},
	sync_nets = {
	        { ILP1I, MDV_SYNC },
	        { MD_NOT_CMDI, MDV_SYNC },
		{ M0_NOT_CM0I, M0V_SYNC },
		{ M1I, M1V_SYNC },
		{ M2I, M2V_SYNC },
		{ M3I, M3V_SYNC },
		{ M4I, M4V_SYNC },
		{ M5I, M5V_SYNC },
		{ M6I, M6V_SYNC },
		{ M7I, M7V_SYNC },
		{ M8I, M8V_SYNC },
		{ M9I, M9V_SYNC },
		{ M10I, M10V_SYNC },
		{ M11I, M11V_SYNC },
		{ M12I, M12V_SYNC },
		{ M13I, M13V_SYNC },
		{ M14I, M14V_SYNC },
		{ M15I, M15V_SYNC },
		{ M16I, M16V_SYNC },
		{ M17I, M17V_SYNC },
		{ M18I, M18V_SYNC },
		{ M19I, M19V_SYNC },
		{ API, APV_SYNC },
		{ CU_RDLI, CU_RDLV_SYNC }
	},

	sync_name = "sync"
);


CONNECT_DB_DV = property_to_net( 
	connect_sequence = CONNECT_DB_DV_without_prop,
	net_property_function = u_net_voltage,
	layer_groups = {
	    "MVH" => { OD_HV_ID, PO_HV_ID, MD_HV_ID, M0_HV_ID, M1_HV_ID, M2_HV_ID, M3_HV_ID, M4_HV_ID, M5_HV_ID, M6_HV_ID, M7_HV_ID, M8_HV_ID, M9_HV_ID, M10_HV_ID, M11_HV_ID, M12_HV_ID, M13_HV_ID, M14_HV_ID, M15_HV_ID, M16_HV_ID, M17_HV_ID, M18_HV_ID, M19_HV_ID, AP_HV_ID, CU_RDL_HV_ID },
	    "MVL" => { OD_LV_ID, PO_LV_ID, MD_LV_ID, M0_LV_ID, M1_LV_ID, M2_LV_ID, M3_LV_ID, M4_LV_ID, M5_LV_ID, M6_LV_ID, M7_LV_ID, M8_LV_ID, M9_LV_ID, M10_LV_ID, M11_LV_ID, M12_LV_ID, M13_LV_ID, M14_LV_ID, M15_LV_ID, M16_LV_ID, M17_LV_ID, M18_LV_ID, M19_LV_ID, AP_LV_ID, CU_RDL_LV_ID },
	    "M0_HV_ID_TOP" => M0_HV_ID_TOP,
	    "M1_HV_ID_TOP" => M1_HV_ID_TOP,
	    "M2_HV_ID_TOP" => M2_HV_ID_TOP,
	    "M3_HV_ID_TOP" => M3_HV_ID_TOP,
	    "M4_HV_ID_TOP" => M4_HV_ID_TOP,
	    "M5_HV_ID_TOP" => M5_HV_ID_TOP,
	    "M6_HV_ID_TOP" => M6_HV_ID_TOP,
	    "M7_HV_ID_TOP" => M7_HV_ID_TOP,
	    "M8_HV_ID_TOP" => M8_HV_ID_TOP,
	    "M9_HV_ID_TOP" => M9_HV_ID_TOP,
	    "M10_HV_ID_TOP" => M10_HV_ID_TOP,
	    "M11_HV_ID_TOP" => M11_HV_ID_TOP,
	    "M12_HV_ID_TOP" => M12_HV_ID_TOP,
	    "M13_HV_ID_TOP" => M13_HV_ID_TOP,
	    "M14_HV_ID_TOP" => M14_HV_ID_TOP,
	    "M15_HV_ID_TOP" => M15_HV_ID_TOP,
	    "M16_HV_ID_TOP" => M16_HV_ID_TOP,
	    "M17_HV_ID_TOP" => M17_HV_ID_TOP,
	    "M18_HV_ID_TOP" => M18_HV_ID_TOP,
	    "M19_HV_ID_TOP" => M19_HV_ID_TOP,
	    "M0_LV_ID_TOP" => M0_LV_ID_TOP,
	    "M1_LV_ID_TOP" => M1_LV_ID_TOP,
	    "M2_LV_ID_TOP" => M2_LV_ID_TOP,
	    "M3_LV_ID_TOP" => M3_LV_ID_TOP,
	    "M4_LV_ID_TOP" => M4_LV_ID_TOP,
	    "M5_LV_ID_TOP" => M5_LV_ID_TOP,
	    "M6_LV_ID_TOP" => M6_LV_ID_TOP,
	    "M7_LV_ID_TOP" => M7_LV_ID_TOP,
	    "M8_LV_ID_TOP" => M8_LV_ID_TOP,
	    "M9_LV_ID_TOP" => M9_LV_ID_TOP,
	    "M10_LV_ID_TOP" => M10_LV_ID_TOP,
	    "M11_LV_ID_TOP" => M11_LV_ID_TOP,
	    "M12_LV_ID_TOP" => M12_LV_ID_TOP,
	    "M13_LV_ID_TOP" => M13_LV_ID_TOP,
	    "M14_LV_ID_TOP" => M14_LV_ID_TOP,
	    "M15_LV_ID_TOP" => M15_LV_ID_TOP,
	    "M16_LV_ID_TOP" => M16_LV_ID_TOP,
	    "M17_LV_ID_TOP" => M17_LV_ID_TOP,
	    "M18_LV_ID_TOP" => M18_LV_ID_TOP,
	    "M19_LV_ID_TOP" => M19_LV_ID_TOP,
	    "AP_HV_ID_TOP" => AP_HV_ID_TOP,
	    "AP_LV_ID_TOP" => AP_LV_ID_TOP,
	    "CU_RDL_HV_ID_TOP" => CU_RDL_HV_ID_TOP,
	    "CU_RDL_LV_ID_TOP" => CU_RDL_LV_ID_TOP,
	    "PSTP_00" => PSTP_00,
	    "PSD_15" => PSD_15, 
	    "NSD_15" => NSD_15, 
	    "VAR_15" => VAR_15,
	    "GATE_15" => GATE_15, 
	    "PSD_12" => PSD_12,
	    "NSD_12" => NSD_12,
	    "VAR_12" => VAR_12,
	    "GATE_12" => GATE_12,
	    "PSD_CORE" => PSD_CORE,
	    "NSD_CORE" => NSD_CORE,
	    "VAR_CORE" => VAR_CORE,
	    "GATE_CORE" => GATE_CORE,
	    "MD_12VM" => MD_12VM,
	    "MD_25VM" => MD_25VM,
	    "MD_33VM" => MD_33VM,
	    "MALL_00VM" => { M0_00VM, M1_00VM, M2_00VM, M3_00VM, M4_00VM, M5_00VM, M6_00VM, M7_00VM, M8_00VM, M9_00VM, M10_00VM, M11_00VM, M12_00VM, M13_00VM, M14_00VM, M15_00VM, M16_00VM, M17_00VM, M18_00VM, M19_00VM },
	    "MALL_01VM" => { M0_01VM, M1_01VM, M2_01VM, M3_01VM, M4_01VM, M5_01VM, M6_01VM, M7_01VM, M8_01VM, M9_01VM, M10_01VM, M11_01VM, M12_01VM, M13_01VM, M14_01VM, M15_01VM, M16_01VM, M17_01VM, M18_01VM, M19_01VM },
	    "MALL_02VM" => { M0_02VM, M1_02VM, M2_02VM, M3_02VM, M4_02VM, M5_02VM, M6_02VM, M7_02VM, M8_02VM, M9_02VM, M10_02VM, M11_02VM, M12_02VM, M13_02VM, M14_02VM, M15_02VM, M16_02VM, M17_02VM, M18_02VM, M19_02VM },
	    "MALL_03VM" => { M0_03VM, M1_03VM, M2_03VM, M3_03VM, M4_03VM, M5_03VM, M6_03VM, M7_03VM, M8_03VM, M9_03VM, M10_03VM, M11_03VM, M12_03VM, M13_03VM, M14_03VM, M15_03VM, M16_03VM, M17_03VM, M18_03VM, M19_03VM },
	    "MALL_04VM" => { M0_04VM, M1_04VM, M2_04VM, M3_04VM, M4_04VM, M5_04VM, M6_04VM, M7_04VM, M8_04VM, M9_04VM, M10_04VM, M11_04VM, M12_04VM, M13_04VM, M14_04VM, M15_04VM, M16_04VM, M17_04VM, M18_04VM, M19_04VM },
	    "MALL_05VM" => { M0_05VM, M1_05VM, M2_05VM, M3_05VM, M4_05VM, M5_05VM, M6_05VM, M7_05VM, M8_05VM, M9_05VM, M10_05VM, M11_05VM, M12_05VM, M13_05VM, M14_05VM, M15_05VM, M16_05VM, M17_05VM, M18_05VM, M19_05VM },
	    "MALL_06VM" => { M0_06VM, M1_06VM, M2_06VM, M3_06VM, M4_06VM, M5_06VM, M6_06VM, M7_06VM, M8_06VM, M9_06VM, M10_06VM, M11_06VM, M12_06VM, M13_06VM, M14_06VM, M15_06VM, M16_06VM, M17_06VM, M18_06VM, M19_06VM },
	    "MALL_07VM" => { M0_07VM, M1_07VM, M2_07VM, M3_07VM, M4_07VM, M5_07VM, M6_07VM, M7_07VM, M8_07VM, M9_07VM, M10_07VM, M11_07VM, M12_07VM, M13_07VM, M14_07VM, M15_07VM, M16_07VM, M17_07VM, M18_07VM, M19_07VM },
	    "MALL_08VM" => { M0_08VM, M1_08VM, M2_08VM, M3_08VM, M4_08VM, M5_08VM, M6_08VM, M7_08VM, M8_08VM, M9_08VM, M10_08VM, M11_08VM, M12_08VM, M13_08VM, M14_08VM, M15_08VM, M16_08VM, M17_08VM, M18_08VM, M19_08VM },
	    "MALL_09VM" => { M0_09VM, M1_09VM, M2_09VM, M3_09VM, M4_09VM, M5_09VM, M6_09VM, M7_09VM, M8_09VM, M9_09VM, M10_09VM, M11_09VM, M12_09VM, M13_09VM, M14_09VM, M15_09VM, M16_09VM, M17_09VM, M18_09VM, M19_09VM },
	    "MALL_10VM" => { M0_10VM, M1_10VM, M2_10VM, M3_10VM, M4_10VM, M5_10VM, M6_10VM, M7_10VM, M8_10VM, M9_10VM, M10_10VM, M11_10VM, M12_10VM, M13_10VM, M14_10VM, M15_10VM, M16_10VM, M17_10VM, M18_10VM, M19_10VM },
	    "MALL_11VM" => { M0_11VM, M1_11VM, M2_11VM, M3_11VM, M4_11VM, M5_11VM, M6_11VM, M7_11VM, M8_11VM, M9_11VM, M10_11VM, M11_11VM, M12_11VM, M13_11VM, M14_11VM, M15_11VM, M16_11VM, M17_11VM, M18_11VM, M19_11VM },
	    "MALL_12VM" => { M0_12VM, M1_12VM, M2_12VM, M3_12VM, M4_12VM, M5_12VM, M6_12VM, M7_12VM, M8_12VM, M9_12VM, M10_12VM, M11_12VM, M12_12VM, M13_12VM, M14_12VM, M15_12VM, M16_12VM, M17_12VM, M18_12VM, M19_12VM },
	    "MALL_13VM" => { M0_13VM, M1_13VM, M2_13VM, M3_13VM, M4_13VM, M5_13VM, M6_13VM, M7_13VM, M8_13VM, M9_13VM, M10_13VM, M11_13VM, M12_13VM, M13_13VM, M14_13VM, M15_13VM, M16_13VM, M17_13VM, M18_13VM, M19_13VM },
	    "MALL_14VM" => { M0_14VM, M1_14VM, M2_14VM, M3_14VM, M4_14VM, M5_14VM, M6_14VM, M7_14VM, M8_14VM, M9_14VM, M10_14VM, M11_14VM, M12_14VM, M13_14VM, M14_14VM, M15_14VM, M16_14VM, M17_14VM, M18_14VM, M19_14VM },
	    "MALL_15VM" => { M0_15VM, M1_15VM, M2_15VM, M3_15VM, M4_15VM, M5_15VM, M6_15VM, M7_15VM, M8_15VM, M9_15VM, M10_15VM, M11_15VM, M12_15VM, M13_15VM, M14_15VM, M15_15VM, M16_15VM, M17_15VM, M18_15VM, M19_15VM },
	    "MALL_16VM" => { M0_16VM, M1_16VM, M2_16VM, M3_16VM, M4_16VM, M5_16VM, M6_16VM, M7_16VM, M8_16VM, M9_16VM, M10_16VM, M11_16VM, M12_16VM, M13_16VM, M14_16VM, M15_16VM, M16_16VM, M17_16VM, M18_16VM, M19_16VM },
	    "MALL_17VM" => { M0_17VM, M1_17VM, M2_17VM, M3_17VM, M4_17VM, M5_17VM, M6_17VM, M7_17VM, M8_17VM, M9_17VM, M10_17VM, M11_17VM, M12_17VM, M13_17VM, M14_17VM, M15_17VM, M16_17VM, M17_17VM, M18_17VM, M19_17VM },
	    "MALL_18VM" => { M0_18VM, M1_18VM, M2_18VM, M3_18VM, M4_18VM, M5_18VM, M6_18VM, M7_18VM, M8_18VM, M9_18VM, M10_18VM, M11_18VM, M12_18VM, M13_18VM, M14_18VM, M15_18VM, M16_18VM, M17_18VM, M18_18VM, M19_18VM },
	    "MALL_25VM" => { M0_25VM, M1_25VM, M2_25VM, M3_25VM, M4_25VM, M5_25VM, M6_25VM, M7_25VM, M8_25VM, M9_25VM, M10_25VM, M11_25VM, M12_25VM, M13_25VM, M14_25VM, M15_25VM, M16_25VM, M17_25VM, M18_25VM, M19_25VM },
	    "MALL_33VM" => { M0_33VM, M1_33VM, M2_33VM, M3_33VM, M4_33VM, M5_33VM, M6_33VM, M7_33VM, M8_33VM, M9_33VM, M10_33VM, M11_33VM, M12_33VM, M13_33VM, M14_33VM, M15_33VM, M16_33VM, M17_33VM, M18_33VM, M19_33VM },
	    "MALL_50VM" => { M0_50VM, M1_50VM, M2_50VM, M3_50VM, M4_50VM, M5_50VM, M6_50VM, M7_50VM, M8_50VM, M9_50VM, M10_50VM, M11_50VM, M12_50VM, M13_50VM, M14_50VM, M15_50VM, M16_50VM, M17_50VM, M18_50VM, M19_50VM },
	    "MALL_70VM" => { M0_70VM, M1_70VM, M2_70VM, M3_70VM, M4_70VM, M5_70VM, M6_70VM, M7_70VM, M8_70VM, M9_70VM, M10_70VM, M11_70VM, M12_70VM, M13_70VM, M14_70VM, M15_70VM, M16_70VM, M17_70VM, M18_70VM, M19_70VM },
	}
);



OD_v = annotate_by_property(
    connect_sequence = CONNECT_DB_DV,
    layer1 = ODC,
    property_names = { "high", "low" } 
);

NWEL_v = annotate_by_property(
    connect_sequence = CONNECT_DB_DV,
    layer1 = NWI,
    property_names = { "high", "low", "sync" } 
);

PWEL_v = annotate_by_property(
    connect_sequence = CONNECT_DB_DV,
    layer1 = PWI,
    property_names = { "high", "low", "sync" } 
);















BLOCK = copy( gEMPTY, ancestry = true ); 










M0_NOT_CM0_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M0_NOT_CM0I,
    property_names = { "high", "low" } );


M1_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M1I,
    property_names = { "high", "low" } );

M2_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M2I,
    property_names = { "high", "low" } );

M3_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M3I,
    property_names = { "high", "low" } );

M4_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M4I,
    property_names = { "high", "low" } );

M5_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M5I,
    property_names = { "high", "low" } );

M6_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M6I,
    property_names = { "high", "low" } );

M7_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M7I,
    property_names = { "high", "low" } );

M8_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M8I,
    property_names = { "high", "low" } );

M9_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M9I,
    property_names = { "high", "low" } );

M10_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M10I,
    property_names = { "high", "low" } );

M11_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M11I,
    property_names = { "high", "low" } );

M12_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M12I,
    property_names = { "high", "low" } );

M13_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M13I,
    property_names = { "high", "low" } );

M14_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M14I,
    property_names = { "high", "low" } );

M15_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M15I,
    property_names = { "high", "low" } );

M16_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M16I,
    property_names = { "high", "low" } );

M17_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M17I,
    property_names = { "high", "low" } );

M18_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M18I,
    property_names = { "high", "low" } );

M19_v = annotate_by_property (
    connect_sequence = CONNECT_DB_DV,
    layer1 = M19I,
    property_names = { "high", "low" } );


CM0 = CM0A_MAIN or CM0B_MAIN;
DCM0 = DCM0A or DCM0B;




  M0V096_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 0.96 ); 
  M0V096_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V096_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V096_LN_P, M0_NOT_CM0I }}} );
  M0V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V096_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V096_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_096V = M0V096_HP or M0V096_LN;


  M0V132_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 1.32 ); 
  M0V132_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V132_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V132_LN_P, M0_NOT_CM0I }}} );
  M0V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V132_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V132_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_132V = M0V132_HP or M0V132_LN;


  M0V165_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 1.65 ); 
  M0V165_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V165_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V165_LN_P, M0_NOT_CM0I }}} );
  M0V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V165_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V165_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_165V = M0V165_HP or M0V165_LN;


  M0V180_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 1.8 ); 
  M0V180_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V180_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V180_LN_P, M0_NOT_CM0I }}} );
  M0V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V180_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V180_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_180V = M0V180_HP or M0V180_LN;


  M0V198_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 1.98 ); 
  M0V198_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V198_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V198_LN_P, M0_NOT_CM0I }}} );
  M0V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V198_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V198_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_198V = M0V198_HP or M0V198_LN;


  M0V25_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 2.5 ); 
  M0V25_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V25_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V25_LN_P, M0_NOT_CM0I }}} );
  M0V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V25_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V25_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_25V = M0V25_HP or M0V25_LN;


  M0V275_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 2.75 ); 
  M0V275_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V275_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V275_LN_P, M0_NOT_CM0I }}} );
  M0V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V275_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V275_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_275V = M0V275_HP or M0V275_LN;


  M0V33_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 3.3 ); 
  M0V33_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V33_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V33_LN_P, M0_NOT_CM0I }}} );
  M0V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V33_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V33_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_33V = M0V33_HP or M0V33_LN;


  M0V363_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 3.63 ); 
  M0V363_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V363_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V363_LN_P, M0_NOT_CM0I }}} );
  M0V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V363_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V363_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_363V = M0V363_HP or M0V363_LN;


  M0V5_HP_P = select_by_double_property( M0_NOT_CM0_v, "high", > 4.9 ); 
  M0V5_LN_P = select_by_double_property( M0_NOT_CM0_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V5_HP_P, M0_NOT_CM0I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M0V5_LN_P, M0_NOT_CM0I }}} );
  M0V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M0V5_HP_P }, output_from_layers = { M0_NOT_CM0I } );
  M0V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M0V5_LN_P }, output_from_layers = { M0_NOT_CM0I } );
  M0_HVN_5V = M0V5_HP or M0V5_LN;



  M1V096_HP_P = select_by_double_property( M1_v, "high", > 0.96 ); 
  M1V096_LN_P = select_by_double_property( M1_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V096_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V096_LN_P, M1I }}} );
  M1V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V096_HP_P }, output_from_layers = { M1I } );
  M1V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V096_LN_P }, output_from_layers = { M1I } );
  M1_HVN_096V = M1V096_HP or M1V096_LN;


  M1V132_HP_P = select_by_double_property( M1_v, "high", > 1.32 ); 
  M1V132_LN_P = select_by_double_property( M1_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V132_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V132_LN_P, M1I }}} );
  M1V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V132_HP_P }, output_from_layers = { M1I } );
  M1V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V132_LN_P }, output_from_layers = { M1I } );
  M1_HVN_132V = M1V132_HP or M1V132_LN;


  M1V165_HP_P = select_by_double_property( M1_v, "high", > 1.65 ); 
  M1V165_LN_P = select_by_double_property( M1_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V165_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V165_LN_P, M1I }}} );
  M1V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V165_HP_P }, output_from_layers = { M1I } );
  M1V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V165_LN_P }, output_from_layers = { M1I } );
  M1_HVN_165V = M1V165_HP or M1V165_LN;


  M1V180_HP_P = select_by_double_property( M1_v, "high", > 1.8 ); 
  M1V180_LN_P = select_by_double_property( M1_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V180_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V180_LN_P, M1I }}} );
  M1V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V180_HP_P }, output_from_layers = { M1I } );
  M1V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V180_LN_P }, output_from_layers = { M1I } );
  M1_HVN_180V = M1V180_HP or M1V180_LN;


  M1V198_HP_P = select_by_double_property( M1_v, "high", > 1.98 ); 
  M1V198_LN_P = select_by_double_property( M1_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V198_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V198_LN_P, M1I }}} );
  M1V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V198_HP_P }, output_from_layers = { M1I } );
  M1V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V198_LN_P }, output_from_layers = { M1I } );
  M1_HVN_198V = M1V198_HP or M1V198_LN;


  M1V25_HP_P = select_by_double_property( M1_v, "high", > 2.5 ); 
  M1V25_LN_P = select_by_double_property( M1_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V25_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V25_LN_P, M1I }}} );
  M1V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V25_HP_P }, output_from_layers = { M1I } );
  M1V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V25_LN_P }, output_from_layers = { M1I } );
  M1_HVN_25V = M1V25_HP or M1V25_LN;


  M1V275_HP_P = select_by_double_property( M1_v, "high", > 2.75 ); 
  M1V275_LN_P = select_by_double_property( M1_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V275_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V275_LN_P, M1I }}} );
  M1V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V275_HP_P }, output_from_layers = { M1I } );
  M1V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V275_LN_P }, output_from_layers = { M1I } );
  M1_HVN_275V = M1V275_HP or M1V275_LN;


  M1V33_HP_P = select_by_double_property( M1_v, "high", > 3.3 ); 
  M1V33_LN_P = select_by_double_property( M1_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V33_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V33_LN_P, M1I }}} );
  M1V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V33_HP_P }, output_from_layers = { M1I } );
  M1V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V33_LN_P }, output_from_layers = { M1I } );
  M1_HVN_33V = M1V33_HP or M1V33_LN;


  M1V363_HP_P = select_by_double_property( M1_v, "high", > 3.63 ); 
  M1V363_LN_P = select_by_double_property( M1_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V363_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V363_LN_P, M1I }}} );
  M1V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V363_HP_P }, output_from_layers = { M1I } );
  M1V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V363_LN_P }, output_from_layers = { M1I } );
  M1_HVN_363V = M1V363_HP or M1V363_LN;


  M1V5_HP_P = select_by_double_property( M1_v, "high", > 4.9 ); 
  M1V5_LN_P = select_by_double_property( M1_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V5_HP_P, M1I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M1V5_LN_P, M1I }}} );
  M1V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M1V5_HP_P }, output_from_layers = { M1I } );
  M1V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M1V5_LN_P }, output_from_layers = { M1I } );
  M1_HVN_5V = M1V5_HP or M1V5_LN;


  M2V096_HP_P = select_by_double_property( M2_v, "high", > 0.96 ); 
  M2V096_LN_P = select_by_double_property( M2_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V096_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V096_LN_P, M2I }}} );
  M2V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V096_HP_P }, output_from_layers = { M2I } );
  M2V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V096_LN_P }, output_from_layers = { M2I } );
  M2_HVN_096V = M2V096_HP or M2V096_LN;


  M2V132_HP_P = select_by_double_property( M2_v, "high", > 1.32 ); 
  M2V132_LN_P = select_by_double_property( M2_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V132_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V132_LN_P, M2I }}} );
  M2V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V132_HP_P }, output_from_layers = { M2I } );
  M2V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V132_LN_P }, output_from_layers = { M2I } );
  M2_HVN_132V = M2V132_HP or M2V132_LN;


  M2V165_HP_P = select_by_double_property( M2_v, "high", > 1.65 ); 
  M2V165_LN_P = select_by_double_property( M2_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V165_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V165_LN_P, M2I }}} );
  M2V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V165_HP_P }, output_from_layers = { M2I } );
  M2V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V165_LN_P }, output_from_layers = { M2I } );
  M2_HVN_165V = M2V165_HP or M2V165_LN;


  M2V180_HP_P = select_by_double_property( M2_v, "high", > 1.8 ); 
  M2V180_LN_P = select_by_double_property( M2_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V180_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V180_LN_P, M2I }}} );
  M2V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V180_HP_P }, output_from_layers = { M2I } );
  M2V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V180_LN_P }, output_from_layers = { M2I } );
  M2_HVN_180V = M2V180_HP or M2V180_LN;


  M2V198_HP_P = select_by_double_property( M2_v, "high", > 1.98 ); 
  M2V198_LN_P = select_by_double_property( M2_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V198_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V198_LN_P, M2I }}} );
  M2V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V198_HP_P }, output_from_layers = { M2I } );
  M2V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V198_LN_P }, output_from_layers = { M2I } );
  M2_HVN_198V = M2V198_HP or M2V198_LN;


  M2V25_HP_P = select_by_double_property( M2_v, "high", > 2.5 ); 
  M2V25_LN_P = select_by_double_property( M2_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V25_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V25_LN_P, M2I }}} );
  M2V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V25_HP_P }, output_from_layers = { M2I } );
  M2V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V25_LN_P }, output_from_layers = { M2I } );
  M2_HVN_25V = M2V25_HP or M2V25_LN;


  M2V275_HP_P = select_by_double_property( M2_v, "high", > 2.75 ); 
  M2V275_LN_P = select_by_double_property( M2_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V275_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V275_LN_P, M2I }}} );
  M2V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V275_HP_P }, output_from_layers = { M2I } );
  M2V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V275_LN_P }, output_from_layers = { M2I } );
  M2_HVN_275V = M2V275_HP or M2V275_LN;


  M2V33_HP_P = select_by_double_property( M2_v, "high", > 3.3 ); 
  M2V33_LN_P = select_by_double_property( M2_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V33_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V33_LN_P, M2I }}} );
  M2V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V33_HP_P }, output_from_layers = { M2I } );
  M2V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V33_LN_P }, output_from_layers = { M2I } );
  M2_HVN_33V = M2V33_HP or M2V33_LN;


  M2V363_HP_P = select_by_double_property( M2_v, "high", > 3.63 ); 
  M2V363_LN_P = select_by_double_property( M2_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V363_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V363_LN_P, M2I }}} );
  M2V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V363_HP_P }, output_from_layers = { M2I } );
  M2V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V363_LN_P }, output_from_layers = { M2I } );
  M2_HVN_363V = M2V363_HP or M2V363_LN;


  M2V5_HP_P = select_by_double_property( M2_v, "high", > 4.9 ); 
  M2V5_LN_P = select_by_double_property( M2_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V5_HP_P, M2I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M2V5_LN_P, M2I }}} );
  M2V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M2V5_HP_P }, output_from_layers = { M2I } );
  M2V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M2V5_LN_P }, output_from_layers = { M2I } );
  M2_HVN_5V = M2V5_HP or M2V5_LN;


  M3V096_HP_P = select_by_double_property( M3_v, "high", > 0.96 ); 
  M3V096_LN_P = select_by_double_property( M3_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V096_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V096_LN_P, M3I }}} );
  M3V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V096_HP_P }, output_from_layers = { M3I } );
  M3V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V096_LN_P }, output_from_layers = { M3I } );
  M3_HVN_096V = M3V096_HP or M3V096_LN;


  M3V132_HP_P = select_by_double_property( M3_v, "high", > 1.32 ); 
  M3V132_LN_P = select_by_double_property( M3_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V132_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V132_LN_P, M3I }}} );
  M3V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V132_HP_P }, output_from_layers = { M3I } );
  M3V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V132_LN_P }, output_from_layers = { M3I } );
  M3_HVN_132V = M3V132_HP or M3V132_LN;


  M3V165_HP_P = select_by_double_property( M3_v, "high", > 1.65 ); 
  M3V165_LN_P = select_by_double_property( M3_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V165_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V165_LN_P, M3I }}} );
  M3V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V165_HP_P }, output_from_layers = { M3I } );
  M3V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V165_LN_P }, output_from_layers = { M3I } );
  M3_HVN_165V = M3V165_HP or M3V165_LN;


  M3V180_HP_P = select_by_double_property( M3_v, "high", > 1.8 ); 
  M3V180_LN_P = select_by_double_property( M3_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V180_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V180_LN_P, M3I }}} );
  M3V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V180_HP_P }, output_from_layers = { M3I } );
  M3V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V180_LN_P }, output_from_layers = { M3I } );
  M3_HVN_180V = M3V180_HP or M3V180_LN;


  M3V198_HP_P = select_by_double_property( M3_v, "high", > 1.98 ); 
  M3V198_LN_P = select_by_double_property( M3_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V198_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V198_LN_P, M3I }}} );
  M3V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V198_HP_P }, output_from_layers = { M3I } );
  M3V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V198_LN_P }, output_from_layers = { M3I } );
  M3_HVN_198V = M3V198_HP or M3V198_LN;


  M3V25_HP_P = select_by_double_property( M3_v, "high", > 2.5 ); 
  M3V25_LN_P = select_by_double_property( M3_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V25_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V25_LN_P, M3I }}} );
  M3V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V25_HP_P }, output_from_layers = { M3I } );
  M3V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V25_LN_P }, output_from_layers = { M3I } );
  M3_HVN_25V = M3V25_HP or M3V25_LN;


  M3V275_HP_P = select_by_double_property( M3_v, "high", > 2.75 ); 
  M3V275_LN_P = select_by_double_property( M3_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V275_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V275_LN_P, M3I }}} );
  M3V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V275_HP_P }, output_from_layers = { M3I } );
  M3V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V275_LN_P }, output_from_layers = { M3I } );
  M3_HVN_275V = M3V275_HP or M3V275_LN;


  M3V33_HP_P = select_by_double_property( M3_v, "high", > 3.3 ); 
  M3V33_LN_P = select_by_double_property( M3_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V33_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V33_LN_P, M3I }}} );
  M3V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V33_HP_P }, output_from_layers = { M3I } );
  M3V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V33_LN_P }, output_from_layers = { M3I } );
  M3_HVN_33V = M3V33_HP or M3V33_LN;


  M3V363_HP_P = select_by_double_property( M3_v, "high", > 3.63 ); 
  M3V363_LN_P = select_by_double_property( M3_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V363_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V363_LN_P, M3I }}} );
  M3V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V363_HP_P }, output_from_layers = { M3I } );
  M3V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V363_LN_P }, output_from_layers = { M3I } );
  M3_HVN_363V = M3V363_HP or M3V363_LN;


  M3V5_HP_P = select_by_double_property( M3_v, "high", > 4.9 ); 
  M3V5_LN_P = select_by_double_property( M3_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V5_HP_P, M3I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M3V5_LN_P, M3I }}} );
  M3V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M3V5_HP_P }, output_from_layers = { M3I } );
  M3V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M3V5_LN_P }, output_from_layers = { M3I } );
  M3_HVN_5V = M3V5_HP or M3V5_LN;


  M4V096_HP_P = select_by_double_property( M4_v, "high", > 0.96 ); 
  M4V096_LN_P = select_by_double_property( M4_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V096_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V096_LN_P, M4I }}} );
  M4V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V096_HP_P }, output_from_layers = { M4I } );
  M4V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V096_LN_P }, output_from_layers = { M4I } );
  M4_HVN_096V = M4V096_HP or M4V096_LN;


  M4V132_HP_P = select_by_double_property( M4_v, "high", > 1.32 ); 
  M4V132_LN_P = select_by_double_property( M4_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V132_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V132_LN_P, M4I }}} );
  M4V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V132_HP_P }, output_from_layers = { M4I } );
  M4V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V132_LN_P }, output_from_layers = { M4I } );
  M4_HVN_132V = M4V132_HP or M4V132_LN;


  M4V165_HP_P = select_by_double_property( M4_v, "high", > 1.65 ); 
  M4V165_LN_P = select_by_double_property( M4_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V165_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V165_LN_P, M4I }}} );
  M4V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V165_HP_P }, output_from_layers = { M4I } );
  M4V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V165_LN_P }, output_from_layers = { M4I } );
  M4_HVN_165V = M4V165_HP or M4V165_LN;


  M4V180_HP_P = select_by_double_property( M4_v, "high", > 1.8 ); 
  M4V180_LN_P = select_by_double_property( M4_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V180_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V180_LN_P, M4I }}} );
  M4V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V180_HP_P }, output_from_layers = { M4I } );
  M4V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V180_LN_P }, output_from_layers = { M4I } );
  M4_HVN_180V = M4V180_HP or M4V180_LN;


  M4V198_HP_P = select_by_double_property( M4_v, "high", > 1.98 ); 
  M4V198_LN_P = select_by_double_property( M4_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V198_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V198_LN_P, M4I }}} );
  M4V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V198_HP_P }, output_from_layers = { M4I } );
  M4V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V198_LN_P }, output_from_layers = { M4I } );
  M4_HVN_198V = M4V198_HP or M4V198_LN;


  M4V25_HP_P = select_by_double_property( M4_v, "high", > 2.5 ); 
  M4V25_LN_P = select_by_double_property( M4_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V25_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V25_LN_P, M4I }}} );
  M4V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V25_HP_P }, output_from_layers = { M4I } );
  M4V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V25_LN_P }, output_from_layers = { M4I } );
  M4_HVN_25V = M4V25_HP or M4V25_LN;


  M4V275_HP_P = select_by_double_property( M4_v, "high", > 2.75 ); 
  M4V275_LN_P = select_by_double_property( M4_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V275_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V275_LN_P, M4I }}} );
  M4V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V275_HP_P }, output_from_layers = { M4I } );
  M4V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V275_LN_P }, output_from_layers = { M4I } );
  M4_HVN_275V = M4V275_HP or M4V275_LN;


  M4V33_HP_P = select_by_double_property( M4_v, "high", > 3.3 ); 
  M4V33_LN_P = select_by_double_property( M4_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V33_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V33_LN_P, M4I }}} );
  M4V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V33_HP_P }, output_from_layers = { M4I } );
  M4V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V33_LN_P }, output_from_layers = { M4I } );
  M4_HVN_33V = M4V33_HP or M4V33_LN;


  M4V363_HP_P = select_by_double_property( M4_v, "high", > 3.63 ); 
  M4V363_LN_P = select_by_double_property( M4_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V363_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V363_LN_P, M4I }}} );
  M4V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V363_HP_P }, output_from_layers = { M4I } );
  M4V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V363_LN_P }, output_from_layers = { M4I } );
  M4_HVN_363V = M4V363_HP or M4V363_LN;


  M4V5_HP_P = select_by_double_property( M4_v, "high", > 4.9 ); 
  M4V5_LN_P = select_by_double_property( M4_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V5_HP_P, M4I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M4V5_LN_P, M4I }}} );
  M4V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M4V5_HP_P }, output_from_layers = { M4I } );
  M4V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M4V5_LN_P }, output_from_layers = { M4I } );
  M4_HVN_5V = M4V5_HP or M4V5_LN;


  M5V096_HP_P = select_by_double_property( M5_v, "high", > 0.96 ); 
  M5V096_LN_P = select_by_double_property( M5_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V096_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V096_LN_P, M5I }}} );
  M5V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V096_HP_P }, output_from_layers = { M5I } );
  M5V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V096_LN_P }, output_from_layers = { M5I } );
  M5_HVN_096V = M5V096_HP or M5V096_LN;


  M5V132_HP_P = select_by_double_property( M5_v, "high", > 1.32 ); 
  M5V132_LN_P = select_by_double_property( M5_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V132_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V132_LN_P, M5I }}} );
  M5V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V132_HP_P }, output_from_layers = { M5I } );
  M5V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V132_LN_P }, output_from_layers = { M5I } );
  M5_HVN_132V = M5V132_HP or M5V132_LN;


  M5V165_HP_P = select_by_double_property( M5_v, "high", > 1.65 ); 
  M5V165_LN_P = select_by_double_property( M5_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V165_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V165_LN_P, M5I }}} );
  M5V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V165_HP_P }, output_from_layers = { M5I } );
  M5V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V165_LN_P }, output_from_layers = { M5I } );
  M5_HVN_165V = M5V165_HP or M5V165_LN;


  M5V180_HP_P = select_by_double_property( M5_v, "high", > 1.8 ); 
  M5V180_LN_P = select_by_double_property( M5_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V180_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V180_LN_P, M5I }}} );
  M5V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V180_HP_P }, output_from_layers = { M5I } );
  M5V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V180_LN_P }, output_from_layers = { M5I } );
  M5_HVN_180V = M5V180_HP or M5V180_LN;


  M5V198_HP_P = select_by_double_property( M5_v, "high", > 1.98 ); 
  M5V198_LN_P = select_by_double_property( M5_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V198_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V198_LN_P, M5I }}} );
  M5V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V198_HP_P }, output_from_layers = { M5I } );
  M5V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V198_LN_P }, output_from_layers = { M5I } );
  M5_HVN_198V = M5V198_HP or M5V198_LN;


  M5V25_HP_P = select_by_double_property( M5_v, "high", > 2.5 ); 
  M5V25_LN_P = select_by_double_property( M5_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V25_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V25_LN_P, M5I }}} );
  M5V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V25_HP_P }, output_from_layers = { M5I } );
  M5V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V25_LN_P }, output_from_layers = { M5I } );
  M5_HVN_25V = M5V25_HP or M5V25_LN;


  M5V275_HP_P = select_by_double_property( M5_v, "high", > 2.75 ); 
  M5V275_LN_P = select_by_double_property( M5_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V275_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V275_LN_P, M5I }}} );
  M5V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V275_HP_P }, output_from_layers = { M5I } );
  M5V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V275_LN_P }, output_from_layers = { M5I } );
  M5_HVN_275V = M5V275_HP or M5V275_LN;


  M5V33_HP_P = select_by_double_property( M5_v, "high", > 3.3 ); 
  M5V33_LN_P = select_by_double_property( M5_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V33_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V33_LN_P, M5I }}} );
  M5V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V33_HP_P }, output_from_layers = { M5I } );
  M5V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V33_LN_P }, output_from_layers = { M5I } );
  M5_HVN_33V = M5V33_HP or M5V33_LN;


  M5V363_HP_P = select_by_double_property( M5_v, "high", > 3.63 ); 
  M5V363_LN_P = select_by_double_property( M5_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V363_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V363_LN_P, M5I }}} );
  M5V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V363_HP_P }, output_from_layers = { M5I } );
  M5V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V363_LN_P }, output_from_layers = { M5I } );
  M5_HVN_363V = M5V363_HP or M5V363_LN;


  M5V5_HP_P = select_by_double_property( M5_v, "high", > 4.9 ); 
  M5V5_LN_P = select_by_double_property( M5_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V5_HP_P, M5I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M5V5_LN_P, M5I }}} );
  M5V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M5V5_HP_P }, output_from_layers = { M5I } );
  M5V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M5V5_LN_P }, output_from_layers = { M5I } );
  M5_HVN_5V = M5V5_HP or M5V5_LN;


  M6V096_HP_P = select_by_double_property( M6_v, "high", > 0.96 ); 
  M6V096_LN_P = select_by_double_property( M6_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V096_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V096_LN_P, M6I }}} );
  M6V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V096_HP_P }, output_from_layers = { M6I } );
  M6V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V096_LN_P }, output_from_layers = { M6I } );
  M6_HVN_096V = M6V096_HP or M6V096_LN;


  M6V132_HP_P = select_by_double_property( M6_v, "high", > 1.32 ); 
  M6V132_LN_P = select_by_double_property( M6_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V132_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V132_LN_P, M6I }}} );
  M6V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V132_HP_P }, output_from_layers = { M6I } );
  M6V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V132_LN_P }, output_from_layers = { M6I } );
  M6_HVN_132V = M6V132_HP or M6V132_LN;


  M6V165_HP_P = select_by_double_property( M6_v, "high", > 1.65 ); 
  M6V165_LN_P = select_by_double_property( M6_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V165_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V165_LN_P, M6I }}} );
  M6V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V165_HP_P }, output_from_layers = { M6I } );
  M6V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V165_LN_P }, output_from_layers = { M6I } );
  M6_HVN_165V = M6V165_HP or M6V165_LN;


  M6V180_HP_P = select_by_double_property( M6_v, "high", > 1.8 ); 
  M6V180_LN_P = select_by_double_property( M6_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V180_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V180_LN_P, M6I }}} );
  M6V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V180_HP_P }, output_from_layers = { M6I } );
  M6V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V180_LN_P }, output_from_layers = { M6I } );
  M6_HVN_180V = M6V180_HP or M6V180_LN;


  M6V198_HP_P = select_by_double_property( M6_v, "high", > 1.98 ); 
  M6V198_LN_P = select_by_double_property( M6_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V198_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V198_LN_P, M6I }}} );
  M6V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V198_HP_P }, output_from_layers = { M6I } );
  M6V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V198_LN_P }, output_from_layers = { M6I } );
  M6_HVN_198V = M6V198_HP or M6V198_LN;


  M6V25_HP_P = select_by_double_property( M6_v, "high", > 2.5 ); 
  M6V25_LN_P = select_by_double_property( M6_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V25_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V25_LN_P, M6I }}} );
  M6V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V25_HP_P }, output_from_layers = { M6I } );
  M6V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V25_LN_P }, output_from_layers = { M6I } );
  M6_HVN_25V = M6V25_HP or M6V25_LN;


  M6V275_HP_P = select_by_double_property( M6_v, "high", > 2.75 ); 
  M6V275_LN_P = select_by_double_property( M6_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V275_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V275_LN_P, M6I }}} );
  M6V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V275_HP_P }, output_from_layers = { M6I } );
  M6V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V275_LN_P }, output_from_layers = { M6I } );
  M6_HVN_275V = M6V275_HP or M6V275_LN;


  M6V33_HP_P = select_by_double_property( M6_v, "high", > 3.3 ); 
  M6V33_LN_P = select_by_double_property( M6_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V33_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V33_LN_P, M6I }}} );
  M6V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V33_HP_P }, output_from_layers = { M6I } );
  M6V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V33_LN_P }, output_from_layers = { M6I } );
  M6_HVN_33V = M6V33_HP or M6V33_LN;


  M6V363_HP_P = select_by_double_property( M6_v, "high", > 3.63 ); 
  M6V363_LN_P = select_by_double_property( M6_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V363_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V363_LN_P, M6I }}} );
  M6V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V363_HP_P }, output_from_layers = { M6I } );
  M6V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V363_LN_P }, output_from_layers = { M6I } );
  M6_HVN_363V = M6V363_HP or M6V363_LN;


  M6V5_HP_P = select_by_double_property( M6_v, "high", > 4.9 ); 
  M6V5_LN_P = select_by_double_property( M6_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V5_HP_P, M6I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M6V5_LN_P, M6I }}} );
  M6V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M6V5_HP_P }, output_from_layers = { M6I } );
  M6V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M6V5_LN_P }, output_from_layers = { M6I } );
  M6_HVN_5V = M6V5_HP or M6V5_LN;


  M7V096_HP_P = select_by_double_property( M7_v, "high", > 0.96 ); 
  M7V096_LN_P = select_by_double_property( M7_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V096_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V096_LN_P, M7I }}} );
  M7V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V096_HP_P }, output_from_layers = { M7I } );
  M7V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V096_LN_P }, output_from_layers = { M7I } );
  M7_HVN_096V = M7V096_HP or M7V096_LN;


  M7V132_HP_P = select_by_double_property( M7_v, "high", > 1.32 ); 
  M7V132_LN_P = select_by_double_property( M7_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V132_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V132_LN_P, M7I }}} );
  M7V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V132_HP_P }, output_from_layers = { M7I } );
  M7V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V132_LN_P }, output_from_layers = { M7I } );
  M7_HVN_132V = M7V132_HP or M7V132_LN;


  M7V165_HP_P = select_by_double_property( M7_v, "high", > 1.65 ); 
  M7V165_LN_P = select_by_double_property( M7_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V165_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V165_LN_P, M7I }}} );
  M7V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V165_HP_P }, output_from_layers = { M7I } );
  M7V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V165_LN_P }, output_from_layers = { M7I } );
  M7_HVN_165V = M7V165_HP or M7V165_LN;


  M7V180_HP_P = select_by_double_property( M7_v, "high", > 1.8 ); 
  M7V180_LN_P = select_by_double_property( M7_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V180_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V180_LN_P, M7I }}} );
  M7V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V180_HP_P }, output_from_layers = { M7I } );
  M7V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V180_LN_P }, output_from_layers = { M7I } );
  M7_HVN_180V = M7V180_HP or M7V180_LN;


  M7V198_HP_P = select_by_double_property( M7_v, "high", > 1.98 ); 
  M7V198_LN_P = select_by_double_property( M7_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V198_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V198_LN_P, M7I }}} );
  M7V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V198_HP_P }, output_from_layers = { M7I } );
  M7V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V198_LN_P }, output_from_layers = { M7I } );
  M7_HVN_198V = M7V198_HP or M7V198_LN;


  M7V25_HP_P = select_by_double_property( M7_v, "high", > 2.5 ); 
  M7V25_LN_P = select_by_double_property( M7_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V25_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V25_LN_P, M7I }}} );
  M7V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V25_HP_P }, output_from_layers = { M7I } );
  M7V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V25_LN_P }, output_from_layers = { M7I } );
  M7_HVN_25V = M7V25_HP or M7V25_LN;


  M7V275_HP_P = select_by_double_property( M7_v, "high", > 2.75 ); 
  M7V275_LN_P = select_by_double_property( M7_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V275_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V275_LN_P, M7I }}} );
  M7V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V275_HP_P }, output_from_layers = { M7I } );
  M7V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V275_LN_P }, output_from_layers = { M7I } );
  M7_HVN_275V = M7V275_HP or M7V275_LN;


  M7V33_HP_P = select_by_double_property( M7_v, "high", > 3.3 ); 
  M7V33_LN_P = select_by_double_property( M7_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V33_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V33_LN_P, M7I }}} );
  M7V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V33_HP_P }, output_from_layers = { M7I } );
  M7V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V33_LN_P }, output_from_layers = { M7I } );
  M7_HVN_33V = M7V33_HP or M7V33_LN;


  M7V363_HP_P = select_by_double_property( M7_v, "high", > 3.63 ); 
  M7V363_LN_P = select_by_double_property( M7_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V363_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V363_LN_P, M7I }}} );
  M7V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V363_HP_P }, output_from_layers = { M7I } );
  M7V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V363_LN_P }, output_from_layers = { M7I } );
  M7_HVN_363V = M7V363_HP or M7V363_LN;


  M7V5_HP_P = select_by_double_property( M7_v, "high", > 4.9 ); 
  M7V5_LN_P = select_by_double_property( M7_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V5_HP_P, M7I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M7V5_LN_P, M7I }}} );
  M7V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M7V5_HP_P }, output_from_layers = { M7I } );
  M7V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M7V5_LN_P }, output_from_layers = { M7I } );
  M7_HVN_5V = M7V5_HP or M7V5_LN;


  M8V096_HP_P = select_by_double_property( M8_v, "high", > 0.96 ); 
  M8V096_LN_P = select_by_double_property( M8_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V096_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V096_LN_P, M8I }}} );
  M8V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V096_HP_P }, output_from_layers = { M8I } );
  M8V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V096_LN_P }, output_from_layers = { M8I } );
  M8_HVN_096V = M8V096_HP or M8V096_LN;


  M8V132_HP_P = select_by_double_property( M8_v, "high", > 1.32 ); 
  M8V132_LN_P = select_by_double_property( M8_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V132_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V132_LN_P, M8I }}} );
  M8V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V132_HP_P }, output_from_layers = { M8I } );
  M8V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V132_LN_P }, output_from_layers = { M8I } );
  M8_HVN_132V = M8V132_HP or M8V132_LN;


  M8V165_HP_P = select_by_double_property( M8_v, "high", > 1.65 ); 
  M8V165_LN_P = select_by_double_property( M8_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V165_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V165_LN_P, M8I }}} );
  M8V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V165_HP_P }, output_from_layers = { M8I } );
  M8V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V165_LN_P }, output_from_layers = { M8I } );
  M8_HVN_165V = M8V165_HP or M8V165_LN;


  M8V180_HP_P = select_by_double_property( M8_v, "high", > 1.8 ); 
  M8V180_LN_P = select_by_double_property( M8_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V180_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V180_LN_P, M8I }}} );
  M8V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V180_HP_P }, output_from_layers = { M8I } );
  M8V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V180_LN_P }, output_from_layers = { M8I } );
  M8_HVN_180V = M8V180_HP or M8V180_LN;


  M8V198_HP_P = select_by_double_property( M8_v, "high", > 1.98 ); 
  M8V198_LN_P = select_by_double_property( M8_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V198_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V198_LN_P, M8I }}} );
  M8V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V198_HP_P }, output_from_layers = { M8I } );
  M8V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V198_LN_P }, output_from_layers = { M8I } );
  M8_HVN_198V = M8V198_HP or M8V198_LN;


  M8V25_HP_P = select_by_double_property( M8_v, "high", > 2.5 ); 
  M8V25_LN_P = select_by_double_property( M8_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V25_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V25_LN_P, M8I }}} );
  M8V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V25_HP_P }, output_from_layers = { M8I } );
  M8V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V25_LN_P }, output_from_layers = { M8I } );
  M8_HVN_25V = M8V25_HP or M8V25_LN;


  M8V275_HP_P = select_by_double_property( M8_v, "high", > 2.75 ); 
  M8V275_LN_P = select_by_double_property( M8_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V275_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V275_LN_P, M8I }}} );
  M8V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V275_HP_P }, output_from_layers = { M8I } );
  M8V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V275_LN_P }, output_from_layers = { M8I } );
  M8_HVN_275V = M8V275_HP or M8V275_LN;


  M8V33_HP_P = select_by_double_property( M8_v, "high", > 3.3 ); 
  M8V33_LN_P = select_by_double_property( M8_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V33_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V33_LN_P, M8I }}} );
  M8V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V33_HP_P }, output_from_layers = { M8I } );
  M8V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V33_LN_P }, output_from_layers = { M8I } );
  M8_HVN_33V = M8V33_HP or M8V33_LN;


  M8V363_HP_P = select_by_double_property( M8_v, "high", > 3.63 ); 
  M8V363_LN_P = select_by_double_property( M8_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V363_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V363_LN_P, M8I }}} );
  M8V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V363_HP_P }, output_from_layers = { M8I } );
  M8V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V363_LN_P }, output_from_layers = { M8I } );
  M8_HVN_363V = M8V363_HP or M8V363_LN;


  M8V5_HP_P = select_by_double_property( M8_v, "high", > 4.9 ); 
  M8V5_LN_P = select_by_double_property( M8_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V5_HP_P, M8I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M8V5_LN_P, M8I }}} );
  M8V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M8V5_HP_P }, output_from_layers = { M8I } );
  M8V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M8V5_LN_P }, output_from_layers = { M8I } );
  M8_HVN_5V = M8V5_HP or M8V5_LN;


  M9V096_HP_P = select_by_double_property( M9_v, "high", > 0.96 ); 
  M9V096_LN_P = select_by_double_property( M9_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V096_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V096_LN_P, M9I }}} );
  M9V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V096_HP_P }, output_from_layers = { M9I } );
  M9V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V096_LN_P }, output_from_layers = { M9I } );
  M9_HVN_096V = M9V096_HP or M9V096_LN;


  M9V132_HP_P = select_by_double_property( M9_v, "high", > 1.32 ); 
  M9V132_LN_P = select_by_double_property( M9_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V132_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V132_LN_P, M9I }}} );
  M9V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V132_HP_P }, output_from_layers = { M9I } );
  M9V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V132_LN_P }, output_from_layers = { M9I } );
  M9_HVN_132V = M9V132_HP or M9V132_LN;


  M9V165_HP_P = select_by_double_property( M9_v, "high", > 1.65 ); 
  M9V165_LN_P = select_by_double_property( M9_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V165_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V165_LN_P, M9I }}} );
  M9V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V165_HP_P }, output_from_layers = { M9I } );
  M9V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V165_LN_P }, output_from_layers = { M9I } );
  M9_HVN_165V = M9V165_HP or M9V165_LN;


  M9V180_HP_P = select_by_double_property( M9_v, "high", > 1.8 ); 
  M9V180_LN_P = select_by_double_property( M9_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V180_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V180_LN_P, M9I }}} );
  M9V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V180_HP_P }, output_from_layers = { M9I } );
  M9V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V180_LN_P }, output_from_layers = { M9I } );
  M9_HVN_180V = M9V180_HP or M9V180_LN;


  M9V198_HP_P = select_by_double_property( M9_v, "high", > 1.98 ); 
  M9V198_LN_P = select_by_double_property( M9_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V198_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V198_LN_P, M9I }}} );
  M9V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V198_HP_P }, output_from_layers = { M9I } );
  M9V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V198_LN_P }, output_from_layers = { M9I } );
  M9_HVN_198V = M9V198_HP or M9V198_LN;


  M9V25_HP_P = select_by_double_property( M9_v, "high", > 2.5 ); 
  M9V25_LN_P = select_by_double_property( M9_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V25_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V25_LN_P, M9I }}} );
  M9V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V25_HP_P }, output_from_layers = { M9I } );
  M9V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V25_LN_P }, output_from_layers = { M9I } );
  M9_HVN_25V = M9V25_HP or M9V25_LN;


  M9V275_HP_P = select_by_double_property( M9_v, "high", > 2.75 ); 
  M9V275_LN_P = select_by_double_property( M9_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V275_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V275_LN_P, M9I }}} );
  M9V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V275_HP_P }, output_from_layers = { M9I } );
  M9V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V275_LN_P }, output_from_layers = { M9I } );
  M9_HVN_275V = M9V275_HP or M9V275_LN;


  M9V33_HP_P = select_by_double_property( M9_v, "high", > 3.3 ); 
  M9V33_LN_P = select_by_double_property( M9_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V33_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V33_LN_P, M9I }}} );
  M9V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V33_HP_P }, output_from_layers = { M9I } );
  M9V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V33_LN_P }, output_from_layers = { M9I } );
  M9_HVN_33V = M9V33_HP or M9V33_LN;


  M9V363_HP_P = select_by_double_property( M9_v, "high", > 3.63 ); 
  M9V363_LN_P = select_by_double_property( M9_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V363_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V363_LN_P, M9I }}} );
  M9V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V363_HP_P }, output_from_layers = { M9I } );
  M9V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V363_LN_P }, output_from_layers = { M9I } );
  M9_HVN_363V = M9V363_HP or M9V363_LN;


  M9V5_HP_P = select_by_double_property( M9_v, "high", > 4.9 ); 
  M9V5_LN_P = select_by_double_property( M9_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V5_HP_P, M9I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M9V5_LN_P, M9I }}} );
  M9V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M9V5_HP_P }, output_from_layers = { M9I } );
  M9V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M9V5_LN_P }, output_from_layers = { M9I } );
  M9_HVN_5V = M9V5_HP or M9V5_LN;


  M10V096_HP_P = select_by_double_property( M10_v, "high", > 0.96 ); 
  M10V096_LN_P = select_by_double_property( M10_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V096_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V096_LN_P, M10I }}} );
  M10V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V096_HP_P }, output_from_layers = { M10I } );
  M10V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V096_LN_P }, output_from_layers = { M10I } );
  M10_HVN_096V = M10V096_HP or M10V096_LN;


  M10V132_HP_P = select_by_double_property( M10_v, "high", > 1.32 ); 
  M10V132_LN_P = select_by_double_property( M10_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V132_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V132_LN_P, M10I }}} );
  M10V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V132_HP_P }, output_from_layers = { M10I } );
  M10V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V132_LN_P }, output_from_layers = { M10I } );
  M10_HVN_132V = M10V132_HP or M10V132_LN;


  M10V165_HP_P = select_by_double_property( M10_v, "high", > 1.65 ); 
  M10V165_LN_P = select_by_double_property( M10_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V165_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V165_LN_P, M10I }}} );
  M10V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V165_HP_P }, output_from_layers = { M10I } );
  M10V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V165_LN_P }, output_from_layers = { M10I } );
  M10_HVN_165V = M10V165_HP or M10V165_LN;


  M10V180_HP_P = select_by_double_property( M10_v, "high", > 1.8 ); 
  M10V180_LN_P = select_by_double_property( M10_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V180_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V180_LN_P, M10I }}} );
  M10V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V180_HP_P }, output_from_layers = { M10I } );
  M10V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V180_LN_P }, output_from_layers = { M10I } );
  M10_HVN_180V = M10V180_HP or M10V180_LN;


  M10V198_HP_P = select_by_double_property( M10_v, "high", > 1.98 ); 
  M10V198_LN_P = select_by_double_property( M10_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V198_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V198_LN_P, M10I }}} );
  M10V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V198_HP_P }, output_from_layers = { M10I } );
  M10V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V198_LN_P }, output_from_layers = { M10I } );
  M10_HVN_198V = M10V198_HP or M10V198_LN;


  M10V25_HP_P = select_by_double_property( M10_v, "high", > 2.5 ); 
  M10V25_LN_P = select_by_double_property( M10_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V25_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V25_LN_P, M10I }}} );
  M10V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V25_HP_P }, output_from_layers = { M10I } );
  M10V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V25_LN_P }, output_from_layers = { M10I } );
  M10_HVN_25V = M10V25_HP or M10V25_LN;


  M10V275_HP_P = select_by_double_property( M10_v, "high", > 2.75 ); 
  M10V275_LN_P = select_by_double_property( M10_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V275_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V275_LN_P, M10I }}} );
  M10V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V275_HP_P }, output_from_layers = { M10I } );
  M10V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V275_LN_P }, output_from_layers = { M10I } );
  M10_HVN_275V = M10V275_HP or M10V275_LN;


  M10V33_HP_P = select_by_double_property( M10_v, "high", > 3.3 ); 
  M10V33_LN_P = select_by_double_property( M10_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V33_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V33_LN_P, M10I }}} );
  M10V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V33_HP_P }, output_from_layers = { M10I } );
  M10V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V33_LN_P }, output_from_layers = { M10I } );
  M10_HVN_33V = M10V33_HP or M10V33_LN;


  M10V363_HP_P = select_by_double_property( M10_v, "high", > 3.63 ); 
  M10V363_LN_P = select_by_double_property( M10_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V363_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V363_LN_P, M10I }}} );
  M10V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V363_HP_P }, output_from_layers = { M10I } );
  M10V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V363_LN_P }, output_from_layers = { M10I } );
  M10_HVN_363V = M10V363_HP or M10V363_LN;


  M10V5_HP_P = select_by_double_property( M10_v, "high", > 4.9 ); 
  M10V5_LN_P = select_by_double_property( M10_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V5_HP_P, M10I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M10V5_LN_P, M10I }}} );
  M10V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M10V5_HP_P }, output_from_layers = { M10I } );
  M10V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M10V5_LN_P }, output_from_layers = { M10I } );
  M10_HVN_5V = M10V5_HP or M10V5_LN;


  M11V096_HP_P = select_by_double_property( M11_v, "high", > 0.96 ); 
  M11V096_LN_P = select_by_double_property( M11_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V096_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V096_LN_P, M11I }}} );
  M11V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V096_HP_P }, output_from_layers = { M11I } );
  M11V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V096_LN_P }, output_from_layers = { M11I } );
  M11_HVN_096V = M11V096_HP or M11V096_LN;


  M11V132_HP_P = select_by_double_property( M11_v, "high", > 1.32 ); 
  M11V132_LN_P = select_by_double_property( M11_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V132_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V132_LN_P, M11I }}} );
  M11V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V132_HP_P }, output_from_layers = { M11I } );
  M11V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V132_LN_P }, output_from_layers = { M11I } );
  M11_HVN_132V = M11V132_HP or M11V132_LN;


  M11V165_HP_P = select_by_double_property( M11_v, "high", > 1.65 ); 
  M11V165_LN_P = select_by_double_property( M11_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V165_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V165_LN_P, M11I }}} );
  M11V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V165_HP_P }, output_from_layers = { M11I } );
  M11V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V165_LN_P }, output_from_layers = { M11I } );
  M11_HVN_165V = M11V165_HP or M11V165_LN;


  M11V180_HP_P = select_by_double_property( M11_v, "high", > 1.8 ); 
  M11V180_LN_P = select_by_double_property( M11_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V180_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V180_LN_P, M11I }}} );
  M11V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V180_HP_P }, output_from_layers = { M11I } );
  M11V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V180_LN_P }, output_from_layers = { M11I } );
  M11_HVN_180V = M11V180_HP or M11V180_LN;


  M11V198_HP_P = select_by_double_property( M11_v, "high", > 1.98 ); 
  M11V198_LN_P = select_by_double_property( M11_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V198_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V198_LN_P, M11I }}} );
  M11V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V198_HP_P }, output_from_layers = { M11I } );
  M11V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V198_LN_P }, output_from_layers = { M11I } );
  M11_HVN_198V = M11V198_HP or M11V198_LN;


  M11V25_HP_P = select_by_double_property( M11_v, "high", > 2.5 ); 
  M11V25_LN_P = select_by_double_property( M11_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V25_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V25_LN_P, M11I }}} );
  M11V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V25_HP_P }, output_from_layers = { M11I } );
  M11V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V25_LN_P }, output_from_layers = { M11I } );
  M11_HVN_25V = M11V25_HP or M11V25_LN;


  M11V275_HP_P = select_by_double_property( M11_v, "high", > 2.75 ); 
  M11V275_LN_P = select_by_double_property( M11_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V275_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V275_LN_P, M11I }}} );
  M11V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V275_HP_P }, output_from_layers = { M11I } );
  M11V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V275_LN_P }, output_from_layers = { M11I } );
  M11_HVN_275V = M11V275_HP or M11V275_LN;


  M11V33_HP_P = select_by_double_property( M11_v, "high", > 3.3 ); 
  M11V33_LN_P = select_by_double_property( M11_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V33_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V33_LN_P, M11I }}} );
  M11V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V33_HP_P }, output_from_layers = { M11I } );
  M11V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V33_LN_P }, output_from_layers = { M11I } );
  M11_HVN_33V = M11V33_HP or M11V33_LN;


  M11V363_HP_P = select_by_double_property( M11_v, "high", > 3.63 ); 
  M11V363_LN_P = select_by_double_property( M11_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V363_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V363_LN_P, M11I }}} );
  M11V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V363_HP_P }, output_from_layers = { M11I } );
  M11V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V363_LN_P }, output_from_layers = { M11I } );
  M11_HVN_363V = M11V363_HP or M11V363_LN;


  M11V5_HP_P = select_by_double_property( M11_v, "high", > 4.9 ); 
  M11V5_LN_P = select_by_double_property( M11_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V5_HP_P, M11I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M11V5_LN_P, M11I }}} );
  M11V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M11V5_HP_P }, output_from_layers = { M11I } );
  M11V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M11V5_LN_P }, output_from_layers = { M11I } );
  M11_HVN_5V = M11V5_HP or M11V5_LN;


  M12V096_HP_P = select_by_double_property( M12_v, "high", > 0.96 ); 
  M12V096_LN_P = select_by_double_property( M12_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V096_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V096_LN_P, M12I }}} );
  M12V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V096_HP_P }, output_from_layers = { M12I } );
  M12V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V096_LN_P }, output_from_layers = { M12I } );
  M12_HVN_096V = M12V096_HP or M12V096_LN;


  M12V132_HP_P = select_by_double_property( M12_v, "high", > 1.32 ); 
  M12V132_LN_P = select_by_double_property( M12_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V132_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V132_LN_P, M12I }}} );
  M12V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V132_HP_P }, output_from_layers = { M12I } );
  M12V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V132_LN_P }, output_from_layers = { M12I } );
  M12_HVN_132V = M12V132_HP or M12V132_LN;


  M12V165_HP_P = select_by_double_property( M12_v, "high", > 1.65 ); 
  M12V165_LN_P = select_by_double_property( M12_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V165_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V165_LN_P, M12I }}} );
  M12V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V165_HP_P }, output_from_layers = { M12I } );
  M12V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V165_LN_P }, output_from_layers = { M12I } );
  M12_HVN_165V = M12V165_HP or M12V165_LN;


  M12V180_HP_P = select_by_double_property( M12_v, "high", > 1.8 ); 
  M12V180_LN_P = select_by_double_property( M12_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V180_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V180_LN_P, M12I }}} );
  M12V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V180_HP_P }, output_from_layers = { M12I } );
  M12V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V180_LN_P }, output_from_layers = { M12I } );
  M12_HVN_180V = M12V180_HP or M12V180_LN;


  M12V198_HP_P = select_by_double_property( M12_v, "high", > 1.98 ); 
  M12V198_LN_P = select_by_double_property( M12_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V198_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V198_LN_P, M12I }}} );
  M12V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V198_HP_P }, output_from_layers = { M12I } );
  M12V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V198_LN_P }, output_from_layers = { M12I } );
  M12_HVN_198V = M12V198_HP or M12V198_LN;


  M12V25_HP_P = select_by_double_property( M12_v, "high", > 2.5 ); 
  M12V25_LN_P = select_by_double_property( M12_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V25_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V25_LN_P, M12I }}} );
  M12V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V25_HP_P }, output_from_layers = { M12I } );
  M12V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V25_LN_P }, output_from_layers = { M12I } );
  M12_HVN_25V = M12V25_HP or M12V25_LN;


  M12V275_HP_P = select_by_double_property( M12_v, "high", > 2.75 ); 
  M12V275_LN_P = select_by_double_property( M12_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V275_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V275_LN_P, M12I }}} );
  M12V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V275_HP_P }, output_from_layers = { M12I } );
  M12V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V275_LN_P }, output_from_layers = { M12I } );
  M12_HVN_275V = M12V275_HP or M12V275_LN;


  M12V33_HP_P = select_by_double_property( M12_v, "high", > 3.3 ); 
  M12V33_LN_P = select_by_double_property( M12_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V33_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V33_LN_P, M12I }}} );
  M12V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V33_HP_P }, output_from_layers = { M12I } );
  M12V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V33_LN_P }, output_from_layers = { M12I } );
  M12_HVN_33V = M12V33_HP or M12V33_LN;


  M12V363_HP_P = select_by_double_property( M12_v, "high", > 3.63 ); 
  M12V363_LN_P = select_by_double_property( M12_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V363_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V363_LN_P, M12I }}} );
  M12V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V363_HP_P }, output_from_layers = { M12I } );
  M12V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V363_LN_P }, output_from_layers = { M12I } );
  M12_HVN_363V = M12V363_HP or M12V363_LN;


  M12V5_HP_P = select_by_double_property( M12_v, "high", > 4.9 ); 
  M12V5_LN_P = select_by_double_property( M12_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V5_HP_P, M12I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M12V5_LN_P, M12I }}} );
  M12V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M12V5_HP_P }, output_from_layers = { M12I } );
  M12V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M12V5_LN_P }, output_from_layers = { M12I } );
  M12_HVN_5V = M12V5_HP or M12V5_LN;


  M13V096_HP_P = select_by_double_property( M13_v, "high", > 0.96 ); 
  M13V096_LN_P = select_by_double_property( M13_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V096_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V096_LN_P, M13I }}} );
  M13V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V096_HP_P }, output_from_layers = { M13I } );
  M13V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V096_LN_P }, output_from_layers = { M13I } );
  M13_HVN_096V = M13V096_HP or M13V096_LN;


  M13V132_HP_P = select_by_double_property( M13_v, "high", > 1.32 ); 
  M13V132_LN_P = select_by_double_property( M13_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V132_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V132_LN_P, M13I }}} );
  M13V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V132_HP_P }, output_from_layers = { M13I } );
  M13V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V132_LN_P }, output_from_layers = { M13I } );
  M13_HVN_132V = M13V132_HP or M13V132_LN;


  M13V165_HP_P = select_by_double_property( M13_v, "high", > 1.65 ); 
  M13V165_LN_P = select_by_double_property( M13_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V165_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V165_LN_P, M13I }}} );
  M13V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V165_HP_P }, output_from_layers = { M13I } );
  M13V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V165_LN_P }, output_from_layers = { M13I } );
  M13_HVN_165V = M13V165_HP or M13V165_LN;


  M13V180_HP_P = select_by_double_property( M13_v, "high", > 1.8 ); 
  M13V180_LN_P = select_by_double_property( M13_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V180_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V180_LN_P, M13I }}} );
  M13V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V180_HP_P }, output_from_layers = { M13I } );
  M13V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V180_LN_P }, output_from_layers = { M13I } );
  M13_HVN_180V = M13V180_HP or M13V180_LN;


  M13V198_HP_P = select_by_double_property( M13_v, "high", > 1.98 ); 
  M13V198_LN_P = select_by_double_property( M13_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V198_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V198_LN_P, M13I }}} );
  M13V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V198_HP_P }, output_from_layers = { M13I } );
  M13V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V198_LN_P }, output_from_layers = { M13I } );
  M13_HVN_198V = M13V198_HP or M13V198_LN;


  M13V25_HP_P = select_by_double_property( M13_v, "high", > 2.5 ); 
  M13V25_LN_P = select_by_double_property( M13_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V25_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V25_LN_P, M13I }}} );
  M13V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V25_HP_P }, output_from_layers = { M13I } );
  M13V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V25_LN_P }, output_from_layers = { M13I } );
  M13_HVN_25V = M13V25_HP or M13V25_LN;


  M13V275_HP_P = select_by_double_property( M13_v, "high", > 2.75 ); 
  M13V275_LN_P = select_by_double_property( M13_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V275_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V275_LN_P, M13I }}} );
  M13V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V275_HP_P }, output_from_layers = { M13I } );
  M13V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V275_LN_P }, output_from_layers = { M13I } );
  M13_HVN_275V = M13V275_HP or M13V275_LN;


  M13V33_HP_P = select_by_double_property( M13_v, "high", > 3.3 ); 
  M13V33_LN_P = select_by_double_property( M13_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V33_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V33_LN_P, M13I }}} );
  M13V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V33_HP_P }, output_from_layers = { M13I } );
  M13V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V33_LN_P }, output_from_layers = { M13I } );
  M13_HVN_33V = M13V33_HP or M13V33_LN;


  M13V363_HP_P = select_by_double_property( M13_v, "high", > 3.63 ); 
  M13V363_LN_P = select_by_double_property( M13_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V363_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V363_LN_P, M13I }}} );
  M13V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V363_HP_P }, output_from_layers = { M13I } );
  M13V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V363_LN_P }, output_from_layers = { M13I } );
  M13_HVN_363V = M13V363_HP or M13V363_LN;


  M13V5_HP_P = select_by_double_property( M13_v, "high", > 4.9 ); 
  M13V5_LN_P = select_by_double_property( M13_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V5_HP_P, M13I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M13V5_LN_P, M13I }}} );
  M13V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M13V5_HP_P }, output_from_layers = { M13I } );
  M13V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M13V5_LN_P }, output_from_layers = { M13I } );
  M13_HVN_5V = M13V5_HP or M13V5_LN;


  M14V096_HP_P = select_by_double_property( M14_v, "high", > 0.96 ); 
  M14V096_LN_P = select_by_double_property( M14_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V096_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V096_LN_P, M14I }}} );
  M14V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V096_HP_P }, output_from_layers = { M14I } );
  M14V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V096_LN_P }, output_from_layers = { M14I } );
  M14_HVN_096V = M14V096_HP or M14V096_LN;


  M14V132_HP_P = select_by_double_property( M14_v, "high", > 1.32 ); 
  M14V132_LN_P = select_by_double_property( M14_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V132_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V132_LN_P, M14I }}} );
  M14V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V132_HP_P }, output_from_layers = { M14I } );
  M14V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V132_LN_P }, output_from_layers = { M14I } );
  M14_HVN_132V = M14V132_HP or M14V132_LN;


  M14V165_HP_P = select_by_double_property( M14_v, "high", > 1.65 ); 
  M14V165_LN_P = select_by_double_property( M14_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V165_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V165_LN_P, M14I }}} );
  M14V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V165_HP_P }, output_from_layers = { M14I } );
  M14V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V165_LN_P }, output_from_layers = { M14I } );
  M14_HVN_165V = M14V165_HP or M14V165_LN;


  M14V180_HP_P = select_by_double_property( M14_v, "high", > 1.8 ); 
  M14V180_LN_P = select_by_double_property( M14_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V180_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V180_LN_P, M14I }}} );
  M14V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V180_HP_P }, output_from_layers = { M14I } );
  M14V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V180_LN_P }, output_from_layers = { M14I } );
  M14_HVN_180V = M14V180_HP or M14V180_LN;


  M14V198_HP_P = select_by_double_property( M14_v, "high", > 1.98 ); 
  M14V198_LN_P = select_by_double_property( M14_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V198_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V198_LN_P, M14I }}} );
  M14V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V198_HP_P }, output_from_layers = { M14I } );
  M14V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V198_LN_P }, output_from_layers = { M14I } );
  M14_HVN_198V = M14V198_HP or M14V198_LN;


  M14V25_HP_P = select_by_double_property( M14_v, "high", > 2.5 ); 
  M14V25_LN_P = select_by_double_property( M14_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V25_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V25_LN_P, M14I }}} );
  M14V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V25_HP_P }, output_from_layers = { M14I } );
  M14V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V25_LN_P }, output_from_layers = { M14I } );
  M14_HVN_25V = M14V25_HP or M14V25_LN;


  M14V275_HP_P = select_by_double_property( M14_v, "high", > 2.75 ); 
  M14V275_LN_P = select_by_double_property( M14_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V275_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V275_LN_P, M14I }}} );
  M14V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V275_HP_P }, output_from_layers = { M14I } );
  M14V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V275_LN_P }, output_from_layers = { M14I } );
  M14_HVN_275V = M14V275_HP or M14V275_LN;


  M14V33_HP_P = select_by_double_property( M14_v, "high", > 3.3 ); 
  M14V33_LN_P = select_by_double_property( M14_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V33_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V33_LN_P, M14I }}} );
  M14V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V33_HP_P }, output_from_layers = { M14I } );
  M14V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V33_LN_P }, output_from_layers = { M14I } );
  M14_HVN_33V = M14V33_HP or M14V33_LN;


  M14V363_HP_P = select_by_double_property( M14_v, "high", > 3.63 ); 
  M14V363_LN_P = select_by_double_property( M14_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V363_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V363_LN_P, M14I }}} );
  M14V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V363_HP_P }, output_from_layers = { M14I } );
  M14V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V363_LN_P }, output_from_layers = { M14I } );
  M14_HVN_363V = M14V363_HP or M14V363_LN;


  M14V5_HP_P = select_by_double_property( M14_v, "high", > 4.9 ); 
  M14V5_LN_P = select_by_double_property( M14_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V5_HP_P, M14I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M14V5_LN_P, M14I }}} );
  M14V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M14V5_HP_P }, output_from_layers = { M14I } );
  M14V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M14V5_LN_P }, output_from_layers = { M14I } );
  M14_HVN_5V = M14V5_HP or M14V5_LN;


  M15V096_HP_P = select_by_double_property( M15_v, "high", > 0.96 ); 
  M15V096_LN_P = select_by_double_property( M15_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V096_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V096_LN_P, M15I }}} );
  M15V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V096_HP_P }, output_from_layers = { M15I } );
  M15V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V096_LN_P }, output_from_layers = { M15I } );
  M15_HVN_096V = M15V096_HP or M15V096_LN;


  M15V132_HP_P = select_by_double_property( M15_v, "high", > 1.32 ); 
  M15V132_LN_P = select_by_double_property( M15_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V132_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V132_LN_P, M15I }}} );
  M15V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V132_HP_P }, output_from_layers = { M15I } );
  M15V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V132_LN_P }, output_from_layers = { M15I } );
  M15_HVN_132V = M15V132_HP or M15V132_LN;


  M15V165_HP_P = select_by_double_property( M15_v, "high", > 1.65 ); 
  M15V165_LN_P = select_by_double_property( M15_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V165_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V165_LN_P, M15I }}} );
  M15V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V165_HP_P }, output_from_layers = { M15I } );
  M15V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V165_LN_P }, output_from_layers = { M15I } );
  M15_HVN_165V = M15V165_HP or M15V165_LN;


  M15V180_HP_P = select_by_double_property( M15_v, "high", > 1.8 ); 
  M15V180_LN_P = select_by_double_property( M15_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V180_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V180_LN_P, M15I }}} );
  M15V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V180_HP_P }, output_from_layers = { M15I } );
  M15V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V180_LN_P }, output_from_layers = { M15I } );
  M15_HVN_180V = M15V180_HP or M15V180_LN;


  M15V198_HP_P = select_by_double_property( M15_v, "high", > 1.98 ); 
  M15V198_LN_P = select_by_double_property( M15_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V198_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V198_LN_P, M15I }}} );
  M15V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V198_HP_P }, output_from_layers = { M15I } );
  M15V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V198_LN_P }, output_from_layers = { M15I } );
  M15_HVN_198V = M15V198_HP or M15V198_LN;


  M15V25_HP_P = select_by_double_property( M15_v, "high", > 2.5 ); 
  M15V25_LN_P = select_by_double_property( M15_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V25_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V25_LN_P, M15I }}} );
  M15V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V25_HP_P }, output_from_layers = { M15I } );
  M15V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V25_LN_P }, output_from_layers = { M15I } );
  M15_HVN_25V = M15V25_HP or M15V25_LN;


  M15V275_HP_P = select_by_double_property( M15_v, "high", > 2.75 ); 
  M15V275_LN_P = select_by_double_property( M15_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V275_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V275_LN_P, M15I }}} );
  M15V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V275_HP_P }, output_from_layers = { M15I } );
  M15V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V275_LN_P }, output_from_layers = { M15I } );
  M15_HVN_275V = M15V275_HP or M15V275_LN;


  M15V33_HP_P = select_by_double_property( M15_v, "high", > 3.3 ); 
  M15V33_LN_P = select_by_double_property( M15_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V33_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V33_LN_P, M15I }}} );
  M15V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V33_HP_P }, output_from_layers = { M15I } );
  M15V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V33_LN_P }, output_from_layers = { M15I } );
  M15_HVN_33V = M15V33_HP or M15V33_LN;


  M15V363_HP_P = select_by_double_property( M15_v, "high", > 3.63 ); 
  M15V363_LN_P = select_by_double_property( M15_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V363_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V363_LN_P, M15I }}} );
  M15V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V363_HP_P }, output_from_layers = { M15I } );
  M15V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V363_LN_P }, output_from_layers = { M15I } );
  M15_HVN_363V = M15V363_HP or M15V363_LN;


  M15V5_HP_P = select_by_double_property( M15_v, "high", > 4.9 ); 
  M15V5_LN_P = select_by_double_property( M15_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V5_HP_P, M15I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M15V5_LN_P, M15I }}} );
  M15V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M15V5_HP_P }, output_from_layers = { M15I } );
  M15V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M15V5_LN_P }, output_from_layers = { M15I } );
  M15_HVN_5V = M15V5_HP or M15V5_LN;


  M16V096_HP_P = select_by_double_property( M16_v, "high", > 0.96 ); 
  M16V096_LN_P = select_by_double_property( M16_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V096_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V096_LN_P, M16I }}} );
  M16V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V096_HP_P }, output_from_layers = { M16I } );
  M16V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V096_LN_P }, output_from_layers = { M16I } );
  M16_HVN_096V = M16V096_HP or M16V096_LN;


  M16V132_HP_P = select_by_double_property( M16_v, "high", > 1.32 ); 
  M16V132_LN_P = select_by_double_property( M16_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V132_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V132_LN_P, M16I }}} );
  M16V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V132_HP_P }, output_from_layers = { M16I } );
  M16V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V132_LN_P }, output_from_layers = { M16I } );
  M16_HVN_132V = M16V132_HP or M16V132_LN;


  M16V165_HP_P = select_by_double_property( M16_v, "high", > 1.65 ); 
  M16V165_LN_P = select_by_double_property( M16_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V165_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V165_LN_P, M16I }}} );
  M16V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V165_HP_P }, output_from_layers = { M16I } );
  M16V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V165_LN_P }, output_from_layers = { M16I } );
  M16_HVN_165V = M16V165_HP or M16V165_LN;


  M16V180_HP_P = select_by_double_property( M16_v, "high", > 1.8 ); 
  M16V180_LN_P = select_by_double_property( M16_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V180_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V180_LN_P, M16I }}} );
  M16V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V180_HP_P }, output_from_layers = { M16I } );
  M16V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V180_LN_P }, output_from_layers = { M16I } );
  M16_HVN_180V = M16V180_HP or M16V180_LN;


  M16V198_HP_P = select_by_double_property( M16_v, "high", > 1.98 ); 
  M16V198_LN_P = select_by_double_property( M16_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V198_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V198_LN_P, M16I }}} );
  M16V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V198_HP_P }, output_from_layers = { M16I } );
  M16V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V198_LN_P }, output_from_layers = { M16I } );
  M16_HVN_198V = M16V198_HP or M16V198_LN;


  M16V25_HP_P = select_by_double_property( M16_v, "high", > 2.5 ); 
  M16V25_LN_P = select_by_double_property( M16_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V25_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V25_LN_P, M16I }}} );
  M16V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V25_HP_P }, output_from_layers = { M16I } );
  M16V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V25_LN_P }, output_from_layers = { M16I } );
  M16_HVN_25V = M16V25_HP or M16V25_LN;


  M16V275_HP_P = select_by_double_property( M16_v, "high", > 2.75 ); 
  M16V275_LN_P = select_by_double_property( M16_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V275_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V275_LN_P, M16I }}} );
  M16V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V275_HP_P }, output_from_layers = { M16I } );
  M16V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V275_LN_P }, output_from_layers = { M16I } );
  M16_HVN_275V = M16V275_HP or M16V275_LN;


  M16V33_HP_P = select_by_double_property( M16_v, "high", > 3.3 ); 
  M16V33_LN_P = select_by_double_property( M16_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V33_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V33_LN_P, M16I }}} );
  M16V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V33_HP_P }, output_from_layers = { M16I } );
  M16V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V33_LN_P }, output_from_layers = { M16I } );
  M16_HVN_33V = M16V33_HP or M16V33_LN;


  M16V363_HP_P = select_by_double_property( M16_v, "high", > 3.63 ); 
  M16V363_LN_P = select_by_double_property( M16_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V363_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V363_LN_P, M16I }}} );
  M16V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V363_HP_P }, output_from_layers = { M16I } );
  M16V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V363_LN_P }, output_from_layers = { M16I } );
  M16_HVN_363V = M16V363_HP or M16V363_LN;


  M16V5_HP_P = select_by_double_property( M16_v, "high", > 4.9 ); 
  M16V5_LN_P = select_by_double_property( M16_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V5_HP_P, M16I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M16V5_LN_P, M16I }}} );
  M16V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M16V5_HP_P }, output_from_layers = { M16I } );
  M16V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M16V5_LN_P }, output_from_layers = { M16I } );
  M16_HVN_5V = M16V5_HP or M16V5_LN;


  M17V096_HP_P = select_by_double_property( M17_v, "high", > 0.96 ); 
  M17V096_LN_P = select_by_double_property( M17_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V096_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V096_LN_P, M17I }}} );
  M17V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V096_HP_P }, output_from_layers = { M17I } );
  M17V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V096_LN_P }, output_from_layers = { M17I } );
  M17_HVN_096V = M17V096_HP or M17V096_LN;


  M17V132_HP_P = select_by_double_property( M17_v, "high", > 1.32 ); 
  M17V132_LN_P = select_by_double_property( M17_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V132_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V132_LN_P, M17I }}} );
  M17V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V132_HP_P }, output_from_layers = { M17I } );
  M17V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V132_LN_P }, output_from_layers = { M17I } );
  M17_HVN_132V = M17V132_HP or M17V132_LN;


  M17V165_HP_P = select_by_double_property( M17_v, "high", > 1.65 ); 
  M17V165_LN_P = select_by_double_property( M17_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V165_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V165_LN_P, M17I }}} );
  M17V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V165_HP_P }, output_from_layers = { M17I } );
  M17V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V165_LN_P }, output_from_layers = { M17I } );
  M17_HVN_165V = M17V165_HP or M17V165_LN;


  M17V180_HP_P = select_by_double_property( M17_v, "high", > 1.8 ); 
  M17V180_LN_P = select_by_double_property( M17_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V180_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V180_LN_P, M17I }}} );
  M17V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V180_HP_P }, output_from_layers = { M17I } );
  M17V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V180_LN_P }, output_from_layers = { M17I } );
  M17_HVN_180V = M17V180_HP or M17V180_LN;


  M17V198_HP_P = select_by_double_property( M17_v, "high", > 1.98 ); 
  M17V198_LN_P = select_by_double_property( M17_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V198_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V198_LN_P, M17I }}} );
  M17V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V198_HP_P }, output_from_layers = { M17I } );
  M17V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V198_LN_P }, output_from_layers = { M17I } );
  M17_HVN_198V = M17V198_HP or M17V198_LN;


  M17V25_HP_P = select_by_double_property( M17_v, "high", > 2.5 ); 
  M17V25_LN_P = select_by_double_property( M17_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V25_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V25_LN_P, M17I }}} );
  M17V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V25_HP_P }, output_from_layers = { M17I } );
  M17V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V25_LN_P }, output_from_layers = { M17I } );
  M17_HVN_25V = M17V25_HP or M17V25_LN;


  M17V275_HP_P = select_by_double_property( M17_v, "high", > 2.75 ); 
  M17V275_LN_P = select_by_double_property( M17_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V275_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V275_LN_P, M17I }}} );
  M17V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V275_HP_P }, output_from_layers = { M17I } );
  M17V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V275_LN_P }, output_from_layers = { M17I } );
  M17_HVN_275V = M17V275_HP or M17V275_LN;


  M17V33_HP_P = select_by_double_property( M17_v, "high", > 3.3 ); 
  M17V33_LN_P = select_by_double_property( M17_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V33_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V33_LN_P, M17I }}} );
  M17V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V33_HP_P }, output_from_layers = { M17I } );
  M17V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V33_LN_P }, output_from_layers = { M17I } );
  M17_HVN_33V = M17V33_HP or M17V33_LN;


  M17V363_HP_P = select_by_double_property( M17_v, "high", > 3.63 ); 
  M17V363_LN_P = select_by_double_property( M17_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V363_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V363_LN_P, M17I }}} );
  M17V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V363_HP_P }, output_from_layers = { M17I } );
  M17V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V363_LN_P }, output_from_layers = { M17I } );
  M17_HVN_363V = M17V363_HP or M17V363_LN;


  M17V5_HP_P = select_by_double_property( M17_v, "high", > 4.9 ); 
  M17V5_LN_P = select_by_double_property( M17_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V5_HP_P, M17I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M17V5_LN_P, M17I }}} );
  M17V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M17V5_HP_P }, output_from_layers = { M17I } );
  M17V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M17V5_LN_P }, output_from_layers = { M17I } );
  M17_HVN_5V = M17V5_HP or M17V5_LN;


  M18V096_HP_P = select_by_double_property( M18_v, "high", > 0.96 ); 
  M18V096_LN_P = select_by_double_property( M18_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V096_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V096_LN_P, M18I }}} );
  M18V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V096_HP_P }, output_from_layers = { M18I } );
  M18V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V096_LN_P }, output_from_layers = { M18I } );
  M18_HVN_096V = M18V096_HP or M18V096_LN;


  M18V132_HP_P = select_by_double_property( M18_v, "high", > 1.32 ); 
  M18V132_LN_P = select_by_double_property( M18_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V132_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V132_LN_P, M18I }}} );
  M18V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V132_HP_P }, output_from_layers = { M18I } );
  M18V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V132_LN_P }, output_from_layers = { M18I } );
  M18_HVN_132V = M18V132_HP or M18V132_LN;


  M18V165_HP_P = select_by_double_property( M18_v, "high", > 1.65 ); 
  M18V165_LN_P = select_by_double_property( M18_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V165_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V165_LN_P, M18I }}} );
  M18V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V165_HP_P }, output_from_layers = { M18I } );
  M18V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V165_LN_P }, output_from_layers = { M18I } );
  M18_HVN_165V = M18V165_HP or M18V165_LN;


  M18V180_HP_P = select_by_double_property( M18_v, "high", > 1.8 ); 
  M18V180_LN_P = select_by_double_property( M18_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V180_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V180_LN_P, M18I }}} );
  M18V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V180_HP_P }, output_from_layers = { M18I } );
  M18V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V180_LN_P }, output_from_layers = { M18I } );
  M18_HVN_180V = M18V180_HP or M18V180_LN;


  M18V198_HP_P = select_by_double_property( M18_v, "high", > 1.98 ); 
  M18V198_LN_P = select_by_double_property( M18_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V198_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V198_LN_P, M18I }}} );
  M18V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V198_HP_P }, output_from_layers = { M18I } );
  M18V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V198_LN_P }, output_from_layers = { M18I } );
  M18_HVN_198V = M18V198_HP or M18V198_LN;


  M18V25_HP_P = select_by_double_property( M18_v, "high", > 2.5 ); 
  M18V25_LN_P = select_by_double_property( M18_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V25_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V25_LN_P, M18I }}} );
  M18V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V25_HP_P }, output_from_layers = { M18I } );
  M18V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V25_LN_P }, output_from_layers = { M18I } );
  M18_HVN_25V = M18V25_HP or M18V25_LN;


  M18V275_HP_P = select_by_double_property( M18_v, "high", > 2.75 ); 
  M18V275_LN_P = select_by_double_property( M18_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V275_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V275_LN_P, M18I }}} );
  M18V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V275_HP_P }, output_from_layers = { M18I } );
  M18V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V275_LN_P }, output_from_layers = { M18I } );
  M18_HVN_275V = M18V275_HP or M18V275_LN;


  M18V33_HP_P = select_by_double_property( M18_v, "high", > 3.3 ); 
  M18V33_LN_P = select_by_double_property( M18_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V33_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V33_LN_P, M18I }}} );
  M18V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V33_HP_P }, output_from_layers = { M18I } );
  M18V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V33_LN_P }, output_from_layers = { M18I } );
  M18_HVN_33V = M18V33_HP or M18V33_LN;


  M18V363_HP_P = select_by_double_property( M18_v, "high", > 3.63 ); 
  M18V363_LN_P = select_by_double_property( M18_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V363_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V363_LN_P, M18I }}} );
  M18V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V363_HP_P }, output_from_layers = { M18I } );
  M18V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V363_LN_P }, output_from_layers = { M18I } );
  M18_HVN_363V = M18V363_HP or M18V363_LN;


  M18V5_HP_P = select_by_double_property( M18_v, "high", > 4.9 ); 
  M18V5_LN_P = select_by_double_property( M18_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V5_HP_P, M18I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M18V5_LN_P, M18I }}} );
  M18V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M18V5_HP_P }, output_from_layers = { M18I } );
  M18V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M18V5_LN_P }, output_from_layers = { M18I } );
  M18_HVN_5V = M18V5_HP or M18V5_LN;


  M19V096_HP_P = select_by_double_property( M19_v, "high", > 0.96 ); 
  M19V096_LN_P = select_by_double_property( M19_v, "low",< -0.96 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V096_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V096_LN_P, M19I }}} );
  M19V096_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V096_HP_P }, output_from_layers = { M19I } );
  M19V096_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V096_LN_P }, output_from_layers = { M19I } );
  M19_HVN_096V = M19V096_HP or M19V096_LN;


  M19V132_HP_P = select_by_double_property( M19_v, "high", > 1.32 ); 
  M19V132_LN_P = select_by_double_property( M19_v, "low",< -1.32 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V132_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V132_LN_P, M19I }}} );
  M19V132_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V132_HP_P }, output_from_layers = { M19I } );
  M19V132_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V132_LN_P }, output_from_layers = { M19I } );
  M19_HVN_132V = M19V132_HP or M19V132_LN;


  M19V165_HP_P = select_by_double_property( M19_v, "high", > 1.65 ); 
  M19V165_LN_P = select_by_double_property( M19_v, "low",< -1.65 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V165_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V165_LN_P, M19I }}} );
  M19V165_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V165_HP_P }, output_from_layers = { M19I } );
  M19V165_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V165_LN_P }, output_from_layers = { M19I } );
  M19_HVN_165V = M19V165_HP or M19V165_LN;


  M19V180_HP_P = select_by_double_property( M19_v, "high", > 1.8 ); 
  M19V180_LN_P = select_by_double_property( M19_v, "low",< -1.8 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V180_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V180_LN_P, M19I }}} );
  M19V180_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V180_HP_P }, output_from_layers = { M19I } );
  M19V180_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V180_LN_P }, output_from_layers = { M19I } );
  M19_HVN_180V = M19V180_HP or M19V180_LN;


  M19V198_HP_P = select_by_double_property( M19_v, "high", > 1.98 ); 
  M19V198_LN_P = select_by_double_property( M19_v, "low",< -1.98 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V198_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V198_LN_P, M19I }}} );
  M19V198_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V198_HP_P }, output_from_layers = { M19I } );
  M19V198_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V198_LN_P }, output_from_layers = { M19I } );
  M19_HVN_198V = M19V198_HP or M19V198_LN;


  M19V25_HP_P = select_by_double_property( M19_v, "high", > 2.5 ); 
  M19V25_LN_P = select_by_double_property( M19_v, "low",< -2.5 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V25_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V25_LN_P, M19I }}} );
  M19V25_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V25_HP_P }, output_from_layers = { M19I } );
  M19V25_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V25_LN_P }, output_from_layers = { M19I } );
  M19_HVN_25V = M19V25_HP or M19V25_LN;


  M19V275_HP_P = select_by_double_property( M19_v, "high", > 2.75 ); 
  M19V275_LN_P = select_by_double_property( M19_v, "low",< -2.75 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V275_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V275_LN_P, M19I }}} );
  M19V275_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V275_HP_P }, output_from_layers = { M19I } );
  M19V275_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V275_LN_P }, output_from_layers = { M19I } );
  M19_HVN_275V = M19V275_HP or M19V275_LN;


  M19V33_HP_P = select_by_double_property( M19_v, "high", > 3.3 ); 
  M19V33_LN_P = select_by_double_property( M19_v, "low",< -3.3 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V33_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V33_LN_P, M19I }}} );
  M19V33_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V33_HP_P }, output_from_layers = { M19I } );
  M19V33_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V33_LN_P }, output_from_layers = { M19I } );
  M19_HVN_33V = M19V33_HP or M19V33_LN;


  M19V363_HP_P = select_by_double_property( M19_v, "high", > 3.63 ); 
  M19V363_LN_P = select_by_double_property( M19_v, "low",< -3.63 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V363_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V363_LN_P, M19I }}} );
  M19V363_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V363_HP_P }, output_from_layers = { M19I } );
  M19V363_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V363_LN_P }, output_from_layers = { M19I } );
  M19_HVN_363V = M19V363_HP or M19V363_LN;


  M19V5_HP_P = select_by_double_property( M19_v, "high", > 4.9 ); 
  M19V5_LN_P = select_by_double_property( M19_v, "low",< -4.9 );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V5_HP_P, M19I }}} );
  CONNECT_DB_DV = incremental_connect( CONNECT_DB_DV, {{{ M19V5_LN_P, M19I }}} );
  M19V5_HP   = net_select( CONNECT_DB_DV, connected_to_any = { M19V5_HP_P }, output_from_layers = { M19I } );
  M19V5_LN   = net_select( CONNECT_DB_DV, connected_to_any = { M19V5_LN_P }, output_from_layers = { M19I } );
  M19_HVN_5V = M19V5_HP or M19V5_LN;




// Protect the small area not to be removed by other fillable region.
retarget_with_local_protection : UNIFIED_FILL_PUBLISHED function(
  target : polygon_layer,
  spacing : pattern_spec_s,
  width : double,
  height : double,
  grid : double
) returning result : polygon_layer {
    discard_area : list of polygon_layer = {};
    discard = empty_layer();
    not_layer = empty_layer();
    all_not_layer = empty_layer();
    for (i = 0 to 1) {
      direction : direction_e = (i==0)? (HORIZONTAL) : (VERTICAL);
      value : double = (i==0)? (width) : (height);
      discard = internal1(target, <(value), direction = direction, extension = NONE);
      target = target not discard;
    }

    target_ori = target;
    for (i = 0 to 1) {
      direction   : direction_e = (i==0)? (HORIZONTAL) : (VERTICAL);
      direction_r : direction_e = (i==1)? (HORIZONTAL) : (VERTICAL);
      value   : double = (i==0)? (width) : (height);
      value_r : double = (i==1)? (width) : (height);
      ffs : double = (i==0)? (spacing.space_x):(spacing.space_y);
      if (i == 0) {
	if (!spacing.pattern_spacing.allowed_spacing_x.empty())
	  ffs = spacing.pattern_spacing.allowed_spacing_x[0].lo();
      } else {
	if (!spacing.pattern_spacing.allowed_spacing_y.empty())
	  ffs = spacing.pattern_spacing.allowed_spacing_y[0].lo();
      }
      small_area = internal1(target, <(value+ffs), direction = direction, extension = NONE);
      small_area = small_area not internal1(small_area, <value_r, direction = direction_r, extension = NONE);


      // Version 3 begins
      highlight_small_spacing_same_poly = empty_layer_edge();
      target = target not small_area;
      highlight_small_spacing = external2_edge(small_area, target, <ffs, direction = direction, extension = NONE) not_interacting_edge highlight_small_spacing_same_poly;
      highlight_all_spacing   = external1_edge(target, <ffs, direction = direction, extension = NONE, membership = DIFFERENT_POLYGON);
      // Version 3 ends

      if (i == 0) {
	not_layer = (edge_grow(highlight_small_spacing, east = ffs, west = ffs));
	all_not_layer = (edge_grow(highlight_all_spacing, east = ffs));
      } else {
	not_layer = (edge_grow(highlight_small_spacing, south = ffs, north = ffs));
	all_not_layer = (edge_grow(highlight_all_spacing, south = ffs));
      }
      discard_area.push_back(not_layer);
      discard_area.push_back(all_not_layer);
    }
    result = target_ori not or_list(discard_area);
}


corner_size_ext : published function (
    in_layer : edge_layer,
    ext_x : double,
    distance : double,
)
    returning corner_size_ext_result : polygon_layer
{

edge_ext = extend_edge( in_layer, start = ext_x , end = ext_x); 
corner_size_ext_result = edge_size( edge_ext, outside = distance );
    	
}
over_size_v : published function (
    in_layer : polygon_layer,
    distance_x : double,
)
    returning over_size_xy_result : polygon_layer
{
    over_size_xy_pre1 = grow(in_layer, north = 0, south = 0, east = distance_x, west = distance_x);
    over_size_xy_result = over_size_xy_pre1 not in_layer;
}
over_size_h : published function (
    in_layer : polygon_layer,
    distance_y : double,
)
    returning over_size_xy_result : polygon_layer
{
    over_size_xy_pre1 = grow(in_layer, north = distance_y, south = distance_y, east = 0, west = 0);
    over_size_xy_result = over_size_xy_pre1 not in_layer;
}


//******************************************************************************
//      SPEC
//******************************************************************************

//*******Cell
CELL_CHIP : const double = 0.001;	
CELL_CHIPX : const double = 0.096;	
CELL_CHIPY : const double = 0.088;	
CELL_IPX : const double = 0.096;	
CELL_IPY : const double = 0.088;	
CELL_FEOLBLK : const double = 0.135;	
CELL_FEOLBLK_F : const double = 0;
CELL_BLK : const double = 0.001;	
CELL_TCDDMY : const double = 0.2;	
CELL_ICOVL : const double = 0.2;	
CELL_BJT : const double = 0.001;	
CELL_INDDMY : const double = 0.005;	
//*******Cell1  *************
CELL1_CHIPX : const double = 2;	
CELL1_CHIPY : const double = 2;	
CELL1_IPX : const double = 0.9;	
CELL1_IPY : const double = 0.76;	
CELL1_FEOLBLK : const double = 4;	
CELL1_ODBLK : const double = 4;	
CELL1_POBLK : const double = 4;	
CELL1_MDBLK : const double = 4;	
CELL1_ICOVL : const double = 1;	
CELL1_FB1_IN : const double = 0.6;	
CELL1_FB1_OUT : const double = 4;	
CELL1_FB2 : const double = 4;	
CELL1_FB26 : const double = 4;	
CELL1_FB28 : const double = 4;	
CELL1_FB29 : const double = 4;	
CELL1_FB31 : const double = 4;	
CELL1_FB36 : const double = 4;	
CELL1_FB38 : const double = 4;	
CELL1_STD_FILLER : const double = 4;	
CELL1_SRM : const double = 4;	
CELL1_SRAMDMY : const double = 4;	
CELL1_OD : const double = 4;	
CELL1_SRDOD : const double = 4;	
CELL1_CODH : const double = 4;	
CELL1_DCODH : const double = 4;	
CELL1_CODV : const double = 4;	
CELL1_DCODV : const double = 4;	
CELL1_CODBLK : const double = 0.001;	
CELL1_DCODBLK : const double = 0.001;	
CELL1_ODMMB : const double = 4;	
CELL1_PO : const double = 4;	
CELL1_PO3 : const double = 4;	
CELL1_POLE8 : const double = 4;	
CELL1_PO9 : const double = 4;	
CELL1_PO54 : const double = 4;	
CELL1_PO86 : const double = 4;	
CELL1_SR_DPO3 : const double = 4;	
CELL1_SR_DPOLE8 : const double = 4;	
CELL1_SR_DPO9 : const double = 4;	
CELL1_SR_DPO54 : const double = 4;	
CELL1_SR_DPO86 : const double = 4;	
CELL1_SRDPO : const double = 4;	
CELL1_PO_P54 : const double = 4;	
CELL1_PO_P81 : const double = 4;	
CELL1_PO_P81_WPO : const double = 4;	
CELL1_PO_P57 : const double = 4;	
CELL1_CPO : const double = 4;	
CELL1_SRDCPO : const double = 4;	
CELL1_CPO20 : const double = 4;	
CELL1_CPO22 : const double = 4;	
CELL1_CPO25 : const double = 4;	
CELL1_SR_DCPO20 : const double = 4;	
CELL1_SR_DCPO22 : const double = 4;	
CELL1_SR_DCPO25 : const double = 4;	
CELL1_CPODEX : const double = 0.001;	
CELL1_CPODEY : const double = 0.054;	
CELL1_DCPODEX : const double = 0.001;	
CELL1_DCPODEY : const double = 0.054;	
CELL1_PP : const double = 1.3;	
CELL1_NP : const double = 1.3;	
CELL1_SIGE_DRAW : const double = 1.3;	
CELL1_SIC_DRAW : const double = 1.3;	
CELL1_MD : const double = 4;	
CELL1_MD16 : const double = 4;	
CELL1_MD30 : const double = 4;	
CELL1_SRDMD : const double = 4;	
CELL1_SRDMD16 : const double = 4;	
CELL1_SRDMD30 : const double = 4;	
CELL1_CMD : const double = 4;	
CELL1_SRDCMD : const double = 4;	
CELL1_DNW : const double = 1.5;	
CELL1_NWX : const double = 0.5;	
CELL1_NWY : const double = 0.5;	
CELL1_NTNI : const double = 0.7115;	
CELL1_OD2 : const double = 4;	
CELL1_NWDMY : const double = 4;	
CELL1_DIODMY : const double = 0.001;	
CELL1_VAR : const double = 0.001;	
CELL1_BJT : const double = 0.001;	
CELL1_TCDMYX : const double = 0.9915;	
CELL1_TCDMYY : const double = 0.854;	
CELL1_DI_WPO : const double = 0.8;	
CELL1_DFBCX : const double = 0.0885;	
CELL1_DFBCY : const double = 0.091;	
CELL1_DFBC_ALLX : const double = 0.0885;	
CELL1_DFBC_ALLY : const double = 0.091;	
CELL1_CELL1X : const double = 0.179;	
CELL1_CELL1Y : const double = 0.124;	
CELL1_CELL2_1X : const double = 0.048;	
CELL1_CELL2_1Y : const double = 0.072;	
CELL1_CELL2_2X : const double = 0.048;	
CELL1_CELL2_2Y : const double = 0.072;	
CELL1_CELL2_3X : const double = 0.048;	
CELL1_CELL2_3Y : const double = 0.072;	
CELL1_CELL4_1X : const double = 0.048;	
CELL1_CELL4_1Y : const double = 0.072;	
CELL1_CELL4_2X : const double = 0.048;	
CELL1_CELL4_2Y : const double = 0.072;	
CELL1_CELL5_1X : const double = 0.0355;	
CELL1_CELL5_1Y : const double = 0.024;	
CELL1_CELL5_2X : const double = 0.0355;	
CELL1_CELL5_2Y : const double = 0.024;	
CELL1_CELL6_1X : const double = 0.09;	
CELL1_CELL6_1Y : const double = 0.072;	
CELL1_CELL6_2X : const double = 0.09;	
CELL1_CELL6_2Y : const double = 0.072;	
CELL1_CELL7X : const double = 0.018;	
CELL1_CELL7Y : const double = 0.014;	
CELL1_CELL8_1X : const double = 0.018;	
CELL1_CELL8_1Y : const double = 0.014;	
CELL1_CELL8_2X : const double = 0.0535;	
CELL1_CELL8_2Y : const double = 0.024;	

//******* Cell2_1 ********
CELL2_1_FEOLBLK : const double = 0.135;	
CELL2_1_FB1_IN : const double = 0;	
CELL2_1_FB1X : const double = 0.024;	
CELL2_1_FB1Y : const double = 0.02;	
CELL2_1_FB2X : const double = 0.0675;	
CELL2_1_FB2Y : const double = 0.023;	
CELL2_1_FBOTHERX : const double = 0.072;	
CELL2_1_FBOTHERY : const double = 0.052;	
CELL2_1_SRAMX : const double = 0.0775;	
CELL2_1_SRAMY : const double = 0.13;	
CELL2_1_ODX : const double = 0.144;	
CELL2_1_ODY : const double = 0.036;	
CELL2_1_CODHX : const double = 0.048;	
CELL2_1_CODHY : const double = 0.01;	
CELL2_1_CODVX : const double = 0.1455;	
CELL2_1_CODVY : const double = 0.127;	
CELL2_1_CODBLK : const double = 0.001;	
CELL2_1_ODMMBX : const double = 0.144;	
CELL2_1_ODMMBY : const double = 0.114;	
CELL2_1_POX : const double = 0.0885;	
CELL2_1_POY : const double = 0.048;	
CELL2_1_SRDPOX : const double = 0.0885;	
CELL2_1_SRDPOY : const double = 0.048;	
CELL2_1_PO3X : const double = 0.0945;	
CELL2_1_PO3Y : const double = 0.048;	
CELL2_1_SRDPO3X : const double = 0.0945;	
CELL2_1_SRDPO3Y : const double = 0.048;	
CELL2_1_POLE8X : const double = 0.0945;	
CELL2_1_POLE8Y : const double = 0.048;	
CELL2_1_SRDPOLE8X : const double = 0.0945;	
CELL2_1_SRDPOLE8Y : const double = 0.048;	
CELL2_1_PO9X : const double = 0.0945;	
CELL2_1_PO9Y : const double = 0.048;	
CELL2_1_SR_DPO9X : const double = 0.0945;	
CELL2_1_SR_DPO9Y : const double = 0.048;	
CELL2_1_PO54X : const double = 0.0855;	
CELL2_1_PO54Y : const double = 0.048;	
CELL2_1_SR_DPO54X : const double = 0.0855;	
CELL2_1_SR_DPO54Y : const double = 0.048;	
CELL2_1_PO86X : const double = 0.0855;	
CELL2_1_PO86Y : const double = 0.048;	
CELL2_1_SR_DPO86X : const double = 0.0855;	
CELL2_1_SR_DPO86Y : const double = 0.048;	
CELL2_1_PO_P54 : const double = 0.001;	
CELL2_1_PO_P81 : const double = 0.001;	
CELL2_1_PO_P81_WPO : const double = 0.001;	
CELL2_1_PO_P57 : const double = 0.001;	
CELL2_1_CPOX : const double = 0.0265;	
CELL2_1_CPOY : const double = 0.001;	
CELL2_1_SRDCPOX : const double = 0.0265;	
CELL2_1_SRDCPOY : const double = 0.001;	
CELL2_1_CPO20X : const double = 0.0235;	
CELL2_1_CPO20Y : const double = 0.001;	
CELL2_1_SR_DCPO20X : const double = 0.0235;	
CELL2_1_SR_DCPO20Y : const double = 0.001;	
CELL2_1_CPO22X : const double = 0.0235;	
CELL2_1_CPO22Y : const double = 0.076;	
CELL2_1_SR_DCPO22X : const double = 0.0235;	
CELL2_1_SR_DCPO22Y : const double = 0.076;	
CELL2_1_CPO25X : const double = 0.0715;	
CELL2_1_CPO25Y : const double = 0.001;	
CELL2_1_SR_DCPO25X : const double = 0.0715;	
CELL2_1_SR_DCPO25Y : const double = 0.001;	
CELL2_1_MDX : const double = 0.0355;	
CELL2_1_MDY : const double = 0.042;	
CELL2_1_SR_DMDX : const double = 0.0355;	
CELL2_1_SR_DMDY : const double = 0.042;	
CELL2_1_MD16X : const double = 0.1045;	
CELL2_1_MD16Y : const double = 0.070;	
CELL2_1_SR_DMD16X : const double = 0.1045;	
CELL2_1_SR_DMD16Y : const double = 0.070;	
CELL2_1_MD30X : const double = 0.0355;	
CELL2_1_MD30Y : const double = 0.042;	
CELL2_1_SR_DMD30X : const double = 0.0355;	
CELL2_1_SR_DMD30Y : const double = 0.042;	
CELL2_1_CMDX : const double = 0.001;	
CELL2_1_CMDY : const double = 0.001;	
CELL2_1_NW_CENTERLINE : const double = 0.001;	
CELL2_1_NTNI : const double = 0.05;	
CELL2_1_OD2X : const double = 0.0675;	
CELL2_1_OD2Y : const double = 0.02;	
CELL2_1_NWDMY : const double = 0.54;	
CELL2_1_DIODMY : const double = 0.001;	
CELL2_1_VAR : const double = 0.001;	
CELL2_1_DI_WPO : const double = 0.001;	
CELL2_1_DFBCX : const double = 0.0885;	
CELL2_1_DFBCY : const double = 0.091;	
CELL2_1_DFBC_ALLX : const double = 0.0885;	
CELL2_1_DFBC_ALLY : const double = 0.091;	
CELL2_1_COR_45_REG : const double = 0;
CELL2_1_CELL1X : const double = 0.048;	
CELL2_1_CELL1Y : const double = 0.072;	
CELL2_1_CELL2_1X : const double = 0.048;	
CELL2_1_CELL2_1Y : const double = 0.124;	
CELL2_1_CELL2_2X : const double = 0.048;	
CELL2_1_CELL2_2Y : const double = 0.124;	
CELL2_1_CELL2_3X : const double = 0.048;	
CELL2_1_CELL2_3Y : const double = 0.124;	
CELL2_1_CELL4_1X : const double = 0.048;	
CELL2_1_CELL4_1Y : const double = 0.124;	
CELL2_1_CELL4_2X : const double = 0.048;	
CELL2_1_CELL4_2Y : const double = 0.124;	
CELL2_1_CELL5_1X : const double = 0.0835;	
CELL2_1_CELL5_1Y : const double = 0.076;	
CELL2_1_CELL5_2X : const double = 0.0835;	
CELL2_1_CELL5_2Y : const double = 0.076;	
CELL2_1_CELL6_1X : const double = 0.09;	
CELL2_1_CELL6_1Y : const double = 0.124;	
CELL2_1_CELL6_2X : const double = 0.09;	
CELL2_1_CELL6_2Y : const double = 0.124;	
CELL2_1_CELL7X : const double = 0.018;	
CELL2_1_CELL7Y : const double = 0.042;	
CELL2_1_CELL8_1X : const double = 0.018;	
CELL2_1_CELL8_1Y : const double = 0.042;	
CELL2_1_CELL8_2X : const double = 0.0535;	
CELL2_1_CELL8_2Y : const double = 0.052;	

//******* Cell2_2 ********
CELL2_2_FEOLBLK : const double = 0.135;	
CELL2_2_FB1_IN : const double = 0;	
CELL2_2_FB1X : const double = 0.024;	
CELL2_2_FB1Y : const double = 0.02;	
CELL2_2_FB2X : const double = 0.0675;	
CELL2_2_FB2Y : const double = 0.023;	
CELL2_2_FBOTHERX : const double = 0.072;	
CELL2_2_FBOTHERY : const double = 0.052;	
CELL2_2_SRAMX : const double = 0.0855;	
CELL2_2_SRAMY : const double = 0.13;	
CELL2_2_ODX : const double = 0.144;	
CELL2_2_ODY : const double = 0.044;	
CELL2_2_CODHX : const double = 0.048;	
CELL2_2_CODHY : const double = 0.01;	
CELL2_2_CODVX : const double = 0.1455;	
CELL2_2_CODVY : const double = 0.127;	
CELL2_2_CODBLK : const double = 0.001;	
CELL2_2_ODMMBX : const double = 0.144;	
CELL2_2_ODMMBY : const double = 0.114;	
CELL2_2_POX : const double = 0.0885;	
CELL2_2_POY : const double = 0.078;	
CELL2_2_SRDPOX : const double = 0.0885;	
CELL2_2_SRDPOY : const double = 0.078;	
CELL2_2_PO3X : const double = 0.0945;	
CELL2_2_PO3Y : const double = 0.078;	
CELL2_2_SRDPO3X : const double = 0.0945;	
CELL2_2_SRDPO3Y : const double = 0.078;	
CELL2_2_POLE8X : const double = 0.0945;	
CELL2_2_POLE8Y : const double = 0.078;	
CELL2_2_SRDPOLE8X : const double = 0.0945;	
CELL2_2_SRDPOLE8Y : const double = 0.078;	
CELL2_2_PO9X : const double = 0.0945;	
CELL2_2_PO9Y : const double = 0.078;	
CELL2_2_SR_DPO9X : const double = 0.0945;	
CELL2_2_SR_DPO9Y : const double = 0.078;	
CELL2_2_PO54X : const double = 0.0855;	
CELL2_2_PO54Y : const double = 0.078;	
CELL2_2_SR_DPO54X : const double = 0.0855;	
CELL2_2_SR_DPO54Y : const double = 0.078;	
CELL2_2_PO86X : const double = 0.0855;	
CELL2_2_PO86Y : const double = 0.078;	
CELL2_2_SR_DPO86X : const double = 0.0855;	
CELL2_2_SR_DPO86Y : const double = 0.078;	
CELL2_2_PO_P54 : const double = 0.001;	
CELL2_2_PO_P81 : const double = 0.001;	
CELL2_2_PO_P81_WPO : const double = 0.001;	
CELL2_2_PO_P57 : const double = 0.001;	
CELL2_2_CPOX : const double = 0.0345;	
CELL2_2_CPOY : const double = 0.001;	
CELL2_2_SRDCPOX : const double = 0.0345;	
CELL2_2_SRDCPOY : const double = 0.001;	
CELL2_2_CPO20X : const double = 0.0345;	
CELL2_2_CPO20Y : const double = 0.001;	
CELL2_2_CPO22X : const double = 0.0345;	
CELL2_2_CPO22Y : const double = 0.106;	
CELL2_2_CPO25X : const double = 0.0825;	
CELL2_2_CPO25Y : const double = 0.001;	
CELL2_2_SR_DCPO20X : const double = 0.0345;	
CELL2_2_SR_DCPO20Y : const double = 0.001;	
CELL2_2_SR_DCPO22X : const double = 0.0345;	
CELL2_2_SR_DCPO22Y : const double = 0.106;	
CELL2_2_SR_DCPO25X : const double = 0.0825;	
CELL2_2_SR_DCPO25Y : const double = 0.001;	
CELL2_2_MDX : const double = 0.0355;	
CELL2_2_MDY : const double = 0.068;	
CELL2_2_SR_DMDX : const double = 0.0355;	
CELL2_2_SR_DMDY : const double = 0.068;	
CELL2_2_MD16X : const double = 0.1045;	
CELL2_2_MD16Y : const double = 0.096;	
CELL2_2_SR_DMD16X : const double = 0.1045;	
CELL2_2_SR_DMD16Y : const double = 0.096;	
CELL2_2_MD30X : const double = 0.0355;	
CELL2_2_MD30Y : const double = 0.068;	
CELL2_2_SR_DMD30X : const double = 0.0355;	
CELL2_2_SR_DMD30Y : const double = 0.068;	
CELL2_2_CMDX : const double = 0.001;	
CELL2_2_CMDY : const double = 0.012;	
CELL2_2_NW_CENTERLINE : const double = 0.001;	
CELL2_2_NTNI : const double = 0.05;	
CELL2_2_OD2X : const double = 0.0675;	
CELL2_2_OD2Y : const double = 0.02;	
CELL2_2_NWDMY : const double = 0.54;	
CELL2_2_DIODMY : const double = 0.001;	
CELL2_2_VAR : const double = 0.001;	
CELL2_2_DI_WPO : const double = 0.001;	
CELL2_2_DFBCX : const double = 0.0885;	
CELL2_2_DFBCY : const double = 0.121;	
CELL2_2_DFBC_ALLX : const double = 0.0885;	
CELL2_2_DFBC_ALLY : const double = 0.121;	
CELL2_2_CELL1X : const double = 0.048;	
CELL2_2_CELL1Y : const double = 0.072;	
CELL2_2_CELL2_1X : const double = 0.048;	
CELL2_2_CELL2_1Y : const double = 0.124;	
CELL2_2_CELL2_2X : const double = 0.048;	
CELL2_2_CELL2_2Y : const double = 0.124;	
CELL2_2_CELL2_3X : const double = 0.048;	
CELL2_2_CELL2_3Y : const double = 0.124;	
CELL2_2_CELL4_1X : const double = 0.048;	
CELL2_2_CELL4_1Y : const double = 0.124;	
CELL2_2_CELL4_2X : const double = 0.048;	
CELL2_2_CELL4_2Y : const double = 0.124;	
CELL2_2_CELL5_1X : const double = 0.0835;	
CELL2_2_CELL5_1Y : const double = 0.078;	
CELL2_2_CELL5_2X : const double = 0.0835;	
CELL2_2_CELL5_2Y : const double = 0.078;	
CELL2_2_CELL6_1X : const double = 0.09;	
CELL2_2_CELL6_1Y : const double = 0.124;	
CELL2_2_CELL6_2X : const double = 0.09;	
CELL2_2_CELL6_2Y : const double = 0.124;	
CELL2_2_CELL7X : const double = 0.018;	
CELL2_2_CELL7Y : const double = 0.068;	
CELL2_2_CELL8_1X : const double = 0.018;	
CELL2_2_CELL8_1Y : const double = 0.068;	
CELL2_2_CELL8_2X : const double = 0.0535;	
CELL2_2_CELL8_2Y : const double = 0.078;	

//******* Cell2_3 ********
CELL2_3_FEOLBLK : const double = 0.135;	
CELL2_3_FB1_IN : const double = 0;	
CELL2_3_FB1X : const double = 0.024;	
CELL2_3_FB1Y : const double = 0.001;	
CELL2_3_FB2X : const double = 0.0675;	
CELL2_3_FB2Y : const double = 0.001;	
CELL2_3_FBOTHERX : const double = 0.072;	
CELL2_3_FBOTHERY : const double = 0.052;	
CELL2_3_SRAMX : const double = 0.072;	
CELL2_3_SRAMY : const double = 0.13;	
CELL2_3_ODX : const double = 0.144;	
CELL2_3_ODY : const double = 0.057;	
CELL2_3_CODHX : const double = 0.048;	
CELL2_3_CODHY : const double = 0.01;	
CELL2_3_CODVX : const double = 0.1455;	
CELL2_3_CODVY : const double = 0.127;	
CELL2_3_CODBLK : const double = 0.001;	
CELL2_3_ODMMBX : const double = 0.144;	
CELL2_3_ODMMBY : const double = 0.114;	
CELL2_3_POX : const double = 0.0885;	
CELL2_3_POY : const double = 0.064;	
CELL2_3_SRDPOX : const double = 0.0885;	
CELL2_3_SRDPOY : const double = 0.064;	
CELL2_3_PO3X : const double = 0.0945;	
CELL2_3_PO3Y : const double = 0.064;	
CELL2_3_SRDPO3X : const double = 0.0945;	
CELL2_3_SRDPO3Y : const double = 0.064;	
CELL2_3_POLE8X : const double = 0.0945;	
CELL2_3_POLE8Y : const double = 0.064;	
CELL2_3_SRDPOLE8X : const double = 0.0945;	
CELL2_3_SRDPOLE8Y : const double = 0.064;	
CELL2_3_PO9X : const double = 0.0945;	
CELL2_3_PO9Y : const double = 0.064;	
CELL2_3_SR_DPO9X : const double = 0.0945;	
CELL2_3_SR_DPO9Y : const double = 0.064;	
CELL2_3_PO54X : const double = 0.0855;	
CELL2_3_PO54Y : const double = 0.064;	
CELL2_3_SR_DPO54X : const double = 0.0855;	
CELL2_3_SR_DPO54Y : const double = 0.064;	
CELL2_3_PO86X : const double = 0.0855;	
CELL2_3_PO86Y : const double = 0.064;	
CELL2_3_SR_DPO86X : const double = 0.0855;	
CELL2_3_SR_DPO86Y : const double = 0.064;	
CELL2_3_PO_P54 : const double = 0.001;	
CELL2_3_PO_P81 : const double = 0.001;	
CELL2_3_PO_P81_WPO : const double = 0.001;	
CELL2_3_PO_P57 : const double = 0.001;	
CELL2_3_CPO : const double = 0.001;	
CELL2_3_SRDCPO : const double = 0.001;	
CELL2_3_CPO20 : const double = 0.001;	
CELL2_3_SR_DCPO20 : const double = 0.001;	
CELL2_3_CPO22X : const double = 0.0225;	
CELL2_3_CPO22Y : const double = 0.092;	
CELL2_3_SR_DCPO22X : const double = 0.0175;	
CELL2_3_SR_DCPO22Y : const double = 0.092;	
CELL2_3_CPO25X : const double = 0.035;	
CELL2_3_CPO25Y : const double = 0.001;	
CELL2_3_SR_DCPO25X : const double = 0.035;	
CELL2_3_SR_DCPO25Y : const double = 0.001;	
CELL2_3_MDX : const double = 0.0355;	
CELL2_3_MDY : const double = 0.055;	
CELL2_3_SR_DMDX : const double = 0.0355;	
CELL2_3_SR_DMDY : const double = 0.055;	
CELL2_3_MD16X : const double = 0.1045;	
CELL2_3_MD16Y : const double = 0.083;	
CELL2_3_SR_DMD16X : const double = 0.1045;	
CELL2_3_SR_DMD16Y : const double = 0.083;	
CELL2_3_MD30X : const double = 0.0355;	
CELL2_3_MD30Y : const double = 0.055;	
CELL2_3_SR_DMD30X : const double = 0.0355;	
CELL2_3_SR_DMD30Y : const double = 0.055;	
CELL2_3_CMDX : const double = 0.001;	
CELL2_3_CMDY : const double = 0.024;	
CELL2_3_NW_CENTERLINE : const double = 0.001;	
CELL2_3_NTNI : const double = 0.05;	
CELL2_3_OD2X : const double = 0.0675;	
CELL2_3_OD2Y : const double = 0.001;	
CELL2_3_NWDMY : const double = 0.54;	
CELL2_3_DIODMY : const double = 0.001;	
CELL2_3_VAR : const double = 0.001;	
CELL2_3_DI_WPO : const double = 0.001;	
CELL2_3_DFBCX : const double = 0.0885;	
CELL2_3_DFBCY : const double = 0.107;	
CELL2_3_DFBC_ALLX : const double = 0.0885;	
CELL2_3_DFBC_ALLY : const double = 0.107;	
CELL2_3_CELL1X : const double = 0.048;	
CELL2_3_CELL1Y : const double = 0.072;	
CELL2_3_CELL2_1X : const double = 0.048;	
CELL2_3_CELL2_1Y : const double = 0.124;	
CELL2_3_CELL2_2X : const double = 0.048;	
CELL2_3_CELL2_2Y : const double = 0.124;	
CELL2_3_CELL2_3X : const double = 0.048;	
CELL2_3_CELL2_3Y : const double = 0.124;	
CELL2_3_CELL4_1X : const double = 0.048;	
CELL2_3_CELL4_1Y : const double = 0.124;	
CELL2_3_CELL4_2X : const double = 0.048;	
CELL2_3_CELL4_2Y : const double = 0.124;	
CELL2_3_CELL5_1X : const double = 0.0835;	
CELL2_3_CELL5_1Y : const double = 0.064;	
CELL2_3_CELL5_2X : const double = 0.0835;	
CELL2_3_CELL5_2Y : const double = 0.064;	
CELL2_3_CELL6_1X : const double = 0.09;	
CELL2_3_CELL6_1Y : const double = 0.124;	
CELL2_3_CELL6_2X : const double = 0.09;	
CELL2_3_CELL6_2Y : const double = 0.124;	
CELL2_3_CELL7X : const double = 0.018;	
CELL2_3_CELL7Y : const double = 0.055;	
CELL2_3_CELL8_1X : const double = 0.018;	
CELL2_3_CELL8_1Y : const double = 0.055;	
CELL2_3_CELL8_2X : const double = 0.0535;	
CELL2_3_CELL8_2Y : const double = 0.065;	


//****** Cell4_1
CELL4_1_FEOLBLK : const double = 0.135;	
CELL4_1_FB1_IN : const double = 0;	
CELL4_1_FB1X : const double = 0.024;	
CELL4_1_FB1Y : const double = 0.02;	
CELL4_1_FB2X : const double = 0.072;	
CELL4_1_FB2Y : const double = 0.023;	
CELL4_1_FBOTHERX : const double = 0.072;	
CELL4_1_FBOTHERY : const double = 0.052;	
CELL4_1_SRAMX : const double = 0.1165;	
CELL4_1_SRAMY : const double = 0.081;	
CELL4_1_ODX : const double = 0.135;	
CELL4_1_ODY : const double = 0.053;	
CELL4_1_CODHX : const double = 0.045;	
CELL4_1_CODHY : const double = 0.01;	
CELL4_1_CODVX : const double = 0.103;	
CELL4_1_CODVY : const double = 0.101;	
CELL4_1_DCODVX : const double = 0.103;	
CELL4_1_DCODVY : const double = 0.101;	
CELL4_1_CODBLK : const double = 0.001;	
CELL4_1_ODMMBX : const double = 0.135;	
CELL4_1_ODMMBY : const double = 0.114;	
CELL4_1_POX : const double = 0.0215;	
CELL4_1_POY : const double = 0.061;	
CELL4_1_SRDPOX : const double = 0.0215;	
CELL4_1_SRDPOY : const double = 0.061;	
CELL4_1_PO3X : const double = 0.0405;	
CELL4_1_PO3Y : const double = 0.076;	
CELL4_1_POLE8X : const double = 0.0405;	
CELL4_1_POLE8Y : const double = 0.076;	
CELL4_1_PO9X : const double = 0.0185;	
CELL4_1_PO9Y : const double = 0.061;	
CELL4_1_PO54X : const double = 0.0185;	
CELL4_1_PO54Y : const double = 0.071;	
CELL4_1_PO86X : const double = 0.0185;	
CELL4_1_PO86Y : const double = 0.071;	
CELL4_1_SR_DPO3X : const double = 0.0405;	
CELL4_1_SR_DPO3Y : const double = 0.076;	
CELL4_1_SR_DPOLE8X : const double = 0.0405;	
CELL4_1_SR_DPOLE8Y : const double = 0.076;	
CELL4_1_SR_DPO9X : const double = 0.0185;	
CELL4_1_SR_DPO9Y : const double = 0.061;	
CELL4_1_SR_DPO54X : const double = 0.0185;	
CELL4_1_SR_DPO54Y : const double = 0.071;	
CELL4_1_SR_DPO86X : const double = 0.0185;	
CELL4_1_SR_DPO86Y : const double = 0.071;	
CELL4_1_PO_P54 : const double = 0.001;	
CELL4_1_PO_P81 : const double = 0.001;	
CELL4_1_PO_P81_WPO : const double = 0.001;	
CELL4_1_PO_P57 : const double = 0.001;	
CELL4_1_CPOX : const double = 0.001;	
CELL4_1_CPOY : const double = 0.001;	
CELL4_1_CPO20X : const double = 0.001;	
CELL4_1_CPO20Y : const double = 0.001;	
CELL4_1_CPO22X : const double = 0.001;	
CELL4_1_CPO22Y : const double = 0.001;	
CELL4_1_CPO25X : const double = 0.001;	
CELL4_1_CPO25Y : const double = 0.001;	
CELL4_1_SR_DCPOX : const double = 0.001;	
CELL4_1_SR_DCPOY : const double = 0.001;	
CELL4_1_SR_DCPO20X : const double = 0.001;	
CELL4_1_SR_DCPO20Y : const double = 0.001;	
CELL4_1_SR_DCPO22X : const double = 0.001;	
CELL4_1_SR_DCPO22Y : const double = 0.001;	
CELL4_1_SR_DCPO25X : const double = 0.001;	
CELL4_1_SR_DCPO25Y : const double = 0.001;	
CELL4_1_MDX : const double = 0.0265;	
CELL4_1_MDY : const double = 0.041;	
CELL4_1_SRDMDX : const double = 0.0265;	
CELL4_1_SRDMDY : const double = 0.041;	
CELL4_1_MD16X : const double = 0.1065;	
CELL4_1_MD16Y : const double = 0.051;	
CELL4_1_MD30X : const double = 0.0365;	
CELL4_1_MD30Y : const double = 0.041;	
CELL4_1_SR_DMD16X : const double = 0.1065;	
CELL4_1_SR_DMD16Y : const double = 0.051;	
CELL4_1_SR_DMD30X : const double = 0.0365;	
CELL4_1_SR_DMD30Y : const double = 0.041;	
CELL4_1_CMDX : const double = 0.001;	
CELL4_1_CMDY : const double = 0.001;	
CELL4_1_SR_DCMDX : const double = 0.001;	
CELL4_1_SR_DCMDY : const double = 0.001;	
CELL4_1_NW_CENTERLINE : const double = 0.001;	
CELL4_1_NTNI : const double = 0.05;	
CELL4_1_OD2X : const double = 0;	
CELL4_1_OD2Y : const double = 0.02;	
CELL4_1_NWDMY : const double = 0.54;	
CELL4_1_DIODMY : const double = 0.001;	
CELL4_1_VAR : const double = 0.001;	
CELL4_1_DFBCX : const double = 0.0885;	
CELL4_1_DFBCY : const double = 0.061;	
CELL4_1_DFBC_ALLX : const double = 0.0885;	
CELL4_1_DFBC_ALLY : const double = 0.061;	
CELL4_1_CELL1X : const double = 0.048;	
CELL4_1_CELL1Y : const double = 0.072;	
CELL4_1_CELL2_1X : const double = 0.048;	
CELL4_1_CELL2_1Y : const double = 0.124;	
CELL4_1_CELL2_2X : const double = 0.048;	
CELL4_1_CELL2_2Y : const double = 0.124;	
CELL4_1_CELL2_3X : const double = 0.048;	
CELL4_1_CELL2_3Y : const double = 0.124;	
CELL4_1_CELL4_1X : const double = 0.048;	
CELL4_1_CELL4_1Y : const double = 0.124;	
CELL4_1_CELL4_2X : const double = 0.048;	
CELL4_1_CELL4_2Y : const double = 0.124;	
CELL4_1_CELL5_1X : const double = 0.001;	
CELL4_1_CELL5_1Y : const double = 0.011;	
CELL4_1_CELL5_2X : const double = 0.001;	
CELL4_1_CELL5_2Y : const double = 0.011;	
CELL4_1_CELL6_1X : const double = 0.09;	
CELL4_1_CELL6_1Y : const double = 0.124;	
CELL4_1_CELL6_2X : const double = 0.09;	
CELL4_1_CELL6_2Y : const double = 0.124;	
CELL4_1_CELL7X : const double = 0.035;	
CELL4_1_CELL7Y : const double = 0.041;	
CELL4_1_CELL8_1X : const double = 0.035;	
CELL4_1_CELL8_1Y : const double = 0.041;	
CELL4_1_CELL8_2X : const double = 0.075;	
CELL4_1_CELL8_2Y : const double = 0.041;	

//****** Cell4_2
CELL4_2_FEOLBLK : const double = 0.135;	
CELL4_2_FB1_IN : const double = 0;	
CELL4_2_FB1X : const double = 0.024;	
CELL4_2_FB1Y : const double = 0.02;	
CELL4_2_FB2X : const double = 0.072;	
CELL4_2_FB2Y : const double = 0.023;	
CELL4_2_FBOTHERX : const double = 0.072;	
CELL4_2_FBOTHERY : const double = 0.052;	
CELL4_2_SRAMX : const double = 0.1165;	
CELL4_2_SRAMY : const double = 0.081;	
CELL4_2_ODX : const double = 0.135;	
CELL4_2_ODY : const double = 0.053;	
CELL4_2_CODHX : const double = 0.045;	
CELL4_2_CODHY : const double = 0.01;	
CELL4_2_CODVX : const double = 0.103;	
CELL4_2_CODVY : const double = 0.101;	
CELL4_2_DCODVX : const double = 0.103;	
CELL4_2_DCODVY : const double = 0.101;	
CELL4_2_ODMMBX : const double = 0.135;	
CELL4_2_ODMMBY : const double = 0.114;	
CELL4_2_CODBLK : const double = 0.001;	
CELL4_2_POX : const double = 0.0215;	
CELL4_2_POY : const double = 0.061;	
CELL4_2_SRDPOX : const double = 0.0215;	
CELL4_2_SRDPOY : const double = 0.061;	
CELL4_2_PO3X : const double = 0.0405;	
CELL4_2_PO3Y : const double = 0.076;	
CELL4_2_POLE8X : const double = 0.0405;	
CELL4_2_POLE8Y : const double = 0.076;	
CELL4_2_PO9X : const double = 0.0215;	
CELL4_2_PO9Y : const double = 0.061;	
CELL4_2_PO54X : const double = 0.0185;	
CELL4_2_PO54Y : const double = 0.071;	
CELL4_2_PO86X : const double = 0.0185;	
CELL4_2_PO86Y : const double = 0.071;	
CELL4_2_SR_DPO3X : const double = 0.0405;	
CELL4_2_SR_DPO3Y : const double = 0.076;	
CELL4_2_SR_DPOLE8X : const double = 0.0405;	
CELL4_2_SR_DPOLE8Y : const double = 0.076;	
CELL4_2_SR_DPO9X : const double = 0.0215;	
CELL4_2_SR_DPO9Y : const double = 0.061;	
CELL4_2_SR_DPO54X : const double = 0.0185;	
CELL4_2_SR_DPO54Y : const double = 0.071;	
CELL4_2_SR_DPO86X : const double = 0.0185;	
CELL4_2_SR_DPO86Y : const double = 0.071;	
CELL4_2_PO_P54 : const double = 0.001;	
CELL4_2_PO_P81 : const double = 0.001;	
CELL4_2_PO_P81_WPO : const double = 0.001;	
CELL4_2_PO_P57 : const double = 0.001;	
CELL4_2_CPOX : const double = 0.001;	
CELL4_2_CPOY : const double = 0.001;	
CELL4_2_SR_DCPOX : const double = 0.001;	
CELL4_2_SR_DCPOY : const double = 0.001;	
CELL4_2_CPO20X : const double = 0.001;	
CELL4_2_CPO20Y : const double = 0.001;	
CELL4_2_CPO22X : const double = 0.001;	
CELL4_2_CPO22Y : const double = 0.001;	
CELL4_2_CPO25X : const double = 0.001;	
CELL4_2_CPO25Y : const double = 0.001;	
CELL4_2_SR_DCPO20X : const double = 0.001;	
CELL4_2_SR_DCPO20Y : const double = 0.001;	
CELL4_2_SR_DCPO22X : const double = 0.001;	
CELL4_2_SR_DCPO22Y : const double = 0.001;	
CELL4_2_SR_DCPO25X : const double = 0.001;	
CELL4_2_SR_DCPO25Y : const double = 0.001;	
CELL4_2_MDX : const double = 0.0265;	
CELL4_2_MDY : const double = 0.041;	
CELL4_2_SRDMDX : const double = 0.0265;	
CELL4_2_SRDMDY : const double = 0.041;	
CELL4_2_MD16X : const double = 0.1065;	
CELL4_2_MD16Y : const double = 0.051;	
CELL4_2_MD30X : const double = 0.0365;	
CELL4_2_MD30Y : const double = 0.041;	
CELL4_2_SR_DMD16X : const double = 0.1065;	
CELL4_2_SR_DMD16Y : const double = 0.051;	
CELL4_2_SR_DMD30X : const double = 0.0365;	
CELL4_2_SR_DMD30Y : const double = 0.041;	
CELL4_2_CMDX : const double = 0.001;	
CELL4_2_CMDY : const double = 0.001;	
CELL4_2_SR_DCMDX : const double = 0.001;	
CELL4_2_SR_DCMDY : const double = 0.001;	
CELL4_2_NW_CENTERLINE : const double = 0.001;	
CELL4_2_NTNI : const double = 0.05;	
CELL4_2_OD2X : const double = 0;	
CELL4_2_OD2Y : const double = 0.02;	
CELL4_2_NWDMY : const double = 0.54;	
CELL4_2_DIODMY : const double = 0.001;	
CELL4_2_VAR : const double = 0.001;	
CELL4_2_DFBCX : const double = 0.09;	
CELL4_2_DFBCY : const double = 0.061;	
CELL4_2_DFBC_ALLX : const double = 0.09;	
CELL4_2_DFBC_ALLY : const double = 0.061;	
CELL4_2_CELL1X : const double = 0.048;	
CELL4_2_CELL1Y : const double = 0.072;	
CELL4_2_CELL2_1X : const double = 0.048;	
CELL4_2_CELL2_1Y : const double = 0.124;	
CELL4_2_CELL2_2X : const double = 0.048;	
CELL4_2_CELL2_2Y : const double = 0.124;	
CELL4_2_CELL2_3X : const double = 0.048;	
CELL4_2_CELL2_3Y : const double = 0.124;	
CELL4_2_CELL4_1X : const double = 0.048;	
CELL4_2_CELL4_1Y : const double = 0.124;	
CELL4_2_CELL4_2X : const double = 0.048;	
CELL4_2_CELL4_2Y : const double = 0.124;	
CELL4_2_CELL5_1X : const double = 0.001;	
CELL4_2_CELL5_1Y : const double = 0.011;	
CELL4_2_CELL5_2X : const double = 0.001;	
CELL4_2_CELL5_2Y : const double = 0.011;	
CELL4_2_CELL6_1X : const double = 0.09;	
CELL4_2_CELL6_1Y : const double = 0.124;	
CELL4_2_CELL6_2X : const double = 0.09;	
CELL4_2_CELL6_2Y : const double = 0.124;	
CELL4_2_CELL7X : const double = 0.035;	
CELL4_2_CELL7Y : const double = 0.041;	
CELL4_2_CELL8_1X : const double = 0.035;	
CELL4_2_CELL8_1Y : const double = 0.041;	
CELL4_2_CELL8_2X : const double = 0.075;	
CELL4_2_CELL8_2Y : const double = 0.041;	

//****** Cell5_1
CELL5_1_FEOLBLKX : const double = 0.132;	
CELL5_1_FEOLBLKY : const double = 0.1;	
CELL5_1_CHIPX : const double = 0.090;	
CELL5_1_CHIPY : const double = 0.088;	
CELL5_1_IPX : const double = 0.045;	
CELL5_1_IPY : const double = 0.025;	
CELL5_1_FB2 : const double = 0.001;	
CELL5_1_FBOTHER : const double = 0.1;	
CELL5_1_SRAM : const double = 0.1;	
CELL5_1_OD : const double = 0.1;	
CELL5_1_POX : const double = 0.08;	
CELL5_1_POY : const double = 0.05;	
CELL5_1_SRDPOX : const double = 0.08;	
CELL5_1_SRDPOY : const double = 0.05;	
CELL5_1_POOD2X : const double = 0.08;	
CELL5_1_POOD2Y : const double = 0.094;	
CELL5_1_SR_DPOOD2X : const double = 0.08;	
CELL5_1_SR_DPOOD2Y : const double = 0.094;	
CELL5_1_PO54OD2X : const double = 0.08;	
CELL5_1_PO54OD2Y : const double = 0.094;	
CELL5_1_SR_DPO54OD2X : const double = 0.08;	
CELL5_1_SR_DPO54OD2Y : const double = 0.094;	
CELL5_1_PO86OD2X : const double = 0.08;	
CELL5_1_PO86OD2Y : const double = 0.094;	
CELL5_1_SR_DPO86OD2X : const double = 0.08;	
CELL5_1_SR_DPO86OD2Y : const double = 0.094;	
CELL5_1_PO3X : const double = 0.132;	
CELL5_1_PO3Y : const double = 0.1;	
CELL5_1_POLE8X : const double = 0.132;	
CELL5_1_POLE8Y : const double = 0.1;	
CELL5_1_PO9X : const double = 0.08;	
CELL5_1_PO9Y : const double = 0.05;	
CELL5_1_PO54X : const double = 0.08;	
CELL5_1_PO54Y : const double = 0.05;	
CELL5_1_PO86X : const double = 0.08;	
CELL5_1_PO86Y : const double = 0.05;	
CELL5_1_SR_DPO3X : const double = 0.132;	
CELL5_1_SR_DPO3Y : const double = 0.1;	
CELL5_1_SR_DPOLE8X : const double = 0.132;	
CELL5_1_SR_DPOLE8Y : const double = 0.1;	
CELL5_1_SR_DPO9X : const double = 0.08;	
CELL5_1_SR_DPO9Y : const double = 0.05;	
CELL5_1_SR_DPO54X : const double = 0.08;	
CELL5_1_SR_DPO54Y : const double = 0.05;	
CELL5_1_SR_DPO86X : const double = 0.08;	
CELL5_1_SR_DPO86Y : const double = 0.05;	
CELL5_1_PO_P54 : const double = 0.001;	
CELL5_1_PO_P81 : const double = 0.001;	
CELL5_1_PO_P81_WPO : const double = 0.001;	
CELL5_1_PO_P57 : const double = 0.001;	
CELL5_1_CPOX : const double = 0.042;	
CELL5_1_CPOY : const double = 0.042;	
CELL5_1_SRDCPOX : const double = 0.042;	
CELL5_1_SRDCPOY : const double = 0.042;	
CELL5_1_CPO20X : const double = 0.042;	
CELL5_1_CPO20Y : const double = 0.042;	
CELL5_1_CPO22X : const double = 0.061;	
CELL5_1_CPO22Y : const double = 0.061;	
CELL5_1_CPO25X : const double = 0.042;	
CELL5_1_CPO25Y : const double = 0.042;	
CELL5_1_SR_DCPO20X : const double = 0.042;	
CELL5_1_SR_DCPO20Y : const double = 0.042;	
CELL5_1_SR_DCPO22X : const double = 0.061;	
CELL5_1_SR_DCPO22Y : const double = 0.061;	
CELL5_1_SR_DCPO25X : const double = 0.042;	
CELL5_1_SR_DCPO25Y : const double = 0.042;	
CELL5_1_MDX : const double = 0.025;	
CELL5_1_MDY : const double = 0.047;	
CELL5_1_SRDMDX : const double = 0.025;	
CELL5_1_SRDMDY : const double = 0.047;	
CELL5_1_MD16X : const double = 0.025;	
CELL5_1_MD16Y : const double = 0.047;	
CELL5_1_MD30X : const double = 0.025;	
CELL5_1_MD30Y : const double = 0.047;	
CELL5_1_SR_DMD16X : const double = 0.025;	
CELL5_1_SR_DMD16Y : const double = 0.047;	
CELL5_1_SR_DMD30X : const double = 0.025;	
CELL5_1_SR_DMD30Y : const double = 0.047;	
CELL5_1_CMD : const double = 0.07;	
CELL5_1_SR_DCMD : const double = 0.07;	
CELL5_1_NW_CENTERLINE : const double = 0.001;	
CELL5_1_NTNI : const double = 0.126;	
CELL5_1_OD2 : const double = 0.001;	
CELL5_1_NWDMY : const double = 0.001;	
CELL5_1_DIODMY : const double = 0.001;	
CELL5_1_VAR_IN : const double = 0.035;	
CELL5_1_VAR_OUT : const double = 0.001;	
CELL5_1_HIADMY : const double = 0.001;	
CELL5_1_DFBCY : const double = 0.12;	
CELL5_1_DFBC_ALLX : const double = 0.11;
CELL5_1_PP_SEALRING : const double = 0.001;
CELL5_1_CCTE_SR_PP : const double = 0.2;
CELL5_1_CELL1X : const double = 0.0355;	
CELL5_1_CELL1Y : const double = 0.024;	
CELL5_1_CELL2_1X : const double = 0.0835;	
CELL5_1_CELL2_1Y : const double = 0.076;	
CELL5_1_CELL2_2X : const double = 0.0835;	
CELL5_1_CELL2_2Y : const double = 0.078;	
CELL5_1_CELL2_3X : const double = 0.0835;	
CELL5_1_CELL2_3Y : const double = 0.064;	
CELL5_1_CELL4_1X : const double = 0.001;	
CELL5_1_CELL4_1Y : const double = 0.011;	
CELL5_1_CELL4_2X : const double = 0.001;	
CELL5_1_CELL4_2Y : const double = 0.011;	
CELL5_1_CELL5_1X : const double = 0.09;	
CELL5_1_CELL5_1Y : const double = 0.05;	
CELL5_1_CELL5_2X : const double = 0.09;	
CELL5_1_CELL5_2Y : const double = 0.05;	
CELL5_1_CELL6_1X : const double = 0.0215;	
CELL5_1_CELL6_1Y : const double = 0.034;	
CELL5_1_CELL6_2X : const double = 0.0215;	
CELL5_1_CELL6_2Y : const double = 0.045;	
CELL5_1_CELL7X : const double = 0.025;	
CELL5_1_CELL7Y : const double = 0.047;	
CELL5_1_CELL8_1X : const double = 0.025;	
CELL5_1_CELL8_1Y : const double = 0.047;	
CELL5_1_CELL8_2X : const double = 0.1;	
CELL5_1_CELL8_2Y : const double = 0.047;	

//****** Cell5_2
CELL5_2_FEOLBLKX : const double = 0.132;	
CELL5_2_FEOLBLKY : const double = 0.1;	
CELL5_2_CHIPX : const double = 0.090;	
CELL5_2_CHIPY : const double = 0.088;	
CELL5_2_IPX : const double = 0.045;	
CELL5_2_IPY : const double = 0.025;	
CELL5_2_FB2 : const double = 0.001;	
CELL5_2_FBOTHER : const double = 0.1;	
CELL5_2_SRAM : const double = 0.1;	
CELL5_2_OD : const double = 0.1;	
CELL5_2_POX : const double = 0.08;	
CELL5_2_POY : const double = 0.05;	
CELL5_2_SRDPOX : const double = 0.08;	
CELL5_2_SRDPOY : const double = 0.05;	
CELL5_2_PO3X : const double = 0.132;	
CELL5_2_PO3Y : const double = 0.1;	
CELL5_2_POLE8X : const double = 0.132;	
CELL5_2_POLE8Y : const double = 0.1;	
CELL5_2_PO9X : const double = 0.08;	
CELL5_2_PO9Y : const double = 0.05;	
CELL5_2_PO54X : const double = 0.08;	
CELL5_2_PO54Y : const double = 0.05;	
CELL5_2_PO86X : const double = 0.19;	
CELL5_2_PO86Y : const double = 0.05;	
CELL5_2_SR_DPO3X : const double = 0.132;	
CELL5_2_SR_DPO3Y : const double = 0.1;	
CELL5_2_SR_DPOLE8X : const double = 0.132;	
CELL5_2_SR_DPOLE8Y : const double = 0.1;	
CELL5_2_SR_DPO9X : const double = 0.08;	
CELL5_2_SR_DPO9Y : const double = 0.05;	
CELL5_2_SR_DPO54X : const double = 0.08;	
CELL5_2_SR_DPO54Y : const double = 0.05;	
CELL5_2_SR_DPO86X : const double = 0.19;	
CELL5_2_SR_DPO86Y : const double = 0.05;	
CELL5_2_PO9OD2X : const double = 0.08;	
CELL5_2_PO9OD2Y : const double = 0.094;	
CELL5_2_PO54OD2X : const double = 0.08;	
CELL5_2_PO54OD2Y : const double = 0.094;	
CELL5_2_PO86OD2X : const double = 0.19;	
CELL5_2_PO86OD2Y : const double = 0.094;	
CELL5_2_SR_DPO9OD2X : const double = 0.08;	
CELL5_2_SR_DPO9OD2Y : const double = 0.094;	
CELL5_2_SR_DPO54OD2X : const double = 0.08;	
CELL5_2_SR_DPO54OD2Y : const double = 0.094;	
CELL5_2_SR_DPO86OD2X : const double = 0.19;	
CELL5_2_SR_DPO86OD2Y : const double = 0.094;	
CELL5_2_PO_P54 : const double = 0.001;	
CELL5_2_PO_P81 : const double = 0.001;	
CELL5_2_PO_P81_WPO : const double = 0.001;	
CELL5_2_PO_P57 : const double = 0.001;	
CELL5_2_CPOX : const double = 0.042;	
CELL5_2_CPOY : const double = 0.042;	
CELL5_2_SRDCPOX : const double = 0.042;	
CELL5_2_SRDCPOY : const double = 0.042;	
CELL5_2_CPO20X : const double = 0.042;	
CELL5_2_CPO20Y : const double = 0.042;	
CELL5_2_CPO22X : const double = 0.061;	
CELL5_2_CPO22Y : const double = 0.061;	
CELL5_2_CPO25X : const double = 0.042;	
CELL5_2_CPO25Y : const double = 0.042;	
CELL5_2_SR_DCPO20X : const double = 0.042;	
CELL5_2_SR_DCPO20Y : const double = 0.042;	
CELL5_2_SR_DCPO22X : const double = 0.061;	
CELL5_2_SR_DCPO22Y : const double = 0.061;	
CELL5_2_SR_DCPO25X : const double = 0.042;	
CELL5_2_SR_DCPO25Y : const double = 0.042;	
CELL5_2_MDX : const double = 0.025;	
CELL5_2_MDY : const double = 0.047;	
CELL5_2_SRDMDX : const double = 0.025;	
CELL5_2_SRDMDY : const double = 0.047;	
CELL5_2_MD16X : const double = 0.025;	
CELL5_2_MD16Y : const double = 0.047;	
CELL5_2_MD30X : const double = 0.025;	
CELL5_2_MD30Y : const double = 0.047;	
CELL5_2_SR_DMD16X : const double = 0.025;	
CELL5_2_SR_DMD16Y : const double = 0.047;	
CELL5_2_SR_DMD30X : const double = 0.025;	
CELL5_2_SR_DMD30Y : const double = 0.047;	
CELL5_2_CMD : const double = 0.07;	
CELL5_2_SR_DCMD : const double = 0.07;	
CELL5_2_NW_CENTERLINE : const double = 0.001;	
CELL5_2_NTNI : const double = 0.126;	
CELL5_2_OD2 : const double = 0.001;	
CELL5_2_NWDMY : const double = 0.001;	
CELL5_2_DIODMY : const double = 0.001;	
CELL5_2_VAR_IN : const double = 0.035;	
CELL5_2_VAR_OUT : const double = 0.001;	
CELL5_2_HIADMY : const double = 0.001;	
CELL5_2_DFBCY : const double = 0.12;	
CELL5_2_DFBC_ALLX : const double = 0.11;
CELL5_2_PP_SEALRING : const double = 0.001;
CELL5_2_CCTE_SR_PP : const double = 0.2;
CELL5_2_CELL1X : const double = 0.0355;	
CELL5_2_CELL1Y : const double = 0.024;	
CELL5_2_CELL2_1X : const double = 0.0835;	
CELL5_2_CELL2_1Y : const double = 0.076;	
CELL5_2_CELL2_2X : const double = 0.0835;	
CELL5_2_CELL2_2Y : const double = 0.078;	
CELL5_2_CELL2_3X : const double = 0.0835;	
CELL5_2_CELL2_3Y : const double = 0.064;	
CELL5_2_CELL4_1X : const double = 0.001;	
CELL5_2_CELL4_1Y : const double = 0.011;	
CELL5_2_CELL4_2X : const double = 0.001;	
CELL5_2_CELL4_2Y : const double = 0.011;	
CELL5_2_CELL5_1X : const double = 0.09;	
CELL5_2_CELL5_1Y : const double = 0.05;	
CELL5_2_CELL5_2X : const double = 0.19;	
CELL5_2_CELL5_2Y : const double = 0.05;	
CELL5_2_CELL6_1X : const double = 0.0215;	
CELL5_2_CELL6_1Y : const double = 0.034;	
CELL5_2_CELL6_2X : const double = 0.0215;	
CELL5_2_CELL6_2Y : const double = 0.045;	
CELL5_2_CELL7X : const double = 0.025;	
CELL5_2_CELL7Y : const double = 0.047;	
CELL5_2_CELL8_1X : const double = 0.025;	
CELL5_2_CELL8_1Y : const double = 0.047;	
CELL5_2_CELL8_2X : const double = 0.1;	
CELL5_2_CELL8_2Y : const double = 0.047;	

//****** Cell6_1
CELL6_1_CHIPX : const double = 0.45;	
CELL6_1_CHIPY : const double = 0.338;	
CELL6_1_IPX : const double = 0.045;	
CELL6_1_IPY : const double = 0.025;	
CELL6_1_FEOLBLK : const double = 0.135;	
CELL6_1_FB1X : const double = 0.0675;	
CELL6_1_FB1Y : const double = 0.052;	
CELL6_1_FB2_IN : const double = 0;	
CELL6_1_FB2X : const double = 0.0675;	
CELL6_1_FB2Y : const double = 0.159;	
CELL6_1_FBOTHERX : const double = 0.0675;	
CELL6_1_FBOTHERY : const double = 0.081;	
CELL6_1_SRAMX : const double = 0.5775;	
CELL6_1_SRAMY : const double = 0.677;	
CELL6_1_ODX : const double = 0.135;	
CELL6_1_ODY : const double = 0.028;	
CELL6_1_CODHX : const double = 0.045;	
CELL6_1_CODHY : const double = 0.001;	
CELL6_1_CODVX : const double = 0.1455;	
CELL6_1_CODVY : const double = 0.116;	
CELL6_1_CODBLK : const double = 0.001;	
CELL6_1_ODMMBX : const double = 0.135;	
CELL6_1_ODMMBY : const double = 0.062;	
CELL6_1_POX : const double = 0.0435;	
CELL6_1_POY : const double = 0.034;	
CELL6_1_SRDPOX : const double = 0.0435;	
CELL6_1_SRDPOY : const double = 0.034;	
CELL6_1_PO3X : const double = 0.0435;	
CELL6_1_PO3Y : const double = 0.034;	
CELL6_1_POLE8X : const double = 0.0435;	
CELL6_1_POLE8Y : const double = 0.034;	
CELL6_1_PO9X : const double = 0.0435;	
CELL6_1_PO9Y : const double = 0.034;	
CELL6_1_PO54X : const double = 0.0815;	
CELL6_1_PO54Y : const double = 0.064;	
CELL6_1_PO86X : const double = 0.0815;	
CELL6_1_PO86Y : const double = 0.064;	
CELL6_1_SR_DPO3X : const double = 0.0435;	
CELL6_1_SR_DPO3Y : const double = 0.034;	
CELL6_1_SR_DPOLE8X : const double = 0.0435;	
CELL6_1_SR_DPOLE8Y : const double = 0.034;	
CELL6_1_SR_DPO9X : const double = 0.0435;	
CELL6_1_SR_DPO9Y : const double = 0.034;	
CELL6_1_SR_DPO54X : const double = 0.0815;	
CELL6_1_SR_DPO54Y : const double = 0.064;	
CELL6_1_SR_DPO86X : const double = 0.0815;	
CELL6_1_SR_DPO86Y : const double = 0.064;	
CELL6_1_PO_P54 : const double = 0.001;	
CELL6_1_PO_P81 : const double = 0.001;	
CELL6_1_PO_P81_WPO : const double = 0.001;	
CELL6_1_PO_P57 : const double = 0.001;	
CELL6_1_CPOX : const double = 0.052;	
CELL6_1_CPOY : const double = 0.001;	
CELL6_1_SR_DCPOX : const double = 0.052;	
CELL6_1_SR_DCPOY : const double = 0.001;	
CELL6_1_SRDCPOX : const double = 0.052;	
CELL6_1_SRDCPOY : const double = 0.001;	
CELL6_1_CPO20X : const double = 0.052;	
CELL6_1_CPO20Y : const double = 0.001;	
CELL6_1_CPO22X : const double = 0.052;	
CELL6_1_CPO22Y : const double = 0.001;	
CELL6_1_CPO25X : const double = 0.052;	
CELL6_1_CPO25Y : const double = 0.001;	
CELL6_1_SR_DCPO20X : const double = 0.052;	
CELL6_1_SR_DCPO20Y : const double = 0.001;	
CELL6_1_SR_DCPO22X : const double = 0.052;	
CELL6_1_SR_DCPO22Y : const double = 0.001;	
CELL6_1_SR_DCPO25X : const double = 0.052;	
CELL6_1_SR_DCPO25Y : const double = 0.001;	
CELL6_1_MDX : const double = 0.0285;	
CELL6_1_MDY : const double = 0.003;	
CELL6_1_SRDMDX : const double = 0.0285;	
CELL6_1_SRDMDY : const double = 0.003;	
CELL6_1_MD16X : const double = 0.1085;	
CELL6_1_MD16Y : const double = 0.013;	
CELL6_1_MD30X : const double = 0.029;	
CELL6_1_MD30Y : const double = 0.003;	
CELL6_1_SR_DMD16X : const double = 0.1085;	
CELL6_1_SR_DMD16Y : const double = 0.013;	
CELL6_1_SR_DMD30X : const double = 0.029;	
CELL6_1_SR_DMD30Y : const double = 0.003;	
CELL6_1_CMDX : const double = 0.001;	
CELL6_1_CMDY : const double = 0.001;	
CELL6_1_SR_DCMDX : const double = 0.001;	
CELL6_1_SR_DCMDY : const double = 0.001;	
CELL6_1_NW_CENTERLINE : const double = 0.001;	
CELL6_1_NTNI : const double = 0.05;	
CELL6_1_OD2X : const double = 0.0555;	
CELL6_1_OD2Y : const double = 0.011;	
CELL6_1_NWDMY : const double = 0.54;	
CELL6_1_DIODMY : const double = 0.001;	
CELL6_1_CELL1X : const double = 0.09;	
CELL6_1_CELL1Y : const double = 0.072;	
CELL6_1_CELL2_1X : const double = 0.09;	
CELL6_1_CELL2_1Y : const double = 0.124;	
CELL6_1_CELL2_2X : const double = 0.09;	
CELL6_1_CELL2_2Y : const double = 0.124;	
CELL6_1_CELL2_3X : const double = 0.09;	
CELL6_1_CELL2_3Y : const double = 0.124;	
CELL6_1_CELL4_1X : const double = 0.09;	
CELL6_1_CELL4_1Y : const double = 0.124;	
CELL6_1_CELL4_2X : const double = 0.09;	
CELL6_1_CELL4_2Y : const double = 0.124;	
CELL6_1_CELL5_1X : const double = 0.0215;	
CELL6_1_CELL5_1Y : const double = 0.034;	
CELL6_1_CELL5_2X : const double = 0.0215;	
CELL6_1_CELL5_2Y : const double = 0.034;	
CELL6_1_CELL6_1X : const double = 0.045;	
CELL6_1_CELL6_1Y : const double = 0.044;	
CELL6_1_CELL6_2X : const double = 0.045;	
CELL6_1_CELL6_2Y : const double = 0.03;	
CELL6_1_CELL7X : const double = 0.0385;	
CELL6_1_CELL7Y : const double = 0.003;	
CELL6_1_CELL8_1X : const double = 0.0385;	
CELL6_1_CELL8_1Y : const double = 0.003;	
CELL6_1_CELL8_2X : const double = 0.0765;	
CELL6_1_CELL8_2Y : const double = 0.003;	

//****** Cell6_2
CELL6_2_CHIPX : const double = 0.45;	
CELL6_2_CHIPY : const double = 0.338;	
CELL6_2_IPX : const double = 0.045;	
CELL6_2_IPY : const double = 0.025;	
CELL6_2_FEOLBLK : const double = 0.135;	
CELL6_2_FB1X : const double = 0.0675;	
CELL6_2_FB1Y : const double = 0.052;	
CELL6_2_FB2_IN : const double = 0;	
CELL6_2_FB2X : const double = 0.0675;	
CELL6_2_FB2Y : const double = 0.141;	
CELL6_2_FBOTHERX : const double = 0.0675;	
CELL6_2_FBOTHERY : const double = 0.063;	
CELL6_2_SRAMX : const double = 0.5775;	
CELL6_2_SRAMY : const double = 0.659;	
CELL6_2_ODX : const double = 0.135;	
CELL6_2_ODY : const double = 0.028;	
CELL6_2_CODHX : const double = 0.045;	
CELL6_2_CODHY : const double = 0.011;	
CELL6_2_CODVX : const double = 0.1455;	
CELL6_2_CODVY : const double = 0.116;	
CELL6_2_CODBLK : const double = 0.001;	
CELL6_2_ODMMBX : const double = 0.135;	
CELL6_2_ODMMBY : const double = 0.062;	
CELL6_2_POX : const double = 0.0435;	
CELL6_2_POY : const double = 0.045;	
CELL6_2_SRDPOX : const double = 0.0435;	
CELL6_2_SRDPOY : const double = 0.045;	
CELL6_2_PO3X : const double = 0.0435;	
CELL6_2_PO3Y : const double = 0.055;	
CELL6_2_POLE8X : const double = 0.0435;	
CELL6_2_POLE8Y : const double = 0.055;	
CELL6_2_PO9X : const double = 0.0435;	
CELL6_2_PO9Y : const double = 0.045;	
CELL6_2_PO54X : const double = 0.0815;	
CELL6_2_PO54Y : const double = 0.085;	
CELL6_2_PO86X : const double = 0.0815;	
CELL6_2_PO86Y : const double = 0.085;	
CELL6_2_SR_DPO3X : const double = 0.0435;	
CELL6_2_SR_DPO3Y : const double = 0.055;	
CELL6_2_SR_DPOLE8X : const double = 0.0435;	
CELL6_2_SR_DPOLE8Y : const double = 0.055;	
CELL6_2_SR_DPO9X : const double = 0.0435;	
CELL6_2_SR_DPO9Y : const double = 0.045;	
CELL6_2_SR_DPO54X : const double = 0.0815;	
CELL6_2_SR_DPO54Y : const double = 0.085;	
CELL6_2_SR_DPO86X : const double = 0.0815;	
CELL6_2_SR_DPO86Y : const double = 0.085;	
CELL6_2_PO_P54 : const double = 0.001;	
CELL6_2_PO_P81 : const double = 0.001;	
CELL6_2_PO_P81_WPO : const double = 0.001;	
CELL6_2_PO_P57 : const double = 0.001;	
CELL6_2_CPOX : const double = 0.001;	
CELL6_2_CPOY : const double = 0.001;	
CELL6_2_SR_DCPOX : const double = 0.001;	
CELL6_2_SR_DCPOY : const double = 0.001;	
CELL6_2_CPO20X : const double = 0.001;	
CELL6_2_CPO20Y : const double = 0.001;	
CELL6_2_CPO22X : const double = 0.001;	
CELL6_2_CPO22Y : const double = 0.001;	
CELL6_2_CPO25X : const double = 0.001;	
CELL6_2_CPO25Y : const double = 0.001;	
CELL6_2_SR_DCPO20X : const double = 0.001;	
CELL6_2_SR_DCPO20Y : const double = 0.001;	
CELL6_2_SR_DCPO22X : const double = 0.001;	
CELL6_2_SR_DCPO22Y : const double = 0.001;	
CELL6_2_SR_DCPO25X : const double = 0.001;	
CELL6_2_SR_DCPO25Y : const double = 0.001;	
CELL6_2_MDX : const double = 0.0285;	
CELL6_2_MDY : const double = 0.035;	
CELL6_2_SRDMDX : const double = 0.0285;	
CELL6_2_SRDMDY : const double = 0.035;	
CELL6_2_MD16X : const double = 0.1085;	
CELL6_2_MD16Y : const double = 0.045;	
CELL6_2_MD30X : const double = 0.029;	
CELL6_2_MD30Y : const double = 0.035;	
CELL6_2_SR_DMD16X : const double = 0.1085;	
CELL6_2_SR_DMD16Y : const double = 0.045;	
CELL6_2_SR_DMD30X : const double = 0.029;	
CELL6_2_SR_DMD30Y : const double = 0.035;	
CELL6_2_CMD : const double = 0.001;	
CELL6_2_SR_DCMD : const double = 0.001;	
CELL6_2_NW_CENTERLINE : const double = 0.001;	
CELL6_2_NTNI : const double = 0.05;	
CELL6_2_OD2X : const double = 0.0555;	
CELL6_2_OD2Y : const double = 0.011;	
CELL6_2_NWDMY : const double = 0.54;	
CELL6_2_DIODMY : const double = 0.001;	
CELL6_2_CELL1X : const double = 0.09;	
CELL6_2_CELL1Y : const double = 0.072;	
CELL6_2_CELL2_1X : const double = 0.09;	
CELL6_2_CELL2_1Y : const double = 0.124;	
CELL6_2_CELL2_2X : const double = 0.09;	
CELL6_2_CELL2_2Y : const double = 0.124;	
CELL6_2_CELL2_3X : const double = 0.09;	
CELL6_2_CELL2_3Y : const double = 0.124;	
CELL6_2_CELL4_1X : const double = 0.09;	
CELL6_2_CELL4_1Y : const double = 0.124;	
CELL6_2_CELL4_2X : const double = 0.09;	
CELL6_2_CELL4_2Y : const double = 0.124;	
CELL6_2_CELL5_1X : const double = 0.0215;	
CELL6_2_CELL5_1Y : const double = 0.045;	
CELL6_2_CELL5_2X : const double = 0.0215;	
CELL6_2_CELL5_2Y : const double = 0.045;	
CELL6_2_CELL6_1X : const double = 0.045;	
CELL6_2_CELL6_1Y : const double = 0.03;	
CELL6_2_CELL6_2X : const double = 0.045;	
CELL6_2_CELL6_2Y : const double = 0.03;	
CELL6_2_CELL7X : const double = 0.0385;	
CELL6_2_CELL7Y : const double = 0.035;	
CELL6_2_CELL8_1X : const double = 0.0385;	
CELL6_2_CELL8_1Y : const double = 0.035;	
CELL6_2_CELL8_2X : const double = 0.0765;	
CELL6_2_CELL8_2Y : const double = 0.035;	

//****** Cell7
CELL7_CHIPX : const double = 0.090;	
CELL7_CHIPY : const double = 0.088;	
CELL7_IPX : const double = 0.03;	
CELL7_IPY : const double = 0.12;	
CELL7_FEOLBLKX : const double = 0.13;	
CELL7_FEOLBLKY : const double = 0.12;	
CELL7_FBOTHER : const double = 0.1;	
CELL7_SRAM : const double = 0.15;	
CELL7_ODX : const double = 0.03;	
CELL7_ODY : const double = 0.096;	
CELL7_SR_DODX : const double = 0.03;	
CELL7_SR_DODY : const double = 0.096;	
CELL7_POX : const double = 0.047;	
CELL7_POY : const double = 0.047;	
CELL7_SRDPOX : const double = 0.047;	
CELL7_SRDPOY : const double = 0.047;	
CELL7_PO3X : const double = 0.047;	
CELL7_PO3Y : const double = 0.1;	
CELL7_POLE8X : const double = 0.047;	
CELL7_POLE8Y : const double = 0.1;	
CELL7_PO9X : const double = 0.047;	
CELL7_PO9Y : const double = 0.047;	
CELL7_PO54X : const double = 0.047;	
CELL7_PO54Y : const double = 0.047;	
CELL7_PO86X : const double = 0.047;	
CELL7_PO86Y : const double = 0.047;	
CELL7_SR_DPO3X : const double = 0.047;	
CELL7_SR_DPO3Y : const double = 0.1;	
CELL7_SR_DPOLE8X : const double = 0.047;	
CELL7_SR_DPOLE8Y : const double = 0.1;	
CELL7_SR_DPO9X : const double = 0.047;	
CELL7_SR_DPO9Y : const double = 0.047;	
CELL7_SR_DPO54X : const double = 0.047;	
CELL7_SR_DPO54Y : const double = 0.047;	
CELL7_SR_DPO86X : const double = 0.047;	
CELL7_SR_DPO86Y : const double = 0.047;	
CELL7_PO_P54 : const double = 0.001;	
CELL7_PO_P81 : const double = 0.001;	
CELL7_PO_P81_WPO : const double = 0.001;	
CELL7_PO_P57 : const double = 0.001;	
CELL7_MDX : const double = 0.07;	
CELL7_MDY : const double = 0.11;	
CELL7_SRDMDX : const double = 0.07;	
CELL7_SRDMDY : const double = 0.11;	
CELL7_MD16X : const double = 0.13;	
CELL7_MD16Y : const double = 0.12;	
CELL7_MD30X : const double = 0.07;	
CELL7_MD30Y : const double = 0.11;	
CELL7_SR_DMD16X : const double = 0.13;	
CELL7_SR_DMD16Y : const double = 0.12;	
CELL7_SR_DMD30X : const double = 0.07;	
CELL7_SR_DMD30Y : const double = 0.11;	
CELL7_CMD : const double = 0.03;	
CELL7_SR_DCMD : const double = 0.03;	
CELL7_NW_CENTERLINE : const double = 0.001;	
CELL7_NTNI : const double = 0.126;	
CELL7_OD2 : const double = 0.001;	
CELL7_NWDMY : const double = 0.001;	
CELL7_INDMY : const double = 0.005;	
CELL7_DIODMY : const double = 0.001;	
CELL7_VAR : const double = 0.001;	
CELL7_HIADMY : const double = 0.001;	
CELL7_CELL1X : const double = 0.018;	
CELL7_CELL1Y : const double = 0.014;	
CELL7_CELL2_1X : const double = 0.018;	
CELL7_CELL2_1Y : const double = 0.042;	
CELL7_CELL2_2X : const double = 0.018;	
CELL7_CELL2_2Y : const double = 0.068;	
CELL7_CELL2_3X : const double = 0.018;	
CELL7_CELL2_3Y : const double = 0.055;	
CELL7_CELL4_1X : const double = 0.035;	
CELL7_CELL4_1Y : const double = 0.041;	
CELL7_CELL4_2X : const double = 0.035;	
CELL7_CELL4_2Y : const double = 0.041;	
CELL7_CELL5_1X : const double = 0.025;	
CELL7_CELL5_1Y : const double = 0.047;	
CELL7_CELL5_2X : const double = 0.025;	
CELL7_CELL5_2Y : const double = 0.047;	
CELL7_CELL6_1X : const double = 0.0385;	
CELL7_CELL6_1Y : const double = 0.003;	
CELL7_CELL6_2X : const double = 0.0385;	
CELL7_CELL6_2Y : const double = 0.035;	
CELL7_CELL7X : const double = 0.060;	
CELL7_CELL7Y : const double = 0.11;	
CELL7_CELL8_1X : const double = 0.060;	
CELL7_CELL8_1Y : const double = 0.11;	
CELL7_CELL8_2X : const double = 0.11;	
CELL7_CELL8_2Y : const double = 0.11;	

//****** Cell8
CELL8_1_CHIPX : const double = 0.090;	
CELL8_1_CHIPY : const double = 0.088;	
CELL8_1_IPX : const double = 0.03;	
CELL8_1_IPY : const double = 0.12;	
CELL8_1_FEOLBLKX : const double = 0.13;	
CELL8_1_FEOLBLKY : const double = 0.12;	
CELL8_1_FBOTHER : const double = 0.1;	
CELL8_1_SRAM : const double = 0.15;	
CELL8_1_ODX : const double = 0.03;	
CELL8_1_ODY : const double = 0.096;	
CELL8_1_SR_DODX : const double = 0.03;	
CELL8_1_SR_DODY : const double = 0.096;	
CELL8_1_POX : const double = 0.047;	
CELL8_1_POY : const double = 0.047;	
CELL8_1_SRDPOX : const double = 0.047;	
CELL8_1_SRDPOY : const double = 0.047;	
CELL8_1_PO3X : const double = 0.047;	
CELL8_1_PO3Y : const double = 0.1;	
CELL8_1_POLE8X : const double = 0.047;	
CELL8_1_POLE8Y : const double = 0.1;	
CELL8_1_PO9X : const double = 0.047;	
CELL8_1_PO9Y : const double = 0.047;	
CELL8_1_PO54X : const double = 0.047;	
CELL8_1_PO54Y : const double = 0.047;	
CELL8_1_PO86X : const double = 0.047;	
CELL8_1_PO86Y : const double = 0.047;	
CELL8_1_SR_DPO3X : const double = 0.047;	
CELL8_1_SR_DPO3Y : const double = 0.1;	
CELL8_1_SR_DPOLE8X : const double = 0.047;	
CELL8_1_SR_DPOLE8Y : const double = 0.1;	
CELL8_1_SR_DPO9X : const double = 0.047;	
CELL8_1_SR_DPO9Y : const double = 0.047;	
CELL8_1_SR_DPO54X : const double = 0.047;	
CELL8_1_SR_DPO54Y : const double = 0.047;	
CELL8_1_SR_DPO86X : const double = 0.047;	
CELL8_1_SR_DPO86Y : const double = 0.047;	
CELL8_1_PO_P54 : const double = 0.001;	
CELL8_1_PO_P81 : const double = 0.001;	
CELL8_1_PO_P81_WPO : const double = 0.001;	
CELL8_1_PO_P57 : const double = 0.001;	
CELL8_1_MDX : const double = 0.07;	
CELL8_1_MDY : const double = 0.11;	
CELL8_1_SRDMDX : const double = 0.07;	
CELL8_1_SRDMDY : const double = 0.11;	
CELL8_1_MD16X : const double = 0.13;	
CELL8_1_MD16Y : const double = 0.12;	
CELL8_1_MD30X : const double = 0.07;	
CELL8_1_MD30Y : const double = 0.11;	
CELL8_1_SR_DMD16X : const double = 0.13;	
CELL8_1_SR_DMD16Y : const double = 0.12;	
CELL8_1_SR_DMD30X : const double = 0.07;	
CELL8_1_SR_DMD30Y : const double = 0.11;	
CELL8_1_CMD : const double = 0.03;	
CELL8_1_SR_DCMD : const double = 0.03;	
CELL8_1_NW_CENTERLINE : const double = 0.001;	
CELL8_1_NTNI : const double = 0.126;	
CELL8_1_OD2 : const double = 0.001;	
CELL8_1_NWDMY : const double = 0.001;	
CELL8_1_INDMY : const double = 0.005;	
CELL8_1_DIODMY : const double = 0.001;	
CELL8_1_VAR : const double = 0.001;	
CELL8_1_HIADMY : const double = 0.001;	
CELL8_1_CELL1X : const double = 0.018;	
CELL8_1_CELL1Y : const double = 0.014;	
CELL8_1_CELL2_1X : const double = 0.018;	
CELL8_1_CELL2_1Y : const double = 0.042;	
CELL8_1_CELL2_2X : const double = 0.018;	
CELL8_1_CELL2_2Y : const double = 0.068;	
CELL8_1_CELL2_3X : const double = 0.018;	
CELL8_1_CELL2_3Y : const double = 0.055;	
CELL8_1_CELL4_1X : const double = 0.035;	
CELL8_1_CELL4_1Y : const double = 0.041;	
CELL8_1_CELL4_2X : const double = 0.035;	
CELL8_1_CELL4_2Y : const double = 0.041;	
CELL8_1_CELL5_1X : const double = 0.025;	
CELL8_1_CELL5_1Y : const double = 0.047;	
CELL8_1_CELL5_2X : const double = 0.025;	
CELL8_1_CELL5_2Y : const double = 0.047;	
CELL8_1_CELL6_1X : const double = 0.0385;	
CELL8_1_CELL6_1Y : const double = 0.003;	
CELL8_1_CELL6_2X : const double = 0.0385;	
CELL8_1_CELL6_2Y : const double = 0.035;	
CELL8_1_CELL7X : const double = 0.060;	
CELL8_1_CELL7Y : const double = 0.11;	
CELL8_1_CELL8_1X : const double = 0.060;	
CELL8_1_CELL8_1Y : const double = 0.11;	
CELL8_1_CELL8_2X : const double = 0.11;	
CELL8_1_CELL8_2Y : const double = 0.11;	

//****** Cell8_2
CELL8_2_CHIPX : const double = 0.090;	
CELL8_2_CHIPY : const double = 0.088;	
CELL8_2_IPX : const double = 0.03;	
CELL8_2_IPY : const double = 0.12;	
CELL8_2_FEOLBLKX : const double = 0.13;	
CELL8_2_FEOLBLKY : const double = 0.12;	
CELL8_2_FBOTHER : const double = 0.1;	
CELL8_2_SRAM : const double = 0.15;	
CELL8_2_ODX : const double = 0.03;	
CELL8_2_ODY : const double = 0.096;	
CELL8_2_SR_DODX : const double = 0.03;	
CELL8_2_SR_DODY : const double = 0.096;	
CELL8_2_POX : const double = 0.1;	
CELL8_2_POY : const double = 0.1;	
CELL8_2_SRDPOX : const double = 0.1;	
CELL8_2_SRDPOY : const double = 0.1;	
CELL8_2_PO3X : const double = 0.1;	
CELL8_2_PO3Y : const double = 0.1;	
CELL8_2_POLE8X : const double = 0.1;	
CELL8_2_POLE8Y : const double = 0.1;	
CELL8_2_PO9X : const double = 0.1;	
CELL8_2_PO9Y : const double = 0.1;	
CELL8_2_PO54X : const double = 0.1;	
CELL8_2_PO54Y : const double = 0.1;	
CELL8_2_PO86X : const double = 0.1;	
CELL8_2_PO86Y : const double = 0.1;	
CELL8_2_SR_DPO3X : const double = 0.1;	
CELL8_2_SR_DPO3Y : const double = 0.1;	
CELL8_2_SR_DPOLE8X : const double = 0.1;	
CELL8_2_SR_DPOLE8Y : const double = 0.1;	
CELL8_2_SR_DPO9X : const double = 0.1;	
CELL8_2_SR_DPO9Y : const double = 0.1;	
CELL8_2_SR_DPO54X : const double = 0.1;	
CELL8_2_SR_DPO54Y : const double = 0.1;	
CELL8_2_SR_DPO86X : const double = 0.1;	
CELL8_2_SR_DPO86Y : const double = 0.1;	
CELL8_2_PO_P54 : const double = 0.001;	
CELL8_2_PO_P81 : const double = 0.001;	
CELL8_2_PO_P81_WPO : const double = 0.001;	
CELL8_2_PO_P57 : const double = 0.001;	
CELL8_2_MDX : const double = 0.1;	
CELL8_2_MDY : const double = 0.11;	
CELL8_2_SRDMDX : const double = 0.1;	
CELL8_2_SRDMDY : const double = 0.11;	
CELL8_2_MD16X : const double = 0.13;	
CELL8_2_MD16Y : const double = 0.13;	
CELL8_2_MD30X : const double = 0.11;	
CELL8_2_MD30Y : const double = 0.11;	
CELL8_2_SR_DMD16X : const double = 0.13;	
CELL8_2_SR_DMD16Y : const double = 0.13;	
CELL8_2_SR_DMD30X : const double = 0.11;	
CELL8_2_SR_DMD30Y : const double = 0.11;	
CELL8_2_CMD : const double = 0.03;	
CELL8_2_SR_DCMD : const double = 0.03;	
CELL8_2_NW_CENTERLINE : const double = 0.001;	
CELL8_2_NTNI : const double = 0.126;	
CELL8_2_OD2 : const double = 0.001;	
CELL8_2_NWDMY : const double = 0.001;	
CELL8_2_INDMY : const double = 0.005;	
CELL8_2_DIODMY : const double = 0.001;	
CELL8_2_VAR : const double = 0.001;	
CELL8_2_HIADMY : const double = 0.001;	
CELL8_2_CELL1X : const double = 0.0535;	
CELL8_2_CELL1Y : const double = 0.024;	
CELL8_2_CELL2_1X : const double = 0.0535;	
CELL8_2_CELL2_1Y : const double = 0.052;	
CELL8_2_CELL2_2X : const double = 0.0535;	
CELL8_2_CELL2_2Y : const double = 0.078;	
CELL8_2_CELL2_3X : const double = 0.0535;	
CELL8_2_CELL2_3Y : const double = 0.065;	
CELL8_2_CELL4_1X : const double = 0.075;	
CELL8_2_CELL4_1Y : const double = 0.041;	
CELL8_2_CELL4_2X : const double = 0.075;	
CELL8_2_CELL4_2Y : const double = 0.041;	
CELL8_2_CELL5_1X : const double = 0.1;	
CELL8_2_CELL5_1Y : const double = 0.047;	
CELL8_2_CELL5_2X : const double = 0.1;	
CELL8_2_CELL5_2Y : const double = 0.047;	
CELL8_2_CELL6_1X : const double = 0.0765;	
CELL8_2_CELL6_1Y : const double = 0.003;	
CELL8_2_CELL6_2X : const double = 0.0765;	
CELL8_2_CELL6_2Y : const double = 0.035;	
CELL8_2_CELL7X : const double = 0.11;	
CELL8_2_CELL7Y : const double = 0.11;	
CELL8_2_CELL8_1X : const double = 0.11;	
CELL8_2_CELL8_1Y : const double = 0.11;	
CELL8_2_CELL8_2X : const double = 0.11;	
CELL8_2_CELL8_2Y : const double = 0.11;	

//****** TCD
TCD_CHIP : const double = 5;	
TCD_IP : const double = 5;	
TCD_FEOLBLK : const double = 5;	
TCD_ODBLK : const double = 5;	
TCD_POBLK : const double = 5;	
TCD_MDBLK : const double = 5;	
TCD_FBALL : const double = 2;	
TCD_FB2 : const double = 5;	
TCD_SRM : const double = 2;	
TCD_SRAMDMY : const double = 2;	
TCD_OD : const double = 1;	
TCD_SRDOD : const double = 0.2;	
TCD_CODH : const double = 0.15;	
TCD_CODV : const double = 0.15;	
TCD_CODBLK : const double = 1.2;	
TCD_ODMMB : const double = 0.5;	
TCD_PO : const double = 1;	
TCD_SRDPO : const double = 0.18;	
TCD_PO_P54 : const double = 1;	
TCD_PO_P81 : const double = 1;	
TCD_PO_P81_WPO : const double = 1;	
TCD_PO_P57 : const double = 1;	
TCD_CPO : const double = 1;	
TCD_SRDCPO : const double = 0.2;	
TCD_IMP : const double = 0.3;	
TCD_MD : const double = 1;	
TCD_SRDMD : const double = 0.2;	
TCD_MD16 : const double = 1;	
TCD_SRDMD16 : const double = 0.2;	
TCD_MD30 : const double = 1;	
TCD_SRDMD30 : const double = 0.2;	
TCD_CMD : const double = 1;	
TCD_SRDCMD : const double = 0.2;	
TCD_VTALL : const double = 1;	
TCD_DNW : const double = 1;	
TCD_NW : const double = 1;	
TCD_NTNI : const double = 1;	
TCD_OD2 : const double = 1;	
TCD_NWDMY : const double = 1;	
TCD_INDDDMY : const double = 1;	
TCD_BJT : const double = 1;	
TCD_DIODMY : const double = 1;	
TCD_VAR : const double = 1;	
TCD_MOMDMY : const double = 1;	
TCD_MFUSE : const double = 1.2;	
TCD_RHTN : const double = 1.2;	
TCD_RHTNB : const double = 1.2;	
TCD_SRDTN : const double = 1.2;	
TCD_TCDDMY : const double = 150;	
TCD_ICOVL : const double = 15;	
TCD_CSRDMY : const double = 4;	
TCD_LOGO : const double = 5;	
TCD_DI_WPO : const double = 0.8;




ALL_PO_W4_W5_W_6 = wide( ALL_PO, <= 0.008, forty_five = INTERNAL ); 
ALL_PO_W14 = wide( ALL_PO, == 0.014, forty_five = INTERNAL ); 
ALL_PO_W36 = wide( ALL_PO, == 0.036, forty_five = INTERNAL ); 
gLAYER_28 = wide( ALL_PO, >= 0.054, forty_five = INTERNAL ); 
gLAYER_29 = wide( ALL_PO, > 0.058, forty_five = INTERNAL ); 
ALL_PO_W58 = not( gLAYER_28, gLAYER_29 ); 
gLAYER_30 = wide( ALL_PO, >= 0.009, forty_five = INTERNAL ); 
gLAYER_31 = wide( ALL_PO, > 0.058, forty_five = INTERNAL ); 
ALL_PO_W9_58 = not( gLAYER_30, gLAYER_31 ); 
ALL_PO_W9_53 = not( wide( ALL_PO, >= 0.009, forty_five = INTERNAL ), wide( ALL_PO, > 0.053, forty_five = INTERNAL ) );
ALL_PO_W9_TO_W58 = or_list( { ALL_PO_W14, ALL_PO_W36, ALL_PO_W58, ALL_PO_W9_58 } ); 
DC_MANDREL = or_list( { DC1, DC2_MANDREL, DC2_CORE, DC2_CORE_TYPE3 } ); 
DC_CORE = DC_MANDREL or DC4_CORE; 
DC_IO = copy( DC4_CORE_TYPE2, ancestry = true ); 
DUMMY_CELL =  or_list({DC1, DC2_MANDREL, DC2_CORE, DC2_CORE_TYPE3, DC4_CORE, DC4_CORE_TYPE2, DC5_1, DC5_2, DC6_1, DC6_2, DFBC_ALL});
ALL_PO_W4_W5_W6_NON_DUMMY = ALL_PO_W4_W5_W_6 not DC_CORE; 
ALL_POLY_W8_TO_W58 = ALL_PO_W4_W5_W_6 or ALL_PO_W9_TO_W58; 
ALL_PO_W9_TO_W58_NON_DUMMY = ALL_PO_W9_TO_W58 not DC_IO; 
ALL_PO_W9_TO_W53_NON_DUMMY = ALL_PO_W9_53 not DC_IO; 
ALL_PO_W58_UP = (ALL_PO not ALL_POLY_W8_TO_W58) not (DC5_2 or DC_IO);
ALL_PO_V = angle_edge( ALL_PO, == 90 ); 
PO_MANDREL = internal1( ALL_PO_V, < 0.006, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ); 
PO_MANDREL_GROUP = size( size( PO_MANDREL, 0.03, clip_acute = TRUNCATE ), - 0.03, clip_acute = TRUNCATE ); 
DUMMY_FILL_SRDPO = interacting( SR_DPO, DUMMY_CELL ); 
gLAYER_1 = ALL_PO not PO_MANDREL; 
DRAW_NON_MANDREL_PO = gLAYER_1 not DUMMY_FILL_SRDPO; 
DRAW_PO_MANDREL_GROUP = PO_MANDREL_GROUP not DC_MANDREL; 
SMALL_DRAW_PO_MANDREL_GROUP = area( DRAW_PO_MANDREL_GROUP, < 36 ); 

WIDE_PO_GROUP_W58 = size( size(ALL_PO_W58 , 0.04, clip_acute = TRUNCATE ), - 0.04, clip_acute = TRUNCATE ); 
WIDE_PO_GROUP_W58_UP = size( size(ALL_PO_W58_UP , 0.04, clip_acute = TRUNCATE ), - 0.04, clip_acute = TRUNCATE ); 
forbiden_area = external2( WIDE_PO_GROUP_W58, WIDE_PO_GROUP_W58_UP, == 1.315, edge_containment = OUTSIDE , extension = NONE, intersecting = {  }, intersection_angle = < 90, line_touch_shape = BOTH, look_thru = NOT_ADJACENT, relational = { POINT_TOUCH }, width = 0.0001 ); 
forbiden_area2_pre =  external2( WIDE_PO_GROUP_W58, WIDE_PO_GROUP_W58_UP, == 1.089, edge_containment = OUTSIDE , extension = NONE, intersecting = {  }, intersection_angle = < 90, line_touch_shape = BOTH, look_thru = NOT_ADJACENT, relational = { POINT_TOUCH }, width = 0.0001 );
forbiden_area2 = grow(forbiden_area2_pre, south = 0.684);




OD_MERGE = size( size( ALL_OD, 0.088, clip_acute = TRUNCATE ), - 0.088, clip_acute = TRUNCATE ); 
gbLAYER_1 = ALL_PO and OD2; 
WIDE_PO_GROUP = size( size( gbLAYER_1, 0.1, clip_acute = TRUNCATE ), - 0.1, clip_acute = TRUNCATE ); 
WIDE_PO_GROUP_EDGE = adjacent_edge( WIDE_PO_GROUP, angle1 = == 270, angle2 = == 90, length = > 0.5 ); 
WIDE_PO_GROUP_HEDGE_PRE1 = angle_edge( WIDE_PO_GROUP_EDGE, == 0 ); 
WIDE_PO_GROUP_HEDGE_PRE2 = external1_edge( WIDE_PO_GROUP_HEDGE_PRE1, < 0.48, extension = RADIAL, intersecting = {  }, intersection_angle = < 90, look_thru = NOT_ADJACENT ); 
WIDE_PO_GROUP_HEDGE = WIDE_PO_GROUP_HEDGE_PRE1 not_coincident_edge WIDE_PO_GROUP_HEDGE_PRE2; 
gbLAYER_2 = adjacent_edge( WIDE_PO_GROUP, angle1 = == 270, angle2 = >= 90, length = >= 0.644 ); 
WIDE_PO_GROUP_EDGE_PRE = angle_edge( gbLAYER_2, == 90 ); 

gbLAYER_3 = length_edge( WIDE_PO_GROUP_HEDGE, > 0 ); 
gbLAYER_4 = extend_edge( gbLAYER_3, start = 0.28, end = 0.28);
TEMP1 = edge_size( gbLAYER_4, inside = GRID );
gbLAYER_5 = length_edge( WIDE_PO_GROUP_EDGE_PRE, > 0 ); 
TEMP2 = edge_size( gbLAYER_5, inside = GRID );

OD2_WPO_BLOCK = interacting( TEMP1, TEMP2 ); 

//******************************************************************************
//      ALGORITHM
//******************************************************************************

//***** derived layer **********************************************************
ALL_PO3 = wide( ALL_PO, == 0.003, forty_five = INTERNAL ); 
//ALL_POLE13 = wide( ALL_PO, <= 0.013, forty_five = INTERNAL ); 
//gLAYER_32 = wide( ALL_PO, >= 0.014, forty_five = INTERNAL ); 
//gLAYER_33 = wide( ALL_PO, >= 0.036, forty_five = INTERNAL ); 
//ALL_PO14 = not( gLAYER_32, gLAYER_33 ); 
ALL_POLE8 = wide( ALL_PO, <= 0.08, forty_five = INTERNAL ); 
ALL_PO9 = not( wide( ALL_PO, >= 0.009, forty_five = INTERNAL ), wide( ALL_PO, >= 0.054, forty_five = INTERNAL ) ); 
gLAYER_36 = wide( ALL_PO, >= 0.054, forty_five = INTERNAL ); 
gLAYER_37 = wide( ALL_PO, > 0.058, forty_five = INTERNAL ); 
ALL_PO54 = not( gLAYER_36, gLAYER_37 ); 
ALL_PO86 = wide( ALL_PO, > 0.058, forty_five = INTERNAL ); 
ALL_CPO20 = wide( ALL_CPO, == 0.02, forty_five = INTERNAL ); 
ALL_CPO22 = wide( ALL_CPO, == 0.022, forty_five = INTERNAL ); 
ALL_CPO25 = wide( ALL_CPO, == 0.025, forty_five = INTERNAL ); 
ALL_CPOELSE = wide( ALL_CPO, > 0.025, forty_five = INTERNAL ); 
ALL_MD16 = wide( ALL_MD, == 0.016, forty_five = INTERNAL ); 
ALL_MD30 = wide( ALL_MD, == 0.03, forty_five = INTERNAL ); 

PO3 = wide( PO, == 0.003, forty_five = INTERNAL ); 
POLE8 = wide( PO, <= 0.008, forty_five = INTERNAL ); 
PO9 = not( wide( PO, >= 0.009, forty_five = INTERNAL ), wide( PO, >= 0.054, forty_five = INTERNAL ) ); 
POLE13 = wide( PO, <= 0.013, forty_five = INTERNAL ); 
gLAYER_38 = wide( PO, >= 0.014, forty_five = INTERNAL ); 
gLAYER_39 = wide( PO, >= 0.036, forty_five = INTERNAL ); 
PO14 = not( gLAYER_38, gLAYER_39 ); 
gLAYER_42 = wide( PO, >= 0.054, forty_five = INTERNAL ); 
gLAYER_43 = wide( PO, > 0.058, forty_five = INTERNAL ); 
PO54 = not( gLAYER_42, gLAYER_43 ); 
PO86 = wide( PO, > 0.058, forty_five = INTERNAL ); 
CPO20 = wide( CPO, == 0.02, forty_five = INTERNAL ); 
CPO22 = wide( CPO, == 0.022, forty_five = INTERNAL ); 
CPO25 = wide( CPO, == 0.025, forty_five = INTERNAL ); 
CPOELSE = wide( CPO, > 0.025, forty_five = INTERNAL ); 
MD16 = wide( MD, == 0.016, forty_five = INTERNAL ); 
MD30 = wide( MD, == 0.03, forty_five = INTERNAL ); 

SR_DPO3 = wide( SR_DPO, == 0.003, forty_five = INTERNAL ); 
SR_DPOLE8 = wide( SR_DPO, <= 0.008, forty_five = INTERNAL ); 
SR_DPO9 = not( wide( SR_DPO, >= 0.009, forty_five = INTERNAL ), wide( SR_DPO, >= 0.054, forty_five = INTERNAL ) );
SR_DPOLE13 = wide( SR_DPO, <= 0.013, forty_five = INTERNAL ); 
gLAYER_44 = wide( SR_DPO, >= 0.014, forty_five = INTERNAL ); 
gLAYER_45 = wide( SR_DPO, >= 0.036, forty_five = INTERNAL ); 
SR_DPO14 = not( gLAYER_44, gLAYER_45 ); 
gLAYER_48 = wide( SR_DPO, >= 0.054, forty_five = INTERNAL ); 
gLAYER_49 = wide( SR_DPO, > 0.058, forty_five = INTERNAL ); 
SR_DPO54 = not( gLAYER_48, gLAYER_49 ); 
SR_DPO86 = wide( SR_DPO, > 0.058, forty_five = INTERNAL ); 
SR_DCPO20 = wide( SR_DCPO, == 0.02, forty_five = INTERNAL ); 
SR_DCPO22 = wide( SR_DCPO, == 0.022, forty_five = INTERNAL ); 
SR_DCPO25 = wide( SR_DCPO, == 0.025, forty_five = INTERNAL ); 
SR_DCPOELSE = wide( SR_DCPO, > 0.025, forty_five = INTERNAL ); 
SR_DMD16 = wide( SR_DMD, == 0.016, forty_five = INTERNAL ); 
SR_DMD30 = wide( SR_DMD, == 0.03, forty_five = INTERNAL ); 

PO9_OD2 = PO9 and OD2;
PO54_OD2 = PO54 and OD2; 
PO86_OD2 = PO86 and OD2; 
SR_DPO9_OD2 = SR_DPO9 and OD2;
SR_DPO54_OD2 = SR_DPO54 and OD2; 
SR_DPO86_OD2 = SR_DPO86 and OD2; 

gLAYER_15 = shrink( CHIP_BOUNDARY, north = ( 0.020 / 2 ), south = ( 0.020 / 2 ) ); 
gLAYER_14 = grow( gLAYER_15, east = ( 0.003 / 2 ), west = ( 0.003 / 2 ) );
gLAYER_19 = layer_extent( PRBOUNDARY ); 
gLAYER_18 = not_interacting( gLAYER_19, CHIP_BOUNDARY ); 
gLAYER_17 = shrink( gLAYER_18, north = ( 0.020 / 2 ), south = ( 0.020 / 2 ) );
gLAYER_16 = grow( gLAYER_17, east = ( 0.003 / 2 ), west = ( 0.003 / 2 ) );
gLAYER_22 = layer_extent( OD ); 
gLAYER_21 = not_interacting( gLAYER_22, PRBOUNDARY ); 
gLAYER_20 = not_interacting( gLAYER_21, CHIP_BOUNDARY ); 
REGION_FIN1_PRE = or_list( { gLAYER_14, gLAYER_16, gLAYER_20 } ); 
gLAYER_23 = shrink( FB_2, north = 0.011, south = 0.011 ); 
gLAYER_25 = OD2 not FB_2; 
gLAYER_24 = size( gLAYER_25, clip_acute = TRUNCATE, distance = - GRID );
REGION_FIN_FB2 = gLAYER_23 or gLAYER_24; 

REGION_FIN2_PRE = or_list( { grow( shrink( CHIP_BOUNDARY, north = ( 0.020 / 2 ), south = ( 0.020 / 2 ) ), east = ( 0.051 / 2 ), west = ( 0.051 / 2 ) ), grow( shrink( not_interacting( layer_extent( PRBOUNDARY ), CHIP_BOUNDARY ), north = ( 0.020 / 2 ), south = ( 0.020 / 2 ) ), east = ( 0.051 / 2 ), west = ( 0.051 / 2 ) ), not_interacting( not_interacting( layer_extent( OD ), PRBOUNDARY ), CHIP_BOUNDARY ) } ); 
REGION_FIN2_PO = or_list( { grow( CHIP_BOUNDARY, east = ( 0.051 / 2 ), west = ( 0.051 / 2 ) ), grow( not_interacting( layer_extent( PRBOUNDARY ), CHIP_BOUNDARY ), east = ( 0.051 / 2 ), west = ( 0.051 / 2 ) ), not_interacting( not_interacting( layer_extent( OD ), PRBOUNDARY ), CHIP_BOUNDARY ) } ); 

PATTERN_PO_FIN1 : list of uf_fill_pattern_s = {
    {
    type = UF_STRIPE,    
    stripe_fill = {
        direction = VERTICAL,
        layer_spec = {
            output_layer_key = "PO_FIN1"
        },
	reference_layer = {
	    reference_context = POLYGON_EXTENT,
	    shift_value = {0, 0},
	    layer = REGION_FIN1_PRE,
	},
        width = 0.003,
        spacing = 0.045
    },
    },
}; // end of PATTERN_PO_FIN1

SPEC_PO_FIN1 = unified_fill(
    fill_patterns = PATTERN_PO_FIN1,
    fill_boundary = {
	layer = REGION_FIN1_PRE,
	type = LAYER
    },
    window_layer = REGION_FIN1_PRE
);

PATTERN_PO_FIN2 : list of uf_fill_pattern_s = {
    {
    type = UF_STRIPE,    
    stripe_fill = {
        direction = VERTICAL,
        layer_spec = {
            output_layer_key = "PO_FIN2"
        },
	reference_layer = {
	    reference_context = POLYGON_EXTENT,
	    shift_value = {0, 0},
	    layer = REGION_FIN2_PO,
	},
        width = 0.003,
        spacing = 0.045
    },
    },
}; // end of PATTERN_PO_FIN2

SPEC_PO_FIN2 = unified_fill(
    fill_patterns = PATTERN_PO_FIN2,
    fill_boundary = {
	layer = REGION_FIN2_PO,
	type = LAYER
    },
    window_layer = REGION_FIN2_PO
);

PO_FIN1 = SPEC_PO_FIN1["PO_FIN1"][0];
PO_FIN2 = SPEC_PO_FIN2["PO_FIN2"][0];

REGION_FIN1 = copy( REGION_FIN1_PRE, ancestry = true ); 

REGION_FIN2 = interacting( REGION_FIN2_PRE, ( ( ALL_PO3 not or_list( { PO_P42, PO_P48, PO_P51, PO_P81, PO_P81_WPO, PO_P57, PO_P54, DUMMY_CELL } ) ) inside PO_FIN2 ) ); 

INITIAL_LAYER = REGION_FIN1 or REGION_FIN2;
INITIAL_LAYER_FB2 = copy( REGION_FIN_FB2, ancestry = true ); 

CHIP_BOUND = CHIP_BOUNDARY or interacting( grow( CHIP_BOUNDARY, east = 0.024, west = 0.024 ), REGION_FIN2 ); 

IP_BOUNDARY = PRBOUNDARY or interacting( grow( PRBOUNDARY, east = 0.024, west = 0.024 ), REGION_FIN2 ); 

FEOL_MAIN_PATTERN = or_list({ ALL_OD, ALL_PO, ALL_MD }); 
BLACK_BOX_FEOLBLK = not_interacting( FEOLBLK, ( FEOL_MAIN_PATTERN and FEOLBLK ) ) not UNFEOLBLK;
FEOLBLK_FINAL = FEOLBLK not UNFEOLBLK; 

NW_EDGE_H = angle_edge( NW, == 0 ); 
NW_CENTERLINE = internal1( NW_EDGE_H, < 1.4, extension = NONE, extension_look_past = POINT_TO_POINT, intersecting = {  }, intersection_angle = < 90, orientation = { PARALLEL }, output_type = CENTERLINE, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC );

PP_SEALRING = size( ( PP and SEALRING_ALL ), clip_acute = TRUNCATE, distance = 0.2 ); 
CHIP_45_REG = edge_size( angle_edge( gCHIP, == 45 ), inside = 1.5 ); 
CHIP_H_REG = edge_size( angle_edge( gCHIP, == 0 ), inside = 1 ); 
COR_45_REG = polygon_extents( CHIP_H_REG and CHIP_45_REG );

SR_DOD_NT_SR = SR_DOD not SEALRING_ALL; 
COD_H_NT_SR = COD_H not SEALRING_ALL; 
COD_V_NT_SR = COD_V not SEALRING_ALL; 
COD_BLOCK_NT_SR = COD_BLOCK not SEALRING_ALL; 
ODMMB_NT_SR = ODMMB not SEALRING_ALL; 
SR_DPO_NT_SR = SR_DPO not SEALRING_ALL; 
SR_DPO_NT_SR3 = SR_DPO3 not SEALRING_ALL; 
SR_DPOLE8_NT_SR = SR_DPOLE8 not SEALRING_ALL; 
SR_DPO_NT_SR9 = SR_DPO9 not SEALRING_ALL; 
SR_DPO_NT_SR9_OD2 = SR_DPO9_OD2 not SEALRING_ALL; 
SR_DPO_NT_SR54 = SR_DPO54 not SEALRING_ALL; 
SR_DPO_NT_SR54_OD2 = SR_DPO54_OD2 not SEALRING_ALL; 
SR_DPO_NT_SR86 = SR_DPO86 not SEALRING_ALL; 
SR_DPO_NT_SR86_OD2 = SR_DPO86_OD2 not SEALRING_ALL; 
PP_NT_SR = PP not SEALRING_ALL; 
SR_DMD_NT_SR = SR_DMD not SEALRING_ALL; 
SR_DMD_NT_SR16 = SR_DMD16 not SEALRING_ALL; 
SR_DMD_NT_SR30 = SR_DMD30 not SEALRING_ALL; 
SR_DCMD_NT_SR = SR_DCMD not SEALRING_ALL; 
NW_NT_SR = NW not SEALRING_ALL; 

#ifdef FULL_CHIP 
   #ifdef WITH_SEALRING 
      CCTE_SR_PP = empty_layer();
   #else
      CCTE_SR_PP = internal1( BULK_PRE, < 66.142, extension = RADIAL, intersecting = {  }, intersection_angle = == 90, look_thru = NOT_ADJACENT, orientation = { } , extension_look_past = POINT_TO_POINT); 
   #endif
#else
   CCTE_SR_PP = empty_layer();
#endif

FB1_CORNER = internal1_edge( FB_1, < 0.0005, extension = RADIAL, extension_look_past = POINT_TO_POINT, intersecting = { PERPENDICULAR }, orientation = { } ); 
FB1_CORNER_H = angle_edge( FB1_CORNER, == 0 ); 
FB1_CORNER_V = angle_edge( FB1_CORNER, == 90 ); 
FB2_CORNER = internal1_edge( FB_2, < 0.0005, extension = RADIAL, extension_look_past = POINT_TO_POINT, intersecting = { PERPENDICULAR }, orientation = { } ); 
FB2_CORNER_H = angle_edge( FB2_CORNER, == 0 ); 
FB2_CORNER_V = angle_edge( FB2_CORNER, == 90 ); 
TRIGGER_REG = interacting( ( CHIP_snps not shrink( CHIP_snps, north = 1, south = 1 ) ), DFBC );
XBD_FILLREGION_PRE1 = edge_size( angle_edge( DI_WPO, == 0 ), inside = 0.67 ); 
XBD_FILLREGION_PRE2 = interacting( XBD_FILLREGION_PRE1, TRIGGER_REG ); 
XBD_FILLREGION = DI_WPO not XBD_FILLREGION_PRE2; 
FILL_W58_DUMMY_POLY_FIRST_REGION_PRE_DIWPO = (size( ( ALL_PO_W9_TO_W58_NON_DUMMY inside DI_WPO ), clip_acute = TRUNCATE, distance = 2.1 ) not ALL_PO_W9_TO_W58_NON_DUMMY) not FEOLBLK_FINAL; 
FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO = size( size( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE_DIWPO, - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE ); 
FILL_W58_DUMMY_POLY_FIRST_REGION_PRE2_DIWPO = size( size( ( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO not or_list( { OD2, FB_2, FB_1 } ) ), - 0.33, clip_acute = TRUNCATE ), 0.33, clip_acute = TRUNCATE ); 
FILL_W58_DUMMY_POLY_FIRST_REGION_DIWPO = or_list( { ( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO and or_list( { FB_1, FB_2, OD2 } ) ), FILL_W58_DUMMY_POLY_FIRST_REGION_PRE2_DIWPO, ALL_PO_W9_TO_W58_NON_DUMMY } ); 
FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO = ( ( ( size( ( ALL_PO_W58_UP inside DI_WPO ), clip_acute = TRUNCATE, distance = 2.1 ) not FILL_W58_DUMMY_POLY_FIRST_REGION_DIWPO ) not ALL_PO_W58_UP ) not FEOLBLK_FINAL ) and DI_WPO; 
FILL_W86_DUMMY_POLY_FIRST_REGION_PRE2_DIWPO = size( size( ( ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO not OD2 ) not FB_1 ), - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE ); 
FILL_W86_DUMMY_POLY_FIRST_REGION_PRE3_DIWPO = size( size( ( ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO not OD2 ) and FB_1 ), - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE );
FILL_W86_DUMMY_POLY_FIRST_REGION_DIWPO = ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1_DIWPO and OD2 ) or ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE2_DIWPO or FILL_W86_DUMMY_POLY_FIRST_REGION_PRE3_DIWPO ); 





#ifdef FILL_TCD
   SHAPE_TCD_165_1 : list of coordinate_l = { 
       { { 0.0000, 0.0000 }, { 5.4720, 0.0000 }, { 5.4720, 7.3840 }, { 0.0000, 7.3840 } }
   }; 
   LAYER_SHAPE_TCD_165_1 : polygon_layer_s = { 
       layer_spec = {
           output_layer_key = "OUTPUT_TCD_165_1"
       },
       polygons = SHAPE_TCD_165_1

   };
// DUMMY SPEC : TCD
FSS_TCD : list of fill_to_signal_spacing_s = {
#ifdef FULL_CHIP
       { CHIP_BOUNDARY, min_space = TCD_CHIP, context = INTERIOR },
#else
       { PRBOUNDARY, min_space = TCD_IP, context = INTERIOR },
#endif
       { CHIP_snps, min_space = TCD_CHIP, context = INTERIOR },
       { FEOLBLK_FINAL, min_space = TCD_FEOLBLK },
       { ODBLK, min_space = TCD_ODBLK },
       { POBLK, min_space = TCD_POBLK },
       { MDBLK, min_space = TCD_MDBLK },
       { FB_1, min_space = TCD_FBALL },
       { FB_2, min_space = TCD_FB2 },
       { FB_26, min_space = TCD_FBALL },
       { FB_28, min_space = TCD_FBALL },
       { FB_29, min_space = TCD_FBALL },
       { FB_31, min_space = TCD_FBALL },
       { FB_38, min_space = TCD_FBALL },
       { FB_36, min_space = TCD_FBALL },
       { STD_FILLER, min_space = TCD_FBALL },
       { SRM, min_space = TCD_SRM },
       { SRM_1, min_space = TCD_SRM },
       { SRAMDMY, min_space = TCD_SRAMDMY },
       { OD, min_space = TCD_OD },
       { SR_DOD_NT_SR, min_space = TCD_SRDOD },
       { COD_H_NT_SR, min_space = TCD_CODH },
       { DCOD_H, min_space = TCD_CODH },
       { COD_V_NT_SR, min_space = TCD_CODV },
       { DCOD_V, min_space = TCD_CODV },
       { COD_BLOCK_NT_SR, min_space = TCD_CODBLK },
       { DCOD_BLOCK, min_space = TCD_CODBLK },
       { ODMMB_NT_SR, min_space = TCD_ODMMB },
       { PO, min_space = TCD_PO },
       { POLE8, min_space = TCD_PO },
       { PO3, min_space = TCD_PO },
       { PO9, min_space = TCD_PO },
       { PO54, min_space = TCD_PO },
       { PO86, min_space = TCD_PO },
       { SR_DPO_NT_SR, min_space = TCD_SRDPO },
       { SR_DPO_NT_SR3, min_space = TCD_SRDPO },
       { SR_DPOLE8_NT_SR, min_space = TCD_SRDPO },
       { SR_DPO_NT_SR9, min_space = TCD_SRDPO },
       { SR_DPO_NT_SR54, min_space = TCD_SRDPO },
       { SR_DPO_NT_SR86, min_space = TCD_SRDPO },
       { PO_P54, min_space = TCD_PO_P54 },
       { PO_P81, min_space = TCD_PO_P81 },
       { PO_P81_WPO, min_space = TCD_PO_P81_WPO },
       { PO_P57, min_space = TCD_PO_P57 },
       { CPO, min_space = TCD_CPO },
       { CPO20, min_space = TCD_CPO },
       { CPO22, min_space = TCD_CPO },
       { CPO25, min_space = TCD_CPO },
       { SR_DCPO, min_space = TCD_SRDCPO },
       { SR_DCPO20, min_space = TCD_SRDCPO },
       { SR_DCPO22, min_space = TCD_SRDCPO },
       { SR_DCPO25, min_space = TCD_SRDCPO },
       { PP_NT_SR, min_space = TCD_IMP },
       { gNP, min_space = TCD_IMP },
       { SIGE_DRAW, min_space = TCD_IMP },
       { SIC_DRAW, min_space = TCD_IMP },
       { MD, min_space = TCD_MD },
       { MD16, min_space = TCD_MD },
       { MD30, min_space = TCD_MD },
       { SR_DMD_NT_SR, min_space = TCD_SRDMD },
       { SR_DMD_NT_SR16, min_space = TCD_SRDMD },
       { SR_DMD_NT_SR30, min_space = TCD_SRDMD },
       { CMD, min_space = TCD_CMD },
       { SR_DCMD_NT_SR, min_space = TCD_SRDCMD },
       { VTL_N, min_space = TCD_VTALL },
       { VTLN_LL, min_space = TCD_VTALL },
       { VTEL_N, min_space = TCD_VTALL },
       { VTL_P, min_space = TCD_VTALL },
       { VTLP_LL, min_space = TCD_VTALL },
       { VTEL_P, min_space = TCD_VTALL },
       { VTS_N, min_space = TCD_VTALL },
       { VTSN_LL, min_space = TCD_VTALL },
       { VTS_P, min_space = TCD_VTALL },
       { VTSP_LL, min_space = TCD_VTALL },
       { VTUL_N, min_space = TCD_VTALL },
       { VTULN_LL, min_space = TCD_VTALL },
       { VTUL_P, min_space = TCD_VTALL },
       { VTULP_LL, min_space = TCD_VTALL },
       { DNW, min_space = TCD_DNW },
       { NW_NT_SR, min_space = TCD_NW },
       { NT_N, min_space = TCD_NTNI },
       { OD2, min_space = TCD_OD2 },
       { NWDMY, min_space = TCD_NWDMY },
#ifndef Dummy_Under_INDDMY
       { INDDMY, min_space = TCD_INDDDMY },
#endif
       { BJTDMY, min_space = TCD_BJT },
       { BJTEDMY, min_space = TCD_BJT },
       { IBJTDMY, min_space = TCD_BJT },
       { DIODMY, min_space = TCD_DIODMY },
       { VAR, min_space = TCD_VAR },
       { RTMOMDMY, min_space = TCD_MOMDMY },
       { METALFUSE, min_space = TCD_MFUSE },
       { RH_TN, min_space = TCD_RHTN },
       { RH_TNB, min_space = TCD_RHTNB },
       { SR_DTN, min_space = TCD_SRDTN },
       { TCDDMY, min_space = TCD_TCDDMY },
       { ICOVL_SINGLE, min_space = TCD_ICOVL },
       { CSRDMY, min_space = TCD_CSRDMY },
       { LOGO, min_space = TCD_LOGO },
       { DI_WPO, min_space = TCD_DI_WPO },
}; // end of FSS_TCD
//=====================================================================================

PATTERN_TCD : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_TCD,
	    insertion = {
		    iterations = 2,
            shift_factor = 2,
	    },
	    layers = {
		    LAYER_SHAPE_TCD_165_1
	    },
	    pattern_spec = {
		other_pattern_spacing = { 0 => >= 150 },
		space_x = 144, 
		space_y = 143, 
	    },
	    pitch = {
#ifdef FULL_CHIP
		context_layer = shrink( CHIP_BOUND, west = 2.016 , south = 2.028 ),
#else
		context_layer = shrink( IP_BOUNDARY, west = 2.016, south = 2.028 ),
#endif            
		x = (0.096*100),
		y = (0.026*100),
	    },
	    cell_prefix = "OUTPUT_TCD_165_1",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_TCD

SPEC_TCD = unified_fill(
    fill_patterns = PATTERN_TCD,
    fill_boundary = {
#ifdef FULL_CHIP
    layer = CHIP_BOUND,
#else
    layer = IP_BOUNDARY,
#endif
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "TCD_EXTENT"
	},
    }
);
TCD_165_1_C  = SPEC_TCD["OUTPUT_TCD_165_1"][0];
TCD_E        = SPEC_TCD["TCD_EXTENT"][0];
#else
TCD_E        = empty_layer();
#endif


#ifdef FILL_TCD 
   FILL_W5_DUMMY_POLY_PRE = or_list( { ALL_PO_W4_W5_W6_NON_DUMMY, TCD_E, TCDDMY } ); 
#else
   FILL_W5_DUMMY_POLY_PRE = ALL_PO_W4_W5_W6_NON_DUMMY or TCDDMY; 
#endif




SHAPE_CELL4_1_CAPBOTTOM_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0940 }, { 0.1350, 0.0940 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_1_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0420 }, { 0.1350, 0.0420 }, { 0.1350, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_1_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.1350, 0.1300 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.2441860465116279 */
SHAPE_CELL4_1_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.1350, 0.0290 }, { 0.1350, 0.0810 }, { 0.0000, 0.0810 } }
};    /* AREA RATIO = 0.3023255813953488 */
SHAPE_CELL4_1_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0690 }, { 0.0825, 0.0690 }, { 0.0825, 0.1720 }, { 0.0525, 0.1720 } }
};    /* AREA RATIO = 0.1330749354005168 */
SHAPE_CELL4_1_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.1350, 0.0290 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.8313953488372093 */
SHAPE_CELL4_1_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1350, 0.0410 }, { 0.1350, 0.0970 }, { 0.0000, 0.0970 } }
};    /* AREA RATIO = 0.32558139534883723 */
SHAPE_CELL4_1_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.1075, 0.0390 }, { 0.1350, 0.0390 }, { 0.1350, 0.1720 }, { 0.1075, 0.1720 } },
    { { 0.0000, 0.0390 }, { 0.0275, 0.0390 }, { 0.0275, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.31503014642549526 */
SHAPE_CELL4_1_CAPBOTTOM_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1350, 0.0520 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.6976744186046512 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_257_201 : list of coordinate_l = { 
    { { 0.0650, 0.0940 }, { 0.1175, 0.0940 }, { 0.1175, 0.1720 }, { 0.0650, 0.1720 } }
};    /* AREA RATIO = 0.20262246412666995 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.0420 }, { 0.1175, 0.0420 }, { 0.1175, 0.1200 }, { 0.0465, 0.1200 } }
};    /* AREA RATIO = 0.27402276100940126 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.1300 }, { 0.1175, 0.1300 }, { 0.1175, 0.1720 }, { 0.0900, 0.1720 } }
};    /* AREA RATIO = 0.05714992577931717 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.1720 }, { 0.0900, 0.1720 }, { 0.0900, 0.0810 }, { 0.1175, 0.0810 }, { 0.1175, 0.0290 }, { 0.0455, 0.0290 } }
};    /* AREA RATIO = 0.3856259277585354 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0690 }, { 0.0650, 0.0690 }, { 0.0650, 0.1720 }, { 0.0350, 0.1720 } }
};    /* AREA RATIO = 0.15289460663038099 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0290 }, { 0.1175, 0.0290 }, { 0.1175, 0.1720 }, { 0.0455, 0.1720 } }
};    /* AREA RATIO = 0.5094507669470559 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0390 }, { 0.1175, 0.0390 }, { 0.1175, 0.1720 }, { 0.0900, 0.1720 } }
};    /* AREA RATIO = 0.1809747649678377 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0520 }, { 0.1175, 0.0520 }, { 0.1175, 0.1720 }, { 0.0240, 0.1720 } }
};    /* AREA RATIO = 0.5551707075705097 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0940 }, { 0.0525, 0.0940 }, { 0.0525, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.20262246412666995 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0420 }, { 0.0710, 0.0420 }, { 0.0710, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.27402276100940126 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.0275, 0.1300 }, { 0.0275, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.05714992577931717 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0810 }, { 0.0275, 0.0810 }, { 0.0275, 0.1720 }, { 0.0720, 0.1720 }, { 0.0720, 0.0290 }, { 0.0000, 0.0290 } }
};    /* AREA RATIO = 0.3856259277585354 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0690 }, { 0.0825, 0.0690 }, { 0.0825, 0.1720 }, { 0.0525, 0.1720 } }
};    /* AREA RATIO = 0.15289460663038099 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.0720, 0.0290 }, { 0.0720, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.5094507669470559 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0390 }, { 0.0275, 0.0390 }, { 0.0275, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.1809747649678377 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0935, 0.0520 }, { 0.0935, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.5551707075705097 */
SHAPE_CELL4_1_CAPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0650, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0650, 0.0260 } }
};    /* AREA RATIO = 0.44680851063829785 */
SHAPE_CELL4_1_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0900, 0.0260 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.0900, 0.0000 }, { 0.0900, 0.0260 }, { 0.0455, 0.0260 } }
};    /* AREA RATIO = 0.37872340425531914 */
SHAPE_CELL4_1_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.0260 }, { 0.0350, 0.0260 } }
};    /* AREA RATIO = 0.2553191489361702 */
SHAPE_CELL4_1_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0455, 0.0260 } }
};    /* AREA RATIO = 0.6127659574468085 */
SHAPE_CELL4_1_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0900, 0.0260 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_CAPLEFT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0240, 0.0260 } }
};    /* AREA RATIO = 0.7957446808510639 */
SHAPE_CELL4_1_CAPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0525, 0.0000 }, { 0.0525, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.44680851063829785 */
SHAPE_CELL4_1_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0275, 0.0000 }, { 0.0720, 0.0000 }, { 0.0720, 0.0260 }, { 0.0275, 0.0260 } }
};    /* AREA RATIO = 0.37872340425531914 */
SHAPE_CELL4_1_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.0260 }, { 0.0525, 0.0260 } }
};    /* AREA RATIO = 0.2553191489361702 */
SHAPE_CELL4_1_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0720, 0.0000 }, { 0.0720, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.6127659574468085 */
SHAPE_CELL4_1_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_CAPRIGHT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0935, 0.0000 }, { 0.0935, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.7957446808510639 */
SHAPE_CELL4_1_CAPTOP_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0780 }, { 0.0000, 0.0780 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_1_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1350, 0.0520 }, { 0.1350, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_1_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.2441860465116279 */
SHAPE_CELL4_1_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0910 }, { 0.1350, 0.0910 }, { 0.1350, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.3023255813953488 */
SHAPE_CELL4_1_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.1030 }, { 0.0525, 0.1030 } }
};    /* AREA RATIO = 0.1330749354005168 */
SHAPE_CELL4_1_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.8313953488372093 */
SHAPE_CELL4_1_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0750 }, { 0.1350, 0.0750 }, { 0.1350, 0.1310 }, { 0.0000, 0.1310 } }
};    /* AREA RATIO = 0.32558139534883723 */
SHAPE_CELL4_1_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.1075, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1330 }, { 0.1075, 0.1330 } },
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.31503014642549526 */
SHAPE_CELL4_1_CAPTOP_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.6976744186046512 */
SHAPE_CELL4_1_CAPTOPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0650, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0780 }, { 0.0650, 0.0780 } }
};    /* AREA RATIO = 0.20262246412666995 */
SHAPE_CELL4_1_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.0520 }, { 0.1175, 0.0520 }, { 0.1175, 0.1300 }, { 0.0465, 0.1300 } }
};    /* AREA RATIO = 0.27402276100940126 */
SHAPE_CELL4_1_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0420 }, { 0.0900, 0.0420 } }
};    /* AREA RATIO = 0.05714992577931717 */
SHAPE_CELL4_1_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.1430 }, { 0.1175, 0.1430 }, { 0.1175, 0.0910 }, { 0.0900, 0.0910 }, { 0.0900, 0.0000 }, { 0.0455, 0.0000 } }
};    /* AREA RATIO = 0.3856259277585354 */
SHAPE_CELL4_1_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.1030 }, { 0.0350, 0.1030 } }
};    /* AREA RATIO = 0.15289460663038099 */
SHAPE_CELL4_1_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1430 }, { 0.0455, 0.1430 } }
};    /* AREA RATIO = 0.5094507669470559 */
SHAPE_CELL4_1_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1330 }, { 0.0900, 0.1330 } }
};    /* AREA RATIO = 0.1809747649678377 */
SHAPE_CELL4_1_CAPTOPLEFT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1200 }, { 0.0240, 0.1200 } }
};    /* AREA RATIO = 0.5551707075705097 */
SHAPE_CELL4_1_CAPTOPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0525, 0.0000 }, { 0.0525, 0.0780 }, { 0.0000, 0.0780 } }
};    /* AREA RATIO = 0.20262246412666995 */
SHAPE_CELL4_1_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0710, 0.0520 }, { 0.0710, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 0.27402276100940126 */
SHAPE_CELL4_1_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.05714992577931717 */
SHAPE_CELL4_1_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1430 }, { 0.0720, 0.1430 }, { 0.0720, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0910 }, { 0.0000, 0.0910 } }
};    /* AREA RATIO = 0.3856259277585354 */
SHAPE_CELL4_1_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.1030 }, { 0.0525, 0.1030 } }
};    /* AREA RATIO = 0.15289460663038099 */
SHAPE_CELL4_1_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0720, 0.0000 }, { 0.0720, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.5094507669470559 */
SHAPE_CELL4_1_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.1809747649678377 */
SHAPE_CELL4_1_CAPTOPRIGHT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0935, 0.0000 }, { 0.0935, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.5551707075705097 */
SHAPE_CELL4_1_CORE_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CORE_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.0260 }, { 0.0525, 0.0260 } }
};    /* AREA RATIO = 0.2222222222222222 */
SHAPE_CELL4_1_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CORE_17_7 : list of coordinate_l = { 
    { { 0.1075, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.1075, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.4074074074074074 */
SHAPE_CELL4_1_CORE_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_VCONNECT_LEFT_257_201 : list of coordinate_l = { 
    { { 0.0650, 0.3900 }, { 0.1175, 0.3900 }, { 0.1175, 0.4680 }, { 0.0650, 0.4680 } },
    { { 0.0650, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0780 }, { 0.0650, 0.0780 } }
};    /* AREA RATIO = 0.14893617021276595 */
SHAPE_CELL4_1_VCONNECT_LEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.2860 }, { 0.1175, 0.2860 }, { 0.1175, 0.4160 }, { 0.0465, 0.4160 } },
    { { 0.0465, 0.0520 }, { 0.1175, 0.0520 }, { 0.1175, 0.1820 }, { 0.0465, 0.1820 } }
};    /* AREA RATIO = 0.33569739952718675 */
SHAPE_CELL4_1_VCONNECT_LEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.4260 }, { 0.1175, 0.4260 }, { 0.1175, 0.4680 }, { 0.0900, 0.4680 } },
    { { 0.0900, 0.1920 }, { 0.1175, 0.1920 }, { 0.1175, 0.2760 }, { 0.0900, 0.2760 } },
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.0420 }, { 0.0900, 0.0420 } }
};    /* AREA RATIO = 0.08401527550463721 */
SHAPE_CELL4_1_VCONNECT_LEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.0900, 0.0000 }, { 0.0900, 0.4680 }, { 0.0455, 0.4680 } }
};    /* AREA RATIO = 0.37872340425531914 */
SHAPE_CELL4_1_VCONNECT_LEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.4680 }, { 0.0350, 0.4680 } }
};    /* AREA RATIO = 0.2553191489361702 */
SHAPE_CELL4_1_VCONNECT_LEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.4680 }, { 0.0455, 0.4680 } }
};    /* AREA RATIO = 0.6127659574468085 */
SHAPE_CELL4_1_VCONNECT_LEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.4680 }, { 0.0900, 0.4680 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_VCONNECT_LEFT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_VCONNECT_LEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.4680 }, { 0.0240, 0.4680 } }
};    /* AREA RATIO = 0.7957446808510639 */
SHAPE_CELL4_1_VCONNECT_RIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.0525, 0.3900 }, { 0.0525, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.0000 }, { 0.0525, 0.0000 }, { 0.0525, 0.0780 }, { 0.0000, 0.0780 } }
};    /* AREA RATIO = 0.14893617021276595 */
SHAPE_CELL4_1_VCONNECT_RIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2860 }, { 0.0710, 0.2860 }, { 0.0710, 0.4160 }, { 0.0000, 0.4160 } },
    { { 0.0000, 0.0520 }, { 0.0710, 0.0520 }, { 0.0710, 0.1820 }, { 0.0000, 0.1820 } }
};    /* AREA RATIO = 0.33569739952718675 */
SHAPE_CELL4_1_VCONNECT_RIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.4260 }, { 0.0275, 0.4260 }, { 0.0275, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.1920 }, { 0.0275, 0.1920 }, { 0.0275, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.08401527550463721 */
SHAPE_CELL4_1_VCONNECT_RIGHT_6_161 : list of coordinate_l = { 
    { { 0.0275, 0.0000 }, { 0.0720, 0.0000 }, { 0.0720, 0.4680 }, { 0.0275, 0.4680 } }
};    /* AREA RATIO = 0.37872340425531914 */
SHAPE_CELL4_1_VCONNECT_RIGHT_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.4680 }, { 0.0525, 0.4680 } }
};    /* AREA RATIO = 0.2553191489361702 */
SHAPE_CELL4_1_VCONNECT_RIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0720, 0.0000 }, { 0.0720, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.6127659574468085 */
SHAPE_CELL4_1_VCONNECT_RIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.23404255319148937 */
SHAPE_CELL4_1_VCONNECT_RIGHT_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1175, 0.0000 }, { 0.1175, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_VCONNECT_RIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0935, 0.0000 }, { 0.0935, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.7957446808510639 */
SHAPE_CELL4_1_VCONNECT_CORE_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.1350, 0.3900 }, { 0.1350, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0780 }, { 0.0000, 0.0780 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL4_1_VCONNECT_CORE_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2860 }, { 0.1350, 0.2860 }, { 0.1350, 0.4160 }, { 0.0000, 0.4160 } },
    { { 0.0000, 0.0520 }, { 0.1350, 0.0520 }, { 0.1350, 0.1820 }, { 0.0000, 0.1820 } }
};    /* AREA RATIO = 0.5555555555555556 */
SHAPE_CELL4_1_VCONNECT_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.4260 }, { 0.1350, 0.4260 }, { 0.1350, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.1920 }, { 0.1350, 0.1920 }, { 0.1350, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.358974358974359 */
SHAPE_CELL4_1_VCONNECT_CORE_82_170 : list of coordinate_l = { 
    { { 0.0525, 0.0000 }, { 0.0825, 0.0000 }, { 0.0825, 0.4680 }, { 0.0525, 0.4680 } }
};    /* AREA RATIO = 0.2222222222222222 */
SHAPE_CELL4_1_VCONNECT_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_VCONNECT_CORE_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.3370 }, { 0.1350, 0.3370 }, { 0.1350, 0.3930 }, { 0.0000, 0.3930 } },
    { { 0.0000, 0.0750 }, { 0.1350, 0.0750 }, { 0.1350, 0.1310 }, { 0.0000, 0.1310 } }
};    /* AREA RATIO = 0.23931623931623933 */
SHAPE_CELL4_1_VCONNECT_CORE_17_7 : list of coordinate_l = { 
    { { 0.1075, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.4680 }, { 0.1075, 0.4680 } },
    { { 0.0000, 0.0000 }, { 0.0275, 0.0000 }, { 0.0275, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.4074074074074074 */
SHAPE_CELL4_1_VCONNECT_CORE_257_42 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_1_VCONNECT_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
LAYER_SHAPE_CELL4_1_CORE_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CORE_257_201
};

LAYER_SHAPE_CELL4_1_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CORE_6_7
};

LAYER_SHAPE_CELL4_1_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CORE_6_170
};

LAYER_SHAPE_CELL4_1_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CORE_82_170
};

LAYER_SHAPE_CELL4_1_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CORE_17_7
};

LAYER_SHAPE_CELL4_1_CORE_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CORE_257_42
};

LAYER_SHAPE_CELL4_1_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CORE_250_1
};

LAYER_SHAPE_CELL4_1_CAPTOP_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_257_201
};

LAYER_SHAPE_CELL4_1_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_6_7
};

LAYER_SHAPE_CELL4_1_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_6_160
};

LAYER_SHAPE_CELL4_1_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_6_161
};

LAYER_SHAPE_CELL4_1_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_6_170
};

LAYER_SHAPE_CELL4_1_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_82_170
};

LAYER_SHAPE_CELL4_1_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_270"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_82_270
};

LAYER_SHAPE_CELL4_1_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_17_7
};

LAYER_SHAPE_CELL4_1_CAPTOP_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_257_42
};

LAYER_SHAPE_CELL4_1_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPTOP_250_1
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_257_201
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_6_160
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_6_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_82_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_6_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_270"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_82_270
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_17_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_257_42
};

LAYER_SHAPE_CELL4_1_VCONNECT_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_CORE_250_1
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_257_201
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_270"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_257_42
};

LAYER_SHAPE_CELL4_1_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_257_201
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_257_42
};

LAYER_SHAPE_CELL4_1_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL4_1_CAPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_257_201
};

LAYER_SHAPE_CELL4_1_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_6_7
};

LAYER_SHAPE_CELL4_1_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_6_161
};

LAYER_SHAPE_CELL4_1_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_82_170
};

LAYER_SHAPE_CELL4_1_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_6_170
};

LAYER_SHAPE_CELL4_1_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_17_7
};

LAYER_SHAPE_CELL4_1_CAPLEFT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_257_42
};

LAYER_SHAPE_CELL4_1_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPLEFT_250_1
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_257_201
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_257_42
};

LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_257_201
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_6_160
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_6_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_6_161
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_82_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_6_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_17_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_257_42
};

LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_RIGHT_250_1
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_257_201
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_257_42
};

LAYER_SHAPE_CELL4_1_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPTOPLEFT_250_1
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_257_201
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_6_160
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_6_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_6_161
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_82_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_6_170
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_17_7
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_257_42
};

LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_VCONNECT_LEFT_250_1
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_201
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_42
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_201"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_257_201
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_160"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_161"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_82_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_6_170"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_17_7"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_42 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_257_42"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_257_42
};

LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_1_250_1"
    },
    polygons = SHAPE_CELL4_1_CAPBOTTOMLEFT_250_1
};





BASE_CELL4_1_DIWPO_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_DIWPO_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOP_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOP_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOP_82_270,
	    LAYER_SHAPE_CELL4_1_CAPTOP_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOP_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL4_1_DIWPO_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_DIWPO_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_1_DIWPO_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CORE_257_201,
	    LAYER_SHAPE_CELL4_1_CORE_6_7,
	    LAYER_SHAPE_CELL4_1_CORE_6_170,
	    LAYER_SHAPE_CELL4_1_CORE_82_170,
	    LAYER_SHAPE_CELL4_1_CORE_17_7,
	    LAYER_SHAPE_CELL4_1_CORE_257_42,
	    LAYER_SHAPE_CELL4_1_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL4_1_DIWPO_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_1_DIWPO_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_DIWPO_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL4_1_DIWPO_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_DIWPO_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_161,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_DIWPO_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_270,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL4_1_DIWPO_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_250_1,
    },
    repeatable = false
};


// DUMMY SPEC : Cell4_1_DIWPO
FSS_CELL4_1_DIWPO_1st : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { XBD_FILLREGION, min_space = 0, context = INTERIOR },
    { FILL_W86_DUMMY_POLY_FIRST_REGION_DIWPO, min_space = 0.001 },
    { over_size_v( FB_1, CELL4_1_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_1_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_1_FB1Y, CELL4_1_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL4_1_FB1X, CELL4_1_FB1Y ), min_space = 0 },
    { FB_2, min_space_x = CELL4_1_FB2X, min_space_y = CELL4_1_FB2Y, space_extension_x = CELL4_1_FB2X, space_extension_y = CELL4_1_FB2Y },
    { FB_26, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_28, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_29, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_31, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_36, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_38, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { SRM, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRM_1, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRAMDMY, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { OD, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { DCOD_H, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_1_CODVX, min_space_y = CELL4_1_CODVY, space_extension_x = CELL4_1_CODVX, space_extension_y = CELL4_1_CODVY },
    { DCOD_V, min_space_x = CELL4_1_DCODVX, min_space_y = CELL4_1_DCODVY, space_extension_x = CELL4_1_DCODVX, space_extension_y = CELL4_1_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_1_ODMMBX, min_space_y = CELL4_1_ODMMBY, space_extension_x = CELL4_1_ODMMBX, space_extension_y = CELL4_1_ODMMBY },
    { PO, min_space_x = CELL4_1_POX, min_space_y = CELL4_1_POY, space_extension_x = CELL4_1_POX, space_extension_y = CELL4_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_1_SRDPOX, min_space_y = CELL4_1_SRDPOY, space_extension_x = CELL4_1_SRDPOX, space_extension_y = CELL4_1_SRDPOY },
    { PO3, min_space_x = CELL4_1_PO3X, min_space_y = CELL4_1_PO3Y, space_extension_x = CELL4_1_PO3X, space_extension_y = CELL4_1_PO3Y },
    { POLE8, min_space_x = CELL4_1_POLE8X, min_space_y = CELL4_1_POLE8Y, space_extension_x = CELL4_1_POLE8X, space_extension_y = CELL4_1_POLE8Y },
    { PO9, min_space_x = CELL4_1_PO9X, min_space_y = CELL4_1_PO9Y, space_extension_x = CELL4_1_PO9X, space_extension_y = CELL4_1_PO9Y },
    { PO54, min_space_x = CELL4_1_PO54X, min_space_y = CELL4_1_PO54Y, space_extension_x = CELL4_1_PO54X, space_extension_y = CELL4_1_PO54Y },
    { PO86, min_space_x = CELL4_1_PO86X, min_space_y = CELL4_1_PO86Y, space_extension_x = CELL4_1_PO86X, space_extension_y = CELL4_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_1_SR_DPO3X, min_space_y = CELL4_1_SR_DPO3Y, space_extension_x = CELL4_1_SR_DPO3X, space_extension_y = CELL4_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_1_SR_DPOLE8X, min_space_y = CELL4_1_SR_DPOLE8Y, space_extension_x = CELL4_1_SR_DPOLE8X, space_extension_y = CELL4_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_1_SR_DPO9X, min_space_y = CELL4_1_SR_DPO9Y, space_extension_x = CELL4_1_SR_DPO9X, space_extension_y = CELL4_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_1_SR_DPO54X, min_space_y = CELL4_1_SR_DPO54Y, space_extension_x = CELL4_1_SR_DPO54X, space_extension_y = CELL4_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_1_SR_DPO86X, min_space_y = CELL4_1_SR_DPO86Y, space_extension_x = CELL4_1_SR_DPO86X, space_extension_y = CELL4_1_SR_DPO86Y },
    { PO_P54, min_space = CELL4_1_PO_P54 },
    { PO_P81, min_space = CELL4_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_1_PO_P81_WPO },
    { PO_P57, min_space = CELL4_1_PO_P57 },
    { CPO, min_space_x = CELL4_1_CPOX, min_space_y = CELL4_1_CPOY, space_extension_x = CELL4_1_CPOX, space_extension_y = CELL4_1_CPOY },
    { SR_DCPO, min_space_x = CELL4_1_SR_DCPOX, min_space_y = CELL4_1_SR_DCPOY, space_extension_x = CELL4_1_SR_DCPOX, space_extension_y = CELL4_1_SR_DCPOY },
    { CPO20, min_space_x = CELL4_1_CPO20X, min_space_y = CELL4_1_CPO20Y, space_extension_x = CELL4_1_CPO20X, space_extension_y = CELL4_1_CPO20Y },
    { CPO22, min_space_x = CELL4_1_CPO22X, min_space_y = CELL4_1_CPO22Y, space_extension_x = CELL4_1_CPO22X, space_extension_y = CELL4_1_CPO22Y },
    { CPO25, min_space_x = CELL4_1_CPO25X, min_space_y = CELL4_1_CPO25Y, space_extension_x = CELL4_1_CPO25X, space_extension_y = CELL4_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_1_SR_DCPO20X, min_space_y = CELL4_1_SR_DCPO20Y, space_extension_x = CELL4_1_SR_DCPO20X, space_extension_y = CELL4_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_1_SR_DCPO22X, min_space_y = CELL4_1_SR_DCPO22Y, space_extension_x = CELL4_1_SR_DCPO22X, space_extension_y = CELL4_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_1_SR_DCPO25X, min_space_y = CELL4_1_SR_DCPO25Y, space_extension_x = CELL4_1_SR_DCPO25X, space_extension_y = CELL4_1_SR_DCPO25Y },
    { MD, min_space_x = CELL4_1_MDX, min_space_y = CELL4_1_MDY, space_extension_x = CELL4_1_MDX, space_extension_y = CELL4_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_1_SRDMDX, min_space_y = CELL4_1_SRDMDY, space_extension_x = CELL4_1_SRDMDX, space_extension_y = CELL4_1_SRDMDY },
    { MD16, min_space_x = CELL4_1_MD16X, min_space_y = CELL4_1_MD16Y, space_extension_x = CELL4_1_MD16X, space_extension_y = CELL4_1_MD16Y },
    { MD30, min_space_x = CELL4_1_MD30X, min_space_y = CELL4_1_MD30Y, space_extension_x = CELL4_1_MD30X, space_extension_y = CELL4_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_1_SR_DMD16X, min_space_y = CELL4_1_SR_DMD16Y, space_extension_x = CELL4_1_SR_DMD16X, space_extension_y = CELL4_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_1_SR_DMD30X, min_space_y = CELL4_1_SR_DMD30Y, space_extension_x = CELL4_1_SR_DMD30X, space_extension_y = CELL4_1_SR_DMD30Y },
    { CMD, min_space_x = CELL4_1_CMDX, min_space_y = CELL4_1_CMDY, space_extension_x = CELL4_1_CMDX, space_extension_y = CELL4_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_1_SR_DCMDX, min_space_y = CELL4_1_SR_DCMDY, space_extension_x = CELL4_1_SR_DCMDX, space_extension_y = CELL4_1_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_1_NW_CENTERLINE },
    { NT_N, min_space = CELL4_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_1_OD2X, min_space_y = CELL4_1_OD2Y, space_extension_x = CELL4_1_OD2X, space_extension_y = CELL4_1_OD2Y },
    { NWDMY, min_space = CELL4_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_1_VAR },
    { DFBC, min_space_x = CELL4_1_DFBCX, min_space_y = CELL4_1_DFBCY, space_extension_x = CELL4_1_DFBCX, space_extension_y = CELL4_1_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_1_DFBC_ALLX, min_space_y = CELL4_1_DFBC_ALLY, space_extension_x = CELL4_1_DFBC_ALLX, space_extension_y = CELL4_1_DFBC_ALLY },
    { DC1, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_1_CELL4_2X, min_space_y = CELL4_1_CELL4_2Y, space_extension_x = CELL4_1_CELL4_2X, space_extension_y = CELL4_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_1_CELL5_2X, min_space_y = CELL4_1_CELL5_2Y, space_extension_x = CELL4_1_CELL5_2X, space_extension_y = CELL4_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_1_CELL6_1X, min_space_y = CELL4_1_CELL6_1Y, space_extension_x = CELL4_1_CELL6_1X, space_extension_y = CELL4_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_1_CELL6_2X, min_space_y = CELL4_1_CELL6_2Y, space_extension_x = CELL4_1_CELL6_2X, space_extension_y = CELL4_1_CELL6_2Y },
    { DC7, min_space_x = CELL4_1_CELL7X, min_space_y = CELL4_1_CELL7Y, space_extension_x = CELL4_1_CELL7X, space_extension_y = CELL4_1_CELL7Y },
    { DC8_1, min_space_x = CELL4_1_CELL8_1X, min_space_y = CELL4_1_CELL8_1Y, space_extension_x = CELL4_1_CELL8_1X, space_extension_y = CELL4_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_1_CELL8_2X, min_space_y = CELL4_1_CELL8_2Y, space_extension_x = CELL4_1_CELL8_2X, space_extension_y = CELL4_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif    
}; // end of FSS_CELL4_1_DIWPO
//=========================================================================================

PATTERN_CELL4_1_DIWPO_1st : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_1_DIWPO_4,
		BASE_CELL4_1_DIWPO_5,
		BASE_CELL4_1_DIWPO_6,
	    },
	    base_cell_top = {
		BASE_CELL4_1_DIWPO_1,
		BASE_CELL4_1_DIWPO_2,
		BASE_CELL4_1_DIWPO_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_1_DIWPO_7,
		BASE_CELL4_1_DIWPO_8,
		BASE_CELL4_1_DIWPO_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, east = 0 , south = 0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix =  "CELL4_1_DIWPO",
	    fill_to_signal_spacing = FSS_CELL4_1_DIWPO_1st,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,      
	    merging_cell = {
		BASE_CELL4_1_DIWPO_R1,
		BASE_CELL4_1_DIWPO_R2,
		BASE_CELL4_1_DIWPO_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif        
	}
    },
}; // end of PATTERN_CELL4_1_DIWPO

            
CELL4_1_DIWPO_1st_region = unified_fill_region(
    FSS_CELL4_1_DIWPO_1st,
    fill_boundary = {
      layer = CHIP_snps,
      type = LAYER
    }
);

cell4_1_DIWPO_1st_retarget = retarget_with_local_protection(
  CELL4_1_DIWPO_1st_region /*fillable region*/,
  PATTERN_CELL4_1_DIWPO_1st[0].expandable_polygon_fill.pattern_spec /*pattern_spec*/,
  0.367 /*width*/,
  0.370 /*height*/,
  vGRID  /*grid*/
);

SPEC_CELL4_1_DIWPO_1st = unified_fill(
    fill_patterns = PATTERN_CELL4_1_DIWPO_1st,
    fill_boundary = {
	layer = cell4_1_DIWPO_1st_retarget,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL4_1_DIWPO_EXTENT"
	},
    }
);

st_CELL4_1_DIWPO_257_201_C   = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_257_201"][0];
st_CELL4_1_DIWPO_6_160_C     = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_6_160"][0];
st_CELL4_1_DIWPO_6_7_C       = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_6_7"][0];
st_CELL4_1_DIWPO_82_170_C    = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_82_170"][0];
st_CELL4_1_DIWPO_82_270_C    = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_82_270"][0];
st_CELL4_1_DIWPO_6_170_C     = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_6_170"][0];
st_CELL4_1_DIWPO_6_161_C     = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_6_161"][0];
st_CELL4_1_DIWPO_17_7_C      = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_17_7"][0];
st_CELL4_1_DIWPO_257_42_C    = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_257_42"][0];
st_CELL4_1_DIWPO_250_1_C     = SPEC_CELL4_1_DIWPO_1st["OUTPUT_CELL4_1_250_1"][0];
st_CELL4_1_DIWPO_E           = SPEC_CELL4_1_DIWPO_1st["CELL4_1_DIWPO_EXTENT"][0];

FSS_CELL4_1_DIWPO_2nd : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { XBD_FILLREGION, min_space = 0, context = INTERIOR },
    { FILL_W86_DUMMY_POLY_FIRST_REGION_DIWPO, min_space = 0.001 },
    { over_size_v( FB_1, CELL4_1_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_1_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_1_FB1Y, CELL4_1_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL4_1_FB1X, CELL4_1_FB1Y ), min_space = 0 },
    { FB_2, min_space_x = CELL4_1_FB2X, min_space_y = CELL4_1_FB2Y, space_extension_x = CELL4_1_FB2X, space_extension_y = CELL4_1_FB2Y },
    { FB_26, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_28, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_29, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_31, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_36, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_38, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { SRM, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRM_1, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRAMDMY, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { OD, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { DCOD_H, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_1_CODVX, min_space_y = CELL4_1_CODVY, space_extension_x = CELL4_1_CODVX, space_extension_y = CELL4_1_CODVY },
    { DCOD_V, min_space_x = CELL4_1_DCODVX, min_space_y = CELL4_1_DCODVY, space_extension_x = CELL4_1_DCODVX, space_extension_y = CELL4_1_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_1_ODMMBX, min_space_y = CELL4_1_ODMMBY, space_extension_x = CELL4_1_ODMMBX, space_extension_y = CELL4_1_ODMMBY },
    { PO, min_space_x = CELL4_1_POX, min_space_y = CELL4_1_POY, space_extension_x = CELL4_1_POX, space_extension_y = CELL4_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_1_SRDPOX, min_space_y = CELL4_1_SRDPOY, space_extension_x = CELL4_1_SRDPOX, space_extension_y = CELL4_1_SRDPOY },
    { PO3, min_space_x = CELL4_1_PO3X, min_space_y = CELL4_1_PO3Y, space_extension_x = CELL4_1_PO3X, space_extension_y = CELL4_1_PO3Y },
    { POLE8, min_space_x = CELL4_1_POLE8X, min_space_y = CELL4_1_POLE8Y, space_extension_x = CELL4_1_POLE8X, space_extension_y = CELL4_1_POLE8Y },
    { PO9, min_space_x = CELL4_1_PO9X, min_space_y = CELL4_1_PO9Y, space_extension_x = CELL4_1_PO9X, space_extension_y = CELL4_1_PO9Y },
    { PO54, min_space_x = CELL4_1_PO54X, min_space_y = CELL4_1_PO54Y, space_extension_x = CELL4_1_PO54X, space_extension_y = CELL4_1_PO54Y },
    { PO86, min_space_x = CELL4_1_PO86X, min_space_y = CELL4_1_PO86Y, space_extension_x = CELL4_1_PO86X, space_extension_y = CELL4_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_1_SR_DPO3X, min_space_y = CELL4_1_SR_DPO3Y, space_extension_x = CELL4_1_SR_DPO3X, space_extension_y = CELL4_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_1_SR_DPOLE8X, min_space_y = CELL4_1_SR_DPOLE8Y, space_extension_x = CELL4_1_SR_DPOLE8X, space_extension_y = CELL4_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_1_SR_DPO9X, min_space_y = CELL4_1_SR_DPO9Y, space_extension_x = CELL4_1_SR_DPO9X, space_extension_y = CELL4_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_1_SR_DPO54X, min_space_y = CELL4_1_SR_DPO54Y, space_extension_x = CELL4_1_SR_DPO54X, space_extension_y = CELL4_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_1_SR_DPO86X, min_space_y = CELL4_1_SR_DPO86Y, space_extension_x = CELL4_1_SR_DPO86X, space_extension_y = CELL4_1_SR_DPO86Y },
    { PO_P54, min_space = CELL4_1_PO_P54 },
    { PO_P81, min_space = CELL4_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_1_PO_P81_WPO },
    { PO_P57, min_space = CELL4_1_PO_P57 },
    { CPO, min_space_x = CELL4_1_CPOX, min_space_y = CELL4_1_CPOY, space_extension_x = CELL4_1_CPOX, space_extension_y = CELL4_1_CPOY },
    { SR_DCPO, min_space_x = CELL4_1_SR_DCPOX, min_space_y = CELL4_1_SR_DCPOY, space_extension_x = CELL4_1_SR_DCPOX, space_extension_y = CELL4_1_SR_DCPOY },
    { CPO20, min_space_x = CELL4_1_CPO20X, min_space_y = CELL4_1_CPO20Y, space_extension_x = CELL4_1_CPO20X, space_extension_y = CELL4_1_CPO20Y },
    { CPO22, min_space_x = CELL4_1_CPO22X, min_space_y = CELL4_1_CPO22Y, space_extension_x = CELL4_1_CPO22X, space_extension_y = CELL4_1_CPO22Y },
    { CPO25, min_space_x = CELL4_1_CPO25X, min_space_y = CELL4_1_CPO25Y, space_extension_x = CELL4_1_CPO25X, space_extension_y = CELL4_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_1_SR_DCPO20X, min_space_y = CELL4_1_SR_DCPO20Y, space_extension_x = CELL4_1_SR_DCPO20X, space_extension_y = CELL4_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_1_SR_DCPO22X, min_space_y = CELL4_1_SR_DCPO22Y, space_extension_x = CELL4_1_SR_DCPO22X, space_extension_y = CELL4_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_1_SR_DCPO25X, min_space_y = CELL4_1_SR_DCPO25Y, space_extension_x = CELL4_1_SR_DCPO25X, space_extension_y = CELL4_1_SR_DCPO25Y },
    { MD, min_space_x = CELL4_1_MDX, min_space_y = CELL4_1_MDY, space_extension_x = CELL4_1_MDX, space_extension_y = CELL4_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_1_SRDMDX, min_space_y = CELL4_1_SRDMDY, space_extension_x = CELL4_1_SRDMDX, space_extension_y = CELL4_1_SRDMDY },
    { MD16, min_space_x = CELL4_1_MD16X, min_space_y = CELL4_1_MD16Y, space_extension_x = CELL4_1_MD16X, space_extension_y = CELL4_1_MD16Y },
    { MD30, min_space_x = CELL4_1_MD30X, min_space_y = CELL4_1_MD30Y, space_extension_x = CELL4_1_MD30X, space_extension_y = CELL4_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_1_SR_DMD16X, min_space_y = CELL4_1_SR_DMD16Y, space_extension_x = CELL4_1_SR_DMD16X, space_extension_y = CELL4_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_1_SR_DMD30X, min_space_y = CELL4_1_SR_DMD30Y, space_extension_x = CELL4_1_SR_DMD30X, space_extension_y = CELL4_1_SR_DMD30Y },
    { CMD, min_space_x = CELL4_1_CMDX, min_space_y = CELL4_1_CMDY, space_extension_x = CELL4_1_CMDX, space_extension_y = CELL4_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_1_SR_DCMDX, min_space_y = CELL4_1_SR_DCMDY, space_extension_x = CELL4_1_SR_DCMDX, space_extension_y = CELL4_1_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_1_NW_CENTERLINE },
    { NT_N, min_space = CELL4_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_1_OD2X, min_space_y = CELL4_1_OD2Y, space_extension_x = CELL4_1_OD2X, space_extension_y = CELL4_1_OD2Y },
    { NWDMY, min_space = CELL4_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_1_VAR },
    { DFBC, min_space_x = CELL4_1_DFBCX, min_space_y = CELL4_1_DFBCY, space_extension_x = CELL4_1_DFBCX, space_extension_y = CELL4_1_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_1_DFBC_ALLX, min_space_y = CELL4_1_DFBC_ALLY, space_extension_x = CELL4_1_DFBC_ALLX, space_extension_y = CELL4_1_DFBC_ALLY },
    { DC1, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_1_CELL4_2X, min_space_y = CELL4_1_CELL4_2Y, space_extension_x = CELL4_1_CELL4_2X, space_extension_y = CELL4_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_1_CELL5_2X, min_space_y = CELL4_1_CELL5_2Y, space_extension_x = CELL4_1_CELL5_2X, space_extension_y = CELL4_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_1_CELL6_1X, min_space_y = CELL4_1_CELL6_1Y, space_extension_x = CELL4_1_CELL6_1X, space_extension_y = CELL4_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_1_CELL6_2X, min_space_y = CELL4_1_CELL6_2Y, space_extension_x = CELL4_1_CELL6_2X, space_extension_y = CELL4_1_CELL6_2Y },
    { DC7, min_space_x = CELL4_1_CELL7X, min_space_y = CELL4_1_CELL7Y, space_extension_x = CELL4_1_CELL7X, space_extension_y = CELL4_1_CELL7Y },
    { DC8_1, min_space_x = CELL4_1_CELL8_1X, min_space_y = CELL4_1_CELL8_1Y, space_extension_x = CELL4_1_CELL8_1X, space_extension_y = CELL4_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_1_CELL8_2X, min_space_y = CELL4_1_CELL8_2Y, space_extension_x = CELL4_1_CELL8_2X, space_extension_y = CELL4_1_CELL8_2Y },

    {st_CELL4_1_DIWPO_257_42_C, min_space_x = 0.045, min_space_y = 0.124 },    
#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif    
}; // end of FSS_CELL4_1_DIWPO_2nd

PATTERN_CELL4_1_DIWPO_2nd : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_1_DIWPO_4,
		BASE_CELL4_1_DIWPO_5,
		BASE_CELL4_1_DIWPO_6,
	    },
	    base_cell_top = {
		BASE_CELL4_1_DIWPO_1,
		BASE_CELL4_1_DIWPO_2,
		BASE_CELL4_1_DIWPO_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_1_DIWPO_7,
		BASE_CELL4_1_DIWPO_8,
		BASE_CELL4_1_DIWPO_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, east = 0 , south = 0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix =  "CELL4_1_DIWPO",
	    fill_to_signal_spacing = FSS_CELL4_1_DIWPO_2nd,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,      
	    merging_cell = {
		BASE_CELL4_1_DIWPO_R1,
		BASE_CELL4_1_DIWPO_R2,
		BASE_CELL4_1_DIWPO_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
	}
    },
}; // end of PATTERN_CELL4_1_DIWPO


SPEC_CELL4_1_DIWPO_2nd = unified_fill(
    fill_patterns = PATTERN_CELL4_1_DIWPO_2nd,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL4_1_DIWPO_EXTENT"
	},
    }
);
nd_CELL4_1_DIWPO_257_201_C   = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_257_201"][0];
nd_CELL4_1_DIWPO_6_160_C     = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_6_160"][0];
nd_CELL4_1_DIWPO_6_7_C       = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_6_7"][0];
nd_CELL4_1_DIWPO_82_170_C    = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_82_170"][0];
nd_CELL4_1_DIWPO_82_270_C    = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_82_270"][0];
nd_CELL4_1_DIWPO_6_170_C     = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_6_170"][0];
nd_CELL4_1_DIWPO_6_161_C     = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_6_161"][0];
nd_CELL4_1_DIWPO_17_7_C      = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_17_7"][0];
nd_CELL4_1_DIWPO_257_42_C    = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_257_42"][0];
nd_CELL4_1_DIWPO_250_1_C     = SPEC_CELL4_1_DIWPO_2nd["OUTPUT_CELL4_1_250_1"][0];
nd_CELL4_1_DIWPO_E           = SPEC_CELL4_1_DIWPO_2nd["CELL4_1_DIWPO_EXTENT"][0];

CELL4_1_DIWPO_257_201_C = st_CELL4_1_DIWPO_257_201_C  or nd_CELL4_1_DIWPO_257_201_C; 
CELL4_1_DIWPO_6_160_C   = st_CELL4_1_DIWPO_6_160_C    or nd_CELL4_1_DIWPO_6_160_C;   
CELL4_1_DIWPO_6_7_C     = st_CELL4_1_DIWPO_6_7_C      or nd_CELL4_1_DIWPO_6_7_C;      
CELL4_1_DIWPO_82_170_C  = st_CELL4_1_DIWPO_82_170_C   or nd_CELL4_1_DIWPO_82_170_C;  
CELL4_1_DIWPO_82_270_C  = st_CELL4_1_DIWPO_82_270_C   or nd_CELL4_1_DIWPO_82_270_C;  
CELL4_1_DIWPO_6_170_C   = st_CELL4_1_DIWPO_6_170_C    or nd_CELL4_1_DIWPO_6_170_C;   
CELL4_1_DIWPO_6_161_C   = st_CELL4_1_DIWPO_6_161_C    or nd_CELL4_1_DIWPO_6_161_C;   
CELL4_1_DIWPO_17_7_C    = st_CELL4_1_DIWPO_17_7_C     or nd_CELL4_1_DIWPO_17_7_C;    
CELL4_1_DIWPO_257_42_C  = st_CELL4_1_DIWPO_257_42_C   or nd_CELL4_1_DIWPO_257_42_C;  
CELL4_1_DIWPO_250_1_C   = st_CELL4_1_DIWPO_250_1_C    or nd_CELL4_1_DIWPO_250_1_C;   
CELL4_1_DIWPO_E         = st_CELL4_1_DIWPO_E          or nd_CELL4_1_DIWPO_E;  



SHAPE_CELL4_2_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0420 }, { 0.1660, 0.0420 }, { 0.1660, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_2_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.1660, 0.1300 }, { 0.1660, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.2441860465116279 */
SHAPE_CELL4_2_CAPBOTTOM_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.1660, 0.0290 }, { 0.1660, 0.0810 }, { 0.0000, 0.0810 } }
};    /* AREA RATIO = 0.3023255813953488 */
SHAPE_CELL4_2_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0690 }, { 0.0980, 0.0690 }, { 0.0980, 0.1720 }, { 0.0680, 0.1720 } }
};    /* AREA RATIO = 0.10822359204258895 */
SHAPE_CELL4_2_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.1660, 0.0290 }, { 0.1660, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.8313953488372093 */
SHAPE_CELL4_2_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1660, 0.0410 }, { 0.1660, 0.0970 }, { 0.0000, 0.0970 } }
};    /* AREA RATIO = 0.32558139534883723 */
SHAPE_CELL4_2_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.1230, 0.0390 }, { 0.1660, 0.0390 }, { 0.1660, 0.1720 }, { 0.1230, 0.1720 } },
    { { 0.0000, 0.0390 }, { 0.0430, 0.0390 }, { 0.0430, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.4006024096385542 */
SHAPE_CELL4_2_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1660, 0.0520 }, { 0.1660, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.6976744186046512 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.0420 }, { 0.1330, 0.0420 }, { 0.1330, 0.1200 }, { 0.0465, 0.1200 } }
};    /* AREA RATIO = 0.294937926210876 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.1300 }, { 0.1330, 0.1300 }, { 0.1330, 0.1720 }, { 0.0900, 0.1720 } }
};    /* AREA RATIO = 0.07894736842105263 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.1720 }, { 0.0900, 0.1720 }, { 0.0900, 0.0810 }, { 0.1330, 0.0810 }, { 0.1330, 0.0290 }, { 0.0455, 0.0290 } }
};    /* AREA RATIO = 0.37591799265605874 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0690 }, { 0.0650, 0.0690 }, { 0.0650, 0.1720 }, { 0.0350, 0.1720 } }
};    /* AREA RATIO = 0.13507606224864488 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0290 }, { 0.1330, 0.0290 }, { 0.1330, 0.1720 }, { 0.0455, 0.1720 } }
};    /* AREA RATIO = 0.5469706242350061 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0390 }, { 0.1330, 0.0390 }, { 0.1330, 0.1720 }, { 0.0900, 0.1720 } }
};    /* AREA RATIO = 0.25 */
SHAPE_CELL4_2_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0520 }, { 0.1330, 0.0520 }, { 0.1330, 0.1720 }, { 0.0240, 0.1720 } }
};    /* AREA RATIO = 0.5717782829165938 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0420 }, { 0.0865, 0.0420 }, { 0.0865, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.294937926210876 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.0430, 0.1300 }, { 0.0430, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.07894736842105263 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0810 }, { 0.0430, 0.0810 }, { 0.0430, 0.1720 }, { 0.0875, 0.1720 }, { 0.0875, 0.0290 }, { 0.0000, 0.0290 } }
};    /* AREA RATIO = 0.37591799265605874 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0690 }, { 0.0980, 0.0690 }, { 0.0980, 0.1720 }, { 0.0680, 0.1720 } }
};    /* AREA RATIO = 0.13507606224864488 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0290 }, { 0.0875, 0.0290 }, { 0.0875, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.5469706242350061 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0390 }, { 0.0430, 0.0390 }, { 0.0430, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.25 */
SHAPE_CELL4_2_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1090, 0.0520 }, { 0.1090, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.5717782829165938 */
SHAPE_CELL4_2_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0900, 0.0260 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_CAPLEFT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.0900, 0.0000 }, { 0.0900, 0.0260 }, { 0.0455, 0.0260 } }
};    /* AREA RATIO = 0.33458646616541354 */
SHAPE_CELL4_2_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.0260 }, { 0.0350, 0.0260 } }
};    /* AREA RATIO = 0.22556390977443608 */
SHAPE_CELL4_2_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0455, 0.0260 } }
};    /* AREA RATIO = 0.6578947368421053 */
SHAPE_CELL4_2_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0900, 0.0260 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0240, 0.0260 } }
};    /* AREA RATIO = 0.8195488721804511 */
SHAPE_CELL4_2_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_CAPRIGHT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0430, 0.0000 }, { 0.0875, 0.0000 }, { 0.0875, 0.0260 }, { 0.0430, 0.0260 } }
};    /* AREA RATIO = 0.33458646616541354 */
SHAPE_CELL4_2_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.0260 }, { 0.0680, 0.0260 } }
};    /* AREA RATIO = 0.22556390977443608 */
SHAPE_CELL4_2_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0875, 0.0000 }, { 0.0875, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.6578947368421053 */
SHAPE_CELL4_2_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1090, 0.0000 }, { 0.1090, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.8195488721804511 */
SHAPE_CELL4_2_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1660, 0.0520 }, { 0.1660, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL4_2_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.2441860465116279 */
SHAPE_CELL4_2_CAPTOP_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0910 }, { 0.1660, 0.0910 }, { 0.1660, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.3023255813953488 */
SHAPE_CELL4_2_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.1030 }, { 0.0680, 0.1030 } }
};    /* AREA RATIO = 0.10822359204258895 */
SHAPE_CELL4_2_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.8313953488372093 */
SHAPE_CELL4_2_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0750 }, { 0.1660, 0.0750 }, { 0.1660, 0.1310 }, { 0.0000, 0.1310 } }
};    /* AREA RATIO = 0.32558139534883723 */
SHAPE_CELL4_2_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.1230, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.1330 }, { 0.1230, 0.1330 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.4006024096385542 */
SHAPE_CELL4_2_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.6976744186046512 */
SHAPE_CELL4_2_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.0520 }, { 0.1330, 0.0520 }, { 0.1330, 0.1300 }, { 0.0465, 0.1300 } }
};    /* AREA RATIO = 0.294937926210876 */
SHAPE_CELL4_2_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0420 }, { 0.0900, 0.0420 } }
};    /* AREA RATIO = 0.07894736842105263 */
SHAPE_CELL4_2_CAPTOPLEFT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.1430 }, { 0.1330, 0.1430 }, { 0.1330, 0.0910 }, { 0.0900, 0.0910 }, { 0.0900, 0.0000 }, { 0.0455, 0.0000 } }
};    /* AREA RATIO = 0.37591799265605874 */
SHAPE_CELL4_2_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.1030 }, { 0.0350, 0.1030 } }
};    /* AREA RATIO = 0.13507606224864488 */
SHAPE_CELL4_2_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1430 }, { 0.0455, 0.1430 } }
};    /* AREA RATIO = 0.5469706242350061 */
SHAPE_CELL4_2_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1330 }, { 0.0900, 0.1330 } }
};    /* AREA RATIO = 0.25 */
SHAPE_CELL4_2_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1200 }, { 0.0240, 0.1200 } }
};    /* AREA RATIO = 0.5717782829165938 */
SHAPE_CELL4_2_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0865, 0.0520 }, { 0.0865, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 0.294937926210876 */
SHAPE_CELL4_2_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.07894736842105263 */
SHAPE_CELL4_2_CAPTOPRIGHT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1430 }, { 0.0875, 0.1430 }, { 0.0875, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0910 }, { 0.0000, 0.0910 } }
};    /* AREA RATIO = 0.37591799265605874 */
SHAPE_CELL4_2_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.1030 }, { 0.0680, 0.1030 } }
};    /* AREA RATIO = 0.13507606224864488 */
SHAPE_CELL4_2_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0875, 0.0000 }, { 0.0875, 0.1430 }, { 0.0000, 0.1430 } }
};    /* AREA RATIO = 0.5469706242350061 */
SHAPE_CELL4_2_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.25 */
SHAPE_CELL4_2_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1090, 0.0000 }, { 0.1090, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.5717782829165938 */
SHAPE_CELL4_2_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CORE_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CORE_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.0260 }, { 0.0680, 0.0260 } }
};    /* AREA RATIO = 0.18072289156626506 */
SHAPE_CELL4_2_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_CORE_17_7 : list of coordinate_l = { 
    { { 0.1230, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0260 }, { 0.1230, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.5180722891566265 */
SHAPE_CELL4_2_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_CORE_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2860 }, { 0.1660, 0.2860 }, { 0.1660, 0.4160 }, { 0.0000, 0.4160 } },
    { { 0.0000, 0.0520 }, { 0.1660, 0.0520 }, { 0.1660, 0.1820 }, { 0.0000, 0.1820 } }
};    /* AREA RATIO = 0.5555555555555556 */
SHAPE_CELL4_2_VCONNECT_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.4260 }, { 0.1660, 0.4260 }, { 0.1660, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.1920 }, { 0.1660, 0.1920 }, { 0.1660, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.358974358974359 */
SHAPE_CELL4_2_VCONNECT_CORE_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_CORE_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.4680 }, { 0.0680, 0.4680 } }
};    /* AREA RATIO = 0.18072289156626506 */
SHAPE_CELL4_2_VCONNECT_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_CORE_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.3370 }, { 0.1660, 0.3370 }, { 0.1660, 0.3930 }, { 0.0000, 0.3930 } },
    { { 0.0000, 0.0750 }, { 0.1660, 0.0750 }, { 0.1660, 0.1310 }, { 0.0000, 0.1310 } }
};    /* AREA RATIO = 0.23931623931623933 */
SHAPE_CELL4_2_VCONNECT_CORE_17_7 : list of coordinate_l = { 
    { { 0.1230, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.4680 }, { 0.1230, 0.4680 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.5180722891566265 */
SHAPE_CELL4_2_VCONNECT_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1660, 0.0000 }, { 0.1660, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_LEFT_6_160 : list of coordinate_l = { 
    { { 0.0465, 0.2860 }, { 0.1330, 0.2860 }, { 0.1330, 0.4160 }, { 0.0465, 0.4160 } },
    { { 0.0465, 0.0520 }, { 0.1330, 0.0520 }, { 0.1330, 0.1820 }, { 0.0465, 0.1820 } }
};    /* AREA RATIO = 0.3613199665831245 */
SHAPE_CELL4_2_VCONNECT_LEFT_6_7 : list of coordinate_l = { 
    { { 0.0900, 0.4260 }, { 0.1330, 0.4260 }, { 0.1330, 0.4680 }, { 0.0900, 0.4680 } },
    { { 0.0900, 0.1920 }, { 0.1330, 0.1920 }, { 0.1330, 0.2760 }, { 0.0900, 0.2760 } },
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.0420 }, { 0.0900, 0.0420 } }
};    /* AREA RATIO = 0.11605937921727395 */
SHAPE_CELL4_2_VCONNECT_LEFT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_LEFT_6_161 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.0900, 0.0000 }, { 0.0900, 0.4680 }, { 0.0455, 0.4680 } }
};    /* AREA RATIO = 0.33458646616541354 */
SHAPE_CELL4_2_VCONNECT_LEFT_82_170 : list of coordinate_l = { 
    { { 0.0350, 0.0000 }, { 0.0650, 0.0000 }, { 0.0650, 0.4680 }, { 0.0350, 0.4680 } }
};    /* AREA RATIO = 0.22556390977443608 */
SHAPE_CELL4_2_VCONNECT_LEFT_6_170 : list of coordinate_l = { 
    { { 0.0455, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.4680 }, { 0.0455, 0.4680 } }
};    /* AREA RATIO = 0.6578947368421053 */
SHAPE_CELL4_2_VCONNECT_LEFT_17_7 : list of coordinate_l = { 
    { { 0.0900, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.4680 }, { 0.0900, 0.4680 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_VCONNECT_LEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.4680 }, { 0.0240, 0.4680 } }
};    /* AREA RATIO = 0.8195488721804511 */
SHAPE_CELL4_2_VCONNECT_RIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2860 }, { 0.0865, 0.2860 }, { 0.0865, 0.4160 }, { 0.0000, 0.4160 } },
    { { 0.0000, 0.0520 }, { 0.0865, 0.0520 }, { 0.0865, 0.1820 }, { 0.0000, 0.1820 } }
};    /* AREA RATIO = 0.3613199665831245 */
SHAPE_CELL4_2_VCONNECT_RIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.4260 }, { 0.0430, 0.4260 }, { 0.0430, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.1920 }, { 0.0430, 0.1920 }, { 0.0430, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0420 }, { 0.0000, 0.0420 } }
};    /* AREA RATIO = 0.11605937921727395 */
SHAPE_CELL4_2_VCONNECT_RIGHT_257_44 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1330, 0.0000 }, { 0.1330, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL4_2_VCONNECT_RIGHT_6_161 : list of coordinate_l = { 
    { { 0.0430, 0.0000 }, { 0.0875, 0.0000 }, { 0.0875, 0.4680 }, { 0.0430, 0.4680 } }
};    /* AREA RATIO = 0.33458646616541354 */
SHAPE_CELL4_2_VCONNECT_RIGHT_82_170 : list of coordinate_l = { 
    { { 0.0680, 0.0000 }, { 0.0980, 0.0000 }, { 0.0980, 0.4680 }, { 0.0680, 0.4680 } }
};    /* AREA RATIO = 0.22556390977443608 */
SHAPE_CELL4_2_VCONNECT_RIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0875, 0.0000 }, { 0.0875, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.6578947368421053 */
SHAPE_CELL4_2_VCONNECT_RIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.3233082706766917 */
SHAPE_CELL4_2_VCONNECT_RIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1090, 0.0000 }, { 0.1090, 0.4680 }, { 0.0000, 0.4680 } }
};    /* AREA RATIO = 0.8195488721804511 */
LAYER_SHAPE_CELL4_2_CORE_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CORE_257_44
};

LAYER_SHAPE_CELL4_2_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CORE_6_7
};

LAYER_SHAPE_CELL4_2_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CORE_6_170
};

LAYER_SHAPE_CELL4_2_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CORE_82_170
};

LAYER_SHAPE_CELL4_2_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CORE_17_7
};

LAYER_SHAPE_CELL4_2_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CORE_250_1
};

LAYER_SHAPE_CELL4_2_CAPTOP_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_257_44
};

LAYER_SHAPE_CELL4_2_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_6_7
};

LAYER_SHAPE_CELL4_2_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_6_160
};

LAYER_SHAPE_CELL4_2_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_6_161
};

LAYER_SHAPE_CELL4_2_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_6_170
};

LAYER_SHAPE_CELL4_2_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_82_170
};

LAYER_SHAPE_CELL4_2_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_270"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_82_270
};

LAYER_SHAPE_CELL4_2_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_17_7
};

LAYER_SHAPE_CELL4_2_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPTOP_250_1
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_6_160
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_6_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_257_44
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_82_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_6_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_270"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_82_270
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_17_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_CORE_250_1
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_257_44
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_270"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_257_44
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL4_2_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL4_2_CAPLEFT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_257_44
};

LAYER_SHAPE_CELL4_2_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_6_7
};

LAYER_SHAPE_CELL4_2_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_6_161
};

LAYER_SHAPE_CELL4_2_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_82_170
};

LAYER_SHAPE_CELL4_2_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_6_170
};

LAYER_SHAPE_CELL4_2_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_17_7
};

LAYER_SHAPE_CELL4_2_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPLEFT_250_1
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_257_44
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_6_160
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_6_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_257_44
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_6_161
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_82_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_6_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_17_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_RIGHT_250_1
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_257_44
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL4_2_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPTOPLEFT_250_1
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_6_160
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_6_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_257_44
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_6_161
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_82_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_6_170
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_17_7
};

LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_VCONNECT_LEFT_250_1
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_257_44
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_257_44 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_257_44"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_257_44
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_160"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_161"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_82_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_6_170"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_17_7"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL4_2_250_1"
    },
    polygons = SHAPE_CELL4_2_CAPBOTTOMLEFT_250_1
};

// DUMMY SPEC : Cell4_2_DIWPO
FSS_CELL4_2_DIWPO : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { XBD_FILLREGION, min_space = 0, context = INTERIOR },
    { over_size_v( FB_1, CELL4_2_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_2_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_2_FB1Y, CELL4_2_FB1X ), min_space = 0  },
    { corner_size_ext( FB1_CORNER_H, CELL4_2_FB1X, CELL4_2_FB1Y ), min_space = 0  },
    { FB_2, min_space_x = CELL4_2_FB2X, min_space_y = CELL4_2_FB2Y, space_extension_x = CELL4_2_FB2X, space_extension_y = CELL4_2_FB2Y },
    { FB_26, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_28, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_29, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_31, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_36, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_38, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { SRM, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { SRM_1, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { SRAMDMY, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { OD, min_space_x = CELL4_2_ODX, min_space_y = CELL4_2_ODY, space_extension_x = CELL4_2_ODX, space_extension_y = CELL4_2_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_2_ODX, min_space_y = CELL4_2_ODY, space_extension_x = CELL4_2_ODX, space_extension_y = CELL4_2_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_2_CODHX, min_space_y = CELL4_2_CODHY, space_extension_x = CELL4_2_CODHX, space_extension_y = CELL4_2_CODHY },
    { DCOD_H, min_space_x = CELL4_2_CODHX, min_space_y = CELL4_2_CODHY, space_extension_x = CELL4_2_CODHX, space_extension_y = CELL4_2_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_2_CODVX, min_space_y = CELL4_2_CODVY, space_extension_x = CELL4_2_CODVX, space_extension_y = CELL4_2_CODVY },
    { DCOD_V, min_space_x = CELL4_2_DCODVX, min_space_y = CELL4_2_DCODVY, space_extension_x = CELL4_2_DCODVX, space_extension_y = CELL4_2_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_2_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_2_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_2_ODMMBX, min_space_y = CELL4_2_ODMMBY, space_extension_x = CELL4_2_ODMMBX, space_extension_y = CELL4_2_ODMMBY },
    { PO, min_space_x = CELL4_2_POX, min_space_y = CELL4_2_POY, space_extension_x = CELL4_2_POX, space_extension_y = CELL4_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_2_SRDPOX, min_space_y = CELL4_2_SRDPOY, space_extension_x = CELL4_2_SRDPOX, space_extension_y = CELL4_2_SRDPOY },
    { PO3, min_space_x = CELL4_2_PO3X, min_space_y = CELL4_2_PO3Y, space_extension_x = CELL4_2_PO3X, space_extension_y = CELL4_2_PO3Y },
    { POLE8, min_space_x = CELL4_2_POLE8X, min_space_y = CELL4_2_POLE8Y, space_extension_x = CELL4_2_POLE8X, space_extension_y = CELL4_2_POLE8Y },
    { PO9, min_space_x = CELL4_2_PO9X, min_space_y = CELL4_2_PO9Y, space_extension_x = CELL4_2_PO9X, space_extension_y = CELL4_2_PO9Y },
    { PO54, min_space_x = CELL4_2_PO54X, min_space_y = CELL4_2_PO54Y, space_extension_x = CELL4_2_PO54X, space_extension_y = CELL4_2_PO54Y },
    { PO86, min_space_x = CELL4_2_PO86X, min_space_y = CELL4_2_PO86Y, space_extension_x = CELL4_2_PO86X, space_extension_y = CELL4_2_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_2_SR_DPO3X, min_space_y = CELL4_2_SR_DPO3Y, space_extension_x = CELL4_2_SR_DPO3X, space_extension_y = CELL4_2_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_2_SR_DPOLE8X, min_space_y = CELL4_2_SR_DPOLE8Y, space_extension_x = CELL4_2_SR_DPOLE8X, space_extension_y = CELL4_2_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_2_SR_DPO9X, min_space_y = CELL4_2_SR_DPO9Y, space_extension_x = CELL4_2_SR_DPO9X, space_extension_y = CELL4_2_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_2_SR_DPO54X, min_space_y = CELL4_2_SR_DPO54Y, space_extension_x = CELL4_2_SR_DPO54X, space_extension_y = CELL4_2_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_2_SR_DPO86X, min_space_y = CELL4_2_SR_DPO86Y, space_extension_x = CELL4_2_SR_DPO86X, space_extension_y = CELL4_2_SR_DPO86Y },
    { CPO, min_space_x = CELL4_2_CPOX, min_space_y = CELL4_2_CPOY, space_extension_x = CELL4_2_CPOX, space_extension_y = CELL4_2_CPOY },
    { SR_DCPO, min_space_x = CELL4_2_SR_DCPOX, min_space_y = CELL4_2_SR_DCPOY, space_extension_x = CELL4_2_SR_DCPOX, space_extension_y = CELL4_2_SR_DCPOY },
    { CPO20, min_space_x = CELL4_2_CPO20X, min_space_y = CELL4_2_CPO20Y, space_extension_x = CELL4_2_CPO20X, space_extension_y = CELL4_2_CPO20Y },
    { CPO22, min_space_x = CELL4_2_CPO22X, min_space_y = CELL4_2_CPO22Y, space_extension_x = CELL4_2_CPO22X, space_extension_y = CELL4_2_CPO22Y },
    { CPO25, min_space_x = CELL4_2_CPO25X, min_space_y = CELL4_2_CPO25Y, space_extension_x = CELL4_2_CPO25X, space_extension_y = CELL4_2_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_2_SR_DCPO20X, min_space_y = CELL4_2_SR_DCPO20Y, space_extension_x = CELL4_2_SR_DCPO20X, space_extension_y = CELL4_2_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_2_SR_DCPO22X, min_space_y = CELL4_2_SR_DCPO22Y, space_extension_x = CELL4_2_SR_DCPO22X, space_extension_y = CELL4_2_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_2_SR_DCPO25X, min_space_y = CELL4_2_SR_DCPO25Y, space_extension_x = CELL4_2_SR_DCPO25X, space_extension_y = CELL4_2_SR_DCPO25Y },
    { PO_P54, min_space = CELL4_2_PO_P54 },
    { PO_P81, min_space = CELL4_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_2_PO_P81_WPO },
    { PO_P57, min_space = CELL4_2_PO_P57 },
    { MD, min_space_x = CELL4_2_MDX, min_space_y = CELL4_2_MDY, space_extension_x = CELL4_2_MDX, space_extension_y = CELL4_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_2_SRDMDX, min_space_y = CELL4_2_SRDMDY, space_extension_x = CELL4_2_SRDMDX, space_extension_y = CELL4_2_SRDMDY },
    { MD16, min_space_x = CELL4_2_MD16X, min_space_y = CELL4_2_MD16Y, space_extension_x = CELL4_2_MD16X, space_extension_y = CELL4_2_MD16Y },
    { MD30, min_space_x = CELL4_2_MD30X, min_space_y = CELL4_2_MD30Y, space_extension_x = CELL4_2_MD30X, space_extension_y = CELL4_2_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_2_SR_DMD16X, min_space_y = CELL4_2_SR_DMD16Y, space_extension_x = CELL4_2_SR_DMD16X, space_extension_y = CELL4_2_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_2_SR_DMD30X, min_space_y = CELL4_2_SR_DMD30Y, space_extension_x = CELL4_2_SR_DMD30X, space_extension_y = CELL4_2_SR_DMD30Y },
    { CMD, min_space_x = CELL4_2_CMDX, min_space_y = CELL4_2_CMDY, space_extension_x = CELL4_2_CMDX, space_extension_y = CELL4_2_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_2_SR_DCMDX, min_space_y = CELL4_2_SR_DCMDY, space_extension_x = CELL4_2_SR_DCMDX, space_extension_y = CELL4_2_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_2_NW_CENTERLINE },
    { NT_N, min_space = CELL4_2_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_2_OD2X, min_space_y = CELL4_2_OD2Y, space_extension_x = CELL4_2_OD2X, space_extension_y = CELL4_2_OD2Y },
    { NWDMY, min_space = CELL4_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_2_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_2_VAR },
    { DFBC, min_space_x = CELL4_2_DFBCX, min_space_y = CELL4_2_DFBCY, space_extension_x = CELL4_2_DFBCX, space_extension_y = CELL4_2_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_2_DFBC_ALLX, min_space_y = CELL4_2_DFBC_ALLY, space_extension_x = CELL4_2_DFBC_ALLX, space_extension_y = CELL4_2_DFBC_ALLY },
    { DC1, min_space_x = CELL4_2_CELL1X, min_space_y = CELL4_2_CELL1Y, space_extension_x = CELL4_2_CELL1X, space_extension_y = CELL4_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_2_CELL2_1X, min_space_y = CELL4_2_CELL2_1Y, space_extension_x = CELL4_2_CELL2_1X, space_extension_y = CELL4_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_2_CELL2_2X, min_space_y = CELL4_2_CELL2_2Y, space_extension_x = CELL4_2_CELL2_2X, space_extension_y = CELL4_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_2_CELL2_3X, min_space_y = CELL4_2_CELL2_3Y, space_extension_x = CELL4_2_CELL2_3X, space_extension_y = CELL4_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_2_CELL4_2X, min_space_y = CELL4_2_CELL4_2Y, space_extension_x = CELL4_2_CELL4_2X, space_extension_y = CELL4_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_2_CELL5_1X, min_space_y = CELL4_2_CELL5_1Y, space_extension_x = CELL4_2_CELL5_1X, space_extension_y = CELL4_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_2_CELL5_2X, min_space_y = CELL4_2_CELL5_2Y, space_extension_x = CELL4_2_CELL5_2X, space_extension_y = CELL4_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_2_CELL6_1X, min_space_y = CELL4_2_CELL6_1Y, space_extension_x = CELL4_2_CELL6_1X, space_extension_y = CELL4_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_2_CELL6_2X, min_space_y = CELL4_2_CELL6_2Y, space_extension_x = CELL4_2_CELL6_2X, space_extension_y = CELL4_2_CELL6_2Y },
    { DC7, min_space_x = CELL4_2_CELL7X, min_space_y = CELL4_2_CELL7Y, space_extension_x = CELL4_2_CELL7X, space_extension_y = CELL4_2_CELL7Y },
    { DC8_1, min_space_x = CELL4_2_CELL8_1X, min_space_y = CELL4_2_CELL8_1Y, space_extension_x = CELL4_2_CELL8_1X, space_extension_y = CELL4_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_2_CELL8_2X, min_space_y = CELL4_2_CELL8_2Y, space_extension_x = CELL4_2_CELL8_2X, space_extension_y = CELL4_2_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
    
}; // end of FSS_CELL4_2_DIWPO
//=========================================================================================





BASE_CELL4_2_DIWPO_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_DIWPO_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOP_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOP_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOP_82_270,
	    LAYER_SHAPE_CELL4_2_CAPTOP_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_DIWPO_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_DIWPO_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_DIWPO_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CORE_257_44,
	    LAYER_SHAPE_CELL4_2_CORE_6_7,
	    LAYER_SHAPE_CELL4_2_CORE_6_170,
	    LAYER_SHAPE_CELL4_2_CORE_82_170,
	    LAYER_SHAPE_CELL4_2_CORE_17_7,
	    LAYER_SHAPE_CELL4_2_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_DIWPO_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_DIWPO_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_DIWPO_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_DIWPO_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_DIWPO_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_161,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_DIWPO_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_270,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL4_2_DIWPO_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_250_1,
    },
    repeatable = false
};


PATTERN_CELL4_2_DIWPO : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_2_DIWPO_4,
		BASE_CELL4_2_DIWPO_5,
		BASE_CELL4_2_DIWPO_6,
	    },
	    base_cell_top = {
		BASE_CELL4_2_DIWPO_1,
		BASE_CELL4_2_DIWPO_2,
		BASE_CELL4_2_DIWPO_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_2_DIWPO_7,
		BASE_CELL4_2_DIWPO_8,
		BASE_CELL4_2_DIWPO_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, east = 0 , south = 0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix = "CELL4_2_DIWPO",
	    fill_to_signal_spacing = FSS_CELL4_2_DIWPO,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,      
	    merging_cell = {
		BASE_CELL4_2_DIWPO_R1,
		BASE_CELL4_2_DIWPO_R2,
		BASE_CELL4_2_DIWPO_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif        
	}
    },
}; // end of PATTERN_CELL4_2_DIWPO


SPEC_CELL4_2_DIWPO = unified_fill(
    fill_patterns = PATTERN_CELL4_2_DIWPO,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL4_2_DIWPO_EXTENT"
	},
    }
);

CELL4_2_DIWPO_257_44_C    = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_257_44"][0];
CELL4_2_DIWPO_6_160_C     = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_6_160"][0];
CELL4_2_DIWPO_6_7_C       = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_6_7"][0];
CELL4_2_DIWPO_82_170_C    = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_82_170"][0];
CELL4_2_DIWPO_82_270_C    = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_82_270"][0];
CELL4_2_DIWPO_6_170_C     = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_6_170"][0];
CELL4_2_DIWPO_6_161_C     = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_6_161"][0];
CELL4_2_DIWPO_17_7_C      = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_17_7"][0];
CELL4_2_DIWPO_250_1_C     = SPEC_CELL4_2_DIWPO["OUTPUT_CELL4_2_250_1"][0];
CELL4_2_DIWPO_E           = SPEC_CELL4_2_DIWPO["CELL4_2_DIWPO_EXTENT"][0];


PATTERN_CELL1_SEPARATOR : list of uf_fill_pattern_s = {
    {
    type = UF_STRIPE,    
    stripe_fill = {
        direction = VERTICAL,
        layer_spec = {
            output_layer_key = "CELL1_SEPARATOR"
        },
	reference_layer = {
	    reference_context = POLYGON_EXTENT,
	    shift_value = {0, 0},
	    layer = CHIP_snps,
	},
        width = 1.392,
        spacing = 19.824
    },
    },
}; // end of PATTERN_CELL1_SEPARATOR

SPEC_CELL1_SEPARATOR = unified_fill(
    fill_patterns = PATTERN_CELL1_SEPARATOR,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    window_layer = CHIP_snps
);

CELL1_SEPARATOR = SPEC_CELL1_SEPARATOR["CELL1_SEPARATOR"][0];


SHAPE_CELL1_82_170 : list of coordinate_l = { 
    { { 0.4015, -0.0760 }, { 0.4175, -0.0760 }, { 0.4175, 1.8500 }, { 0.4015, 1.8500 } },
    { { 0.3535, -0.0760 }, { 0.3695, -0.0760 }, { 0.3695, 1.8500 }, { 0.3535, 1.8500 } },
    { { 0.3055, -0.0760 }, { 0.3215, -0.0760 }, { 0.3215, 1.8500 }, { 0.3055, 1.8500 } },
    { { 0.2575, -0.0760 }, { 0.2735, -0.0760 }, { 0.2735, 1.8500 }, { 0.2575, 1.8500 } },
    { { 0.2095, -0.0760 }, { 0.2255, -0.0760 }, { 0.2255, 1.8500 }, { 0.2095, 1.8500 } },
    { { 0.1615, -0.0760 }, { 0.1775, -0.0760 }, { 0.1775, 1.8500 }, { 0.1615, 1.8500 } },
    { { 0.1135, -0.0760 }, { 0.1295, -0.0760 }, { 0.1295, 1.8500 }, { 0.1135, 1.8500 } },
    { { 0.0655, -0.0760 }, { 0.0815, -0.0760 }, { 0.0815, 1.8500 }, { 0.0655, 1.8500 } },
    { { 0.0175, -0.0760 }, { 0.0335, -0.0760 }, { 0.0335, 1.8500 }, { 0.0175, 1.8500 } }
};    /* AREA RATIO = 0.2078865942289703 */
SHAPE_CELL1_82_270 : list of coordinate_l = { 
    { { 0.0015, 1.7960 }, { 0.4335, 1.7960 }, { 0.4335, 1.8720 }, { 0.0015, 1.8720 } },
    { { 0.0015, 1.5690 }, { 0.4335, 1.5690 }, { 0.4335, 1.6090 }, { 0.0015, 1.6090 } },
    { { 0.0015, 1.3350 }, { 0.4335, 1.3350 }, { 0.4335, 1.3750 }, { 0.0015, 1.3750 } },
    { { 0.0015, 1.1010 }, { 0.4335, 1.1010 }, { 0.4335, 1.1410 }, { 0.0015, 1.1410 } },
    { { 0.0015, 0.8670 }, { 0.4335, 0.8670 }, { 0.4335, 0.9070 }, { 0.0015, 0.9070 } },
    { { 0.0015, 0.6330 }, { 0.4335, 0.6330 }, { 0.4335, 0.6730 }, { 0.0015, 0.6730 } },
    { { 0.0015, 0.3990 }, { 0.4335, 0.3990 }, { 0.4335, 0.4390 }, { 0.0015, 0.4390 } },
    { { 0.0015, 0.1650 }, { 0.4335, 0.1650 }, { 0.4335, 0.2050 }, { 0.0015, 0.2050 } },
    { { 0.0015, -0.0980 }, { 0.4335, -0.0980 }, { 0.4335, -0.0220 }, { 0.0015, -0.0220 } }
};    /* AREA RATIO = 0.13988630639706412 */
SHAPE_CELL1_6_7 : list of coordinate_l = { 
    { { 0.0000, 1.6380 }, { 0.4350, 1.6380 }, { 0.4350, 1.7740 }, { 0.0000, 1.7740 } },
    { { 0.0000, 1.4040 }, { 0.4350, 1.4040 }, { 0.4350, 1.5400 }, { 0.0000, 1.5400 } },
    { { 0.0000, 1.1700 }, { 0.4350, 1.1700 }, { 0.4350, 1.3060 }, { 0.0000, 1.3060 } },
    { { 0.0000, 0.9360 }, { 0.4350, 0.9360 }, { 0.4350, 1.0720 }, { 0.0000, 1.0720 } },
    { { 0.0000, 0.7020 }, { 0.4350, 0.7020 }, { 0.4350, 0.8380 }, { 0.0000, 0.8380 } },
    { { 0.0000, 0.4680 }, { 0.4350, 0.4680 }, { 0.4350, 0.6040 }, { 0.0000, 0.6040 } },
    { { 0.0000, 0.2340 }, { 0.4350, 0.2340 }, { 0.4350, 0.3700 }, { 0.0000, 0.3700 } },
    { { 0.0000, 0.0000 }, { 0.4350, 0.0000 }, { 0.4350, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 0.35475282435057925 */
SHAPE_CELL1_6_160 : list of coordinate_l = { 
    { { -0.0465, 1.7840 }, { 0.4815, 1.7840 }, { 0.4815, 1.8620 }, { -0.0465, 1.8620 } },
    { { -0.0465, 1.5500 }, { 0.4815, 1.5500 }, { 0.4815, 1.6280 }, { -0.0465, 1.6280 } },
    { { -0.0465, 1.3160 }, { 0.4815, 1.3160 }, { 0.4815, 1.3940 }, { -0.0465, 1.3940 } },
    { { -0.0465, 1.0820 }, { 0.4815, 1.0820 }, { 0.4815, 1.1600 }, { -0.0465, 1.1600 } },
    { { -0.0465, 0.8480 }, { 0.4815, 0.8480 }, { 0.4815, 0.9260 }, { -0.0465, 0.9260 } },
    { { -0.0465, 0.6140 }, { 0.4815, 0.6140 }, { 0.4815, 0.6920 }, { -0.0465, 0.6920 } },
    { { -0.0465, 0.3800 }, { 0.4815, 0.3800 }, { 0.4815, 0.4580 }, { -0.0465, 0.4580 } },
    { { -0.0465, 0.1460 }, { 0.4815, 0.1460 }, { 0.4815, 0.2240 }, { -0.0465, 0.2240 } },
    { { -0.0465, -0.0880 }, { 0.4815, -0.0880 }, { 0.4815, -0.0100 }, { -0.0465, -0.0100 } }
};    /* AREA RATIO = 0.2778297474275023 */
SHAPE_CELL1_0_0 : list of coordinate_l = { 
    { { 0.0030, -0.1820 }, { 0.3840, -0.1820 }, { 0.3840, 1.9560 }, { 0.0030, 1.9560 } }
};    /* AREA RATIO = 0.6105769230769231 */
SHAPE_CELL1_250_1 : list of coordinate_l = { 
    { { -0.0705, -0.0780 }, { 0.5055, -0.0780 }, { 0.5055, 1.8520 }, { -0.0705, 1.8520 } }
};    /* AREA RATIO = 0.8332733683528819 */
SHAPE_CELL1_3_0 : list of coordinate_l = { 
    { { -0.0830, -0.0360 }, { 0.5180, -0.0360 }, { 0.5180, 1.8100 }, { -0.0830, 1.8100 } }
};    /* AREA RATIO = 0.8315988462737761 */
SHAPE_CELL1_17_50 : list of coordinate_l = { 
    { { -0.0250, 1.8800 }, { 0.4600, 1.8800 }, { 0.4600, 1.9020 }, { -0.0250, 1.9020 } },
    { { -0.0250, -0.1280 }, { 0.4600, -0.1280 }, { 0.4600, -0.1060 }, { -0.0250, -0.1060 } }
};    /* AREA RATIO = 0.01599565853541532 */
SHAPE_CELL1_6_170 : list of coordinate_l = { 
    { { -0.0870, -0.1270 }, { 0.5220, -0.1270 }, { 0.5220, 1.9010 }, { -0.0870, 1.9010 } }
};    /* AREA RATIO = 0.9257483629560337 */
SHAPE_CELL1_17_7 : list of coordinate_l = { 
    { { 0.4320, -0.1060 }, { 0.4350, -0.1060 }, { 0.4350, 1.8800 }, { 0.4320, 1.8800 } },
    { { 0.3840, -0.1060 }, { 0.3870, -0.1060 }, { 0.3870, 1.8800 }, { 0.3840, 1.8800 } },
    { { 0.3360, -0.1060 }, { 0.3390, -0.1060 }, { 0.3390, 1.8800 }, { 0.3360, 1.8800 } },
    { { 0.2880, -0.1060 }, { 0.2910, -0.1060 }, { 0.2910, 1.8800 }, { 0.2880, 1.8800 } },
    { { 0.2400, -0.1060 }, { 0.2430, -0.1060 }, { 0.2430, 1.8800 }, { 0.2400, 1.8800 } },
    { { 0.1920, -0.1060 }, { 0.1950, -0.1060 }, { 0.1950, 1.8800 }, { 0.1920, 1.8800 } },
    { { 0.1440, -0.1060 }, { 0.1470, -0.1060 }, { 0.1470, 1.8800 }, { 0.1440, 1.8800 } },
    { { 0.0960, -0.1060 }, { 0.0990, -0.1060 }, { 0.0990, 1.8800 }, { 0.0960, 1.8800 } },
    { { 0.0480, -0.1060 }, { 0.0510, -0.1060 }, { 0.0510, 1.8800 }, { 0.0480, 1.8800 } },
    { { 0.0000, -0.1060 }, { 0.0030, -0.1060 }, { 0.0030, 1.8800 }, { 0.0000, 1.8800 } }
};    /* AREA RATIO = 0.044658919191192345 */
SHAPE_CELL1_25_0 : list of coordinate_l = { 
    { { -0.0800, -0.1820 }, { 0.5150, -0.1820 }, { 0.5150, 0.8870 }, { -0.0800, 0.8870 } }
};    /* AREA RATIO = 0.47676282051282054 */
SHAPE_CELL1_206_170 : list of coordinate_l = { 
    { { 0.3360, -0.1060 }, { 0.3390, -0.1060 }, { 0.3390, 1.8800 }, { 0.3360, 1.8800 } },
    { { 0.1920, -0.1060 }, { 0.1950, -0.1060 }, { 0.1950, 1.8800 }, { 0.1920, 1.8800 } },
    { { 0.0960, -0.1060 }, { 0.0990, -0.1060 }, { 0.0990, 1.8800 }, { 0.0960, 1.8800 } }
};    /* AREA RATIO = 0.013397675757357704 */
SHAPE_CELL1_26_0 : list of coordinate_l = { 
    { { -0.0800, 0.8870 }, { 0.5150, 0.8870 }, { 0.5150, 1.9560 }, { -0.0800, 1.9560 } }
};    /* AREA RATIO = 0.47676282051282054 */
SHAPE_CELL1_257_11 : list of coordinate_l = { 
    { { -0.0945, -0.1820 }, { 0.5295, -0.1820 }, { 0.5295, 1.9560 }, { -0.0945, 1.9560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL1X_17_7 : list of coordinate_l = { 
    { { 0.4320, -0.3820 }, { 0.4350, -0.3820 }, { 0.4350, -0.1060 }, { 0.4320, -0.1060 } },
    { { 0.3840, -0.3820 }, { 0.3870, -0.3820 }, { 0.3870, -0.1060 }, { 0.3840, -0.1060 } },
    { { 0.3360, -0.3820 }, { 0.3390, -0.3820 }, { 0.3390, -0.1060 }, { 0.3360, -0.1060 } },
    { { 0.2880, -0.3820 }, { 0.2910, -0.3820 }, { 0.2910, -0.1060 }, { 0.2880, -0.1060 } },
    { { 0.2400, -0.3820 }, { 0.2430, -0.3820 }, { 0.2430, -0.1060 }, { 0.2400, -0.1060 } },
    { { 0.1920, -0.3820 }, { 0.1950, -0.3820 }, { 0.1950, -0.1060 }, { 0.1920, -0.1060 } },
    { { 0.1440, -0.3820 }, { 0.1470, -0.3820 }, { 0.1470, -0.1060 }, { 0.1440, -0.1060 } },
    { { 0.0960, -0.3820 }, { 0.0990, -0.3820 }, { 0.0990, -0.1060 }, { 0.0960, -0.1060 } },
    { { 0.0480, -0.3820 }, { 0.0510, -0.3820 }, { 0.0510, -0.1060 }, { 0.0480, -0.1060 } },
    { { 0.0000, -0.3820 }, { 0.0030, -0.3820 }, { 0.0030, -0.1060 }, { 0.0000, -0.1060 } }
};    /* AREA RATIO = 0.047636180470605166 */
SHAPE_CELL1X_26_0 : list of coordinate_l = { 
    { { -0.0800, -0.3060 }, { 0.5150, -0.3060 }, { 0.5150, -0.1820 }, { -0.0800, -0.1820 } }
};    /* AREA RATIO = 0.48547008547008547 */
SHAPE_CELL1X_257_11 : list of coordinate_l = { 
    { { -0.0945, -0.3060 }, { 0.5295, -0.3060 }, { 0.5295, -0.1820 }, { -0.0945, -0.1820 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL1_0_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_0_0"
    },
    polygons = SHAPE_CELL1_0_0
};

LAYER_SHAPE_CELL1_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_82_170"
    },
    polygons = SHAPE_CELL1_82_170
};

LAYER_SHAPE_CELL1_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_82_270"
    },
    polygons = SHAPE_CELL1_82_270
};

LAYER_SHAPE_CELL1_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_6_7"
    },
    polygons = SHAPE_CELL1_6_7
};

LAYER_SHAPE_CELL1_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_6_160"
    },
    polygons = SHAPE_CELL1_6_160
};

LAYER_SHAPE_CELL1_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_250_1"
    },
    polygons = SHAPE_CELL1_250_1
};

LAYER_SHAPE_CELL1_3_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_3_0"
    },
    polygons = SHAPE_CELL1_3_0
};

LAYER_SHAPE_CELL1_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_17_50"
    },
    polygons = SHAPE_CELL1_17_50
};

LAYER_SHAPE_CELL1_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_6_170"
    },
    polygons = SHAPE_CELL1_6_170
};

LAYER_SHAPE_CELL1_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_17_7"
    },
    polygons = SHAPE_CELL1_17_7
};

LAYER_SHAPE_CELL1_25_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_25_0"
    },
    polygons = SHAPE_CELL1_25_0
};

LAYER_SHAPE_CELL1_26_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_26_0"
    },
    polygons = SHAPE_CELL1_26_0
};

LAYER_SHAPE_CELL1_206_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_206_170"
    },
    polygons = SHAPE_CELL1_206_170
};

LAYER_SHAPE_CELL1_257_11 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1_257_11"
    },
    polygons = SHAPE_CELL1_257_11
};

LAYER_SHAPE_CELL1X_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1X_17_7"
    },
    polygons = SHAPE_CELL1X_17_7
};

LAYER_SHAPE_CELL1X_26_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1X_26_0"
    },
    polygons = SHAPE_CELL1X_26_0
};

LAYER_SHAPE_CELL1X_257_11 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL1X_257_11"
    },
    polygons = SHAPE_CELL1X_257_11
};



FB_1_CELL1_sized = size( FB_1, clip_acute = NONE, distance = CELL1_FB1_OUT);


// DUMMY SPEC : Cell1
FSS_CELL1 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL1_CHIPX, min_space_y = CELL1_CHIPY, context = INTERIOR },
    { CHIP_snps, min_space_x = CELL1_CHIPX, min_space_y = CELL1_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL1_IPX, min_space_y = CELL1_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = 0.9, min_space_y = 0.76, context = INTERIOR },
    { ICOVL_SINGLE, min_space = CELL1_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { CELL1_SEPARATOR, min_space = 0 },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL1_FEOLBLK },
    { ODBLK, min_space = CELL1_ODBLK },
    { POBLK, min_space = CELL1_POBLK },
    { MDBLK, min_space = CELL1_MDBLK },
    { FB_1, min_space = CELL1_FB1_OUT, min_space_inside = CELL1_FB1_IN, context = EXTERIOR_INTERIOR },
    { FB_2, min_space = CELL1_FB2 },
    { FB_26, min_space = CELL1_FB26 },
    { FB_28, min_space = CELL1_FB28 },
    { FB_29, min_space = CELL1_FB29 },
    { FB_31, min_space = CELL1_FB31 },
    { FB_36, min_space = CELL1_FB36 },
    { FB_38, min_space = CELL1_FB38 },
    { STD_FILLER, min_space = CELL1_STD_FILLER },
    { SRM, min_space = CELL1_SRM },
    { SRM_1, min_space = CELL1_SRM },
    { SRAMDMY, min_space = CELL1_SRAMDMY },
    { OD, min_space = CELL1_OD },
    { SR_DOD_NT_SR, min_space = CELL1_SRDOD },
    { COD_H_NT_SR, min_space = CELL1_CODH },
    { DCOD_H, min_space = CELL1_DCODH },
    { COD_V_NT_SR, min_space = CELL1_CODV },
    { DCOD_V, min_space = CELL1_DCODV },
    { COD_BLOCK_NT_SR, min_space = CELL1_CODBLK },
    { DCOD_BLOCK, min_space = CELL1_DCODBLK },
    { ODMMB_NT_SR, min_space = CELL1_ODMMB },
    { PO, min_space = CELL1_PO },
    { PO3, min_space = CELL1_PO3 },
    { POLE8, min_space = CELL1_POLE8 },
    { PO9, min_space = CELL1_PO9 },
    { PO54, min_space = CELL1_PO54 },
    { PO86, min_space = CELL1_PO86 },
    { SR_DPO_NT_SR3, min_space = CELL1_SR_DPO3 },
    { SR_DPOLE8_NT_SR, min_space = CELL1_SR_DPOLE8 },
    { SR_DPO_NT_SR9, min_space = CELL1_SR_DPO9 },
    { SR_DPO_NT_SR54, min_space = CELL1_SR_DPO54 },
    { SR_DPO_NT_SR86, min_space = CELL1_SR_DPO86 },
    { SR_DPO_NT_SR, min_space = CELL1_SRDPO },
    { CPODE, min_space_x = CELL1_CPODEX, min_space_y = CELL1_CPODEY, space_extension_x = CELL1_CPODEX, space_extension_y = CELL1_CPODEY },
    { DCPODE, min_space_x = CELL1_DCPODEX, min_space_y = CELL1_DCPODEY, space_extension_x = CELL1_DCPODEX, space_extension_y = CELL1_DCPODEY },
    { CPO, min_space = CELL1_CPO },
    { CPO20, min_space = CELL1_CPO20 },
    { CPO22, min_space = CELL1_CPO22 },
    { CPO25, min_space = CELL1_CPO25 },
    { SR_DCPO20, min_space = CELL1_SR_DCPO20 },
    { SR_DCPO22, min_space = CELL1_SR_DCPO22 },
    { SR_DCPO25, min_space = CELL1_SR_DCPO25 },
    { SR_DCPO, min_space = CELL1_SRDCPO },
    { PO_P54, min_space = CELL1_PO_P54 },
    { PO_P81, min_space = CELL1_PO_P81 },
    { PO_P81_WPO, min_space = CELL1_PO_P81_WPO },
    { PO_P57, min_space = CELL1_PO_P57 },
    { PP_NT_SR, min_space = CELL1_PP },
    { gNP, min_space = CELL1_NP },
    { SIGE_DRAW, min_space = CELL1_SIGE_DRAW },
    { SIC_DRAW, min_space = CELL1_SIC_DRAW },
    { MD, min_space = CELL1_MD },
    { MD16, min_space = CELL1_MD16 },
    { MD30, min_space = CELL1_MD30 },
    { SR_DMD_NT_SR16, min_space = CELL1_SRDMD16 },
    { SR_DMD_NT_SR30, min_space = CELL1_SRDMD30 },
    { SR_DMD_NT_SR, min_space = CELL1_SRDMD },
    { CMD, min_space = CELL1_CMD },
    { SR_DCMD_NT_SR, min_space = CELL1_SRDCMD },
    { DNW, min_space = CELL1_DNW },
    { NW_NT_SR, min_space_x = CELL1_NWX, min_space_y = CELL1_NWY, space_extension_x = CELL1_NWX, space_extension_y = CELL1_NWY },
    { NT_N, min_space = CELL1_NTNI },
    { OD2, min_space = CELL1_OD2 },
    { NWDMY, min_space = CELL1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { VAR, min_space = CELL1_VAR },
    { DIODMY, min_space = CELL1_DIODMY, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space_x = CELL1_TCDMYX, min_space_y = CELL1_TCDMYY, space_extension_x = CELL1_TCDMYX, space_extension_y = CELL1_TCDMYY },
    { DI_WPO, min_space = CELL1_DI_WPO },
    { DFBC, min_space_x = CELL1_DFBCX, min_space_y = CELL1_DFBCY, space_extension_x = CELL1_DFBCX, space_extension_y = CELL1_DFBCY },
    { DFBC_ALL, min_space_x = CELL1_DFBC_ALLX, min_space_y = CELL1_DFBC_ALLY, space_extension_x = CELL1_DFBC_ALLX, space_extension_y = CELL1_DFBC_ALLY },
    { DC1, min_space_x = CELL1_CELL1X, min_space_y = CELL1_CELL1Y, space_extension_x = CELL1_CELL1X, space_extension_y = CELL1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL1_CELL2_1X, min_space_y = CELL1_CELL2_1Y, space_extension_x = CELL1_CELL2_1X, space_extension_y = CELL1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL1_CELL2_2X, min_space_y = CELL1_CELL2_2Y, space_extension_x = CELL1_CELL2_2X, space_extension_y = CELL1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL1_CELL2_3X, min_space_y = CELL1_CELL2_3Y, space_extension_x = CELL1_CELL2_3X, space_extension_y = CELL1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL1_CELL4_1X, min_space_y = CELL1_CELL4_1Y, space_extension_x = CELL1_CELL4_1X, space_extension_y = CELL1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL1_CELL4_2X, min_space_y = CELL1_CELL4_2Y, space_extension_x = CELL1_CELL4_2X, space_extension_y = CELL1_CELL4_2Y },
    { DC5_1, min_space_x = CELL1_CELL5_1X, min_space_y = CELL1_CELL5_1Y, space_extension_x = CELL1_CELL5_1X, space_extension_y = CELL1_CELL5_1Y },
    { DC5_2, min_space_x = CELL1_CELL5_2X, min_space_y = CELL1_CELL5_2Y, space_extension_x = CELL1_CELL5_2X, space_extension_y = CELL1_CELL5_2Y },
    { DC6_1, min_space_x = CELL1_CELL6_1X, min_space_y = CELL1_CELL6_1Y, space_extension_x = CELL1_CELL6_1X, space_extension_y = CELL1_CELL6_1Y },
    { DC6_2, min_space_x = CELL1_CELL6_2X, min_space_y = CELL1_CELL6_2Y, space_extension_x = CELL1_CELL6_2X, space_extension_y = CELL1_CELL6_2Y },
    { DC7, min_space_x = CELL1_CELL7X, min_space_y = CELL1_CELL7Y, space_extension_x = CELL1_CELL7X, space_extension_y = CELL1_CELL7Y },
    { DC8_1, min_space_x = CELL1_CELL8_1X, min_space_y = CELL1_CELL8_1Y, space_extension_x = CELL1_CELL8_1X, space_extension_y = CELL1_CELL8_1Y },
    { DC8_2, min_space_x = CELL1_CELL8_2X, min_space_y = CELL1_CELL8_2Y, space_extension_x = CELL1_CELL8_2X, space_extension_y = CELL1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space_x = CELL1_TCDMYX, min_space_y = CELL1_TCDMYY, space_extension_x = CELL1_TCDMYX, space_extension_y = CELL1_TCDMYY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL1X, min_space_y = CELL4_2_CELL1Y, space_extension_x = CELL4_2_CELL1X, space_extension_y = CELL4_2_CELL1Y },

    
}; // end of FSS_CELL1

PATTERN_CELL1 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL1,
	    layers = {
	    LAYER_SHAPE_CELL1_257_11,
	    LAYER_SHAPE_CELL1_0_0,
	    LAYER_SHAPE_CELL1_82_170,
	    LAYER_SHAPE_CELL1_82_270,
	    LAYER_SHAPE_CELL1_6_7,
	    LAYER_SHAPE_CELL1_6_160,
	    LAYER_SHAPE_CELL1_250_1,
	    LAYER_SHAPE_CELL1_3_0,
	    LAYER_SHAPE_CELL1_17_50,
	    LAYER_SHAPE_CELL1_6_170,
	    LAYER_SHAPE_CELL1_17_7,
	    LAYER_SHAPE_CELL1_25_0,
	    LAYER_SHAPE_CELL1_26_0,
	    LAYER_SHAPE_CELL1_206_170,
	    },
	    pattern_spec = {
		space_x = -0.24, 
		space_y = 0.124, 
	    },
        reference_layer = {
		    reference_context = POLYGON_EXTENT,
		    shift_value = {x = -0.0945, y = 0.0},            
		    layer = INITIAL_LAYER, 
	    },
        hierarchical_fill = true,
	    cell_prefix = "CELL1",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL1
//=========================================================================================
SPEC_CELL1 = unified_fill(
    fill_patterns = PATTERN_CELL1,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL1_EXTENT"
	},
    }
);

CELL1_82_170_C  = SPEC_CELL1["OUTPUT_CELL1_82_170"][0];
CELL1_82_270_C  = SPEC_CELL1["OUTPUT_CELL1_82_270"][0];
CELL1_6_7_C     = SPEC_CELL1["OUTPUT_CELL1_6_7"][0];
CELL1_6_160_C   = SPEC_CELL1["OUTPUT_CELL1_6_160"][0];
CELL1_250_1_C   = SPEC_CELL1["OUTPUT_CELL1_250_1"][0];
CELL1_3_0_C     = SPEC_CELL1["OUTPUT_CELL1_3_0"][0];
CELL1_17_50_C   = SPEC_CELL1["OUTPUT_CELL1_17_50"][0];
CELL1_6_170_C   = SPEC_CELL1["OUTPUT_CELL1_6_170"][0];
CELL1_25_0_C    = SPEC_CELL1["OUTPUT_CELL1_25_0"][0];
CELL1_206_170_C = SPEC_CELL1["OUTPUT_CELL1_206_170"][0];
CELL1_E_pre     = SPEC_CELL1["CELL1_EXTENT"][0];
CELL1_6_170_L   = SPEC_CELL1["OUTPUT_CELL1_6_170"][0];
CELL1_257_11_C_pre  = SPEC_CELL1["OUTPUT_CELL1_257_11"][0];
CELL1_17_7_C_pre    = SPEC_CELL1["OUTPUT_CELL1_17_7"][0];
CELL1_26_0_C_pre    = SPEC_CELL1["OUTPUT_CELL1_26_0"][0];
CELL1_25_0_L    = SPEC_CELL1["OUTPUT_CELL1_25_0"][0];


merge_region_pre  = external1( CELL1_257_11_C_pre, == 0.124, extension = NONE, intersecting = {  }, intersection_angle = < 90, look_thru = NONE, width = 0.001, direction = VERTICAL, orthogonal = BOTH, extension_look_past = POINT_TO_POINT ); 
merge_region = rectangles( merge_region_pre );
merge_region_grow = grow( merge_region, north = 0.076, south = 0.076 );

PATTERN_CELL1_merge : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	 //   fill_to_signal_spacing = FSS_CELL1,
	    layers = {
	    LAYER_SHAPE_CELL1X_257_11,
	    LAYER_SHAPE_CELL1X_17_7,
	    LAYER_SHAPE_CELL1X_26_0,
	    },
	    pattern_spec = {
		space_x = -0.24, 
		space_y = 0.124, 
	    },
        hierarchical_fill = true,
	    cell_prefix = "CELL1_merge",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL1_merge

SPEC_CELL1_merge = unified_fill(
    fill_patterns = PATTERN_CELL1_merge,
    fill_boundary = {
	layer = merge_region_grow,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL1_merge_EXTENT"
	},
    }
);
CELL1_257_11_C      = CELL1_257_11_C_pre or  SPEC_CELL1_merge["OUTPUT_CELL1X_257_11"][0];
CELL1_17_7_C        = CELL1_17_7_C_pre   or  SPEC_CELL1_merge["OUTPUT_CELL1X_17_7"][0];
CELL1_26_0_C        = CELL1_26_0_C_pre   or  SPEC_CELL1_merge["OUTPUT_CELL1X_26_0"][0];
CELL1_E            = copy(CELL1_257_11_C);

gbLAYER_1 = shrink( CELL1_6_170_L, north = 0.078, south = 0.078 ) and shrink( CELL1_6_170_L, east = 0.087, west = 0.087 ); 
CELL1_6_161_L = CELL1_6_170_L not gbLAYER_1;

gLAYER_2 = size( FILL_W5_DUMMY_POLY_PRE, clip_acute = TRUNCATE, distance = 0.9 ); 
FILL_W4_W5_W_6_DUMMY_POLY_FIRST_REGION_PRE = size( size( gLAYER_2, - 0.2, clip_acute = TRUNCATE ), 0.2, clip_acute = TRUNCATE ); 
gLAYER_4 = size( FILL_W4_W5_W_6_DUMMY_POLY_FIRST_REGION_PRE, clip_acute = TRUNCATE, distance = 0.9 ); 
gLAYER_3 = size( size( gLAYER_4, - 0.2, clip_acute = TRUNCATE ), 0.2, clip_acute = TRUNCATE );
gLAYER_5 = CELL1_E or DC1; 
FILL_W4_W5_W_6_DUMMY_POLY_FIRST_REGION = gLAYER_3 or gLAYER_5; 



FILL_W58_DUMMY_POLY_FIRST_REGION_PRE = ( ( ( size( not_interacting( ALL_PO_W9_TO_W53_NON_DUMMY, DI_WPO ), clip_acute = TRUNCATE, distance = 2.1 ) not size( FILL_W4_W5_W_6_DUMMY_POLY_FIRST_REGION, clip_acute = TRUNCATE, distance = 0.7 ) ) not ALL_PO_W9_TO_W53_NON_DUMMY ) and CHIP_snps ) not FEOLBLK_FINAL;
FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1 = size( size( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE, - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE ); 
FILL_W58_DUMMY_POLY_FIRST_REGION_PRE2 = size( size( ( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1 not or_list( { OD2, FB_2, FB_1 } ) ), - 0.33, clip_acute = TRUNCATE ), 0.33, clip_acute = TRUNCATE ); 
FILL_W58_DUMMY_POLY_FIRST_REGION = or_list( { ( FILL_W58_DUMMY_POLY_FIRST_REGION_PRE1 and or_list( { FB_1, FB_2, OD2 } ) ), FILL_W58_DUMMY_POLY_FIRST_REGION_PRE2, ALL_PO_W9_TO_W53_NON_DUMMY } ); 

FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1 = ( ( ( ( size( not_interacting( ALL_PO_W58_UP, DI_WPO ), clip_acute = TRUNCATE, distance = 2.1 ) not FILL_W58_DUMMY_POLY_FIRST_REGION ) not size( FILL_W4_W5_W_6_DUMMY_POLY_FIRST_REGION, clip_acute = TRUNCATE, distance = 0.7 ) ) not ALL_PO_W58_UP ) and CHIP_snps ) not FEOLBLK_FINAL;
FILL_W86_DUMMY_POLY_FIRST_REGION_PRE2 = size( size( ( ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1 not OD2 ) not FB_1 ), - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE ); 
FILL_W86_DUMMY_POLY_FIRST_REGION_PRE3 = size( size( ( ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1 not OD2 ) and FB_1 ), - 0.3, clip_acute = TRUNCATE ), 0.3, clip_acute = TRUNCATE );
FILL_W86_DUMMY_POLY_FIRST_REGION = ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE1 and OD2 ) or ( FILL_W86_DUMMY_POLY_FIRST_REGION_PRE2 or FILL_W86_DUMMY_POLY_FIRST_REGION_PRE3 ); 








SHAPE_CELL2_1_CAPBOTTOM_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.1980 }, { 0.0480, 0.1980 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.15384615384615385 */
SHAPE_CELL2_1_CAPBOTTOM_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPBOTTOM_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.1880 }, { 0.0480, 0.1880 }, { 0.0480, 0.2080 }, { 0.0000, 0.2080 } }
};    /* AREA RATIO = 0.08547008547008547 */
SHAPE_CELL2_1_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.1720 }, { 0.0480, 0.1720 }, { 0.0480, 0.2240 }, { 0.0000, 0.2240 } },
    { { 0.0000, 0.0420 }, { 0.0480, 0.0420 }, { 0.0480, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.5555555555555556 */
SHAPE_CELL2_1_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.0480, 0.1300 }, { 0.0480, 0.1620 }, { 0.0000, 0.1620 } }
};    /* AREA RATIO = 0.13675213675213677 */
SHAPE_CELL2_1_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0780 }, { 0.0480, 0.0780 }, { 0.0480, 0.2340 }, { 0.0400, 0.2340 } },
    { { 0.0000, 0.0780 }, { 0.0080, 0.0780 }, { 0.0080, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.2222222222222222 */
SHAPE_CELL2_1_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.9871794871794872 */
SHAPE_CELL2_1_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.1780 }, { 0.0480, 0.1780 }, { 0.0480, 0.2180 }, { 0.0000, 0.2180 } },
    { { 0.0000, 0.0400 }, { 0.0480, 0.0400 }, { 0.0480, 0.1160 }, { 0.0000, 0.1160 } }
};    /* AREA RATIO = 0.49572649572649574 */
SHAPE_CELL2_1_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0520 }, { 0.0255, 0.0520 }, { 0.0255, 0.2340 }, { 0.0225, 0.2340 } }
};    /* AREA RATIO = 0.04861111111111111 */
SHAPE_CELL2_1_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.7777777777777778 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_257_201 : list of coordinate_l = { 
    { { 0.0695, 0.1980 }, { 0.3120, 0.1980 }, { 0.3120, 0.2340 }, { 0.0695, 0.2340 } }
};    /* AREA RATIO = 0.11957593688362919 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_17_50 : list of coordinate_l = { 
    { { 0.0235, 0.1880 }, { 0.3120, 0.1880 }, { 0.3120, 0.2080 }, { 0.0235, 0.2080 } }
};    /* AREA RATIO = 0.07903243480166557 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.1720 }, { 0.3120, 0.1720 }, { 0.3120, 0.2240 }, { 0.0480, 0.2240 } },
    { { 0.0480, 0.0420 }, { 0.3120, 0.0420 }, { 0.3120, 0.1200 }, { 0.0480, 0.1200 } }
};    /* AREA RATIO = 0.4700854700854701 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.1300 }, { 0.3120, 0.1300 }, { 0.3120, 0.1620 }, { 0.0945, 0.1620 } }
};    /* AREA RATIO = 0.09533201840894148 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0780 }, { 0.3120, 0.0780 }, { 0.3120, 0.2340 }, { 0.3040, 0.2340 } },
    { { 0.2560, 0.0780 }, { 0.2720, 0.0780 }, { 0.2720, 0.2340 }, { 0.2560, 0.2340 } },
    { { 0.2080, 0.0780 }, { 0.2240, 0.0780 }, { 0.2240, 0.2340 }, { 0.2080, 0.2340 } },
    { { 0.1600, 0.0780 }, { 0.1760, 0.0780 }, { 0.1760, 0.2340 }, { 0.1600, 0.2340 } },
    { { 0.1120, 0.0780 }, { 0.1280, 0.0780 }, { 0.1280, 0.2340 }, { 0.1120, 0.2340 } }
};    /* AREA RATIO = 0.15384615384615385 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0030 }, { 0.3120, 0.0030 }, { 0.3120, 0.2340 }, { 0.0075, 0.2340 } }
};    /* AREA RATIO = 0.9634492110453649 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.1780 }, { 0.3120, 0.1780 }, { 0.3120, 0.2180 }, { 0.0960, 0.2180 } },
    { { 0.0960, 0.0400 }, { 0.3120, 0.0400 }, { 0.3120, 0.1160 }, { 0.0960, 0.1160 } }
};    /* AREA RATIO = 0.3431952662721893 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0520 }, { 0.2895, 0.0520 }, { 0.2895, 0.2340 }, { 0.2865, 0.2340 } },
    { { 0.2385, 0.0520 }, { 0.2415, 0.0520 }, { 0.2415, 0.2340 }, { 0.2385, 0.2340 } },
    { { 0.1905, 0.0520 }, { 0.1935, 0.0520 }, { 0.1935, 0.2340 }, { 0.1905, 0.2340 } },
    { { 0.1425, 0.0520 }, { 0.1455, 0.0520 }, { 0.1455, 0.2340 }, { 0.1425, 0.2340 } },
    { { 0.0945, 0.0520 }, { 0.0975, 0.0520 }, { 0.0975, 0.2340 }, { 0.0945, 0.2340 } },
    { { 0.0465, 0.0520 }, { 0.0495, 0.0520 }, { 0.0495, 0.2340 }, { 0.0465, 0.2340 } }
};    /* AREA RATIO = 0.04487179487179487 */
SHAPE_CELL2_1_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0520 }, { 0.3120, 0.0520 }, { 0.3120, 0.2340 }, { 0.0240, 0.2340 } }
};    /* AREA RATIO = 0.717948717948718 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.1980 }, { 0.1945, 0.1980 }, { 0.1945, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.11334498834498835 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.1880 }, { 0.2405, 0.1880 }, { 0.2405, 0.2080 }, { 0.0000, 0.2080 } }
};    /* AREA RATIO = 0.07786195286195287 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.1720 }, { 0.2160, 0.1720 }, { 0.2160, 0.2240 }, { 0.0000, 0.2240 } },
    { { 0.0000, 0.0420 }, { 0.2160, 0.0420 }, { 0.2160, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.45454545454545453 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.1695, 0.1300 }, { 0.1695, 0.1620 }, { 0.0000, 0.1620 } }
};    /* AREA RATIO = 0.08780108780108781 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0780 }, { 0.1520, 0.0780 }, { 0.1520, 0.2340 }, { 0.1360, 0.2340 } },
    { { 0.0880, 0.0780 }, { 0.1040, 0.0780 }, { 0.1040, 0.2340 }, { 0.0880, 0.2340 } },
    { { 0.0400, 0.0780 }, { 0.0560, 0.0780 }, { 0.0560, 0.2340 }, { 0.0400, 0.2340 } },
    { { 0.0000, 0.0780 }, { 0.0080, 0.0780 }, { 0.0080, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.1414141414141414 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.2565, 0.0030 }, { 0.2565, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.9591346153846154 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.1780 }, { 0.1680, 0.1780 }, { 0.1680, 0.2180 }, { 0.0000, 0.2180 } },
    { { 0.0000, 0.0400 }, { 0.1680, 0.0400 }, { 0.1680, 0.1160 }, { 0.0000, 0.1160 } }
};    /* AREA RATIO = 0.31546231546231546 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0520 }, { 0.2175, 0.0520 }, { 0.2175, 0.2340 }, { 0.2145, 0.2340 } },
    { { 0.1665, 0.0520 }, { 0.1695, 0.0520 }, { 0.1695, 0.2340 }, { 0.1665, 0.2340 } },
    { { 0.1185, 0.0520 }, { 0.1215, 0.0520 }, { 0.1215, 0.2340 }, { 0.1185, 0.2340 } },
    { { 0.0705, 0.0520 }, { 0.0735, 0.0520 }, { 0.0735, 0.2340 }, { 0.0705, 0.2340 } },
    { { 0.0225, 0.0520 }, { 0.0255, 0.0520 }, { 0.0255, 0.2340 }, { 0.0225, 0.2340 } }
};    /* AREA RATIO = 0.04419191919191919 */
SHAPE_CELL2_1_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.2400, 0.0520 }, { 0.2400, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.7070707070707071 */
SHAPE_CELL2_1_CAPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0695, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0695, 0.0260 } }
};    /* AREA RATIO = 0.7772435897435898 */
SHAPE_CELL2_1_CAPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0945, 0.0260 } }
};    /* AREA RATIO = 0.6971153846153846 */
SHAPE_CELL2_1_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.3040, 0.0260 } },
    { { 0.2560, 0.0000 }, { 0.2720, 0.0000 }, { 0.2720, 0.0260 }, { 0.2560, 0.0260 } },
    { { 0.2080, 0.0000 }, { 0.2240, 0.0000 }, { 0.2240, 0.0260 }, { 0.2080, 0.0260 } },
    { { 0.1600, 0.0000 }, { 0.1760, 0.0000 }, { 0.1760, 0.0260 }, { 0.1600, 0.0260 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.0260 }, { 0.1120, 0.0260 } }
};    /* AREA RATIO = 0.23076923076923078 */
SHAPE_CELL2_1_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0075, 0.0260 } }
};    /* AREA RATIO = 0.9759615384615384 */
SHAPE_CELL2_1_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0000 }, { 0.2895, 0.0000 }, { 0.2895, 0.0260 }, { 0.2865, 0.0260 } },
    { { 0.2385, 0.0000 }, { 0.2415, 0.0000 }, { 0.2415, 0.0260 }, { 0.2385, 0.0260 } },
    { { 0.1905, 0.0000 }, { 0.1935, 0.0000 }, { 0.1935, 0.0260 }, { 0.1905, 0.0260 } },
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.0260 }, { 0.1425, 0.0260 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.0260 }, { 0.0945, 0.0260 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.0260 }, { 0.0465, 0.0260 } }
};    /* AREA RATIO = 0.057692307692307696 */
SHAPE_CELL2_1_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0240, 0.0260 } }
};    /* AREA RATIO = 0.9230769230769231 */
SHAPE_CELL2_1_CAPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1945, 0.0000 }, { 0.1945, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.7367424242424242 */
SHAPE_CELL2_1_CAPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.6420454545454546 */
SHAPE_CELL2_1_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0000 }, { 0.1520, 0.0000 }, { 0.1520, 0.0260 }, { 0.1360, 0.0260 } },
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.0260 }, { 0.0880, 0.0260 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.21212121212121213 */
SHAPE_CELL2_1_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.9715909090909091 */
SHAPE_CELL2_1_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0000 }, { 0.2175, 0.0000 }, { 0.2175, 0.0260 }, { 0.2145, 0.0260 } },
    { { 0.1665, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0260 }, { 0.1665, 0.0260 } },
    { { 0.1185, 0.0000 }, { 0.1215, 0.0000 }, { 0.1215, 0.0260 }, { 0.1185, 0.0260 } },
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0260 }, { 0.0705, 0.0260 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.056818181818181816 */
SHAPE_CELL2_1_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2400, 0.0000 }, { 0.2400, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.9090909090909091 */
SHAPE_CELL2_1_CAPTOP_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_1_CAPTOP_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0160 }, { 0.0480, 0.0160 }, { 0.0480, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.5735294117647058 */
SHAPE_CELL2_1_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.04411764705882353 */
SHAPE_CELL2_1_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0580 }, { 0.0400, 0.0580 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0580 }, { 0.0000, 0.0580 } }
};    /* AREA RATIO = 0.14215686274509803 */
SHAPE_CELL2_1_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_1_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0200 }, { 0.0480, 0.0200 }, { 0.0480, 0.0960 }, { 0.0000, 0.0960 } }
};    /* AREA RATIO = 0.5588235294117647 */
SHAPE_CELL2_1_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0840 }, { 0.0225, 0.0840 } }
};    /* AREA RATIO = 0.03860294117647059 */
SHAPE_CELL2_1_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.6176470588235294 */
SHAPE_CELL2_1_CAPTOPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0695, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1330 }, { 0.0695, 0.1330 } }
};    /* AREA RATIO = 0.7600985105580694 */
SHAPE_CELL2_1_CAPTOPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.0160 }, { 0.3120, 0.0160 }, { 0.3120, 0.0940 }, { 0.0480, 0.0940 } }
};    /* AREA RATIO = 0.4852941176470588 */
SHAPE_CELL2_1_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0060 }, { 0.0945, 0.0060 } }
};    /* AREA RATIO = 0.030755090497737555 */
SHAPE_CELL2_1_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0580 }, { 0.3040, 0.0580 } },
    { { 0.2560, 0.0000 }, { 0.2720, 0.0000 }, { 0.2720, 0.0580 }, { 0.2560, 0.0580 } },
    { { 0.2080, 0.0000 }, { 0.2240, 0.0000 }, { 0.2240, 0.0580 }, { 0.2080, 0.0580 } },
    { { 0.1600, 0.0000 }, { 0.1760, 0.0000 }, { 0.1760, 0.0580 }, { 0.1600, 0.0580 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.0580 }, { 0.1120, 0.0580 } }
};    /* AREA RATIO = 0.09841628959276018 */
SHAPE_CELL2_1_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1330 }, { 0.0075, 0.1330 } }
};    /* AREA RATIO = 0.9544329751131222 */
SHAPE_CELL2_1_CAPTOPLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.0200 }, { 0.3120, 0.0200 }, { 0.3120, 0.0960 }, { 0.0960, 0.0960 } }
};    /* AREA RATIO = 0.38687782805429866 */
SHAPE_CELL2_1_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0000 }, { 0.2895, 0.0000 }, { 0.2895, 0.0840 }, { 0.2865, 0.0840 } },
    { { 0.2385, 0.0000 }, { 0.2415, 0.0000 }, { 0.2415, 0.0840 }, { 0.2385, 0.0840 } },
    { { 0.1905, 0.0000 }, { 0.1935, 0.0000 }, { 0.1935, 0.0840 }, { 0.1905, 0.0840 } },
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.0840 }, { 0.1425, 0.0840 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.0840 }, { 0.0945, 0.0840 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.0840 }, { 0.0465, 0.0840 } }
};    /* AREA RATIO = 0.035633484162895926 */
SHAPE_CELL2_1_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0840 }, { 0.0240, 0.0840 } }
};    /* AREA RATIO = 0.5701357466063348 */
SHAPE_CELL2_1_CAPTOPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1945, 0.0000 }, { 0.1945, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.7204907531194296 */
SHAPE_CELL2_1_CAPTOPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0160 }, { 0.2160, 0.0160 }, { 0.2160, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.4692513368983957 */
SHAPE_CELL2_1_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.028325534759358287 */
SHAPE_CELL2_1_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0000 }, { 0.1520, 0.0000 }, { 0.1520, 0.0580 }, { 0.1360, 0.0580 } },
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.0580 }, { 0.0880, 0.0580 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.0580 }, { 0.0400, 0.0580 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0580 }, { 0.0000, 0.0580 } }
};    /* AREA RATIO = 0.09046345811051694 */
SHAPE_CELL2_1_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.950158756684492 */
SHAPE_CELL2_1_CAPTOPRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0200 }, { 0.1680, 0.0200 }, { 0.1680, 0.0960 }, { 0.0000, 0.0960 } }
};    /* AREA RATIO = 0.35561497326203206 */
SHAPE_CELL2_1_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0000 }, { 0.2175, 0.0000 }, { 0.2175, 0.0840 }, { 0.2145, 0.0840 } },
    { { 0.1665, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0840 }, { 0.1665, 0.0840 } },
    { { 0.1185, 0.0000 }, { 0.1215, 0.0000 }, { 0.1215, 0.0840 }, { 0.1185, 0.0840 } },
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0840 }, { 0.0705, 0.0840 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0840 }, { 0.0225, 0.0840 } }
};    /* AREA RATIO = 0.035093582887700536 */
SHAPE_CELL2_1_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2400, 0.0000 }, { 0.2400, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.5614973262032086 */
SHAPE_CELL2_1_CNT_CAPBOTTOM_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0780 }, { 0.0480, 0.0780 }, { 0.0480, 0.2340 }, { 0.0400, 0.2340 } },
    { { 0.0000, 0.0780 }, { 0.0080, 0.0780 }, { 0.0080, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.2222222222222222 */
SHAPE_CELL2_1_CNT_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.9871794871794872 */
SHAPE_CELL2_1_CNT_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0520 }, { 0.0255, 0.0520 }, { 0.0255, 0.2340 }, { 0.0225, 0.2340 } }
};    /* AREA RATIO = 0.04861111111111111 */
SHAPE_CELL2_1_CNT_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.7777777777777778 */
SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.0625, 0.0780 }, { 0.0705, 0.0780 }, { 0.0705, 0.2340 }, { 0.0625, 0.2340 } },
    { { 0.0145, 0.0780 }, { 0.0305, 0.0780 }, { 0.0305, 0.2340 }, { 0.0145, 0.2340 } }
};    /* AREA RATIO = 0.22695035460992907 */
SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0705, 0.0030 }, { 0.0705, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.9871794871794872 */
SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.0450, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.2340 }, { 0.0450, 0.2340 } }
};    /* AREA RATIO = 0.03309692671394799 */
SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0705, 0.0520 }, { 0.0705, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.7777777777777778 */
SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0880, 0.0780 }, { 0.1040, 0.0780 }, { 0.1040, 0.2340 }, { 0.0880, 0.2340 } },
    { { 0.0400, 0.0780 }, { 0.0560, 0.0780 }, { 0.0560, 0.2340 }, { 0.0400, 0.2340 } },
    { { 0.0000, 0.0780 }, { 0.0080, 0.0780 }, { 0.0080, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.2250351617440225 */
SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.1185, 0.0030 }, { 0.1185, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.9871794871794872 */
SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0520 }, { 0.0735, 0.0520 }, { 0.0735, 0.2340 }, { 0.0705, 0.2340 } },
    { { 0.0225, 0.0520 }, { 0.0255, 0.0520 }, { 0.0255, 0.2340 }, { 0.0225, 0.2340 } }
};    /* AREA RATIO = 0.03938115330520394 */
SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1185, 0.0520 }, { 0.1185, 0.2340 }, { 0.0000, 0.2340 } }
};    /* AREA RATIO = 0.7777777777777778 */
SHAPE_CELL2_1_CNT_CAPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0625, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0260 }, { 0.0625, 0.0260 } },
    { { 0.0145, 0.0000 }, { 0.0305, 0.0000 }, { 0.0305, 0.0260 }, { 0.0145, 0.0260 } }
};    /* AREA RATIO = 0.3404255319148936 */
SHAPE_CELL2_1_CNT_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0450, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0450, 0.0260 } }
};    /* AREA RATIO = 0.0425531914893617 */
SHAPE_CELL2_1_CNT_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.0260 }, { 0.0880, 0.0260 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.33755274261603374 */
SHAPE_CELL2_1_CNT_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0260 }, { 0.0705, 0.0260 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.05063291139240506 */
SHAPE_CELL2_1_CNT_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPTOP_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0580 }, { 0.0400, 0.0580 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0580 }, { 0.0000, 0.0580 } }
};    /* AREA RATIO = 0.14215686274509803 */
SHAPE_CELL2_1_CNT_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_1_CNT_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0840 }, { 0.0225, 0.0840 } }
};    /* AREA RATIO = 0.03860294117647059 */
SHAPE_CELL2_1_CNT_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.6176470588235294 */
SHAPE_CELL2_1_CNT_CAPTOPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0625, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0580 }, { 0.0625, 0.0580 } },
    { { 0.0145, 0.0000 }, { 0.0305, 0.0000 }, { 0.0305, 0.0580 }, { 0.0145, 0.0580 } }
};    /* AREA RATIO = 0.14518147684605756 */
SHAPE_CELL2_1_CNT_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_1_CNT_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0450, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0840 }, { 0.0450, 0.0840 } }
};    /* AREA RATIO = 0.026282853566958697 */
SHAPE_CELL2_1_CNT_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.6176470588235294 */
SHAPE_CELL2_1_CNT_CAPTOPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.0580 }, { 0.0880, 0.0580 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.0580 }, { 0.0400, 0.0580 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0580 }, { 0.0000, 0.0580 } }
};    /* AREA RATIO = 0.14395631670389675 */
SHAPE_CELL2_1_CNT_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_1_CNT_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0840 }, { 0.0705, 0.0840 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0840 }, { 0.0225, 0.0840 } }
};    /* AREA RATIO = 0.03127326880119136 */
SHAPE_CELL2_1_CNT_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.6176470588235294 */
SHAPE_CELL2_1_CNT_CORE_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_1_CNT_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_1_CNT_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0625, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.4940 }, { 0.0625, 0.4940 } },
    { { 0.0145, 0.0000 }, { 0.0305, 0.0000 }, { 0.0305, 0.4940 }, { 0.0145, 0.4940 } }
};    /* AREA RATIO = 0.3404255319148936 */
SHAPE_CELL2_1_CNT_REP_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0450, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0450, 0.4940 } }
};    /* AREA RATIO = 0.0425531914893617 */
SHAPE_CELL2_1_CNT_REP_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0705, 0.0000 }, { 0.0705, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.4940 }, { 0.0880, 0.4940 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.4940 }, { 0.0400, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.33755274261603374 */
SHAPE_CELL2_1_CNT_REP_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.4940 }, { 0.0705, 0.4940 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.4940 }, { 0.0225, 0.4940 } }
};    /* AREA RATIO = 0.05063291139240506 */
SHAPE_CELL2_1_CNT_REP_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1185, 0.0000 }, { 0.1185, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CORE_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0400, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_1_CNT_REP_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CNT_REP_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.4940 }, { 0.0225, 0.4940 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_1_CNT_REP_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CORE_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CORE_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_1_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_1_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_1_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0695, 0.4580 }, { 0.3120, 0.4580 }, { 0.3120, 0.4940 }, { 0.0695, 0.4940 } },
    { { 0.0695, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.2500 }, { 0.0695, 0.2500 } }
};    /* AREA RATIO = 0.4499831309041835 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_17_50 : list of coordinate_l = { 
    { { 0.0235, 0.4480 }, { 0.3120, 0.4480 }, { 0.3120, 0.4680 }, { 0.0235, 0.4680 } },
    { { 0.0235, 0.3440 }, { 0.3120, 0.3440 }, { 0.3120, 0.3640 }, { 0.0235, 0.3640 } },
    { { 0.0235, 0.2400 }, { 0.3120, 0.2400 }, { 0.3120, 0.2600 }, { 0.0235, 0.2600 } },
    { { 0.0235, 0.1360 }, { 0.3120, 0.1360 }, { 0.3120, 0.1560 }, { 0.0235, 0.1560 } },
    { { 0.0235, 0.0320 }, { 0.3120, 0.0320 }, { 0.3120, 0.0520 }, { 0.0235, 0.0520 } }
};    /* AREA RATIO = 0.1871820824249974 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.4320 }, { 0.3120, 0.4320 }, { 0.3120, 0.4840 }, { 0.0480, 0.4840 } },
    { { 0.0480, 0.3280 }, { 0.3120, 0.3280 }, { 0.3120, 0.3800 }, { 0.0480, 0.3800 } },
    { { 0.0480, 0.2240 }, { 0.3120, 0.2240 }, { 0.3120, 0.2760 }, { 0.0480, 0.2760 } },
    { { 0.0480, 0.1200 }, { 0.3120, 0.1200 }, { 0.3120, 0.1720 }, { 0.0480, 0.1720 } },
    { { 0.0480, 0.0160 }, { 0.3120, 0.0160 }, { 0.3120, 0.0680 }, { 0.0480, 0.0680 } }
};    /* AREA RATIO = 0.44534412955465585 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.3900 }, { 0.3120, 0.3900 }, { 0.3120, 0.4220 }, { 0.0945, 0.4220 } },
    { { 0.0945, 0.2860 }, { 0.3120, 0.2860 }, { 0.3120, 0.3180 }, { 0.0945, 0.3180 } },
    { { 0.0945, 0.1820 }, { 0.3120, 0.1820 }, { 0.3120, 0.2140 }, { 0.0945, 0.2140 } },
    { { 0.0945, 0.0780 }, { 0.3120, 0.0780 }, { 0.3120, 0.1100 }, { 0.0945, 0.1100 } },
    { { 0.0945, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0060 }, { 0.0945, 0.0060 } }
};    /* AREA RATIO = 0.18909607598878853 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.4940 }, { 0.3040, 0.4940 } },
    { { 0.2560, 0.0000 }, { 0.2720, 0.0000 }, { 0.2720, 0.4940 }, { 0.2560, 0.4940 } },
    { { 0.2080, 0.0000 }, { 0.2240, 0.0000 }, { 0.2240, 0.4940 }, { 0.2080, 0.4940 } },
    { { 0.1600, 0.0000 }, { 0.1760, 0.0000 }, { 0.1760, 0.4940 }, { 0.1600, 0.4940 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.4940 }, { 0.1120, 0.4940 } }
};    /* AREA RATIO = 0.23076923076923078 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.4940 }, { 0.0075, 0.4940 } }
};    /* AREA RATIO = 0.9759615384615384 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.4380 }, { 0.3120, 0.4380 }, { 0.3120, 0.4780 }, { 0.0960, 0.4780 } },
    { { 0.0960, 0.3340 }, { 0.3120, 0.3340 }, { 0.3120, 0.3740 }, { 0.0960, 0.3740 } },
    { { 0.0960, 0.2300 }, { 0.3120, 0.2300 }, { 0.3120, 0.2700 }, { 0.0960, 0.2700 } },
    { { 0.0960, 0.1260 }, { 0.3120, 0.1260 }, { 0.3120, 0.1660 }, { 0.0960, 0.1660 } },
    { { 0.0960, 0.0220 }, { 0.3120, 0.0220 }, { 0.3120, 0.0620 }, { 0.0960, 0.0620 } }
};    /* AREA RATIO = 0.2802865151043289 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0000 }, { 0.2895, 0.0000 }, { 0.2895, 0.4940 }, { 0.2865, 0.4940 } },
    { { 0.2385, 0.0000 }, { 0.2415, 0.0000 }, { 0.2415, 0.4940 }, { 0.2385, 0.4940 } },
    { { 0.1905, 0.0000 }, { 0.1935, 0.0000 }, { 0.1935, 0.4940 }, { 0.1905, 0.4940 } },
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.4940 }, { 0.1425, 0.4940 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.4940 }, { 0.0945, 0.4940 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.4940 }, { 0.0465, 0.4940 } }
};    /* AREA RATIO = 0.057692307692307696 */
SHAPE_REPLACE_CELL2_1_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.4940 }, { 0.0240, 0.4940 } }
};    /* AREA RATIO = 0.9230769230769231 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.4580 }, { 0.1945, 0.4580 }, { 0.1945, 0.4940 }, { 0.0000, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.1945, 0.0000 }, { 0.1945, 0.2500 }, { 0.0000, 0.2500 } }
};    /* AREA RATIO = 0.42653508771929827 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.4480 }, { 0.2405, 0.4480 }, { 0.2405, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.3440 }, { 0.2405, 0.3440 }, { 0.2405, 0.3640 }, { 0.0000, 0.3640 } },
    { { 0.0000, 0.2400 }, { 0.2405, 0.2400 }, { 0.2405, 0.2600 }, { 0.0000, 0.2600 } },
    { { 0.0000, 0.1360 }, { 0.2405, 0.1360 }, { 0.2405, 0.1560 }, { 0.0000, 0.1560 } },
    { { 0.0000, 0.0320 }, { 0.2405, 0.0320 }, { 0.2405, 0.0520 }, { 0.0000, 0.0520 } }
};    /* AREA RATIO = 0.18440988835725677 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.4320 }, { 0.2160, 0.4320 }, { 0.2160, 0.4840 }, { 0.0000, 0.4840 } },
    { { 0.0000, 0.3280 }, { 0.2160, 0.3280 }, { 0.2160, 0.3800 }, { 0.0000, 0.3800 } },
    { { 0.0000, 0.2240 }, { 0.2160, 0.2240 }, { 0.2160, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.1200 }, { 0.2160, 0.1200 }, { 0.2160, 0.1720 }, { 0.0000, 0.1720 } },
    { { 0.0000, 0.0160 }, { 0.2160, 0.0160 }, { 0.2160, 0.0680 }, { 0.0000, 0.0680 } }
};    /* AREA RATIO = 0.430622009569378 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.1695, 0.3900 }, { 0.1695, 0.4220 }, { 0.0000, 0.4220 } },
    { { 0.0000, 0.2860 }, { 0.1695, 0.2860 }, { 0.1695, 0.3180 }, { 0.0000, 0.3180 } },
    { { 0.0000, 0.1820 }, { 0.1695, 0.1820 }, { 0.1695, 0.2140 }, { 0.0000, 0.2140 } },
    { { 0.0000, 0.0780 }, { 0.1695, 0.0780 }, { 0.1695, 0.1100 }, { 0.0000, 0.1100 } },
    { { 0.0000, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.1741580787633419 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0000 }, { 0.1520, 0.0000 }, { 0.1520, 0.4940 }, { 0.1360, 0.4940 } },
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.4940 }, { 0.0880, 0.4940 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.4940 }, { 0.0400, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.21212121212121213 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.9715909090909091 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.4380 }, { 0.1680, 0.4380 }, { 0.1680, 0.4780 }, { 0.0000, 0.4780 } },
    { { 0.0000, 0.3340 }, { 0.1680, 0.3340 }, { 0.1680, 0.3740 }, { 0.0000, 0.3740 } },
    { { 0.0000, 0.2300 }, { 0.1680, 0.2300 }, { 0.1680, 0.2700 }, { 0.0000, 0.2700 } },
    { { 0.0000, 0.1260 }, { 0.1680, 0.1260 }, { 0.1680, 0.1660 }, { 0.0000, 0.1660 } },
    { { 0.0000, 0.0220 }, { 0.1680, 0.0220 }, { 0.1680, 0.0620 }, { 0.0000, 0.0620 } }
};    /* AREA RATIO = 0.2576370997423629 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0000 }, { 0.2175, 0.0000 }, { 0.2175, 0.4940 }, { 0.2145, 0.4940 } },
    { { 0.1665, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.4940 }, { 0.1665, 0.4940 } },
    { { 0.1185, 0.0000 }, { 0.1215, 0.0000 }, { 0.1215, 0.4940 }, { 0.1185, 0.4940 } },
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.4940 }, { 0.0705, 0.4940 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.4940 }, { 0.0225, 0.4940 } }
};    /* AREA RATIO = 0.056818181818181816 */
SHAPE_REPLACE_CELL2_1_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2400, 0.0000 }, { 0.2400, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.9090909090909091 */
SHAPE_REPLACE_CELL2_1_CORE_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.4580 }, { 0.0480, 0.4580 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.2500 }, { 0.0000, 0.2500 } }
};    /* AREA RATIO = 0.5789473684210527 */
SHAPE_REPLACE_CELL2_1_CORE_257_21 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_REPLACE_CELL2_1_CORE_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.4480 }, { 0.0480, 0.4480 }, { 0.0480, 0.4680 }, { 0.0000, 0.4680 } },
    { { 0.0000, 0.3440 }, { 0.0480, 0.3440 }, { 0.0480, 0.3640 }, { 0.0000, 0.3640 } },
    { { 0.0000, 0.2400 }, { 0.0480, 0.2400 }, { 0.0480, 0.2600 }, { 0.0000, 0.2600 } },
    { { 0.0000, 0.1360 }, { 0.0480, 0.1360 }, { 0.0480, 0.1560 }, { 0.0000, 0.1560 } },
    { { 0.0000, 0.0320 }, { 0.0480, 0.0320 }, { 0.0480, 0.0520 }, { 0.0000, 0.0520 } }
};    /* AREA RATIO = 0.20242914979757085 */
SHAPE_REPLACE_CELL2_1_CORE_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.4320 }, { 0.0480, 0.4320 }, { 0.0480, 0.4840 }, { 0.0000, 0.4840 } },
    { { 0.0000, 0.3280 }, { 0.0480, 0.3280 }, { 0.0480, 0.3800 }, { 0.0000, 0.3800 } },
    { { 0.0000, 0.2240 }, { 0.0480, 0.2240 }, { 0.0480, 0.2760 }, { 0.0000, 0.2760 } },
    { { 0.0000, 0.1200 }, { 0.0480, 0.1200 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } },
    { { 0.0000, 0.0160 }, { 0.0480, 0.0160 }, { 0.0480, 0.0680 }, { 0.0000, 0.0680 } }
};    /* AREA RATIO = 0.5263157894736842 */
SHAPE_REPLACE_CELL2_1_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.0480, 0.3900 }, { 0.0480, 0.4220 }, { 0.0000, 0.4220 } },
    { { 0.0000, 0.2860 }, { 0.0480, 0.2860 }, { 0.0480, 0.3180 }, { 0.0000, 0.3180 } },
    { { 0.0000, 0.1820 }, { 0.0480, 0.1820 }, { 0.0480, 0.2140 }, { 0.0000, 0.2140 } },
    { { 0.0000, 0.0780 }, { 0.0480, 0.0780 }, { 0.0480, 0.1100 }, { 0.0000, 0.1100 } },
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.27125506072874495 */
SHAPE_REPLACE_CELL2_1_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0400, 0.4940 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_REPLACE_CELL2_1_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */
SHAPE_REPLACE_CELL2_1_CORE_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.4380 }, { 0.0480, 0.4380 }, { 0.0480, 0.4780 }, { 0.0000, 0.4780 } },
    { { 0.0000, 0.3340 }, { 0.0480, 0.3340 }, { 0.0480, 0.3740 }, { 0.0000, 0.3740 } },
    { { 0.0000, 0.2300 }, { 0.0480, 0.2300 }, { 0.0480, 0.2700 }, { 0.0000, 0.2700 } },
    { { 0.0000, 0.1260 }, { 0.0480, 0.1260 }, { 0.0480, 0.1660 }, { 0.0000, 0.1660 } },
    { { 0.0000, 0.0220 }, { 0.0480, 0.0220 }, { 0.0480, 0.0620 }, { 0.0000, 0.0620 } }
};    /* AREA RATIO = 0.4048582995951417 */
SHAPE_REPLACE_CELL2_1_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.4940 }, { 0.0225, 0.4940 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_REPLACE_CELL2_1_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.4940 }, { 0.0000, 0.4940 } }
};    /* AREA RATIO = 1.0 */


LAYER_SHAPE_CELL2_1_CORE_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CORE_257_201
};

LAYER_SHAPE_CELL2_1_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CORE_6_7
};

LAYER_SHAPE_CELL2_1_CORE_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CORE_257_21
};

LAYER_SHAPE_CELL2_1_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CORE_82_170
};

LAYER_SHAPE_CELL2_1_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CORE_6_170
};

LAYER_SHAPE_CELL2_1_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CORE_17_7
};

LAYER_SHAPE_CELL2_1_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CORE_250_1
};

LAYER_SHAPE_CELL2_1_CAPTOP_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_257_201
};

LAYER_SHAPE_CELL2_1_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_6_160
};

LAYER_SHAPE_CELL2_1_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_6_7
};

LAYER_SHAPE_CELL2_1_CAPTOP_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_257_21
};

LAYER_SHAPE_CELL2_1_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_82_170
};

LAYER_SHAPE_CELL2_1_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_6_170
};

LAYER_SHAPE_CELL2_1_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_82_270
};

LAYER_SHAPE_CELL2_1_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_17_7
};

LAYER_SHAPE_CELL2_1_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPTOP_250_1
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_257_201
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_6_160
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_6_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_257_21
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_17_50
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_82_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_6_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_82_270
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_17_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CORE_250_1
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_257_201
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_17_50
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_257_21
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_257_201
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CAPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_257_201
};

LAYER_SHAPE_CELL2_1_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_6_7
};

LAYER_SHAPE_CELL2_1_CAPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_257_201
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_82_270
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_201
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_50
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_160
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_21
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_270
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_257_201
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_82_270
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPTOPLEFT_250_1
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_257_201
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_17_50
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_6_160
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_6_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_257_21
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_82_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_6_170
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_82_270
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_17_7
};

LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_REPLACE_CELL2_1_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_201
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_50
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_270
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_201"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_257_201
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_50"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_17_50
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_160"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_257_21"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_6_170"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_82_270"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_82_270
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_17_7"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_250_1"
    },
    polygons = SHAPE_CELL2_1_CAPBOTTOMLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CORE_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CORE_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CORE_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CORE_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CORE_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CORE_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOP_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOP_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOP_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOP_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOP_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOP_250_1
};

LAYER_SHAPE_CELL2_1_CNT_REP_CORE_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CORE_257_21
};

LAYER_SHAPE_CELL2_1_CNT_REP_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CORE_82_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CORE_6_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CORE_17_7
};

LAYER_SHAPE_CELL2_1_CNT_REP_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CORE_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOM_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPTOPLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_REP_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_257_21 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_257_21"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_257_21
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_82_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_6_170"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_17_7"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_1_CONNECT_250_1"
    },
    polygons = SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_250_1
};



// DUMMY SPEC : Cell2_1
FSS_CELL2_1 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { FILL_W58_DUMMY_POLY_FIRST_REGION, min_space = 0 },
#ifdef WIDE_POLY_CELL_IN_CORE 
    { FILL_W86_DUMMY_POLY_FIRST_REGION, min_space = 0.001 },
#endif  

    { over_size_v( FB_1, CELL2_1_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL2_1_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL2_1_FB1Y, CELL2_1_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL2_1_FB1X, CELL2_1_FB1Y ), min_space = 0 },    
    { FB_2, min_space_x = CELL2_1_FB2X, min_space_y = CELL2_1_FB2Y, space_extension_x = CELL2_1_FB2X, space_extension_y = CELL2_1_FB2Y },
    { FB_26, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { FB_28, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { FB_29, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { FB_31, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { FB_36, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { FB_38, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL2_1_FBOTHERX, min_space_y = CELL2_1_FBOTHERY, space_extension_x = CELL2_1_FBOTHERX, space_extension_y = CELL2_1_FBOTHERY },
    { SRM, min_space_x = CELL2_1_SRAMX, min_space_y = CELL2_1_SRAMY, space_extension_x = CELL2_1_SRAMX, space_extension_y = CELL2_1_SRAMY },
    { SRM_1, min_space_x = CELL2_1_SRAMX, min_space_y = CELL2_1_SRAMY, space_extension_x = CELL2_1_SRAMX, space_extension_y = CELL2_1_SRAMY },
    { SRAMDMY, min_space_x = CELL2_1_SRAMX, min_space_y = CELL2_1_SRAMY, space_extension_x = CELL2_1_SRAMX, space_extension_y = CELL2_1_SRAMY },
    { OD, min_space_x = CELL2_1_ODX, min_space_y = CELL2_1_ODY, space_extension_x = CELL2_1_ODX, space_extension_y = CELL2_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL2_1_ODX, min_space_y = CELL2_1_ODY, space_extension_x = CELL2_1_ODX, space_extension_y = CELL2_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL2_1_CODHX, min_space_y = CELL2_1_CODHY, space_extension_x = CELL2_1_CODHX, space_extension_y = CELL2_1_CODHY },
    { DCOD_H, min_space_x = CELL2_1_CODHX, min_space_y = CELL2_1_CODHY, space_extension_x = CELL2_1_CODHX, space_extension_y = CELL2_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL2_1_CODVX, min_space_y = CELL2_1_CODVY, space_extension_x = CELL2_1_CODVX, space_extension_y = CELL2_1_CODVY },
    { DCOD_V, min_space_x = CELL2_1_CODVX, min_space_y = CELL2_1_CODVY, space_extension_x = CELL2_1_CODVX, space_extension_y = CELL2_1_CODVY },
    { COD_BLOCK_NT_SR, min_space = CELL2_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL2_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL2_1_ODMMBX, min_space_y = CELL2_1_ODMMBY, space_extension_x = CELL2_1_ODMMBX, space_extension_y = CELL2_1_ODMMBY },
    { PO, min_space_x = CELL2_1_POX, min_space_y = CELL2_1_POY, space_extension_x = CELL2_1_POX, space_extension_y = CELL2_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL2_1_SRDPOX, min_space_y = CELL2_1_SRDPOY, space_extension_x = CELL2_1_SRDPOX, space_extension_y = CELL2_1_SRDPOY },
    { PO3, min_space_x = CELL2_1_PO3X, min_space_y = CELL2_1_PO3Y, space_extension_x = CELL2_1_PO3X, space_extension_y = CELL2_1_PO3Y },
    { SR_DPO_NT_SR3, min_space_x = CELL2_1_SRDPO3X, min_space_y = CELL2_1_SRDPO3Y, space_extension_x = CELL2_1_SRDPO3X, space_extension_y = CELL2_1_SRDPO3Y },
    { POLE8, min_space_x = CELL2_1_POLE8X, min_space_y = CELL2_1_POLE8Y, space_extension_x = CELL2_1_POLE8X, space_extension_y = CELL2_1_POLE8Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL2_1_SRDPOLE8X, min_space_y = CELL2_1_SRDPOLE8Y, space_extension_x = CELL2_1_SRDPOLE8X, space_extension_y = CELL2_1_SRDPOLE8Y },
    { PO9, min_space_x = CELL2_1_PO9X, min_space_y = CELL2_1_PO9Y, space_extension_x = CELL2_1_PO9X, space_extension_y = CELL2_1_PO9Y },
    { SR_DPO_NT_SR9, min_space_x = CELL2_1_SR_DPO9X, min_space_y = CELL2_1_SR_DPO9Y, space_extension_x = CELL2_1_SR_DPO9X, space_extension_y = CELL2_1_SR_DPO9Y },
    { PO54, min_space_x = CELL2_1_PO54X, min_space_y = CELL2_1_PO54Y, space_extension_x = CELL2_1_PO54X, space_extension_y = CELL2_1_PO54Y },
    { SR_DPO_NT_SR54, min_space_x = CELL2_1_SR_DPO54X, min_space_y = CELL2_1_SR_DPO54Y, space_extension_x = CELL2_1_SR_DPO54X, space_extension_y = CELL2_1_SR_DPO54Y },
    { PO86, min_space_x = CELL2_1_PO86X, min_space_y = CELL2_1_PO86Y, space_extension_x = CELL2_1_PO86X, space_extension_y = CELL2_1_PO86Y },
    { SR_DPO_NT_SR86, min_space_x = CELL2_1_SR_DPO86X, min_space_y = CELL2_1_SR_DPO86Y, space_extension_x = CELL2_1_SR_DPO86X, space_extension_y = CELL2_1_SR_DPO86Y },
    { PO_P54, min_space = CELL2_1_PO_P54 },
    { PO_P81, min_space = CELL2_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL2_1_PO_P81_WPO },
    { PO_P57, min_space = CELL2_1_PO_P57 },
    { CPO, min_space_x = CELL2_1_CPOX, min_space_y = CELL2_1_CPOY, space_extension_x = CELL2_1_CPOX, space_extension_y = CELL2_1_CPOY },
    { SR_DCPO, min_space_x = CELL2_1_SRDCPOX, min_space_y = CELL2_1_SRDCPOY, space_extension_x = CELL2_1_SRDCPOX, space_extension_y = CELL2_1_SRDCPOY },
    { CPO20, min_space_x = CELL2_1_CPO20X, min_space_y = CELL2_1_CPO20Y, space_extension_x = CELL2_1_CPO20X, space_extension_y = CELL2_1_CPO20Y },
    { SR_DCPO20, min_space_x = CELL2_1_SR_DCPO20X, min_space_y = CELL2_1_SR_DCPO20Y, space_extension_x = CELL2_1_SR_DCPO20X, space_extension_y = CELL2_1_SR_DCPO20Y },
    { CPO22, min_space_x = CELL2_1_CPO22X, min_space_y = CELL2_1_CPO22Y, space_extension_x = CELL2_1_CPO22X, space_extension_y = CELL2_1_CPO22Y },
    { SR_DCPO22, min_space_x = CELL2_1_SR_DCPO22X, min_space_y = CELL2_1_SR_DCPO22Y, space_extension_x = CELL2_1_SR_DCPO22X, space_extension_y = CELL2_1_SR_DCPO22Y },
    { CPO25, min_space_x = CELL2_1_CPO25X, min_space_y = CELL2_1_CPO25Y, space_extension_x = CELL2_1_CPO25X, space_extension_y = CELL2_1_CPO25Y },
    { SR_DCPO25, min_space_x = CELL2_1_SR_DCPO25X, min_space_y = CELL2_1_SR_DCPO25Y, space_extension_x = CELL2_1_SR_DCPO25X, space_extension_y = CELL2_1_SR_DCPO25Y },
    { MD, min_space_x = CELL2_1_MDX, min_space_y = CELL2_1_MDY, space_extension_x = CELL2_1_MDX, space_extension_y = CELL2_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL2_1_SR_DMDX, min_space_y = CELL2_1_SR_DMDY, space_extension_x = CELL2_1_SR_DMDX, space_extension_y = CELL2_1_SR_DMDY },
    { MD16, min_space_x = CELL2_1_MD16X, min_space_y = CELL2_1_MD16Y, space_extension_x = CELL2_1_MD16X, space_extension_y = CELL2_1_MD16Y },
    { SR_DMD_NT_SR16, min_space_x = CELL2_1_SR_DMD16X, min_space_y = CELL2_1_SR_DMD16Y, space_extension_x = CELL2_1_SR_DMD16X, space_extension_y = CELL2_1_SR_DMD16Y },
    { MD30, min_space_x = CELL2_1_MD30X, min_space_y = CELL2_1_MD30Y, space_extension_x = CELL2_1_MD30X, space_extension_y = CELL2_1_MD30Y },
    { SR_DMD_NT_SR30, min_space_x = CELL2_1_SR_DMD30X, min_space_y = CELL2_1_SR_DMD30Y, space_extension_x = CELL2_1_SR_DMD30X, space_extension_y = CELL2_1_SR_DMD30Y },
    { CMD, min_space_x = CELL2_1_CMDX, min_space_y = CELL2_1_CMDY, space_extension_x = CELL2_1_CMDX, space_extension_y = CELL2_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL2_1_CMDX, min_space_y = CELL2_1_CMDY, space_extension_x = CELL2_1_CMDX, space_extension_y = CELL2_1_CMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL2_1_NW_CENTERLINE },
    { NT_N, min_space = CELL2_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL2_1_OD2X, min_space_y = CELL2_1_OD2Y, space_extension_x = CELL2_1_OD2X, space_extension_y = CELL2_1_OD2Y },
    { NWDMY, min_space = CELL2_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL2_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL2_1_VAR },
    { DI_WPO, min_space = CELL2_1_DI_WPO },
    { DFBC, min_space_x = CELL2_1_DFBCX, min_space_y = CELL2_1_DFBCY, space_extension_x = CELL2_1_DFBCX, space_extension_y = CELL2_1_DFBCY },
    { DFBC_ALL, min_space_x = CELL2_1_DFBC_ALLX, min_space_y = CELL2_1_DFBC_ALLY, space_extension_x = CELL2_1_DFBC_ALLX, space_extension_y = CELL2_1_DFBC_ALLY },
    { COR_45_REG, min_space = CELL2_1_COR_45_REG },
    { DC1, min_space_x = CELL2_1_CELL1X, min_space_y = CELL2_1_CELL1Y, space_extension_x = CELL2_1_CELL1X, space_extension_y = CELL2_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL2_1_CELL2_1X, min_space_y = CELL2_1_CELL2_1Y, space_extension_x = CELL2_1_CELL2_1X, space_extension_y = CELL2_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL2_1_CELL2_2X, min_space_y = CELL2_1_CELL2_2Y, space_extension_x = CELL2_1_CELL2_2X, space_extension_y = CELL2_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL2_1_CELL2_3X, min_space_y = CELL2_1_CELL2_3Y, space_extension_x = CELL2_1_CELL2_3X, space_extension_y = CELL2_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL2_1_CELL4_1X, min_space_y = CELL2_1_CELL4_1Y, space_extension_x = CELL2_1_CELL4_1X, space_extension_y = CELL2_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL2_1_CELL4_2X, min_space_y = CELL2_1_CELL4_2Y, space_extension_x = CELL2_1_CELL4_2X, space_extension_y = CELL2_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL2_1_CELL5_1X, min_space_y = CELL2_1_CELL5_1Y, space_extension_x = CELL2_1_CELL5_1X, space_extension_y = CELL2_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL2_1_CELL5_2X, min_space_y = CELL2_1_CELL5_2Y, space_extension_x = CELL2_1_CELL5_2X, space_extension_y = CELL2_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL2_1_CELL6_1X, min_space_y = CELL2_1_CELL6_1Y, space_extension_x = CELL2_1_CELL6_1X, space_extension_y = CELL2_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL2_1_CELL6_2X, min_space_y = CELL2_1_CELL6_2Y, space_extension_x = CELL2_1_CELL6_2X, space_extension_y = CELL2_1_CELL6_2Y },
    { DC7, min_space_x = CELL2_1_CELL7X, min_space_y = CELL2_1_CELL7Y, space_extension_x = CELL2_1_CELL7X, space_extension_y = CELL2_1_CELL7Y },
    { DC8_1, min_space_x = CELL2_1_CELL8_1X, min_space_y = CELL2_1_CELL8_1Y, space_extension_x = CELL2_1_CELL8_1X, space_extension_y = CELL2_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL2_1_CELL8_2X, min_space_y = CELL2_1_CELL8_2Y, space_extension_x = CELL2_1_CELL8_2X, space_extension_y = CELL2_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL2_1X, min_space_y = CELL4_2_CELL2_1Y, space_extension_x = CELL4_2_CELL2_1X, space_extension_y = CELL4_2_CELL2_1Y },
    { CELL1_E, min_space_x = CELL2_1_CELL1X, min_space_y = CELL2_1_CELL1Y, space_extension_x = CELL2_1_CELL1X, space_extension_y = CELL2_1_CELL1Y },
}; // end of FSS_CELL2_1
//=========================================================================================
CELL2_1_fillable = unified_fill_region(FSS_CELL2_1,{ SIGNAL_EXTENT });

BASE_CELL2_1_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_82_270,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPTOP_257_201,
	    LAYER_SHAPE_CELL2_1_CAPTOP_6_160,
	    LAYER_SHAPE_CELL2_1_CAPTOP_6_7,
	    LAYER_SHAPE_CELL2_1_CAPTOP_257_21,
	    LAYER_SHAPE_CELL2_1_CAPTOP_82_170,
	    LAYER_SHAPE_CELL2_1_CAPTOP_6_170,
	    LAYER_SHAPE_CELL2_1_CAPTOP_82_270,
	    LAYER_SHAPE_CELL2_1_CAPTOP_17_7,
	    LAYER_SHAPE_CELL2_1_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_82_270,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPLEFT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CORE_257_201,
	    LAYER_SHAPE_CELL2_1_CORE_6_7,
	    LAYER_SHAPE_CELL2_1_CORE_257_21,
	    LAYER_SHAPE_CELL2_1_CORE_82_170,
	    LAYER_SHAPE_CELL2_1_CORE_6_170,
	    LAYER_SHAPE_CELL2_1_CORE_17_7,
	    LAYER_SHAPE_CELL2_1_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_17_50,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_82_270,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_257_201,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_17_50,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_257_21,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_201,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_50,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_82_270,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_257_201,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_17_50,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_160,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_257_21,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_82_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_6_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_82_270,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_17_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_257_201,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_160,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_257_21,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_17_50,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_82_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_6_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_82_270,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_17_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL2_1_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_201,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_50,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_160,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_257_21,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_6_170,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_82_270,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_17_7,
	    LAYER_SHAPE_REPLACE_CELL2_1_CAPRIGHT_250_1,
    },
    repeatable = false
};


PATTERN_CELL2_1 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
            pattern_spacing = {
                allowed_spacing_x = {>= 0.048 },
		        allowed_spacing_y = {>= 0.124 },
            },
		   space_x = 0.048,
		   space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL2_1_4,
		BASE_CELL2_1_5,
		BASE_CELL2_1_6,
	    },
	    base_cell_top = {
		BASE_CELL2_1_1,
		BASE_CELL2_1_2,
		BASE_CELL2_1_3,
	    },
	    base_cell_bottom = {
		BASE_CELL2_1_7,
		BASE_CELL2_1_8,
		BASE_CELL2_1_9,
	    },
	    insertion = {
		    iterations = 2,
            prune_jogs = {
		        { horizontal_length = < 0.05, vertical_length = < 0.026, jog_types =  {UF_STEP}, measure_adjacent = false }
            },            
	    },
	    partition = {},
	    pitch = {
		    context_layer = shrink( INITIAL_LAYER, west = 0.0015, south = 0.0  ), 
		    x = 0.048,
		    y = 0.026,
	    },
	    cell_prefix = "CELL2_1",
	    fill_to_signal_spacing = FSS_CELL2_1,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
        maximum_expansion_ranges = {{<=30, <=23}},
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,
	    merging_cell = {
		BASE_CELL2_1_R1,
		BASE_CELL2_1_R2,
		BASE_CELL2_1_R3,
	    },
        merging_length_limit = 100*(0.396+0.124)-0.124,
	    merging_direction = VERTICAL,
	},
    },
}; // end of PATTERN_CELL2_1

CELL2_1_region = unified_fill_region(
    FSS_CELL2_1,
    fill_boundary = {
      layer = CHIP_snps,
      type = LAYER
    }
);
cell2_1_retarget = retarget_with_local_protection(
  CELL2_1_region /*fillable region*/,
  PATTERN_CELL2_1[0].expandable_polygon_fill.pattern_spec /*pattern_spec*/,
  0.338 /*width*/,
  0.458 /*height*/,
  vGRID  /*grid*/
);


SPEC_CELL2_1 = unified_fill( 
    fill_boundary = {
        layer = cell2_1_retarget, 
        type = LAYER
    },
    fill_patterns = PATTERN_CELL2_1,
    extents_output = {
    	{
        output_layer_key = "CELL2_1_EXTENT"
    	}
    }
);


CELL2_1_257_201_C    = SPEC_CELL2_1["OUTPUT_CELL2_1_257_201"][0];
CELL2_1_17_50_C     = SPEC_CELL2_1["OUTPUT_CELL2_1_17_50"][0];
CELL2_1_6_160_C     = SPEC_CELL2_1["OUTPUT_CELL2_1_6_160"][0];
CELL2_1_6_7_C       = SPEC_CELL2_1["OUTPUT_CELL2_1_6_7"][0];
CELL2_1_257_21_C    = SPEC_CELL2_1["OUTPUT_CELL2_1_257_21"][0];
CELL2_1_82_170_C    = SPEC_CELL2_1["OUTPUT_CELL2_1_82_170"][0];
CELL2_1_6_170_C     = SPEC_CELL2_1["OUTPUT_CELL2_1_6_170"][0];
CELL2_1_82_270_C    = SPEC_CELL2_1["OUTPUT_CELL2_1_82_270"][0];
CELL2_1_17_7_C      = SPEC_CELL2_1["OUTPUT_CELL2_1_17_7"][0];
CELL2_1_250_1_C     = SPEC_CELL2_1["OUTPUT_CELL2_1_250_1"][0];
CELL2_1_E           = SPEC_CELL2_1["CELL2_1_EXTENT"][0];
CELL2_1_6_170_L     = SPEC_CELL2_1["OUTPUT_CELL2_1_6_170"][0];



PATTERN_CELL2_1_CUT : list of uf_fill_pattern_s = {
    {
    type = UF_STRIPE,    
    stripe_fill = {
        direction = VERTICAL,
        layer_spec = {
            output_layer_key = "CELL2_1_CUT"
        },
	reference_layer = {
	    reference_context = POLYGON_EXTENT,
	    shift_value = {0, 0},
	    layer = CHIP_snps,
	},
        width = 0.624,
        spacing = 26.88
    },
    },
}; // end of PATTERN_CELL1_SEPARATOR

SPEC_CELL2_1_CUT = unified_fill(
    fill_patterns = PATTERN_CELL2_1_CUT,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    window_layer = CHIP_snps
);

CELL2_1_CUT = SPEC_CELL2_1_CUT["CELL2_1_CUT"][0];

PP_90 = angle_edge( ( PP or CELL1_25_0_L ), == 90 ); 
DC1_PP_0 = angle_edge( ( PP or CELL1_25_0_L ), == 0 ); 
FORBID_PCHDC = edge_size( extend_edge( PP_90, start = 0.13, end = 0.13 ), outside = 0.13 ); 
FORBID_PCHDC_DC1 = edge_size( extend_edge( DC1_PP_0, start = 0.13, end = 0.13 ), outside = 0.13 ); 

CELL2_1_257_201_L     = SPEC_CELL2_1["OUTPUT_CELL2_1_257_201"][0];
CELL2_1_17_50_L     = SPEC_CELL2_1["OUTPUT_CELL2_1_17_50"][0];
CELL2_1_6_160_L     = SPEC_CELL2_1["OUTPUT_CELL2_1_6_160"][0];
CELL2_1_6_7_L       = SPEC_CELL2_1["OUTPUT_CELL2_1_6_7"][0];
CELL2_1_82_270_L    = SPEC_CELL2_1["OUTPUT_CELL2_1_82_270"][0];

CELL2_1_257_201_M = not_interacting( CELL2_1_257_201_L, ( FORBID_PCHDC or FORBID_PCHDC_DC1 ) ); 
CELL2_1_257_201_FILLER = interacting( CELL2_1_257_201_L, FORBID_PCHDC ); 

CELL2_1_E_CHK = angle_edge( CELL2_1_E, == 90 ); 
CELL2_1_GAP_PRE = external1( CELL2_1_E_CHK, <= 0.049, extension = RADIAL, intersecting = {  }, look_thru = NOT_ADJACENT ); 

CELL2_1_GAP = not_contains( rectangles( CELL2_1_GAP_PRE ), { 0.048, 53 }, FORTY_FIVE ); 
FB_1_VEDGE = angle_edge( FB_1, == 90 ); 
FB_1_VREG = edge_size( FB_1_VEDGE, inside = GRID );
CELL2_1_GAP_FILL = not_interacting( not_interacting( not_interacting( grow( CELL2_1_GAP, east = 0.0945, west = 0.0945 ), FB_1_VREG ), FORBID_PCHDC ), CELL2_1_257_201_FILLER ); 

CELL2_1_6_7_L_CHK = angle_edge( CELL2_1_6_7_L, == 90 ); 
CELL2_1_GAP_FILL_GOOD = not_interacting( CELL2_1_GAP_FILL, ( not_rectangles( external1( CELL2_1_6_7_L_CHK, <= 0.245, extension = RADIAL, intersecting = {  }, look_thru = NOT_ADJACENT ) ) or CELL2_1_CUT ) ); 
CELL2_1_6_7_F = external1( CELL2_1_6_7_L_CHK, == 0.237, extension = NONE, intersecting = {  }, look_thru = NOT_ADJACENT, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ) inside CELL2_1_GAP_FILL_GOOD; 
CELL2_1_6_160_F = external1( CELL2_1_6_160_L, == 0.144, extension = NONE, intersecting = {  }, look_thru = NOT_ADJACENT, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ) inside CELL2_1_GAP_FILL_GOOD; 
CELL2_1_17_50_F = external1( CELL2_1_17_50_L, == 0.095, extension = NONE, intersecting = {  }, look_thru = NOT_ADJACENT, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ) inside CELL2_1_GAP_FILL_GOOD; 
CELL2_1_257_201_F = not_interacting( ( external1( CELL2_1_257_201_M, == 0.187, extension = NONE, intersecting = {  }, look_thru = NOT_ADJACENT, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ) inside CELL2_1_GAP_FILL_GOOD ), FORBID_PCHDC_DC1 ); 
CELL2_1_82_270_F = external1( CELL2_1_82_270_L, == 0.24, extension = NONE, intersecting = {  }, look_thru = NOT_ADJACENT, projection_filter = MUTUAL_NON_ORTHOGONAL, projection_mode = ASYMMETRIC ) inside grow( CELL2_1_GAP_FILL_GOOD, east = 0.0015, west = 0.0015 ); 


BASE_CELL2_1_CNT_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_CNT_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOP_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOP_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOP_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOP_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_CNT_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_CNT_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_CNT_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CORE_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CORE_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CORE_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CORE_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_CNT_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_CNT_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_CNT_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL2_1_CNT_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_CNT_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_1_CNT_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_REP_CORE_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CORE_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CORE_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CORE_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL2_1_CNT_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_257_21,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_1_CNT_REP_CAPRIGHT_250_1,
    },
    repeatable = false
};


PATTERN_CELL2_1_CNT : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.011,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL2_1_CNT_4,
		BASE_CELL2_1_CNT_5,
		BASE_CELL2_1_CNT_6,
	    },
	    base_cell_top = {
		BASE_CELL2_1_CNT_1,
		BASE_CELL2_1_CNT_2,
		BASE_CELL2_1_CNT_3,
	    },
	    base_cell_bottom = {
		BASE_CELL2_1_CNT_7,
		BASE_CELL2_1_CNT_8,
		BASE_CELL2_1_CNT_9,
	    },
	    partition = {},
	    cell_prefix = "CELL2_1_CNT",
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
        maximum_expansion_ranges = {{<=4, <=99}},
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        corner_optimization = HORIZONTAL,
	    merging_cell = {
		BASE_CELL2_1_CNT_R1,
		BASE_CELL2_1_CNT_R2,
		BASE_CELL2_1_CNT_R3,
	    },
	    merging_direction = VERTICAL,
	}
    },
}; // end of PATTERN_CELL2_1_CNT

SPEC_CELL2_1_CNT = unified_fill(
    fill_patterns = PATTERN_CELL2_1_CNT,
    fill_boundary = {
	layer = CELL2_1_GAP_FILL_GOOD,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL2_1_CNT_EXTENT"
	},
    }
);

CELL2_1_CONNECT_257_21_C   = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_257_21"][0];
CELL2_1_CONNECT_82_170_C   = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_82_170"][0];
CELL2_1_CONNECT_6_170_C    = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_6_170"][0];
CELL2_1_CONNECT_17_7_C     = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_17_7"][0];
CELL2_1_CONNECT_250_1_C    = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_250_1"][0];
CELL2_1_CONNECT_E          = SPEC_CELL2_1_CNT["CELL2_1_CNT_EXTENT"][0];

CELL2_1_CONNECT_6_170_L = SPEC_CELL2_1_CNT["OUTPUT_CELL2_1_CONNECT_6_170"][0];
CELL2_1_6_170_CHK = CELL2_1_6_170_L or CELL2_1_CONNECT_6_170_L; 
ga_c21_LAYER_10 = shrink( CELL2_1_6_170_CHK, north = 0.078, south = 0.078 ) and shrink( CELL2_1_6_170_CHK, east = 0.087, west = 0.087 ); 
CELL2_1_6_161_L = CELL2_1_6_170_CHK not ga_c21_LAYER_10; 


SHAPE_CELL2_2_CAPBOTTOM_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.2000 }, { 0.0480, 0.2000 }, { 0.0480, 0.2220 }, { 0.0000, 0.2220 } }
};    /* AREA RATIO = 0.08461538461538462 */
SHAPE_CELL2_2_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.1720 }, { 0.0480, 0.1720 }, { 0.0480, 0.2500 }, { 0.0000, 0.2500 } },
    { { 0.0000, 0.0420 }, { 0.0480, 0.0420 }, { 0.0480, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.6 */
SHAPE_CELL2_2_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.0480, 0.1300 }, { 0.0480, 0.1620 }, { 0.0000, 0.1620 } }
};    /* AREA RATIO = 0.12307692307692308 */
SHAPE_CELL2_2_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.0810 }, { 0.0000, 0.0810 } }
};    /* AREA RATIO = 0.3 */
SHAPE_CELL2_2_CAPBOTTOM_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.2600 }, { 0.0400, 0.2600 } },
    { { 0.0000, 0.0520 }, { 0.0080, 0.0520 }, { 0.0080, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.26666666666666666 */
SHAPE_CELL2_2_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.9884615384615385 */
SHAPE_CELL2_2_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.1910 }, { 0.0480, 0.1910 }, { 0.0480, 0.2310 }, { 0.0000, 0.2310 } },
    { { 0.0000, 0.0300 }, { 0.0480, 0.0300 }, { 0.0480, 0.1060 }, { 0.0000, 0.1060 } }
};    /* AREA RATIO = 0.4461538461538462 */
SHAPE_CELL2_2_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0220 }, { 0.0255, 0.0220 }, { 0.0255, 0.2600 }, { 0.0225, 0.2600 } }
};    /* AREA RATIO = 0.05721153846153846 */
SHAPE_CELL2_2_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.8 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_17_50 : list of coordinate_l = { 
    { { 0.0135, 0.2000 }, { 0.1680, 0.2000 }, { 0.1680, 0.2220 }, { 0.0135, 0.2220 } }
};    /* AREA RATIO = 0.07781593406593407 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.1720 }, { 0.1680, 0.1720 }, { 0.1680, 0.2500 }, { 0.0480, 0.2500 } },
    { { 0.0480, 0.0420 }, { 0.1680, 0.0420 }, { 0.1680, 0.1200 }, { 0.0480, 0.1200 } }
};    /* AREA RATIO = 0.42857142857142855 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.1300 }, { 0.1680, 0.1300 }, { 0.1680, 0.1620 }, { 0.0945, 0.1620 } }
};    /* AREA RATIO = 0.05384615384615385 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.2600 }, { 0.0945, 0.2600 }, { 0.0945, 0.0810 }, { 0.1680, 0.0810 }, { 0.1680, 0.0030 }, { 0.0075, 0.0030 } }
};    /* AREA RATIO = 0.6431318681318682 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.1600, 0.0520 }, { 0.1680, 0.0520 }, { 0.1680, 0.2600 }, { 0.1600, 0.2600 } },
    { { 0.1120, 0.0520 }, { 0.1280, 0.0520 }, { 0.1280, 0.2600 }, { 0.1120, 0.2600 } }
};    /* AREA RATIO = 0.11428571428571428 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0030 }, { 0.1680, 0.0030 }, { 0.1680, 0.2600 }, { 0.0075, 0.2600 } }
};    /* AREA RATIO = 0.9443337912087912 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.1910 }, { 0.1680, 0.1910 }, { 0.1680, 0.2310 }, { 0.0960, 0.2310 } },
    { { 0.0960, 0.0300 }, { 0.1680, 0.0300 }, { 0.1680, 0.1060 }, { 0.0960, 0.1060 } }
};    /* AREA RATIO = 0.1912087912087912 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.1425, 0.0220 }, { 0.1455, 0.0220 }, { 0.1455, 0.2600 }, { 0.1425, 0.2600 } },
    { { 0.0945, 0.0220 }, { 0.0975, 0.0220 }, { 0.0975, 0.2600 }, { 0.0945, 0.2600 } },
    { { 0.0465, 0.0220 }, { 0.0495, 0.0220 }, { 0.0495, 0.2600 }, { 0.0465, 0.2600 } }
};    /* AREA RATIO = 0.04903846153846154 */
SHAPE_CELL2_2_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0520 }, { 0.1680, 0.0520 }, { 0.1680, 0.2600 }, { 0.0240, 0.2600 } }
};    /* AREA RATIO = 0.6857142857142857 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.2000 }, { 0.1065, 0.2000 }, { 0.1065, 0.2220 }, { 0.0000, 0.2220 } }
};    /* AREA RATIO = 0.07509615384615384 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.1720 }, { 0.0720, 0.1720 }, { 0.0720, 0.2500 }, { 0.0000, 0.2500 } },
    { { 0.0000, 0.0420 }, { 0.0720, 0.0420 }, { 0.0720, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.36 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1300 }, { 0.0255, 0.1300 }, { 0.0255, 0.1620 }, { 0.0000, 0.1620 } }
};    /* AREA RATIO = 0.026153846153846153 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0810 }, { 0.0255, 0.0810 }, { 0.0255, 0.2600 }, { 0.1125, 0.2600 }, { 0.1125, 0.0030 }, { 0.0000, 0.0030 } }
};    /* AREA RATIO = 0.7803846153846153 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1200, 0.0000 }, { 0.1200, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0080, 0.0520 }, { 0.0080, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.05333333333333334 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.1125, 0.0030 }, { 0.1125, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.9266826923076923 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.1910 }, { 0.0240, 0.1910 }, { 0.0240, 0.2310 }, { 0.0000, 0.2310 } },
    { { 0.0000, 0.0300 }, { 0.0240, 0.0300 }, { 0.0240, 0.1060 }, { 0.0000, 0.1060 } }
};    /* AREA RATIO = 0.08923076923076922 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0220 }, { 0.0735, 0.0220 }, { 0.0735, 0.2600 }, { 0.0705, 0.2600 } },
    { { 0.0225, 0.0220 }, { 0.0255, 0.0220 }, { 0.0255, 0.2600 }, { 0.0225, 0.2600 } }
};    /* AREA RATIO = 0.04576923076923077 */
SHAPE_CELL2_2_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0960, 0.0520 }, { 0.0960, 0.2600 }, { 0.0000, 0.2600 } }
};    /* AREA RATIO = 0.64 */
SHAPE_CELL2_2_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0260 }, { 0.0945, 0.0260 } }
};    /* AREA RATIO = 0.4375 */
SHAPE_CELL2_2_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.0945, 0.0000 }, { 0.0945, 0.0260 }, { 0.0075, 0.0260 } }
};    /* AREA RATIO = 0.5178571428571429 */
SHAPE_CELL2_2_CAPLEFT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.1600, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0260 }, { 0.1600, 0.0260 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.0260 }, { 0.1120, 0.0260 } }
};    /* AREA RATIO = 0.14285714285714285 */
SHAPE_CELL2_2_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0260 }, { 0.0075, 0.0260 } }
};    /* AREA RATIO = 0.9553571428571429 */
SHAPE_CELL2_2_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.0260 }, { 0.1425, 0.0260 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.0260 }, { 0.0945, 0.0260 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.0260 }, { 0.0465, 0.0260 } }
};    /* AREA RATIO = 0.05357142857142857 */
SHAPE_CELL2_2_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0260 }, { 0.0240, 0.0260 } }
};    /* AREA RATIO = 0.8571428571428571 */
SHAPE_CELL2_2_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.2125 */
SHAPE_CELL2_2_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0255, 0.0000 }, { 0.1125, 0.0000 }, { 0.1125, 0.0260 }, { 0.0255, 0.0260 } }
};    /* AREA RATIO = 0.725 */
SHAPE_CELL2_2_CAPRIGHT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1200, 0.0000 }, { 0.1200, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.06666666666666667 */
SHAPE_CELL2_2_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1125, 0.0000 }, { 0.1125, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.9375 */
SHAPE_CELL2_2_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0260 }, { 0.0705, 0.0260 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.05 */
SHAPE_CELL2_2_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0960, 0.0000 }, { 0.0960, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.8 */
SHAPE_CELL2_2_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0160 }, { 0.0480, 0.0160 }, { 0.0480, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.5735294117647058 */
SHAPE_CELL2_2_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.04411764705882353 */
SHAPE_CELL2_2_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0550 }, { 0.0480, 0.0550 }, { 0.0480, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.5735294117647058 */
SHAPE_CELL2_2_CAPTOP_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0840 }, { 0.0400, 0.0840 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.20588235294117646 */
SHAPE_CELL2_2_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9779411764705882 */
SHAPE_CELL2_2_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0300 }, { 0.0480, 0.0300 }, { 0.0480, 0.1060 }, { 0.0000, 0.1060 } }
};    /* AREA RATIO = 0.5588235294117647 */
SHAPE_CELL2_2_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.1140 }, { 0.0225, 0.1140 } }
};    /* AREA RATIO = 0.05238970588235294 */
SHAPE_CELL2_2_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.6176470588235294 */
SHAPE_CELL2_2_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.0160 }, { 0.1680, 0.0160 }, { 0.1680, 0.0940 }, { 0.0480, 0.0940 } }
};    /* AREA RATIO = 0.4096638655462185 */
SHAPE_CELL2_2_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0060 }, { 0.0945, 0.0060 } }
};    /* AREA RATIO = 0.019301470588235295 */
SHAPE_CELL2_2_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.1330 }, { 0.1680, 0.1330 }, { 0.1680, 0.0550 }, { 0.0945, 0.0550 }, { 0.0945, 0.0000 }, { 0.0075, 0.0000 } }
};    /* AREA RATIO = 0.7573529411764706 */
SHAPE_CELL2_2_CAPTOPLEFT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.1600, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0840 }, { 0.1600, 0.0840 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.0840 }, { 0.1120, 0.0840 } }
};    /* AREA RATIO = 0.08823529411764706 */
SHAPE_CELL2_2_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.1330 }, { 0.0075, 0.1330 } }
};    /* AREA RATIO = 0.9342830882352942 */
SHAPE_CELL2_2_CAPTOPLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.0300 }, { 0.1680, 0.0300 }, { 0.1680, 0.1060 }, { 0.0960, 0.1060 } }
};    /* AREA RATIO = 0.23949579831932774 */
SHAPE_CELL2_2_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.1140 }, { 0.1425, 0.1140 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.1140 }, { 0.0945, 0.1140 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.1140 }, { 0.0465, 0.1140 } }
};    /* AREA RATIO = 0.04490546218487395 */
SHAPE_CELL2_2_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0840 }, { 0.0240, 0.0840 } }
};    /* AREA RATIO = 0.5294117647058824 */
SHAPE_CELL2_2_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0160 }, { 0.0720, 0.0160 }, { 0.0720, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.34411764705882353 */
SHAPE_CELL2_2_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.009375 */
SHAPE_CELL2_2_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1330 }, { 0.1125, 0.1330 }, { 0.1125, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0550 }, { 0.0000, 0.0550 } }
};    /* AREA RATIO = 0.8308823529411765 */
SHAPE_CELL2_2_CAPTOPRIGHT_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1200, 0.0000 }, { 0.1200, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.041176470588235294 */
SHAPE_CELL2_2_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1125, 0.0000 }, { 0.1125, 0.1330 }, { 0.0000, 0.1330 } }
};    /* AREA RATIO = 0.9168198529411765 */
SHAPE_CELL2_2_CAPTOPRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0300 }, { 0.0240, 0.0300 }, { 0.0240, 0.1060 }, { 0.0000, 0.1060 } }
};    /* AREA RATIO = 0.11176470588235295 */
SHAPE_CELL2_2_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.1140 }, { 0.0705, 0.1140 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.1140 }, { 0.0225, 0.1140 } }
};    /* AREA RATIO = 0.04191176470588235 */
SHAPE_CELL2_2_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0960, 0.0000 }, { 0.0960, 0.0840 }, { 0.0000, 0.0840 } }
};    /* AREA RATIO = 0.49411764705882355 */
SHAPE_CELL2_2_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CORE_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_2_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_2_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCL_17_50 : list of coordinate_l = { 
    { { 0.0135, 0.4610 }, { 0.1680, 0.4610 }, { 0.1680, 0.4810 }, { 0.0135, 0.4810 } },
    { { 0.0135, 0.3310 }, { 0.1680, 0.3310 }, { 0.1680, 0.3510 }, { 0.0135, 0.3510 } },
    { { 0.0135, 0.1750 }, { 0.1680, 0.1750 }, { 0.1680, 0.1950 }, { 0.0135, 0.1950 } },
    { { 0.0135, 0.0450 }, { 0.1680, 0.0450 }, { 0.1680, 0.0650 }, { 0.0135, 0.0650 } }
};    /* AREA RATIO = 0.14148351648351648 */
SHAPE_CELL2_2_VCL_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.4320 }, { 0.1680, 0.4320 }, { 0.1680, 0.5100 }, { 0.0480, 0.5100 } },
    { { 0.0480, 0.3020 }, { 0.1680, 0.3020 }, { 0.1680, 0.3800 }, { 0.0480, 0.3800 } },
    { { 0.0480, 0.1460 }, { 0.1680, 0.1460 }, { 0.1680, 0.2240 }, { 0.0480, 0.2240 } },
    { { 0.0480, 0.0160 }, { 0.1680, 0.0160 }, { 0.1680, 0.0940 }, { 0.0480, 0.0940 } }
};    /* AREA RATIO = 0.42857142857142855 */
SHAPE_CELL2_2_VCL_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.3900 }, { 0.1680, 0.3900 }, { 0.1680, 0.4220 }, { 0.0945, 0.4220 } },
    { { 0.0945, 0.2340 }, { 0.1680, 0.2340 }, { 0.1680, 0.2920 }, { 0.0945, 0.2920 } },
    { { 0.0945, 0.1040 }, { 0.1680, 0.1040 }, { 0.1680, 0.1360 }, { 0.0945, 0.1360 } },
    { { 0.0945, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.0060 }, { 0.0945, 0.0060 } }
};    /* AREA RATIO = 0.1076923076923077 */
SHAPE_CELL2_2_VCL_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.0945, 0.0000 }, { 0.0945, 0.5200 }, { 0.0075, 0.5200 } }
};    /* AREA RATIO = 0.5178571428571429 */
SHAPE_CELL2_2_VCL_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCL_82_170 : list of coordinate_l = { 
    { { 0.1600, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.5200 }, { 0.1600, 0.5200 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.5200 }, { 0.1120, 0.5200 } }
};    /* AREA RATIO = 0.14285714285714285 */
SHAPE_CELL2_2_VCL_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.5200 }, { 0.0075, 0.5200 } }
};    /* AREA RATIO = 0.9553571428571429 */
SHAPE_CELL2_2_VCL_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.4510 }, { 0.1680, 0.4510 }, { 0.1680, 0.4910 }, { 0.0960, 0.4910 } },
    { { 0.0960, 0.3210 }, { 0.1680, 0.3210 }, { 0.1680, 0.3610 }, { 0.0960, 0.3610 } },
    { { 0.0960, 0.1650 }, { 0.1680, 0.1650 }, { 0.1680, 0.2050 }, { 0.0960, 0.2050 } },
    { { 0.0960, 0.0350 }, { 0.1680, 0.0350 }, { 0.1680, 0.0750 }, { 0.0960, 0.0750 } }
};    /* AREA RATIO = 0.13186813186813187 */
SHAPE_CELL2_2_VCL_17_7 : list of coordinate_l = { 
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.5200 }, { 0.1425, 0.5200 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.5200 }, { 0.0945, 0.5200 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.5200 }, { 0.0465, 0.5200 } }
};    /* AREA RATIO = 0.05357142857142857 */
SHAPE_CELL2_2_VCL_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.1680, 0.0000 }, { 0.1680, 0.5200 }, { 0.0240, 0.5200 } }
};    /* AREA RATIO = 0.8571428571428571 */
SHAPE_CELL2_2_VCM_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.4610 }, { 0.0480, 0.4610 }, { 0.0480, 0.4810 }, { 0.0000, 0.4810 } },
    { { 0.0000, 0.3310 }, { 0.0480, 0.3310 }, { 0.0480, 0.3510 }, { 0.0000, 0.3510 } },
    { { 0.0000, 0.1750 }, { 0.0480, 0.1750 }, { 0.0480, 0.1950 }, { 0.0000, 0.1950 } },
    { { 0.0000, 0.0450 }, { 0.0480, 0.0450 }, { 0.0480, 0.0650 }, { 0.0000, 0.0650 } }
};    /* AREA RATIO = 0.15384615384615385 */
SHAPE_CELL2_2_VCM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.4320 }, { 0.0480, 0.4320 }, { 0.0480, 0.5100 }, { 0.0000, 0.5100 } },
    { { 0.0000, 0.3020 }, { 0.0480, 0.3020 }, { 0.0480, 0.3800 }, { 0.0000, 0.3800 } },
    { { 0.0000, 0.1460 }, { 0.0480, 0.1460 }, { 0.0480, 0.2240 }, { 0.0000, 0.2240 } },
    { { 0.0000, 0.0160 }, { 0.0480, 0.0160 }, { 0.0480, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.6 */
SHAPE_CELL2_2_VCM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.0480, 0.3900 }, { 0.0480, 0.4220 }, { 0.0000, 0.4220 } },
    { { 0.0000, 0.2340 }, { 0.0480, 0.2340 }, { 0.0480, 0.2920 }, { 0.0000, 0.2920 } },
    { { 0.0000, 0.1040 }, { 0.0480, 0.1040 }, { 0.0480, 0.1360 }, { 0.0000, 0.1360 } },
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.24615384615384617 */
SHAPE_CELL2_2_VCM_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCM_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.5200 }, { 0.0400, 0.5200 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_2_VCM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.4510 }, { 0.0480, 0.4510 }, { 0.0480, 0.4910 }, { 0.0000, 0.4910 } },
    { { 0.0000, 0.3210 }, { 0.0480, 0.3210 }, { 0.0480, 0.3610 }, { 0.0000, 0.3610 } },
    { { 0.0000, 0.1650 }, { 0.0480, 0.1650 }, { 0.0480, 0.2050 }, { 0.0000, 0.2050 } },
    { { 0.0000, 0.0350 }, { 0.0480, 0.0350 }, { 0.0480, 0.0750 }, { 0.0000, 0.0750 } }
};    /* AREA RATIO = 0.3076923076923077 */
SHAPE_CELL2_2_VCM_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.5200 }, { 0.0225, 0.5200 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_2_VCM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCR_17_50 : list of coordinate_l = { 
    { { 0.0000, 0.4610 }, { 0.1065, 0.4610 }, { 0.1065, 0.4810 }, { 0.0000, 0.4810 } },
    { { 0.0000, 0.3310 }, { 0.1065, 0.3310 }, { 0.1065, 0.3510 }, { 0.0000, 0.3510 } },
    { { 0.0000, 0.1750 }, { 0.1065, 0.1750 }, { 0.1065, 0.1950 }, { 0.0000, 0.1950 } },
    { { 0.0000, 0.0450 }, { 0.1065, 0.0450 }, { 0.1065, 0.0650 }, { 0.0000, 0.0650 } }
};    /* AREA RATIO = 0.13653846153846153 */
SHAPE_CELL2_2_VCR_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.4320 }, { 0.0720, 0.4320 }, { 0.0720, 0.5100 }, { 0.0000, 0.5100 } },
    { { 0.0000, 0.3020 }, { 0.0720, 0.3020 }, { 0.0720, 0.3800 }, { 0.0000, 0.3800 } },
    { { 0.0000, 0.1460 }, { 0.0720, 0.1460 }, { 0.0720, 0.2240 }, { 0.0000, 0.2240 } },
    { { 0.0000, 0.0160 }, { 0.0720, 0.0160 }, { 0.0720, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.36 */
SHAPE_CELL2_2_VCR_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.3900 }, { 0.0255, 0.3900 }, { 0.0255, 0.4220 }, { 0.0000, 0.4220 } },
    { { 0.0000, 0.2340 }, { 0.0255, 0.2340 }, { 0.0255, 0.2920 }, { 0.0000, 0.2920 } },
    { { 0.0000, 0.1040 }, { 0.0255, 0.1040 }, { 0.0255, 0.1360 }, { 0.0000, 0.1360 } },
    { { 0.0000, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0060 }, { 0.0000, 0.0060 } }
};    /* AREA RATIO = 0.052307692307692305 */
SHAPE_CELL2_2_VCR_6_161 : list of coordinate_l = { 
    { { 0.0255, 0.0000 }, { 0.1125, 0.0000 }, { 0.1125, 0.5200 }, { 0.0255, 0.5200 } }
};    /* AREA RATIO = 0.725 */
SHAPE_CELL2_2_VCR_257_22 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1200, 0.0000 }, { 0.1200, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_2_VCR_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 0.06666666666666667 */
SHAPE_CELL2_2_VCR_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1125, 0.0000 }, { 0.1125, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 0.9375 */
SHAPE_CELL2_2_VCR_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.4510 }, { 0.0240, 0.4510 }, { 0.0240, 0.4910 }, { 0.0000, 0.4910 } },
    { { 0.0000, 0.3210 }, { 0.0240, 0.3210 }, { 0.0240, 0.3610 }, { 0.0000, 0.3610 } },
    { { 0.0000, 0.1650 }, { 0.0240, 0.1650 }, { 0.0240, 0.2050 }, { 0.0000, 0.2050 } },
    { { 0.0000, 0.0350 }, { 0.0240, 0.0350 }, { 0.0240, 0.0750 }, { 0.0000, 0.0750 } }
};    /* AREA RATIO = 0.06153846153846154 */
SHAPE_CELL2_2_VCR_17_7 : list of coordinate_l = { 
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.5200 }, { 0.0705, 0.5200 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.5200 }, { 0.0225, 0.5200 } }
};    /* AREA RATIO = 0.05 */
SHAPE_CELL2_2_VCR_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0960, 0.0000 }, { 0.0960, 0.5200 }, { 0.0000, 0.5200 } }
};    /* AREA RATIO = 0.8 */

LAYER_SHAPE_CELL2_2_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CORE_6_7
};

LAYER_SHAPE_CELL2_2_CORE_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CORE_257_22
};

LAYER_SHAPE_CELL2_2_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CORE_82_170
};

LAYER_SHAPE_CELL2_2_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CORE_6_170
};

LAYER_SHAPE_CELL2_2_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CORE_17_7
};

LAYER_SHAPE_CELL2_2_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CORE_250_1
};

LAYER_SHAPE_CELL2_2_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_6_160
};

LAYER_SHAPE_CELL2_2_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_6_7
};

LAYER_SHAPE_CELL2_2_CAPTOP_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_257_22
};

LAYER_SHAPE_CELL2_2_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_6_161
};

LAYER_SHAPE_CELL2_2_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_82_170
};

LAYER_SHAPE_CELL2_2_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_6_170
};

LAYER_SHAPE_CELL2_2_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_82_270
};

LAYER_SHAPE_CELL2_2_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_17_7
};

LAYER_SHAPE_CELL2_2_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPTOP_250_1
};

LAYER_SHAPE_CELL2_2_VCM_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_VCM_17_50
};

LAYER_SHAPE_CELL2_2_VCM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_VCM_6_160
};

LAYER_SHAPE_CELL2_2_VCM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_VCM_6_7
};

LAYER_SHAPE_CELL2_2_VCM_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_VCM_257_22
};

LAYER_SHAPE_CELL2_2_VCM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_VCM_82_170
};

LAYER_SHAPE_CELL2_2_VCM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_VCM_6_170
};

LAYER_SHAPE_CELL2_2_VCM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_VCM_82_270
};

LAYER_SHAPE_CELL2_2_VCM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_VCM_17_7
};

LAYER_SHAPE_CELL2_2_VCM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_VCM_250_1
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_17_50
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_257_22
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_257_22
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL2_2_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_2_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_6_7
};

LAYER_SHAPE_CELL2_2_CAPLEFT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_257_22
};

LAYER_SHAPE_CELL2_2_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_6_161
};

LAYER_SHAPE_CELL2_2_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_82_170
};

LAYER_SHAPE_CELL2_2_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_6_170
};

LAYER_SHAPE_CELL2_2_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_17_7
};

LAYER_SHAPE_CELL2_2_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_257_22
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_82_270
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_CELL2_2_VCR_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_VCR_17_50
};

LAYER_SHAPE_CELL2_2_VCR_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_VCR_6_160
};

LAYER_SHAPE_CELL2_2_VCR_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_VCR_6_7
};

LAYER_SHAPE_CELL2_2_VCR_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_VCR_257_22
};

LAYER_SHAPE_CELL2_2_VCR_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_VCR_6_161
};

LAYER_SHAPE_CELL2_2_VCR_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_VCR_82_170
};

LAYER_SHAPE_CELL2_2_VCR_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_VCR_6_170
};

LAYER_SHAPE_CELL2_2_VCR_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_VCR_82_270
};

LAYER_SHAPE_CELL2_2_VCR_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_VCR_17_7
};

LAYER_SHAPE_CELL2_2_VCR_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_VCR_250_1
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_257_22
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_82_270
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL2_2_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPTOPLEFT_250_1
};

LAYER_SHAPE_CELL2_2_VCL_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_VCL_17_50
};

LAYER_SHAPE_CELL2_2_VCL_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_VCL_6_160
};

LAYER_SHAPE_CELL2_2_VCL_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_VCL_6_7
};

LAYER_SHAPE_CELL2_2_VCL_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_VCL_257_22
};

LAYER_SHAPE_CELL2_2_VCL_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_VCL_6_161
};

LAYER_SHAPE_CELL2_2_VCL_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_VCL_82_170
};

LAYER_SHAPE_CELL2_2_VCL_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_VCL_6_170
};

LAYER_SHAPE_CELL2_2_VCL_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_VCL_82_270
};

LAYER_SHAPE_CELL2_2_VCL_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_VCL_17_7
};

LAYER_SHAPE_CELL2_2_VCL_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_VCL_250_1
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_50
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_257_22
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_270
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_17_50 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_50"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_17_50
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_160"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_257_22 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_257_22"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_257_22
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_161"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_6_170"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_82_270"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_82_270
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_17_7"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_2_250_1"
    },
    polygons = SHAPE_CELL2_2_CAPBOTTOMLEFT_250_1
};


// DUMMY SPEC : Cell2_2
FSS_CELL2_2 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { FILL_W58_DUMMY_POLY_FIRST_REGION, min_space = 0 },
#ifdef WIDE_POLY_CELL_IN_CORE 
    { FILL_W86_DUMMY_POLY_FIRST_REGION, min_space = 0.001 },
#endif   
    { FB_2, min_space_x = CELL2_2_FB2X, min_space_y = CELL2_2_FB2Y, space_extension_x = CELL2_2_FB2X, space_extension_y = CELL2_2_FB2Y },
    { over_size_v( FB_1, CELL2_2_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL2_2_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL2_2_FB1Y, CELL2_2_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL2_2_FB1X, CELL2_2_FB1Y ), min_space = 0 },
    { FB_26, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { FB_28, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { FB_29, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { FB_31, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { FB_36, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { FB_38, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { STD_FILLER, min_space_x = CELL2_2_FBOTHERX, min_space_y = CELL2_2_FBOTHERY, space_extension_x = CELL2_2_FBOTHERX, space_extension_y = CELL2_2_FBOTHERY },
    { SRM, min_space_x = CELL2_2_SRAMX, min_space_y = CELL2_2_SRAMY, space_extension_x = CELL2_2_SRAMX, space_extension_y = CELL2_2_SRAMY },
    { SRM_1, min_space_x = CELL2_2_SRAMX, min_space_y = CELL2_2_SRAMY, space_extension_x = CELL2_2_SRAMX, space_extension_y = CELL2_2_SRAMY },
    { SRAMDMY, min_space_x = CELL2_2_SRAMX, min_space_y = CELL2_2_SRAMY, space_extension_x = CELL2_2_SRAMX, space_extension_y = CELL2_2_SRAMY },
    { OD, min_space_x = CELL2_2_ODX, min_space_y = CELL2_2_ODY, space_extension_x = CELL2_2_ODX, space_extension_y = CELL2_2_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL2_2_ODX, min_space_y = CELL2_2_ODY, space_extension_x = CELL2_2_ODX, space_extension_y = CELL2_2_ODY },
    { COD_H_NT_SR, min_space_x = CELL2_2_CODHX, min_space_y = CELL2_2_CODHY, space_extension_x = CELL2_2_CODHX, space_extension_y = CELL2_2_CODHY },
    { DCOD_H, min_space_x = CELL2_2_CODHX, min_space_y = CELL2_2_CODHY, space_extension_x = CELL2_2_CODHX, space_extension_y = CELL2_2_CODHY },
    { COD_V_NT_SR, min_space_x = CELL2_2_CODVX, min_space_y = CELL2_2_CODVY, space_extension_x = CELL2_2_CODVX, space_extension_y = CELL2_2_CODVY },
    { DCOD_V, min_space_x = CELL2_2_CODVX, min_space_y = CELL2_2_CODVY, space_extension_x = CELL2_2_CODVX, space_extension_y = CELL2_2_CODVY },
    { COD_BLOCK_NT_SR, min_space = CELL2_2_CODBLK },
    { DCOD_BLOCK, min_space = CELL2_2_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL2_2_ODMMBX, min_space_y = CELL2_2_ODMMBY, space_extension_x = CELL2_2_ODMMBX, space_extension_y = CELL2_2_ODMMBY },
    { PO, min_space_x = CELL2_2_POX, min_space_y = CELL2_2_POY, space_extension_x = CELL2_2_POX, space_extension_y = CELL2_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL2_2_SRDPOX, min_space_y = CELL2_2_SRDPOY, space_extension_x = CELL2_2_SRDPOX, space_extension_y = CELL2_2_SRDPOY },
    { PO3, min_space_x = CELL2_2_PO3X, min_space_y = CELL2_2_PO3Y, space_extension_x = CELL2_2_PO3X, space_extension_y = CELL2_2_PO3Y },
    { SR_DPO_NT_SR3, min_space_x = CELL2_2_SRDPO3X, min_space_y = CELL2_2_SRDPO3Y, space_extension_x = CELL2_2_SRDPO3X, space_extension_y = CELL2_2_SRDPO3Y },
    { POLE8, min_space_x = CELL2_2_POLE8X, min_space_y = CELL2_2_POLE8Y, space_extension_x = CELL2_2_POLE8X, space_extension_y = CELL2_2_POLE8Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL2_2_SRDPOLE8X, min_space_y = CELL2_2_SRDPOLE8Y, space_extension_x = CELL2_2_SRDPOLE8X, space_extension_y = CELL2_2_SRDPOLE8Y },
    { PO9, min_space_x = CELL2_2_PO9X, min_space_y = CELL2_2_PO9Y, space_extension_x = CELL2_2_PO9X, space_extension_y = CELL2_2_PO9Y },
    { SR_DPO_NT_SR9, min_space_x = CELL2_2_SR_DPO9X, min_space_y = CELL2_2_SR_DPO9Y, space_extension_x = CELL2_2_SR_DPO9X, space_extension_y = CELL2_2_SR_DPO9Y },
    { PO54, min_space_x = CELL2_2_PO54X, min_space_y = CELL2_2_PO54Y, space_extension_x = CELL2_2_PO54X, space_extension_y = CELL2_2_PO54Y },
    { SR_DPO_NT_SR54, min_space_x = CELL2_2_SR_DPO54X, min_space_y = CELL2_2_SR_DPO54Y, space_extension_x = CELL2_2_SR_DPO54X, space_extension_y = CELL2_2_SR_DPO54Y },
    { PO86, min_space_x = CELL2_2_PO86X, min_space_y = CELL2_2_PO86Y, space_extension_x = CELL2_2_PO86X, space_extension_y = CELL2_2_PO86Y },
    { SR_DPO_NT_SR86, min_space_x = CELL2_2_SR_DPO86X, min_space_y = CELL2_2_SR_DPO86Y, space_extension_x = CELL2_2_SR_DPO86X, space_extension_y = CELL2_2_SR_DPO86Y },
    { PO_P54, min_space = CELL2_2_PO_P54 },
    { PO_P81, min_space = CELL2_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL2_2_PO_P81_WPO },
    { PO_P57, min_space = CELL2_2_PO_P57 },
    { CPO, min_space_x = CELL2_2_CPOX, min_space_y = CELL2_2_CPOY, space_extension_x = CELL2_2_CPOX, space_extension_y = CELL2_2_CPOY },
    { SR_DCPO, min_space_x = CELL2_2_SRDCPOX, min_space_y = CELL2_2_SRDCPOY, space_extension_x = CELL2_2_SRDCPOX, space_extension_y = CELL2_2_SRDCPOY },
    { CPO20, min_space_x = CELL2_2_CPO20X, min_space_y = CELL2_2_CPO20Y, space_extension_x = CELL2_2_CPO20X, space_extension_y = CELL2_2_CPO20Y },
    { CPO22, min_space_x = CELL2_2_CPO22X, min_space_y = CELL2_2_CPO22Y, space_extension_x = CELL2_2_CPO22X, space_extension_y = CELL2_2_CPO22Y },
    { CPO25, min_space_x = CELL2_2_CPO25X, min_space_y = CELL2_2_CPO25Y, space_extension_x = CELL2_2_CPO25X, space_extension_y = CELL2_2_CPO25Y },
    { SR_DCPO20, min_space_x = CELL2_2_SR_DCPO20X, min_space_y = CELL2_2_SR_DCPO20Y, space_extension_x = CELL2_2_SR_DCPO20X, space_extension_y = CELL2_2_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL2_2_SR_DCPO22X, min_space_y = CELL2_2_SR_DCPO22Y, space_extension_x = CELL2_2_SR_DCPO22X, space_extension_y = CELL2_2_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL2_2_SR_DCPO25X, min_space_y = CELL2_2_SR_DCPO25Y, space_extension_x = CELL2_2_SR_DCPO25X, space_extension_y = CELL2_2_SR_DCPO25Y },
    { MD, min_space_x = CELL2_2_MDX, min_space_y = CELL2_2_MDY, space_extension_x = CELL2_2_MDX, space_extension_y = CELL2_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL2_2_SR_DMDX, min_space_y = CELL2_2_SR_DMDY, space_extension_x = CELL2_2_SR_DMDX, space_extension_y = CELL2_2_SR_DMDY },
    { MD16, min_space_x = CELL2_2_MD16X, min_space_y = CELL2_2_MD16Y, space_extension_x = CELL2_2_MD16X, space_extension_y = CELL2_2_MD16Y },
    { SR_DMD_NT_SR16, min_space_x = CELL2_2_SR_DMD16X, min_space_y = CELL2_2_SR_DMD16Y, space_extension_x = CELL2_2_SR_DMD16X, space_extension_y = CELL2_2_SR_DMD16Y },
    { MD30, min_space_x = CELL2_2_MD30X, min_space_y = CELL2_2_MD30Y, space_extension_x = CELL2_2_MD30X, space_extension_y = CELL2_2_MD30Y },
    { SR_DMD_NT_SR30, min_space_x = CELL2_2_SR_DMD30X, min_space_y = CELL2_2_SR_DMD30Y, space_extension_x = CELL2_2_SR_DMD30X, space_extension_y = CELL2_2_SR_DMD30Y },
    { CMD, min_space_x = CELL2_2_CMDX, min_space_y = CELL2_2_CMDY, space_extension_x = CELL2_2_CMDX, space_extension_y = CELL2_2_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL2_2_CMDX, min_space_y = CELL2_2_CMDY, space_extension_x = CELL2_2_CMDX, space_extension_y = CELL2_2_CMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL2_2_NW_CENTERLINE },
    { NT_N, min_space = CELL2_2_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL2_2_OD2X, min_space_y = CELL2_2_OD2Y, space_extension_x = CELL2_2_OD2X, space_extension_y = CELL2_2_OD2Y },
    { NWDMY, min_space = CELL2_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL2_2_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL2_2_VAR },
    { DI_WPO, min_space = CELL2_2_DI_WPO },
    { DFBC, min_space_x = CELL2_2_DFBCX, min_space_y = CELL2_2_DFBCY, space_extension_x = CELL2_2_DFBCX, space_extension_y = CELL2_2_DFBCY },
    { DFBC_ALL, min_space_x = CELL2_2_DFBC_ALLX, min_space_y = CELL2_2_DFBC_ALLY, space_extension_x = CELL2_2_DFBC_ALLX, space_extension_y = CELL2_2_DFBC_ALLY },
    { DC1, min_space_x = CELL2_2_CELL1X, min_space_y = CELL2_2_CELL1Y, space_extension_x = CELL2_2_CELL1X, space_extension_y = CELL2_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL2_2_CELL2_1X, min_space_y = CELL2_2_CELL2_1Y, space_extension_x = CELL2_2_CELL2_1X, space_extension_y = CELL2_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL2_2_CELL2_2X, min_space_y = CELL2_2_CELL2_2Y, space_extension_x = CELL2_2_CELL2_2X, space_extension_y = CELL2_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL2_2_CELL2_3X, min_space_y = CELL2_2_CELL2_3Y, space_extension_x = CELL2_2_CELL2_3X, space_extension_y = CELL2_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL2_2_CELL4_1X, min_space_y = CELL2_2_CELL4_1Y, space_extension_x = CELL2_2_CELL4_1X, space_extension_y = CELL2_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL2_2_CELL4_2X, min_space_y = CELL2_2_CELL4_2Y, space_extension_x = CELL2_2_CELL4_2X, space_extension_y = CELL2_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL2_2_CELL5_1X, min_space_y = CELL2_2_CELL5_1Y, space_extension_x = CELL2_2_CELL5_1X, space_extension_y = CELL2_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL2_2_CELL5_2X, min_space_y = CELL2_2_CELL5_2Y, space_extension_x = CELL2_2_CELL5_2X, space_extension_y = CELL2_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL2_2_CELL6_1X, min_space_y = CELL2_2_CELL6_1Y, space_extension_x = CELL2_2_CELL6_1X, space_extension_y = CELL2_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL2_2_CELL6_2X, min_space_y = CELL2_2_CELL6_2Y, space_extension_x = CELL2_2_CELL6_2X, space_extension_y = CELL2_2_CELL6_2Y },
    { DC7, min_space_x = CELL2_2_CELL7X, min_space_y = CELL2_2_CELL7Y, space_extension_x = CELL2_2_CELL7X, space_extension_y = CELL2_2_CELL7Y },
    { DC8_1, min_space_x = CELL2_2_CELL8_1X, min_space_y = CELL2_2_CELL8_1Y, space_extension_x = CELL2_2_CELL8_1X, space_extension_y = CELL2_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL2_2_CELL8_2X, min_space_y = CELL2_2_CELL8_2Y, space_extension_x = CELL2_2_CELL8_2X, space_extension_y = CELL2_2_CELL8_2Y },
#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL2_2X, min_space_y = CELL4_2_CELL2_2Y, space_extension_x = CELL4_2_CELL2_2X, space_extension_y = CELL4_2_CELL2_2Y },
    { CELL1_E, min_space_x = CELL2_2_CELL1X, min_space_y = CELL2_2_CELL1Y, space_extension_x = CELL2_2_CELL1X, space_extension_y = CELL2_2_CELL1Y },
    { CELL2_1_E, min_space_x = CELL2_2_CELL2_1X, min_space_y = CELL2_2_CELL2_1Y, space_extension_x = CELL2_2_CELL2_1X, space_extension_y = CELL2_2_CELL2_1Y },
}; // end of FSS_CELL2_2
//=========================================================================================


BASE_CELL2_2_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_82_270,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_2_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPTOP_6_160,
	    LAYER_SHAPE_CELL2_2_CAPTOP_6_7,
	    LAYER_SHAPE_CELL2_2_CAPTOP_257_22,
	    LAYER_SHAPE_CELL2_2_CAPTOP_6_161,
	    LAYER_SHAPE_CELL2_2_CAPTOP_82_170,
	    LAYER_SHAPE_CELL2_2_CAPTOP_6_170,
	    LAYER_SHAPE_CELL2_2_CAPTOP_82_270,
	    LAYER_SHAPE_CELL2_2_CAPTOP_17_7,
	    LAYER_SHAPE_CELL2_2_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL2_2_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_82_270,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_2_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_2_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CORE_6_7,
	    LAYER_SHAPE_CELL2_2_CORE_257_22,
	    LAYER_SHAPE_CELL2_2_CORE_82_170,
	    LAYER_SHAPE_CELL2_2_CORE_6_170,
	    LAYER_SHAPE_CELL2_2_CORE_17_7,
	    LAYER_SHAPE_CELL2_2_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL2_2_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_2_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_17_50,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_82_270,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_2_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_17_50,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_257_22,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL2_2_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_50,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_257_22,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_82_270,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL2_2_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};

BASE_CELL2_2_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_VCL_17_50,
	    LAYER_SHAPE_CELL2_2_VCL_6_160,
	    LAYER_SHAPE_CELL2_2_VCL_6_7,
	    LAYER_SHAPE_CELL2_2_VCL_257_22,
	    LAYER_SHAPE_CELL2_2_VCL_6_161,
	    LAYER_SHAPE_CELL2_2_VCL_82_170,
	    LAYER_SHAPE_CELL2_2_VCL_6_170,
	    LAYER_SHAPE_CELL2_2_VCL_82_270,
	    LAYER_SHAPE_CELL2_2_VCL_17_7,
	    LAYER_SHAPE_CELL2_2_VCL_250_1,
    },
    repeatable = false
};
BASE_CELL2_2_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_VCM_17_50,
	    LAYER_SHAPE_CELL2_2_VCM_6_160,
	    LAYER_SHAPE_CELL2_2_VCM_6_7,
	    LAYER_SHAPE_CELL2_2_VCM_257_22,
	    LAYER_SHAPE_CELL2_2_VCM_82_170,
	    LAYER_SHAPE_CELL2_2_VCM_6_170,
	    LAYER_SHAPE_CELL2_2_VCM_82_270,
	    LAYER_SHAPE_CELL2_2_VCM_17_7,
	    LAYER_SHAPE_CELL2_2_VCM_250_1,
    },
    repeatable = true,
};


BASE_CELL2_2_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_2_VCR_17_50,
	    LAYER_SHAPE_CELL2_2_VCR_6_160,
	    LAYER_SHAPE_CELL2_2_VCR_6_7,
	    LAYER_SHAPE_CELL2_2_VCR_257_22,
	    LAYER_SHAPE_CELL2_2_VCR_6_161,
	    LAYER_SHAPE_CELL2_2_VCR_82_170,
	    LAYER_SHAPE_CELL2_2_VCR_6_170,
	    LAYER_SHAPE_CELL2_2_VCR_82_270,
	    LAYER_SHAPE_CELL2_2_VCR_17_7,
	    LAYER_SHAPE_CELL2_2_VCR_250_1,
    },
    repeatable = false
};

PATTERN_CELL2_2 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
            space_x = 0.066,
    		space_y = 0.124,
                pattern_spacing = {
		            allowed_spacing_x = {>= 0.045 },
		            allowed_spacing_y = {>= 0.124 },
    //		        extension = INTERSECTION,
                }
	    },
	    base_cell = {
		BASE_CELL2_2_4,
		BASE_CELL2_2_5,
		BASE_CELL2_2_6,
	    },
	    base_cell_top = {
		BASE_CELL2_2_1,
		BASE_CELL2_2_2,
		BASE_CELL2_2_3,
	    },
	    base_cell_bottom = {
		BASE_CELL2_2_7,
		BASE_CELL2_2_8,
		BASE_CELL2_2_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, west = 0.0015, south = 0.0  ),         
		x = 0.048,
		y = 0.026,
	    },
	    cell_prefix = "CELL2_2",
	    fill_to_signal_spacing = FSS_CELL2_2,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
        maximum_expansion_ranges = {{<=30, <=17}},
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif     
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        merging_cell = {
		BASE_CELL2_2_R1,
		BASE_CELL2_2_R2,
		BASE_CELL2_2_R3,
	    },
	    merging_direction = VERTICAL,
	}
    },
}; // end of PATTERN_CELL2_2

SPEC_CELL2_2 = unified_fill( 
    fill_boundary = {
        layer = CHIP_snps, 
        type = LAYER
    },
    fill_patterns = PATTERN_CELL2_2,
    extents_output = {
    	{
        output_layer_key = "CELL2_2_EXTENT"
    	}
    }
);


CELL2_2_17_50_C     = SPEC_CELL2_2["OUTPUT_CELL2_2_17_50"][0];
CELL2_2_6_160_C     = SPEC_CELL2_2["OUTPUT_CELL2_2_6_160"][0];
CELL2_2_6_7_C       = SPEC_CELL2_2["OUTPUT_CELL2_2_6_7"][0];
CELL2_2_6_161_C     = SPEC_CELL2_2["OUTPUT_CELL2_2_6_161"][0];
CELL2_2_257_22_C    = SPEC_CELL2_2["OUTPUT_CELL2_2_257_22"][0];
CELL2_2_82_170_C    = SPEC_CELL2_2["OUTPUT_CELL2_2_82_170"][0];
CELL2_2_6_170_C     = SPEC_CELL2_2["OUTPUT_CELL2_2_6_170"][0];
CELL2_2_82_270_C    = SPEC_CELL2_2["OUTPUT_CELL2_2_82_270"][0];
CELL2_2_17_7_C      = SPEC_CELL2_2["OUTPUT_CELL2_2_17_7"][0];
CELL2_2_250_1_C     = SPEC_CELL2_2["OUTPUT_CELL2_2_250_1"][0];
CELL2_2_E           = SPEC_CELL2_2["CELL2_2_EXTENT"][0];
CELL2_2_6_7_L       = SPEC_CELL2_2["OUTPUT_CELL2_2_6_7"][0];


SHAPE_CELL2_3_CAPBOTTOM_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0680 }, { 0.0480, 0.0680 }, { 0.0480, 0.1460 }, { 0.0000, 0.1460 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL2_3_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1560 }, { 0.0480, 0.1560 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.09302325581395349 */
SHAPE_CELL2_3_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.1070 }, { 0.0000, 0.1070 } }
};    /* AREA RATIO = 0.6046511627906976 */
SHAPE_CELL2_3_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0650 }, { 0.0480, 0.0650 }, { 0.0480, 0.1720 }, { 0.0400, 0.1720 } },
    { { 0.0000, 0.0650 }, { 0.0080, 0.0650 }, { 0.0080, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.20736434108527133 */
SHAPE_CELL2_3_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.0480, 0.0030 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.9825581395348837 */
SHAPE_CELL2_3_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0440 }, { 0.0480, 0.0440 }, { 0.0480, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.4418604651162791 */
SHAPE_CELL2_3_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0360 }, { 0.0255, 0.0360 }, { 0.0255, 0.1720 }, { 0.0225, 0.1720 } }
};    /* AREA RATIO = 0.04941860465116279 */
SHAPE_CELL2_3_CAPBOTTOM_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0780 }, { 0.0480, 0.0780 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.5465116279069767 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.0680 }, { 0.3120, 0.0680 }, { 0.3120, 0.1460 }, { 0.0480, 0.1460 } }
};    /* AREA RATIO = 0.38372093023255816 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.1560 }, { 0.3120, 0.1560 }, { 0.3120, 0.1720 }, { 0.0945, 0.1720 } }
};    /* AREA RATIO = 0.0648479427549195 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.1720 }, { 0.0945, 0.1720 }, { 0.0945, 0.1070 }, { 0.3120, 0.1070 }, { 0.3120, 0.0030 }, { 0.0075, 0.0030 } }
};    /* AREA RATIO = 0.6954941860465116 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0650 }, { 0.3120, 0.0650 }, { 0.3120, 0.1720 }, { 0.3040, 0.1720 } },
    { { 0.2560, 0.0650 }, { 0.2720, 0.0650 }, { 0.2720, 0.1720 }, { 0.2560, 0.1720 } },
    { { 0.2080, 0.0650 }, { 0.2240, 0.0650 }, { 0.2240, 0.1720 }, { 0.2080, 0.1720 } },
    { { 0.1600, 0.0650 }, { 0.1760, 0.0650 }, { 0.1760, 0.1720 }, { 0.1600, 0.1720 } },
    { { 0.1120, 0.0650 }, { 0.1280, 0.0650 }, { 0.1280, 0.1720 }, { 0.1120, 0.1720 } }
};    /* AREA RATIO = 0.14355992844364937 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0030 }, { 0.3120, 0.0030 }, { 0.3120, 0.1720 }, { 0.0075, 0.1720 } }
};    /* AREA RATIO = 0.9589389534883721 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.0440 }, { 0.3120, 0.0440 }, { 0.3120, 0.1200 }, { 0.0960, 0.1200 } }
};    /* AREA RATIO = 0.30590339892665475 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0360 }, { 0.2895, 0.0360 }, { 0.2895, 0.1720 }, { 0.2865, 0.1720 } },
    { { 0.2385, 0.0360 }, { 0.2415, 0.0360 }, { 0.2415, 0.1720 }, { 0.2385, 0.1720 } },
    { { 0.1905, 0.0360 }, { 0.1935, 0.0360 }, { 0.1935, 0.1720 }, { 0.1905, 0.1720 } },
    { { 0.1425, 0.0360 }, { 0.1455, 0.0360 }, { 0.1455, 0.1720 }, { 0.1425, 0.1720 } },
    { { 0.0945, 0.0360 }, { 0.0975, 0.0360 }, { 0.0975, 0.1720 }, { 0.0945, 0.1720 } },
    { { 0.0465, 0.0360 }, { 0.0495, 0.0360 }, { 0.0495, 0.1720 }, { 0.0465, 0.1720 } }
};    /* AREA RATIO = 0.04561717352415027 */
SHAPE_CELL2_3_CAPBOTTOMLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0780 }, { 0.3120, 0.0780 }, { 0.3120, 0.1720 }, { 0.0240, 0.1720 } }
};    /* AREA RATIO = 0.5044722719141324 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0680 }, { 0.2160, 0.0680 }, { 0.2160, 0.1460 }, { 0.0000, 0.1460 } }
};    /* AREA RATIO = 0.37103594080338265 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1560 }, { 0.1695, 0.1560 }, { 0.1695, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.05972515856236787 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1070 }, { 0.1695, 0.1070 }, { 0.1695, 0.1720 }, { 0.2565, 0.1720 }, { 0.2565, 0.0030 }, { 0.0000, 0.0030 } }
};    /* AREA RATIO = 0.7120110993657506 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0650 }, { 0.1520, 0.0650 }, { 0.1520, 0.1720 }, { 0.1360, 0.1720 } },
    { { 0.0880, 0.0650 }, { 0.1040, 0.0650 }, { 0.1040, 0.1720 }, { 0.0880, 0.1720 } },
    { { 0.0400, 0.0650 }, { 0.0560, 0.0650 }, { 0.0560, 0.1720 }, { 0.0400, 0.1720 } },
    { { 0.0000, 0.0650 }, { 0.0080, 0.0650 }, { 0.0080, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.13195912614517266 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.2565, 0.0030 }, { 0.2565, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.95464455602537 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0440 }, { 0.1680, 0.0440 }, { 0.1680, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 0.28118393234672306 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0360 }, { 0.2175, 0.0360 }, { 0.2175, 0.1720 }, { 0.2145, 0.1720 } },
    { { 0.1665, 0.0360 }, { 0.1695, 0.0360 }, { 0.1695, 0.1720 }, { 0.1665, 0.1720 } },
    { { 0.1185, 0.0360 }, { 0.1215, 0.0360 }, { 0.1215, 0.1720 }, { 0.1185, 0.1720 } },
    { { 0.0705, 0.0360 }, { 0.0735, 0.0360 }, { 0.0735, 0.1720 }, { 0.0705, 0.1720 } },
    { { 0.0225, 0.0360 }, { 0.0255, 0.0360 }, { 0.0255, 0.1720 }, { 0.0225, 0.1720 } }
};    /* AREA RATIO = 0.04492600422832981 */
SHAPE_CELL2_3_CAPBOTTOMRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0780 }, { 0.2400, 0.0780 }, { 0.2400, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 0.49682875264270615 */
SHAPE_CELL2_3_CAPLEFT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0945, 0.0260 } }
};    /* AREA RATIO = 0.6971153846153846 */
SHAPE_CELL2_3_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.0945, 0.0000 }, { 0.0945, 0.0260 }, { 0.0075, 0.0260 } }
};    /* AREA RATIO = 0.27884615384615385 */
SHAPE_CELL2_3_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.3040, 0.0260 } },
    { { 0.2560, 0.0000 }, { 0.2720, 0.0000 }, { 0.2720, 0.0260 }, { 0.2560, 0.0260 } },
    { { 0.2080, 0.0000 }, { 0.2240, 0.0000 }, { 0.2240, 0.0260 }, { 0.2080, 0.0260 } },
    { { 0.1600, 0.0000 }, { 0.1760, 0.0000 }, { 0.1760, 0.0260 }, { 0.1600, 0.0260 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.0260 }, { 0.1120, 0.0260 } }
};    /* AREA RATIO = 0.23076923076923078 */
SHAPE_CELL2_3_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0075, 0.0260 } }
};    /* AREA RATIO = 0.9759615384615384 */
SHAPE_CELL2_3_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0000 }, { 0.2895, 0.0000 }, { 0.2895, 0.0260 }, { 0.2865, 0.0260 } },
    { { 0.2385, 0.0000 }, { 0.2415, 0.0000 }, { 0.2415, 0.0260 }, { 0.2385, 0.0260 } },
    { { 0.1905, 0.0000 }, { 0.1935, 0.0000 }, { 0.1935, 0.0260 }, { 0.1905, 0.0260 } },
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.0260 }, { 0.1425, 0.0260 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.0260 }, { 0.0945, 0.0260 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.0260 }, { 0.0465, 0.0260 } }
};    /* AREA RATIO = 0.057692307692307696 */
SHAPE_CELL2_3_CAPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0260 }, { 0.0240, 0.0260 } }
};    /* AREA RATIO = 0.9230769230769231 */
SHAPE_CELL2_3_CAPRIGHT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.6420454545454546 */
SHAPE_CELL2_3_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.1695, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.0260 }, { 0.1695, 0.0260 } }
};    /* AREA RATIO = 0.32954545454545453 */
SHAPE_CELL2_3_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0000 }, { 0.1520, 0.0000 }, { 0.1520, 0.0260 }, { 0.1360, 0.0260 } },
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.0260 }, { 0.0880, 0.0260 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.21212121212121213 */
SHAPE_CELL2_3_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.9715909090909091 */
SHAPE_CELL2_3_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0000 }, { 0.2175, 0.0000 }, { 0.2175, 0.0260 }, { 0.2145, 0.0260 } },
    { { 0.1665, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0260 }, { 0.1665, 0.0260 } },
    { { 0.1185, 0.0000 }, { 0.1215, 0.0000 }, { 0.1215, 0.0260 }, { 0.1185, 0.0260 } },
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.0260 }, { 0.0705, 0.0260 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.056818181818181816 */
SHAPE_CELL2_3_CAPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2400, 0.0000 }, { 0.2400, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.9090909090909091 */
SHAPE_CELL2_3_CAPTOP_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0260 }, { 0.0480, 0.0260 }, { 0.0480, 0.1040 }, { 0.0000, 0.1040 } }
};    /* AREA RATIO = 0.45348837209302323 */
SHAPE_CELL2_3_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0160 }, { 0.0000, 0.0160 } }
};    /* AREA RATIO = 0.09302325581395349 */
SHAPE_CELL2_3_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0650 }, { 0.0480, 0.0650 }, { 0.0480, 0.1690 }, { 0.0000, 0.1690 } }
};    /* AREA RATIO = 0.6046511627906976 */
SHAPE_CELL2_3_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1070 }, { 0.0400, 0.1070 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.1070 }, { 0.0000, 0.1070 } }
};    /* AREA RATIO = 0.20736434108527133 */
SHAPE_CELL2_3_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.1690 }, { 0.0000, 0.1690 } }
};    /* AREA RATIO = 0.9825581395348837 */
SHAPE_CELL2_3_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.0480, 0.0520 }, { 0.0480, 0.1280 }, { 0.0000, 0.1280 } }
};    /* AREA RATIO = 0.4418604651162791 */
SHAPE_CELL2_3_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.1360 }, { 0.0225, 0.1360 } }
};    /* AREA RATIO = 0.04941860465116279 */
SHAPE_CELL2_3_CAPTOP_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.5465116279069767 */
SHAPE_CELL2_3_CAPTOPLEFT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0480, 0.0260 }, { 0.3120, 0.0260 }, { 0.3120, 0.1040 }, { 0.0480, 0.1040 } }
};    /* AREA RATIO = 0.38372093023255816 */
SHAPE_CELL2_3_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0945, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0160 }, { 0.0945, 0.0160 } }
};    /* AREA RATIO = 0.0648479427549195 */
SHAPE_CELL2_3_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0075, 0.1690 }, { 0.3120, 0.1690 }, { 0.3120, 0.0650 }, { 0.0945, 0.0650 }, { 0.0945, 0.0000 }, { 0.0075, 0.0000 } }
};    /* AREA RATIO = 0.6954941860465116 */
SHAPE_CELL2_3_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3040, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1070 }, { 0.3040, 0.1070 } },
    { { 0.2560, 0.0000 }, { 0.2720, 0.0000 }, { 0.2720, 0.1070 }, { 0.2560, 0.1070 } },
    { { 0.2080, 0.0000 }, { 0.2240, 0.0000 }, { 0.2240, 0.1070 }, { 0.2080, 0.1070 } },
    { { 0.1600, 0.0000 }, { 0.1760, 0.0000 }, { 0.1760, 0.1070 }, { 0.1600, 0.1070 } },
    { { 0.1120, 0.0000 }, { 0.1280, 0.0000 }, { 0.1280, 0.1070 }, { 0.1120, 0.1070 } }
};    /* AREA RATIO = 0.14355992844364937 */
SHAPE_CELL2_3_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0075, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.1690 }, { 0.0075, 0.1690 } }
};    /* AREA RATIO = 0.9589389534883721 */
SHAPE_CELL2_3_CAPTOPLEFT_82_270 : list of coordinate_l = { 
    { { 0.0960, 0.0520 }, { 0.3120, 0.0520 }, { 0.3120, 0.1280 }, { 0.0960, 0.1280 } }
};    /* AREA RATIO = 0.30590339892665475 */
SHAPE_CELL2_3_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2865, 0.0000 }, { 0.2895, 0.0000 }, { 0.2895, 0.1360 }, { 0.2865, 0.1360 } },
    { { 0.2385, 0.0000 }, { 0.2415, 0.0000 }, { 0.2415, 0.1360 }, { 0.2385, 0.1360 } },
    { { 0.1905, 0.0000 }, { 0.1935, 0.0000 }, { 0.1935, 0.1360 }, { 0.1905, 0.1360 } },
    { { 0.1425, 0.0000 }, { 0.1455, 0.0000 }, { 0.1455, 0.1360 }, { 0.1425, 0.1360 } },
    { { 0.0945, 0.0000 }, { 0.0975, 0.0000 }, { 0.0975, 0.1360 }, { 0.0945, 0.1360 } },
    { { 0.0465, 0.0000 }, { 0.0495, 0.0000 }, { 0.0495, 0.1360 }, { 0.0465, 0.1360 } }
};    /* AREA RATIO = 0.04561717352415027 */
SHAPE_CELL2_3_CAPTOPLEFT_250_1 : list of coordinate_l = { 
    { { 0.0240, 0.0000 }, { 0.3120, 0.0000 }, { 0.3120, 0.0940 }, { 0.0240, 0.0940 } }
};    /* AREA RATIO = 0.5044722719141324 */
SHAPE_CELL2_3_CAPTOPRIGHT_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2640, 0.0000 }, { 0.2640, 0.1720 }, { 0.0000, 0.1720 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0260 }, { 0.2160, 0.0260 }, { 0.2160, 0.1040 }, { 0.0000, 0.1040 } }
};    /* AREA RATIO = 0.37103594080338265 */
SHAPE_CELL2_3_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0160 }, { 0.0000, 0.0160 } }
};    /* AREA RATIO = 0.05972515856236787 */
SHAPE_CELL2_3_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1690 }, { 0.2565, 0.1690 }, { 0.2565, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.0650 }, { 0.0000, 0.0650 } }
};    /* AREA RATIO = 0.7120110993657506 */
SHAPE_CELL2_3_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.1360, 0.0000 }, { 0.1520, 0.0000 }, { 0.1520, 0.1070 }, { 0.1360, 0.1070 } },
    { { 0.0880, 0.0000 }, { 0.1040, 0.0000 }, { 0.1040, 0.1070 }, { 0.0880, 0.1070 } },
    { { 0.0400, 0.0000 }, { 0.0560, 0.0000 }, { 0.0560, 0.1070 }, { 0.0400, 0.1070 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.1070 }, { 0.0000, 0.1070 } }
};    /* AREA RATIO = 0.13195912614517266 */
SHAPE_CELL2_3_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2565, 0.0000 }, { 0.2565, 0.1690 }, { 0.0000, 0.1690 } }
};    /* AREA RATIO = 0.95464455602537 */
SHAPE_CELL2_3_CAPTOPRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0520 }, { 0.1680, 0.0520 }, { 0.1680, 0.1280 }, { 0.0000, 0.1280 } }
};    /* AREA RATIO = 0.28118393234672306 */
SHAPE_CELL2_3_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.2145, 0.0000 }, { 0.2175, 0.0000 }, { 0.2175, 0.1360 }, { 0.2145, 0.1360 } },
    { { 0.1665, 0.0000 }, { 0.1695, 0.0000 }, { 0.1695, 0.1360 }, { 0.1665, 0.1360 } },
    { { 0.1185, 0.0000 }, { 0.1215, 0.0000 }, { 0.1215, 0.1360 }, { 0.1185, 0.1360 } },
    { { 0.0705, 0.0000 }, { 0.0735, 0.0000 }, { 0.0735, 0.1360 }, { 0.0705, 0.1360 } },
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.1360 }, { 0.0225, 0.1360 } }
};    /* AREA RATIO = 0.04492600422832981 */
SHAPE_CELL2_3_CAPTOPRIGHT_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2400, 0.0000 }, { 0.2400, 0.0940 }, { 0.0000, 0.0940 } }
};    /* AREA RATIO = 0.49682875264270615 */
SHAPE_CELL2_3_CORE_257_25 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CORE_82_170 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0400, 0.0260 } },
    { { 0.0000, 0.0000 }, { 0.0080, 0.0000 }, { 0.0080, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 0.3333333333333333 */
SHAPE_CELL2_3_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL2_3_CORE_17_7 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.0255, 0.0000 }, { 0.0255, 0.0260 }, { 0.0225, 0.0260 } }
};    /* AREA RATIO = 0.0625 */
SHAPE_CELL2_3_CORE_250_1 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0480, 0.0000 }, { 0.0480, 0.0260 }, { 0.0000, 0.0260 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL2_3_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CORE_6_7
};

LAYER_SHAPE_CELL2_3_CORE_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CORE_257_25
};

LAYER_SHAPE_CELL2_3_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CORE_82_170
};

LAYER_SHAPE_CELL2_3_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CORE_6_170
};

LAYER_SHAPE_CELL2_3_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CORE_17_7
};

LAYER_SHAPE_CELL2_3_CORE_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CORE_250_1
};

LAYER_SHAPE_CELL2_3_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_6_160
};

LAYER_SHAPE_CELL2_3_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_6_7
};

LAYER_SHAPE_CELL2_3_CAPTOP_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_257_25
};

LAYER_SHAPE_CELL2_3_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_6_161
};

LAYER_SHAPE_CELL2_3_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_82_170
};

LAYER_SHAPE_CELL2_3_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_6_170
};

LAYER_SHAPE_CELL2_3_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_82_270
};

LAYER_SHAPE_CELL2_3_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_17_7
};

LAYER_SHAPE_CELL2_3_CAPTOP_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPTOP_250_1
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_257_25
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOM_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOM_250_1
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_257_25
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL2_3_CAPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPRIGHT_250_1
};

LAYER_SHAPE_CELL2_3_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_6_7
};

LAYER_SHAPE_CELL2_3_CAPLEFT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_257_25
};

LAYER_SHAPE_CELL2_3_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_6_161
};

LAYER_SHAPE_CELL2_3_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_82_170
};

LAYER_SHAPE_CELL2_3_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_6_170
};

LAYER_SHAPE_CELL2_3_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_17_7
};

LAYER_SHAPE_CELL2_3_CAPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPLEFT_250_1
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_257_25
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_82_270
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPTOPRIGHT_250_1
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_257_25
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_82_270
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL2_3_CAPTOPLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPTOPLEFT_250_1
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_257_25
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_270
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMRIGHT_250_1
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_160"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_257_25 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_257_25"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_257_25
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_161"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_6_170"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_82_270"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_82_270
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_17_7"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_250_1 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL2_3_250_1"
    },
    polygons = SHAPE_CELL2_3_CAPBOTTOMLEFT_250_1
};



// DUMMY SPEC : Cell2_3
FSS_CELL2_3 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { FILL_W58_DUMMY_POLY_FIRST_REGION, min_space = 0 },
#ifdef WIDE_POLY_CELL_IN_CORE 
    { FILL_W86_DUMMY_POLY_FIRST_REGION, min_space = 0.001 },
#endif   
    { over_size_v( FB_1, CELL2_3_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL2_3_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL2_3_FB1Y, CELL2_3_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL2_3_FB1X, CELL2_3_FB1Y ), min_space = 0 },
    { FB_2, min_space_x = CELL2_3_FB2X, min_space_y = CELL2_3_FB2Y, space_extension_x = CELL2_3_FB2X, space_extension_y = CELL2_3_FB2Y },
    { FB_26, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { FB_28, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { FB_29, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { FB_31, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { FB_36, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { FB_38, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { STD_FILLER, min_space_x = CELL2_3_FBOTHERX, min_space_y = CELL2_3_FBOTHERY, space_extension_x = CELL2_3_FBOTHERX, space_extension_y = CELL2_3_FBOTHERY },
    { SRM, min_space_x = CELL2_3_SRAMX, min_space_y = CELL2_3_SRAMY, space_extension_x = CELL2_3_SRAMX, space_extension_y = CELL2_3_SRAMY },
    { SRM_1, min_space_x = CELL2_3_SRAMX, min_space_y = CELL2_3_SRAMY, space_extension_x = CELL2_3_SRAMX, space_extension_y = CELL2_3_SRAMY },
    { SRAMDMY, min_space_x = CELL2_3_SRAMX, min_space_y = CELL2_3_SRAMY, space_extension_x = CELL2_3_SRAMX, space_extension_y = CELL2_3_SRAMY },
    { OD, min_space_x = CELL2_3_ODX, min_space_y = CELL2_3_ODY, space_extension_x = CELL2_3_ODX, space_extension_y = CELL2_3_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL2_3_ODX, min_space_y = CELL2_3_ODY, space_extension_x = CELL2_3_ODX, space_extension_y = CELL2_3_ODY },
    { COD_H_NT_SR, min_space_x = CELL2_3_CODHX, min_space_y = CELL2_3_CODHY, space_extension_x = CELL2_3_CODHX, space_extension_y = CELL2_3_CODHY },
    { DCOD_H, min_space_x = CELL2_3_CODHX, min_space_y = CELL2_3_CODHY, space_extension_x = CELL2_3_CODHX, space_extension_y = CELL2_3_CODHY },
    { COD_V_NT_SR, min_space_x = CELL2_3_CODVX, min_space_y = CELL2_3_CODVY, space_extension_x = CELL2_3_CODVX, space_extension_y = CELL2_3_CODVY },
    { DCOD_V, min_space_x = CELL2_3_CODVX, min_space_y = CELL2_3_CODVY, space_extension_x = CELL2_3_CODVX, space_extension_y = CELL2_3_CODVY },
    { COD_BLOCK_NT_SR, min_space = CELL2_3_CODBLK },
    { DCOD_BLOCK, min_space = CELL2_3_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL2_3_ODMMBX, min_space_y = CELL2_3_ODMMBY, space_extension_x = CELL2_3_ODMMBX, space_extension_y = CELL2_3_ODMMBY },
    { PO, min_space_x = CELL2_3_POX, min_space_y = CELL2_3_POY, space_extension_x = CELL2_3_POX, space_extension_y = CELL2_3_POY },
    { SR_DPO_NT_SR, min_space_x = CELL2_3_SRDPOX, min_space_y = CELL2_3_SRDPOY, space_extension_x = CELL2_3_SRDPOX, space_extension_y = CELL2_3_SRDPOY },
    { PO3, min_space_x = CELL2_3_PO3X, min_space_y = CELL2_3_PO3Y, space_extension_x = CELL2_3_PO3X, space_extension_y = CELL2_3_PO3Y },
    { SR_DPO_NT_SR3, min_space_x = CELL2_3_SRDPO3X, min_space_y = CELL2_3_SRDPO3Y, space_extension_x = CELL2_3_SRDPO3X, space_extension_y = CELL2_3_SRDPO3Y },
    { POLE8, min_space_x = CELL2_3_POLE8X, min_space_y = CELL2_3_POLE8Y, space_extension_x = CELL2_3_POLE8X, space_extension_y = CELL2_3_POLE8Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL2_3_SRDPOLE8X, min_space_y = CELL2_3_SRDPOLE8Y, space_extension_x = CELL2_3_SRDPOLE8X, space_extension_y = CELL2_3_SRDPOLE8Y },
    { PO9, min_space_x = CELL2_3_PO9X, min_space_y = CELL2_3_PO9Y, space_extension_x = CELL2_3_PO9X, space_extension_y = CELL2_3_PO9Y },
    { SR_DPO_NT_SR9, min_space_x = CELL2_3_SR_DPO9X, min_space_y = CELL2_3_SR_DPO9Y, space_extension_x = CELL2_3_SR_DPO9X, space_extension_y = CELL2_3_SR_DPO9Y },
    { PO54, min_space_x = CELL2_3_PO54X, min_space_y = CELL2_3_PO54Y, space_extension_x = CELL2_3_PO54X, space_extension_y = CELL2_3_PO54Y },
    { SR_DPO_NT_SR54, min_space_x = CELL2_3_SR_DPO54X, min_space_y = CELL2_3_SR_DPO54Y, space_extension_x = CELL2_3_SR_DPO54X, space_extension_y = CELL2_3_SR_DPO54Y },
    { PO86, min_space_x = CELL2_3_PO86X, min_space_y = CELL2_3_PO86Y, space_extension_x = CELL2_3_PO86X, space_extension_y = CELL2_3_PO86Y },
    { SR_DPO_NT_SR86, min_space_x = CELL2_3_SR_DPO86X, min_space_y = CELL2_3_SR_DPO86Y, space_extension_x = CELL2_3_SR_DPO86X, space_extension_y = CELL2_3_SR_DPO86Y },
    { PO_P54, min_space = CELL2_3_PO_P54 },
    { PO_P81, min_space = CELL2_3_PO_P81 },
    { PO_P81_WPO, min_space = CELL2_3_PO_P81_WPO },
    { PO_P57, min_space = CELL2_3_PO_P57 },
    { CPO, min_space = CELL2_3_CPO },
    { SR_DCPO, min_space = CELL2_3_SRDCPO },
    { CPO20, min_space = CELL2_3_CPO20 },
    { SR_DCPO20, min_space = CELL2_3_SR_DCPO20 },
    { CPO22, min_space_x = CELL2_3_CPO22X, min_space_y = CELL2_3_CPO22Y, space_extension_x = CELL2_3_CPO22X, space_extension_y = CELL2_3_CPO22Y },
    { SR_DCPO22, min_space_x = CELL2_3_SR_DCPO22X, min_space_y = CELL2_3_SR_DCPO22Y, space_extension_x = CELL2_3_SR_DCPO22X, space_extension_y = CELL2_3_SR_DCPO22Y },
    { CPO25, min_space_x = CELL2_3_CPO25X, min_space_y = CELL2_3_CPO25Y, space_extension_x = CELL2_3_CPO25X, space_extension_y = CELL2_3_CPO25Y },
    { SR_DCPO25, min_space_x = CELL2_3_SR_DCPO25X, min_space_y = CELL2_3_SR_DCPO25Y, space_extension_x = CELL2_3_SR_DCPO25X, space_extension_y = CELL2_3_SR_DCPO25Y },
    { MD, min_space_x = CELL2_3_MDX, min_space_y = CELL2_3_MDY, space_extension_x = CELL2_3_MDX, space_extension_y = CELL2_3_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL2_3_SR_DMDX, min_space_y = CELL2_3_SR_DMDY, space_extension_x = CELL2_3_SR_DMDX, space_extension_y = CELL2_3_SR_DMDY },
    { MD16, min_space_x = CELL2_3_MD16X, min_space_y = CELL2_3_MD16Y, space_extension_x = CELL2_3_MD16X, space_extension_y = CELL2_3_MD16Y },
    { SR_DMD_NT_SR16, min_space_x = CELL2_3_SR_DMD16X, min_space_y = CELL2_3_SR_DMD16Y, space_extension_x = CELL2_3_SR_DMD16X, space_extension_y = CELL2_3_SR_DMD16Y },
    { MD30, min_space_x = CELL2_3_MD30X, min_space_y = CELL2_3_MD30Y, space_extension_x = CELL2_3_MD30X, space_extension_y = CELL2_3_MD30Y },
    { SR_DMD_NT_SR30, min_space_x = CELL2_3_SR_DMD30X, min_space_y = CELL2_3_SR_DMD30Y, space_extension_x = CELL2_3_SR_DMD30X, space_extension_y = CELL2_3_SR_DMD30Y },
    { CMD, min_space_x = CELL2_3_CMDX, min_space_y = CELL2_3_CMDY, space_extension_x = CELL2_3_CMDX, space_extension_y = CELL2_3_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL2_3_CMDX, min_space_y = CELL2_3_CMDY, space_extension_x = CELL2_3_CMDX, space_extension_y = CELL2_3_CMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL2_3_NW_CENTERLINE },
    { NT_N, min_space = CELL2_3_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL2_3_OD2X, min_space_y = CELL2_3_OD2Y, space_extension_x = CELL2_3_OD2X, space_extension_y = CELL2_3_OD2Y },
    { NWDMY, min_space = CELL2_3_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL2_3_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL2_3_VAR },
    { DI_WPO, min_space = CELL2_3_DI_WPO },
    { DFBC, min_space_x = CELL2_3_DFBCX, min_space_y = CELL2_3_DFBCY, space_extension_x = CELL2_3_DFBCX, space_extension_y = CELL2_3_DFBCY },
    { DFBC_ALL, min_space_x = CELL2_3_DFBC_ALLX, min_space_y = CELL2_3_DFBC_ALLY, space_extension_x = CELL2_3_DFBC_ALLX, space_extension_y = CELL2_3_DFBC_ALLY },
    { DC1, min_space_x = CELL2_3_CELL1X, min_space_y = CELL2_3_CELL1Y, space_extension_x = CELL2_3_CELL1X, space_extension_y = CELL2_3_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL2_3_CELL2_1X, min_space_y = CELL2_3_CELL2_1Y, space_extension_x = CELL2_3_CELL2_1X, space_extension_y = CELL2_3_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL2_3_CELL2_2X, min_space_y = CELL2_3_CELL2_2Y, space_extension_x = CELL2_3_CELL2_2X, space_extension_y = CELL2_3_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL2_3_CELL2_3X, min_space_y = CELL2_3_CELL2_3Y, space_extension_x = CELL2_3_CELL2_3X, space_extension_y = CELL2_3_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL2_3_CELL4_1X, min_space_y = CELL2_3_CELL4_1Y, space_extension_x = CELL2_3_CELL4_1X, space_extension_y = CELL2_3_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL2_3_CELL4_2X, min_space_y = CELL2_3_CELL4_2Y, space_extension_x = CELL2_3_CELL4_2X, space_extension_y = CELL2_3_CELL4_2Y },
    { DC5_1, min_space_x = CELL2_3_CELL5_1X, min_space_y = CELL2_3_CELL5_1Y, space_extension_x = CELL2_3_CELL5_1X, space_extension_y = CELL2_3_CELL5_1Y },
    { DC5_2, min_space_x = CELL2_3_CELL5_2X, min_space_y = CELL2_3_CELL5_2Y, space_extension_x = CELL2_3_CELL5_2X, space_extension_y = CELL2_3_CELL5_2Y },
    { DC6_1, min_space_x = CELL2_3_CELL6_1X, min_space_y = CELL2_3_CELL6_1Y, space_extension_x = CELL2_3_CELL6_1X, space_extension_y = CELL2_3_CELL6_1Y },
    { DC6_2, min_space_x = CELL2_3_CELL6_2X, min_space_y = CELL2_3_CELL6_2Y, space_extension_x = CELL2_3_CELL6_2X, space_extension_y = CELL2_3_CELL6_2Y },
    { DC7, min_space_x = CELL2_3_CELL7X, min_space_y = CELL2_3_CELL7Y, space_extension_x = CELL2_3_CELL7X, space_extension_y = CELL2_3_CELL7Y },
    { DC8_1, min_space_x = CELL2_3_CELL8_1X, min_space_y = CELL2_3_CELL8_1Y, space_extension_x = CELL2_3_CELL8_1X, space_extension_y = CELL2_3_CELL8_1Y },
    { DC8_2, min_space_x = CELL2_3_CELL8_2X, min_space_y = CELL2_3_CELL8_2Y, space_extension_x = CELL2_3_CELL8_2X, space_extension_y = CELL2_3_CELL8_2Y },
#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL2_3X, min_space_y = CELL4_2_CELL2_3Y, space_extension_x = CELL4_2_CELL2_3X, space_extension_y = CELL4_2_CELL2_3Y },
    { CELL1_E, min_space_x = CELL2_3_CELL1X, min_space_y = CELL2_3_CELL1Y, space_extension_x = CELL2_3_CELL1X, space_extension_y = CELL2_3_CELL1Y },
    { CELL2_1_E, min_space_x = CELL2_3_CELL2_1X, min_space_y = CELL2_3_CELL2_1Y, space_extension_x = CELL2_3_CELL2_1X, space_extension_y = CELL2_3_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL2_3_CELL2_2X, min_space_y = CELL2_3_CELL2_2Y, space_extension_x = CELL2_3_CELL2_2X, space_extension_y = CELL2_3_CELL2_2Y },
}; // end of FSS_CELL2_3
//=========================================================================================
BASE_CELL2_3_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_82_270,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_3_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPTOP_6_160,
	    LAYER_SHAPE_CELL2_3_CAPTOP_6_7,
	    LAYER_SHAPE_CELL2_3_CAPTOP_257_25,
	    LAYER_SHAPE_CELL2_3_CAPTOP_6_161,
	    LAYER_SHAPE_CELL2_3_CAPTOP_82_170,
	    LAYER_SHAPE_CELL2_3_CAPTOP_6_170,
	    LAYER_SHAPE_CELL2_3_CAPTOP_82_270,
	    LAYER_SHAPE_CELL2_3_CAPTOP_17_7,
	    LAYER_SHAPE_CELL2_3_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL2_3_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_82_270,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL2_3_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_3_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CORE_6_7,
	    LAYER_SHAPE_CELL2_3_CORE_257_25,
	    LAYER_SHAPE_CELL2_3_CORE_82_170,
	    LAYER_SHAPE_CELL2_3_CORE_6_170,
	    LAYER_SHAPE_CELL2_3_CORE_17_7,
	    LAYER_SHAPE_CELL2_3_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL2_3_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL2_3_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_82_270,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL2_3_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_257_25,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL2_3_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_257_25,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_82_270,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL2_3_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};


PATTERN_CELL2_3 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		    space_x = 0.048,
		    space_y = 0.124,
            pattern_spacing = {
		        allowed_spacing_x = {>= 0.048 },
		        allowed_spacing_y = {>= 0.124 },
    //		    extension = INTERSECTION,
		    },	
	    },
	    base_cell = {
		BASE_CELL2_3_4,
		BASE_CELL2_3_5,
		BASE_CELL2_3_6,
	    },
	    base_cell_top = {
		BASE_CELL2_3_1,
		BASE_CELL2_3_2,
		BASE_CELL2_3_3,
	    },
	    base_cell_bottom = {
		BASE_CELL2_3_7,
		BASE_CELL2_3_8,
		BASE_CELL2_3_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
	    context_layer = shrink( INITIAL_LAYER, west = 0.0015, south = 0.0  ), 
		x = 0.048,
		y = 0.026,
	    },
	    cell_prefix = "CELL2_3",
	    fill_to_signal_spacing = FSS_CELL2_3,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=30, <=19}},
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,        
	}
    },
}; // end of PATTERN_CELL2_3

SPEC_CELL2_3 = unified_fill( 
    fill_boundary = {
        layer = CHIP_snps, 
        type = LAYER
    },
    fill_patterns = PATTERN_CELL2_3,
    extents_output = {
    	{
        output_layer_key = "CELL2_3_EXTENT"
    	}
    }
);

CELL2_3_6_160_C     = SPEC_CELL2_3["OUTPUT_CELL2_3_6_160"][0];
CELL2_3_6_7_C       = SPEC_CELL2_3["OUTPUT_CELL2_3_6_7"][0];
CELL2_3_6_161_C     = SPEC_CELL2_3["OUTPUT_CELL2_3_6_161"][0];
CELL2_3_257_25_C    = SPEC_CELL2_3["OUTPUT_CELL2_3_257_25"][0];
CELL2_3_82_170_C    = SPEC_CELL2_3["OUTPUT_CELL2_3_82_170"][0];
CELL2_3_6_170_C     = SPEC_CELL2_3["OUTPUT_CELL2_3_6_170"][0];
CELL2_3_82_270_C    = SPEC_CELL2_3["OUTPUT_CELL2_3_82_270"][0];
CELL2_3_17_7_C      = SPEC_CELL2_3["OUTPUT_CELL2_3_17_7"][0];
CELL2_3_250_1_C     = SPEC_CELL2_3["OUTPUT_CELL2_3_250_1"][0];
CELL2_3_E           = SPEC_CELL2_3["CELL2_3_EXTENT"][0];
CELL2_3_6_7_L       = SPEC_CELL2_3["OUTPUT_CELL2_3_6_7"][0];

// DUMMY SPEC : Cell4_1
FSS_CELL4_1_pre : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
#ifdef WIDE_POLY_CELL_IN_CORE 
    { FILL_W86_DUMMY_POLY_FIRST_REGION, min_space = 0.001 },
#endif   
    { over_size_v( FB_1, CELL4_1_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_1_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_1_FB1Y, CELL4_1_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL4_1_FB1X, CELL4_1_FB1Y ), min_space = 0 },
    { FB_2, min_space_x = CELL4_1_FB2X, min_space_y = CELL4_1_FB2Y, space_extension_x = CELL4_1_FB2X, space_extension_y = CELL4_1_FB2Y },
    { FB_26, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_28, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_29, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_31, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_36, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_38, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { SRM, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRM_1, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRAMDMY, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { OD, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { DCOD_H, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_1_CODVX, min_space_y = CELL4_1_CODVY, space_extension_x = CELL4_1_CODVX, space_extension_y = CELL4_1_CODVY },
    { DCOD_V, min_space_x = CELL4_1_DCODVX, min_space_y = CELL4_1_DCODVY, space_extension_x = CELL4_1_DCODVX, space_extension_y = CELL4_1_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_1_ODMMBX, min_space_y = CELL4_1_ODMMBY, space_extension_x = CELL4_1_ODMMBX, space_extension_y = CELL4_1_ODMMBY },
    { PO, min_space_x = CELL4_1_POX, min_space_y = CELL4_1_POY, space_extension_x = CELL4_1_POX, space_extension_y = CELL4_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_1_SRDPOX, min_space_y = CELL4_1_SRDPOY, space_extension_x = CELL4_1_SRDPOX, space_extension_y = CELL4_1_SRDPOY },
    { PO3, min_space_x = CELL4_1_PO3X, min_space_y = CELL4_1_PO3Y, space_extension_x = CELL4_1_PO3X, space_extension_y = CELL4_1_PO3Y },
    { POLE8, min_space_x = CELL4_1_POLE8X, min_space_y = CELL4_1_POLE8Y, space_extension_x = CELL4_1_POLE8X, space_extension_y = CELL4_1_POLE8Y },
    { PO9, min_space_x = CELL4_1_PO9X, min_space_y = CELL4_1_PO9Y, space_extension_x = CELL4_1_PO9X, space_extension_y = CELL4_1_PO9Y },
    { PO54, min_space_x = CELL4_1_PO54X, min_space_y = CELL4_1_PO54Y, space_extension_x = CELL4_1_PO54X, space_extension_y = CELL4_1_PO54Y },
    { PO86, min_space_x = CELL4_1_PO86X, min_space_y = CELL4_1_PO86Y, space_extension_x = CELL4_1_PO86X, space_extension_y = CELL4_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_1_SR_DPO3X, min_space_y = CELL4_1_SR_DPO3Y, space_extension_x = CELL4_1_SR_DPO3X, space_extension_y = CELL4_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_1_SR_DPOLE8X, min_space_y = CELL4_1_SR_DPOLE8Y, space_extension_x = CELL4_1_SR_DPOLE8X, space_extension_y = CELL4_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_1_SR_DPO9X, min_space_y = CELL4_1_SR_DPO9Y, space_extension_x = CELL4_1_SR_DPO9X, space_extension_y = CELL4_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_1_SR_DPO54X, min_space_y = CELL4_1_SR_DPO54Y, space_extension_x = CELL4_1_SR_DPO54X, space_extension_y = CELL4_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_1_SR_DPO86X, min_space_y = CELL4_1_SR_DPO86Y, space_extension_x = CELL4_1_SR_DPO86X, space_extension_y = CELL4_1_SR_DPO86Y },
    { PO_P54, min_space = CELL4_1_PO_P54 },
    { PO_P81, min_space = CELL4_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_1_PO_P81_WPO },
    { PO_P57, min_space = CELL4_1_PO_P57 },
    { CPO, min_space_x = CELL4_1_CPOX, min_space_y = CELL4_1_CPOY, space_extension_x = CELL4_1_CPOX, space_extension_y = CELL4_1_CPOY },
    { SR_DCPO, min_space_x = CELL4_1_SR_DCPOX, min_space_y = CELL4_1_SR_DCPOY, space_extension_x = CELL4_1_SR_DCPOX, space_extension_y = CELL4_1_SR_DCPOY },
    { CPO20, min_space_x = CELL4_1_CPO20X, min_space_y = CELL4_1_CPO20Y, space_extension_x = CELL4_1_CPO20X, space_extension_y = CELL4_1_CPO20Y },
    { CPO22, min_space_x = CELL4_1_CPO22X, min_space_y = CELL4_1_CPO22Y, space_extension_x = CELL4_1_CPO22X, space_extension_y = CELL4_1_CPO22Y },
    { CPO25, min_space_x = CELL4_1_CPO25X, min_space_y = CELL4_1_CPO25Y, space_extension_x = CELL4_1_CPO25X, space_extension_y = CELL4_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_1_SR_DCPO20X, min_space_y = CELL4_1_SR_DCPO20Y, space_extension_x = CELL4_1_SR_DCPO20X, space_extension_y = CELL4_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_1_SR_DCPO22X, min_space_y = CELL4_1_SR_DCPO22Y, space_extension_x = CELL4_1_SR_DCPO22X, space_extension_y = CELL4_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_1_SR_DCPO25X, min_space_y = CELL4_1_SR_DCPO25Y, space_extension_x = CELL4_1_SR_DCPO25X, space_extension_y = CELL4_1_SR_DCPO25Y },
    { MD, min_space_x = CELL4_1_MDX, min_space_y = CELL4_1_MDY, space_extension_x = CELL4_1_MDX, space_extension_y = CELL4_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_1_SRDMDX, min_space_y = CELL4_1_SRDMDY, space_extension_x = CELL4_1_SRDMDX, space_extension_y = CELL4_1_SRDMDY },
    { MD16, min_space_x = CELL4_1_MD16X, min_space_y = CELL4_1_MD16Y, space_extension_x = CELL4_1_MD16X, space_extension_y = CELL4_1_MD16Y },
    { MD30, min_space_x = CELL4_1_MD30X, min_space_y = CELL4_1_MD30Y, space_extension_x = CELL4_1_MD30X, space_extension_y = CELL4_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_1_SR_DMD16X, min_space_y = CELL4_1_SR_DMD16Y, space_extension_x = CELL4_1_SR_DMD16X, space_extension_y = CELL4_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_1_SR_DMD30X, min_space_y = CELL4_1_SR_DMD30Y, space_extension_x = CELL4_1_SR_DMD30X, space_extension_y = CELL4_1_SR_DMD30Y },
    { CMD, min_space_x = CELL4_1_CMDX, min_space_y = CELL4_1_CMDY, space_extension_x = CELL4_1_CMDX, space_extension_y = CELL4_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_1_SR_DCMDX, min_space_y = CELL4_1_SR_DCMDY, space_extension_x = CELL4_1_SR_DCMDX, space_extension_y = CELL4_1_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_1_NW_CENTERLINE },
    { NT_N, min_space = CELL4_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_1_OD2X, min_space_y = CELL4_1_OD2Y, space_extension_x = CELL4_1_OD2X, space_extension_y = CELL4_1_OD2Y },
    { NWDMY, min_space = CELL4_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_1_VAR },
    { DFBC, min_space_x = CELL4_1_DFBCX, min_space_y = CELL4_1_DFBCY, space_extension_x = CELL4_1_DFBCX, space_extension_y = CELL4_1_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_1_DFBC_ALLX, min_space_y = CELL4_1_DFBC_ALLY, space_extension_x = CELL4_1_DFBC_ALLX, space_extension_y = CELL4_1_DFBC_ALLY },
    { DC1, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_1_CELL4_2X, min_space_y = CELL4_1_CELL4_2Y, space_extension_x = CELL4_1_CELL4_2X, space_extension_y = CELL4_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_1_CELL5_2X, min_space_y = CELL4_1_CELL5_2Y, space_extension_x = CELL4_1_CELL5_2X, space_extension_y = CELL4_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_1_CELL6_1X, min_space_y = CELL4_1_CELL6_1Y, space_extension_x = CELL4_1_CELL6_1X, space_extension_y = CELL4_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_1_CELL6_2X, min_space_y = CELL4_1_CELL6_2Y, space_extension_x = CELL4_1_CELL6_2X, space_extension_y = CELL4_1_CELL6_2Y },
    { DC7, min_space_x = CELL4_1_CELL7X, min_space_y = CELL4_1_CELL7Y, space_extension_x = CELL4_1_CELL7X, space_extension_y = CELL4_1_CELL7Y },
    { DC8_1, min_space_x = CELL4_1_CELL8_1X, min_space_y = CELL4_1_CELL8_1Y, space_extension_x = CELL4_1_CELL8_1X, space_extension_y = CELL4_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_1_CELL8_2X, min_space_y = CELL4_1_CELL8_2Y, space_extension_x = CELL4_1_CELL8_2X, space_extension_y = CELL4_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
    { CELL1_E, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
}; // end of FSS_CELL4_1
//=========================================================================================

BASE_CELL4_1_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOP_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOP_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOP_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOP_82_270,
	    LAYER_SHAPE_CELL4_1_CAPTOP_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOP_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOP_250_1,
    },
    repeatable = true,
};

BASE_CELL4_1_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};

BASE_CELL4_1_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPLEFT_250_1,
    },
    repeatable = true,
};

BASE_CELL4_1_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CORE_257_201,
	    LAYER_SHAPE_CELL4_1_CORE_6_7,
	    LAYER_SHAPE_CELL4_1_CORE_6_170,
	    LAYER_SHAPE_CELL4_1_CORE_82_170,
	    LAYER_SHAPE_CELL4_1_CORE_17_7,
	    LAYER_SHAPE_CELL4_1_CORE_257_42,
	    LAYER_SHAPE_CELL4_1_CORE_250_1,
    },
    repeatable = true,
};

BASE_CELL4_1_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPRIGHT_250_1,
    },
    repeatable = true,
};

BASE_CELL4_1_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOM_250_1,
    },
    repeatable = true,
};

BASE_CELL4_1_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};

BASE_CELL4_1_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_161,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_LEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_1_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_82_270,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL4_1_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_201,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_160,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_161,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_82_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_6_170,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_17_7,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_257_42,
	    LAYER_SHAPE_CELL4_1_VCONNECT_RIGHT_250_1,
    },
    repeatable = false
};



PATTERN_CELL4_1_pre : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_1_4,
		BASE_CELL4_1_5,
		BASE_CELL4_1_6,
	    },
	    base_cell_top = {
		BASE_CELL4_1_1,
		BASE_CELL4_1_2,
		BASE_CELL4_1_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_1_7,
		BASE_CELL4_1_8,
		BASE_CELL4_1_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, west = 0 , south =  0.0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix = "CELL4_1",
	    fill_to_signal_spacing = FSS_CELL4_1_pre,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,                
        merging_cell = {
		BASE_CELL4_1_R1,
		BASE_CELL4_1_R2,
		BASE_CELL4_1_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
	}
    },
}; // end of PATTERN_CELL4_1




FSS_CELL4_1 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
#ifdef WIDE_POLY_CELL_IN_CORE 
    { FILL_W86_DUMMY_POLY_FIRST_REGION, min_space = 0.001 },
#endif   
    { over_size_v( FB_1, CELL4_1_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_1_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_1_FB1Y, CELL4_1_FB1X ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_H, CELL4_1_FB1X, CELL4_1_FB1Y ), min_space = 0 },
    { FB_2, min_space_x = CELL4_1_FB2X, min_space_y = CELL4_1_FB2Y, space_extension_x = CELL4_1_FB2X, space_extension_y = CELL4_1_FB2Y },
    { FB_26, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_28, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_29, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_31, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_36, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { FB_38, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_1_FBOTHERX, min_space_y = CELL4_1_FBOTHERY, space_extension_x = CELL4_1_FBOTHERX, space_extension_y = CELL4_1_FBOTHERY },
    { SRM, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRM_1, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { SRAMDMY, min_space_x = CELL4_1_SRAMX, min_space_y = CELL4_1_SRAMY, space_extension_x = CELL4_1_SRAMX, space_extension_y = CELL4_1_SRAMY },
    { OD, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_1_ODX, min_space_y = CELL4_1_ODY, space_extension_x = CELL4_1_ODX, space_extension_y = CELL4_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { DCOD_H, min_space_x = CELL4_1_CODHX, min_space_y = CELL4_1_CODHY, space_extension_x = CELL4_1_CODHX, space_extension_y = CELL4_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_1_CODVX, min_space_y = CELL4_1_CODVY, space_extension_x = CELL4_1_CODVX, space_extension_y = CELL4_1_CODVY },
    { DCOD_V, min_space_x = CELL4_1_DCODVX, min_space_y = CELL4_1_DCODVY, space_extension_x = CELL4_1_DCODVX, space_extension_y = CELL4_1_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_1_ODMMBX, min_space_y = CELL4_1_ODMMBY, space_extension_x = CELL4_1_ODMMBX, space_extension_y = CELL4_1_ODMMBY },
    { PO, min_space_x = CELL4_1_POX, min_space_y = CELL4_1_POY, space_extension_x = CELL4_1_POX, space_extension_y = CELL4_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_1_SRDPOX, min_space_y = CELL4_1_SRDPOY, space_extension_x = CELL4_1_SRDPOX, space_extension_y = CELL4_1_SRDPOY },
    { PO3, min_space_x = CELL4_1_PO3X, min_space_y = CELL4_1_PO3Y, space_extension_x = CELL4_1_PO3X, space_extension_y = CELL4_1_PO3Y },
    { POLE8, min_space_x = CELL4_1_POLE8X, min_space_y = CELL4_1_POLE8Y, space_extension_x = CELL4_1_POLE8X, space_extension_y = CELL4_1_POLE8Y },
    { PO9, min_space_x = CELL4_1_PO9X, min_space_y = CELL4_1_PO9Y, space_extension_x = CELL4_1_PO9X, space_extension_y = CELL4_1_PO9Y },
    { PO54, min_space_x = CELL4_1_PO54X, min_space_y = CELL4_1_PO54Y, space_extension_x = CELL4_1_PO54X, space_extension_y = CELL4_1_PO54Y },
    { PO86, min_space_x = CELL4_1_PO86X, min_space_y = CELL4_1_PO86Y, space_extension_x = CELL4_1_PO86X, space_extension_y = CELL4_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_1_SR_DPO3X, min_space_y = CELL4_1_SR_DPO3Y, space_extension_x = CELL4_1_SR_DPO3X, space_extension_y = CELL4_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_1_SR_DPOLE8X, min_space_y = CELL4_1_SR_DPOLE8Y, space_extension_x = CELL4_1_SR_DPOLE8X, space_extension_y = CELL4_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_1_SR_DPO9X, min_space_y = CELL4_1_SR_DPO9Y, space_extension_x = CELL4_1_SR_DPO9X, space_extension_y = CELL4_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_1_SR_DPO54X, min_space_y = CELL4_1_SR_DPO54Y, space_extension_x = CELL4_1_SR_DPO54X, space_extension_y = CELL4_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_1_SR_DPO86X, min_space_y = CELL4_1_SR_DPO86Y, space_extension_x = CELL4_1_SR_DPO86X, space_extension_y = CELL4_1_SR_DPO86Y },
    { PO_P54, min_space = CELL4_1_PO_P54 },
    { PO_P81, min_space = CELL4_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_1_PO_P81_WPO },
    { PO_P57, min_space = CELL4_1_PO_P57 },
    { CPO, min_space_x = CELL4_1_CPOX, min_space_y = CELL4_1_CPOY, space_extension_x = CELL4_1_CPOX, space_extension_y = CELL4_1_CPOY },
    { SR_DCPO, min_space_x = CELL4_1_SR_DCPOX, min_space_y = CELL4_1_SR_DCPOY, space_extension_x = CELL4_1_SR_DCPOX, space_extension_y = CELL4_1_SR_DCPOY },
    { CPO20, min_space_x = CELL4_1_CPO20X, min_space_y = CELL4_1_CPO20Y, space_extension_x = CELL4_1_CPO20X, space_extension_y = CELL4_1_CPO20Y },
    { CPO22, min_space_x = CELL4_1_CPO22X, min_space_y = CELL4_1_CPO22Y, space_extension_x = CELL4_1_CPO22X, space_extension_y = CELL4_1_CPO22Y },
    { CPO25, min_space_x = CELL4_1_CPO25X, min_space_y = CELL4_1_CPO25Y, space_extension_x = CELL4_1_CPO25X, space_extension_y = CELL4_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_1_SR_DCPO20X, min_space_y = CELL4_1_SR_DCPO20Y, space_extension_x = CELL4_1_SR_DCPO20X, space_extension_y = CELL4_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_1_SR_DCPO22X, min_space_y = CELL4_1_SR_DCPO22Y, space_extension_x = CELL4_1_SR_DCPO22X, space_extension_y = CELL4_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_1_SR_DCPO25X, min_space_y = CELL4_1_SR_DCPO25Y, space_extension_x = CELL4_1_SR_DCPO25X, space_extension_y = CELL4_1_SR_DCPO25Y },
    { MD, min_space_x = CELL4_1_MDX, min_space_y = CELL4_1_MDY, space_extension_x = CELL4_1_MDX, space_extension_y = CELL4_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_1_SRDMDX, min_space_y = CELL4_1_SRDMDY, space_extension_x = CELL4_1_SRDMDX, space_extension_y = CELL4_1_SRDMDY },
    { MD16, min_space_x = CELL4_1_MD16X, min_space_y = CELL4_1_MD16Y, space_extension_x = CELL4_1_MD16X, space_extension_y = CELL4_1_MD16Y },
    { MD30, min_space_x = CELL4_1_MD30X, min_space_y = CELL4_1_MD30Y, space_extension_x = CELL4_1_MD30X, space_extension_y = CELL4_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_1_SR_DMD16X, min_space_y = CELL4_1_SR_DMD16Y, space_extension_x = CELL4_1_SR_DMD16X, space_extension_y = CELL4_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_1_SR_DMD30X, min_space_y = CELL4_1_SR_DMD30Y, space_extension_x = CELL4_1_SR_DMD30X, space_extension_y = CELL4_1_SR_DMD30Y },
    { CMD, min_space_x = CELL4_1_CMDX, min_space_y = CELL4_1_CMDY, space_extension_x = CELL4_1_CMDX, space_extension_y = CELL4_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_1_SR_DCMDX, min_space_y = CELL4_1_SR_DCMDY, space_extension_x = CELL4_1_SR_DCMDX, space_extension_y = CELL4_1_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_1_NW_CENTERLINE },
    { NT_N, min_space = CELL4_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_1_OD2X, min_space_y = CELL4_1_OD2Y, space_extension_x = CELL4_1_OD2X, space_extension_y = CELL4_1_OD2Y },
    { NWDMY, min_space = CELL4_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_1_VAR },
    { DFBC, min_space_x = CELL4_1_DFBCX, min_space_y = CELL4_1_DFBCY, space_extension_x = CELL4_1_DFBCX, space_extension_y = CELL4_1_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_1_DFBC_ALLX, min_space_y = CELL4_1_DFBC_ALLY, space_extension_x = CELL4_1_DFBC_ALLX, space_extension_y = CELL4_1_DFBC_ALLY },
    { DC1, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_1_CELL4_2X, min_space_y = CELL4_1_CELL4_2Y, space_extension_x = CELL4_1_CELL4_2X, space_extension_y = CELL4_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_1_CELL5_2X, min_space_y = CELL4_1_CELL5_2Y, space_extension_x = CELL4_1_CELL5_2X, space_extension_y = CELL4_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_1_CELL6_1X, min_space_y = CELL4_1_CELL6_1Y, space_extension_x = CELL4_1_CELL6_1X, space_extension_y = CELL4_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_1_CELL6_2X, min_space_y = CELL4_1_CELL6_2Y, space_extension_x = CELL4_1_CELL6_2X, space_extension_y = CELL4_1_CELL6_2Y },
    { DC7, min_space_x = CELL4_1_CELL7X, min_space_y = CELL4_1_CELL7Y, space_extension_x = CELL4_1_CELL7X, space_extension_y = CELL4_1_CELL7Y },
    { DC8_1, min_space_x = CELL4_1_CELL8_1X, min_space_y = CELL4_1_CELL8_1Y, space_extension_x = CELL4_1_CELL8_1X, space_extension_y = CELL4_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_1_CELL8_2X, min_space_y = CELL4_1_CELL8_2Y, space_extension_x = CELL4_1_CELL8_2X, space_extension_y = CELL4_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL4_1X, min_space_y = CELL4_1_CELL4_1Y, space_extension_x = CELL4_1_CELL4_1X, space_extension_y = CELL4_1_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
    { CELL1_E, min_space_x = CELL4_1_CELL1X, min_space_y = CELL4_1_CELL1Y, space_extension_x = CELL4_1_CELL1X, space_extension_y = CELL4_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL4_1_CELL2_1X, min_space_y = CELL4_1_CELL2_1Y, space_extension_x = CELL4_1_CELL2_1X, space_extension_y = CELL4_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL4_1_CELL2_2X, min_space_y = CELL4_1_CELL2_2Y, space_extension_x = CELL4_1_CELL2_2X, space_extension_y = CELL4_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL4_1_CELL2_3X, min_space_y = CELL4_1_CELL2_3Y, space_extension_x = CELL4_1_CELL2_3X, space_extension_y = CELL4_1_CELL2_3Y },
}; // end of FSS_CELL4_1

PATTERN_CELL4_1 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_1_4,
		BASE_CELL4_1_5,
		BASE_CELL4_1_6,
	    },
	    base_cell_top = {
		BASE_CELL4_1_1,
		BASE_CELL4_1_2,
		BASE_CELL4_1_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_1_7,
		BASE_CELL4_1_8,
		BASE_CELL4_1_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, west = 0 , south =  0.0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix = "CELL4_1",
	    fill_to_signal_spacing = FSS_CELL4_1,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,                
        merging_cell = {
		BASE_CELL4_1_R1,
		BASE_CELL4_1_R2,
		BASE_CELL4_1_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif        
	}
    },
}; // end of PATTERN_CELL4_1


CELL4_1_region = unified_fill_region(
    FSS_CELL4_1,
    fill_boundary = {
      layer = CHIP_snps,
      type = LAYER
    }
);

cell4_retarget = retarget_with_local_protection(
  CELL4_1_region /*fillable region*/,
  PATTERN_CELL4_1[0].expandable_polygon_fill.pattern_spec /*pattern_spec*/,
  0.367 /*width*/,
  0.370 /*height*/,
  vGRID  /*grid*/
);


SPEC_CELL4_1 = unified_fill(
    fill_patterns = PATTERN_CELL4_1,
    fill_boundary = {
	layer = cell4_retarget,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL4_1_EXTENT"
	},
    }
);

CELL4_1_257_201_C     = SPEC_CELL4_1["OUTPUT_CELL4_1_257_201"][0];
CELL4_1_6_160_C     = SPEC_CELL4_1["OUTPUT_CELL4_1_6_160"][0];
CELL4_1_6_7_C       = SPEC_CELL4_1["OUTPUT_CELL4_1_6_7"][0];
CELL4_1_82_170_C    = SPEC_CELL4_1["OUTPUT_CELL4_1_82_170"][0];
CELL4_1_82_270_C    = SPEC_CELL4_1["OUTPUT_CELL4_1_82_270"][0];
CELL4_1_6_170_C     = SPEC_CELL4_1["OUTPUT_CELL4_1_6_170"][0];
CELL4_1_6_161_C     = SPEC_CELL4_1["OUTPUT_CELL4_1_6_161"][0];
CELL4_1_17_7_C      = SPEC_CELL4_1["OUTPUT_CELL4_1_17_7"][0];
CELL4_1_257_42_C    = SPEC_CELL4_1["OUTPUT_CELL4_1_257_42"][0];
CELL4_1_250_1_C     = SPEC_CELL4_1["OUTPUT_CELL4_1_250_1"][0];
CELL4_1_E           = SPEC_CELL4_1["CELL4_1_EXTENT"][0];







// DUMMY SPEC : Cell4_2
FSS_CELL4_2 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL_IPX, min_space_y = CELL_IPY, context = INTERIOR },
#endif
    { CHIP_snps, min_space_x = CELL_CHIPX, min_space_y = CELL_CHIPY, context = INTERIOR },
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK},
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { over_size_v( FB_1, CELL4_2_FB1X ), min_space = 0 },
    { over_size_h( FB_1, CELL4_2_FB1Y ), min_space = 0 },
    { corner_size_ext( FB1_CORNER_V, CELL4_2_FB1Y, CELL4_2_FB1X ), min_space = 0  },
    { corner_size_ext( FB1_CORNER_H, CELL4_2_FB1X, CELL4_2_FB1Y ), min_space = 0  },
    { FB_2, min_space_x = CELL4_2_FB2X, min_space_y = CELL4_2_FB2Y, space_extension_x = CELL4_2_FB2X, space_extension_y = CELL4_2_FB2Y },
    { FB_26, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_28, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_29, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_31, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_36, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { FB_38, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { STD_FILLER, min_space_x = CELL4_2_FBOTHERX, min_space_y = CELL4_2_FBOTHERY, space_extension_x = CELL4_2_FBOTHERX, space_extension_y = CELL4_2_FBOTHERY },
    { SRM, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { SRM_1, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { SRAMDMY, min_space_x = CELL4_2_SRAMX, min_space_y = CELL4_2_SRAMY, space_extension_x = CELL4_2_SRAMX, space_extension_y = CELL4_2_SRAMY },
    { OD, min_space_x = CELL4_2_ODX, min_space_y = CELL4_2_ODY, space_extension_x = CELL4_2_ODX, space_extension_y = CELL4_2_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL4_2_ODX, min_space_y = CELL4_2_ODY, space_extension_x = CELL4_2_ODX, space_extension_y = CELL4_2_ODY },
    { COD_H_NT_SR, min_space_x = CELL4_2_CODHX, min_space_y = CELL4_2_CODHY, space_extension_x = CELL4_2_CODHX, space_extension_y = CELL4_2_CODHY },
    { DCOD_H, min_space_x = CELL4_2_CODHX, min_space_y = CELL4_2_CODHY, space_extension_x = CELL4_2_CODHX, space_extension_y = CELL4_2_CODHY },
    { COD_V_NT_SR, min_space_x = CELL4_2_CODVX, min_space_y = CELL4_2_CODVY, space_extension_x = CELL4_2_CODVX, space_extension_y = CELL4_2_CODVY },
    { DCOD_V, min_space_x = CELL4_2_DCODVX, min_space_y = CELL4_2_DCODVY, space_extension_x = CELL4_2_DCODVX, space_extension_y = CELL4_2_DCODVY },
    { COD_BLOCK_NT_SR, min_space = CELL4_2_CODBLK },
    { DCOD_BLOCK, min_space = CELL4_2_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL4_2_ODMMBX, min_space_y = CELL4_2_ODMMBY, space_extension_x = CELL4_2_ODMMBX, space_extension_y = CELL4_2_ODMMBY },
    { PO, min_space_x = CELL4_2_POX, min_space_y = CELL4_2_POY, space_extension_x = CELL4_2_POX, space_extension_y = CELL4_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL4_2_SRDPOX, min_space_y = CELL4_2_SRDPOY, space_extension_x = CELL4_2_SRDPOX, space_extension_y = CELL4_2_SRDPOY },
    { PO3, min_space_x = CELL4_2_PO3X, min_space_y = CELL4_2_PO3Y, space_extension_x = CELL4_2_PO3X, space_extension_y = CELL4_2_PO3Y },
    { POLE8, min_space_x = CELL4_2_POLE8X, min_space_y = CELL4_2_POLE8Y, space_extension_x = CELL4_2_POLE8X, space_extension_y = CELL4_2_POLE8Y },
    { PO9, min_space_x = CELL4_2_PO9X, min_space_y = CELL4_2_PO9Y, space_extension_x = CELL4_2_PO9X, space_extension_y = CELL4_2_PO9Y },
    { PO54, min_space_x = CELL4_2_PO54X, min_space_y = CELL4_2_PO54Y, space_extension_x = CELL4_2_PO54X, space_extension_y = CELL4_2_PO54Y },
    { PO86, min_space_x = CELL4_2_PO86X, min_space_y = CELL4_2_PO86Y, space_extension_x = CELL4_2_PO86X, space_extension_y = CELL4_2_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL4_2_SR_DPO3X, min_space_y = CELL4_2_SR_DPO3Y, space_extension_x = CELL4_2_SR_DPO3X, space_extension_y = CELL4_2_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL4_2_SR_DPOLE8X, min_space_y = CELL4_2_SR_DPOLE8Y, space_extension_x = CELL4_2_SR_DPOLE8X, space_extension_y = CELL4_2_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL4_2_SR_DPO9X, min_space_y = CELL4_2_SR_DPO9Y, space_extension_x = CELL4_2_SR_DPO9X, space_extension_y = CELL4_2_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL4_2_SR_DPO54X, min_space_y = CELL4_2_SR_DPO54Y, space_extension_x = CELL4_2_SR_DPO54X, space_extension_y = CELL4_2_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL4_2_SR_DPO86X, min_space_y = CELL4_2_SR_DPO86Y, space_extension_x = CELL4_2_SR_DPO86X, space_extension_y = CELL4_2_SR_DPO86Y },
    { CPO, min_space_x = CELL4_2_CPOX, min_space_y = CELL4_2_CPOY, space_extension_x = CELL4_2_CPOX, space_extension_y = CELL4_2_CPOY },
    { SR_DCPO, min_space_x = CELL4_2_SR_DCPOX, min_space_y = CELL4_2_SR_DCPOY, space_extension_x = CELL4_2_SR_DCPOX, space_extension_y = CELL4_2_SR_DCPOY },
    { CPO20, min_space_x = CELL4_2_CPO20X, min_space_y = CELL4_2_CPO20Y, space_extension_x = CELL4_2_CPO20X, space_extension_y = CELL4_2_CPO20Y },
    { CPO22, min_space_x = CELL4_2_CPO22X, min_space_y = CELL4_2_CPO22Y, space_extension_x = CELL4_2_CPO22X, space_extension_y = CELL4_2_CPO22Y },
    { CPO25, min_space_x = CELL4_2_CPO25X, min_space_y = CELL4_2_CPO25Y, space_extension_x = CELL4_2_CPO25X, space_extension_y = CELL4_2_CPO25Y },
    { SR_DCPO20, min_space_x = CELL4_2_SR_DCPO20X, min_space_y = CELL4_2_SR_DCPO20Y, space_extension_x = CELL4_2_SR_DCPO20X, space_extension_y = CELL4_2_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL4_2_SR_DCPO22X, min_space_y = CELL4_2_SR_DCPO22Y, space_extension_x = CELL4_2_SR_DCPO22X, space_extension_y = CELL4_2_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL4_2_SR_DCPO25X, min_space_y = CELL4_2_SR_DCPO25Y, space_extension_x = CELL4_2_SR_DCPO25X, space_extension_y = CELL4_2_SR_DCPO25Y },
    { PO_P54, min_space = CELL4_2_PO_P54 },
    { PO_P81, min_space = CELL4_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL4_2_PO_P81_WPO },
    { PO_P57, min_space = CELL4_2_PO_P57 },
    { MD, min_space_x = CELL4_2_MDX, min_space_y = CELL4_2_MDY, space_extension_x = CELL4_2_MDX, space_extension_y = CELL4_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL4_2_SRDMDX, min_space_y = CELL4_2_SRDMDY, space_extension_x = CELL4_2_SRDMDX, space_extension_y = CELL4_2_SRDMDY },
    { MD16, min_space_x = CELL4_2_MD16X, min_space_y = CELL4_2_MD16Y, space_extension_x = CELL4_2_MD16X, space_extension_y = CELL4_2_MD16Y },
    { MD30, min_space_x = CELL4_2_MD30X, min_space_y = CELL4_2_MD30Y, space_extension_x = CELL4_2_MD30X, space_extension_y = CELL4_2_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL4_2_SR_DMD16X, min_space_y = CELL4_2_SR_DMD16Y, space_extension_x = CELL4_2_SR_DMD16X, space_extension_y = CELL4_2_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL4_2_SR_DMD30X, min_space_y = CELL4_2_SR_DMD30Y, space_extension_x = CELL4_2_SR_DMD30X, space_extension_y = CELL4_2_SR_DMD30Y },
    { CMD, min_space_x = CELL4_2_CMDX, min_space_y = CELL4_2_CMDY, space_extension_x = CELL4_2_CMDX, space_extension_y = CELL4_2_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL4_2_SR_DCMDX, min_space_y = CELL4_2_SR_DCMDY, space_extension_x = CELL4_2_SR_DCMDX, space_extension_y = CELL4_2_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL4_2_NW_CENTERLINE },
    { NT_N, min_space = CELL4_2_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL4_2_OD2X, min_space_y = CELL4_2_OD2Y, space_extension_x = CELL4_2_OD2X, space_extension_y = CELL4_2_OD2Y },
    { NWDMY, min_space = CELL4_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL4_2_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL4_2_VAR },
    { DFBC, min_space_x = CELL4_2_DFBCX, min_space_y = CELL4_2_DFBCY, space_extension_x = CELL4_2_DFBCX, space_extension_y = CELL4_2_DFBCY },
    { DFBC_ALL, min_space_x = CELL4_2_DFBC_ALLX, min_space_y = CELL4_2_DFBC_ALLY, space_extension_x = CELL4_2_DFBC_ALLX, space_extension_y = CELL4_2_DFBC_ALLY },
    { DC1, min_space_x = CELL4_2_CELL1X, min_space_y = CELL4_2_CELL1Y, space_extension_x = CELL4_2_CELL1X, space_extension_y = CELL4_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL4_2_CELL2_1X, min_space_y = CELL4_2_CELL2_1Y, space_extension_x = CELL4_2_CELL2_1X, space_extension_y = CELL4_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL4_2_CELL2_2X, min_space_y = CELL4_2_CELL2_2Y, space_extension_x = CELL4_2_CELL2_2X, space_extension_y = CELL4_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL4_2_CELL2_3X, min_space_y = CELL4_2_CELL2_3Y, space_extension_x = CELL4_2_CELL2_3X, space_extension_y = CELL4_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL4_2_CELL4_2X, min_space_y = CELL4_2_CELL4_2Y, space_extension_x = CELL4_2_CELL4_2X, space_extension_y = CELL4_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL4_2_CELL5_1X, min_space_y = CELL4_2_CELL5_1Y, space_extension_x = CELL4_2_CELL5_1X, space_extension_y = CELL4_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL4_2_CELL5_2X, min_space_y = CELL4_2_CELL5_2Y, space_extension_x = CELL4_2_CELL5_2X, space_extension_y = CELL4_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL4_2_CELL6_1X, min_space_y = CELL4_2_CELL6_1Y, space_extension_x = CELL4_2_CELL6_1X, space_extension_y = CELL4_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL4_2_CELL6_2X, min_space_y = CELL4_2_CELL6_2Y, space_extension_x = CELL4_2_CELL6_2X, space_extension_y = CELL4_2_CELL6_2Y },
    { DC7, min_space_x = CELL4_2_CELL7X, min_space_y = CELL4_2_CELL7Y, space_extension_x = CELL4_2_CELL7X, space_extension_y = CELL4_2_CELL7Y },
    { DC8_1, min_space_x = CELL4_2_CELL8_1X, min_space_y = CELL4_2_CELL8_1Y, space_extension_x = CELL4_2_CELL8_1X, space_extension_y = CELL4_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL4_2_CELL8_2X, min_space_y = CELL4_2_CELL8_2Y, space_extension_x = CELL4_2_CELL8_2X, space_extension_y = CELL4_2_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL4_2X, min_space_y = CELL4_1_CELL4_2Y, space_extension_x = CELL4_1_CELL4_2X, space_extension_y = CELL4_1_CELL4_2Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL4_2X, min_space_y = CELL4_2_CELL4_2Y, space_extension_x = CELL4_2_CELL4_2X, space_extension_y = CELL4_2_CELL4_2Y },
    { CELL1_E, min_space_x = CELL4_2_CELL1X, min_space_y = CELL4_2_CELL1Y, space_extension_x = CELL4_2_CELL1X, space_extension_y = CELL4_2_CELL1Y },
    { CELL2_1_E, min_space_x = CELL4_2_CELL2_1X, min_space_y = CELL4_2_CELL2_1Y, space_extension_x = CELL4_2_CELL2_1X, space_extension_y = CELL4_2_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL4_2_CELL2_2X, min_space_y = CELL4_2_CELL2_2Y, space_extension_x = CELL4_2_CELL2_2X, space_extension_y = CELL4_2_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL4_2_CELL2_3X, min_space_y = CELL4_2_CELL2_3Y, space_extension_x = CELL4_2_CELL2_3X, space_extension_y = CELL4_2_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL4_2_CELL4_1X, min_space_y = CELL4_2_CELL4_1Y, space_extension_x = CELL4_2_CELL4_1X, space_extension_y = CELL4_2_CELL4_1Y },
}; // end of FSS_CELL4_2
//=========================================================================================
BASE_CELL4_2_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOP_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOP_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOP_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOP_82_270,
	    LAYER_SHAPE_CELL4_2_CAPTOP_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOP_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPTOPRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPLEFT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CORE_257_44,
	    LAYER_SHAPE_CELL4_2_CORE_6_7,
	    LAYER_SHAPE_CELL4_2_CORE_6_170,
	    LAYER_SHAPE_CELL4_2_CORE_82_170,
	    LAYER_SHAPE_CELL4_2_CORE_17_7,
	    LAYER_SHAPE_CELL4_2_CORE_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPRIGHT_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMLEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOM_250_1,
    },
    repeatable = true,
};
BASE_CELL4_2_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_CAPBOTTOMRIGHT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_R1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_161,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_LEFT_250_1,
    },
    repeatable = false
};
BASE_CELL4_2_R2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_82_270,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_CORE_250_1,
    },
    repeatable = true,
};


BASE_CELL4_2_R3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_160,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_257_44,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_161,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_82_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_6_170,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_17_7,
	    LAYER_SHAPE_CELL4_2_VCONNECT_RIGHT_250_1,
    },
    repeatable = false
};


PATTERN_CELL4_2 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.048,
		space_y = 0.124,
	    },
	    base_cell = {
		BASE_CELL4_2_4,
		BASE_CELL4_2_5,
		BASE_CELL4_2_6,
	    },
	    base_cell_top = {
		BASE_CELL4_2_1,
		BASE_CELL4_2_2,
		BASE_CELL4_2_3,
	    },
	    base_cell_bottom = {
		BASE_CELL4_2_7,
		BASE_CELL4_2_8,
		BASE_CELL4_2_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER, west = 0 , south =  0.0 ),
		x = vGRID,
		y = 0.026,
	    },
	    cell_prefix = "CELL4_2",
	    fill_to_signal_spacing = FSS_CELL4_2,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=20}},
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,        
	    merging_cell = {
		BASE_CELL4_2_R1,
		BASE_CELL4_2_R2,
		BASE_CELL4_2_R3,
	    },
	    merging_direction = VERTICAL,
        merging_length_limit = 400*( 0.370 + 0.124 ) - 0.124,
#ifndef FULL_CHIP
        boundary_alignment = { inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#endif
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif                
	}
    },
}; // end of PATTERN_CELL4_2

SPEC_CELL4_2 = unified_fill(
    fill_patterns = PATTERN_CELL4_2,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL4_2_EXTENT"
	},
    }
);

CELL4_2_257_44_C    = SPEC_CELL4_2["OUTPUT_CELL4_2_257_44"][0];
CELL4_2_6_160_C     = SPEC_CELL4_2["OUTPUT_CELL4_2_6_160"][0];
CELL4_2_6_7_C       = SPEC_CELL4_2["OUTPUT_CELL4_2_6_7"][0];
CELL4_2_82_170_C    = SPEC_CELL4_2["OUTPUT_CELL4_2_82_170"][0];
CELL4_2_82_270_C    = SPEC_CELL4_2["OUTPUT_CELL4_2_82_270"][0];
CELL4_2_6_170_C     = SPEC_CELL4_2["OUTPUT_CELL4_2_6_170"][0];
CELL4_2_6_161_C     = SPEC_CELL4_2["OUTPUT_CELL4_2_6_161"][0];
CELL4_2_17_7_C      = SPEC_CELL4_2["OUTPUT_CELL4_2_17_7"][0];
CELL4_2_250_1_C     = SPEC_CELL4_2["OUTPUT_CELL4_2_250_1"][0];
CELL4_2_E           = SPEC_CELL4_2["CELL4_2_EXTENT"][0];



SHAPE_CELL6_1_CAPBOTTOM_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0230 }, { 0.1350, 0.0230 }, { 0.1350, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.9460093896713615 */
SHAPE_CELL6_1_CAPBOTTOM_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0230 }, { 0.1350, 0.0230 }, { 0.1350, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.9460093896713615 */
SHAPE_CELL6_1_CAPBOTTOM_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPBOTTOM_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.3450 }, { 0.1350, 0.3450 }, { 0.1350, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.19014084507042253 */
SHAPE_CELL6_1_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2750 }, { 0.1350, 0.2750 }, { 0.1350, 0.4150 }, { 0.0000, 0.4150 } },
    { { 0.0000, 0.0790 }, { 0.1350, 0.0790 }, { 0.1350, 0.1630 }, { 0.0000, 0.1630 } }
};    /* AREA RATIO = 0.5258215962441315 */
SHAPE_CELL6_1_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1740 }, { 0.1350, 0.1740 }, { 0.1350, 0.2640 }, { 0.0000, 0.2640 } }
};    /* AREA RATIO = 0.2112676056338028 */
SHAPE_CELL6_1_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0140 }, { 0.1350, 0.0140 }, { 0.1350, 0.1180 }, { 0.0000, 0.1180 } }
};    /* AREA RATIO = 0.24413145539906103 */
SHAPE_CELL6_1_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.1200, 0.1130 }, { 0.1350, 0.1130 }, { 0.1350, 0.4260 }, { 0.1200, 0.4260 } },
    { { 0.0000, 0.1130 }, { 0.0150, 0.1130 }, { 0.0150, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.16327595200834638 */
SHAPE_CELL6_1_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0140 }, { 0.1350, 0.0140 }, { 0.1350, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.9671361502347418 */
SHAPE_CELL6_1_CAPBOTTOM_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.3170 }, { 0.1350, 0.3170 }, { 0.1350, 0.3730 }, { 0.0000, 0.3730 } },
    { { 0.0000, 0.0850 }, { 0.1350, 0.0850 }, { 0.1350, 0.1410 }, { 0.0000, 0.1410 } }
};    /* AREA RATIO = 0.26291079812206575 */
SHAPE_CELL6_1_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.0400, 0.0830 }, { 0.0950, 0.0830 }, { 0.0950, 0.4260 }, { 0.0400, 0.4260 } }
};    /* AREA RATIO = 0.3280299078421144 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0230 }, { 0.3185, 0.0230 }, { 0.3185, 0.4260 }, { 0.0225, 0.4260 } }
};    /* AREA RATIO = 0.8791798409504646 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0230 }, { 0.3185, 0.0230 }, { 0.3185, 0.4260 }, { 0.0165, 0.4260 } }
};    /* AREA RATIO = 0.8970010539427038 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_257_201 : list of coordinate_l = { 
    { { 0.0635, 0.3450 }, { 0.3185, 0.3450 }, { 0.3185, 0.4260 }, { 0.0635, 0.4260 } }
};    /* AREA RATIO = 0.1522320737612488 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0450, 0.2750 }, { 0.3185, 0.2750 }, { 0.3185, 0.4150 }, { 0.0450, 0.4150 } },
    { { 0.0450, 0.0790 }, { 0.3185, 0.0790 }, { 0.3185, 0.1630 }, { 0.0450, 0.1630 } }
};    /* AREA RATIO = 0.4515296909663107 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.1740 }, { 0.3185, 0.1740 }, { 0.3185, 0.2640 }, { 0.0885, 0.2640 } }
};    /* AREA RATIO = 0.15256373405266765 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.4260 }, { 0.0885, 0.4260 }, { 0.0885, 0.1180 }, { 0.3185, 0.1180 }, { 0.3185, 0.0140 }, { 0.0015, 0.0140 } }
};    /* AREA RATIO = 0.4404743479190159 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.3035, 0.1130 }, { 0.3185, 0.1130 }, { 0.3185, 0.4260 }, { 0.3035, 0.4260 } },
    { { 0.1685, 0.1130 }, { 0.1985, 0.1130 }, { 0.1985, 0.4260 }, { 0.1685, 0.4260 } },
    { { 0.0335, 0.1130 }, { 0.0635, 0.1130 }, { 0.0635, 0.4260 }, { 0.0335, 0.4260 } }
};    /* AREA RATIO = 0.17301611869016295 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0140 }, { 0.3185, 0.0140 }, { 0.3185, 0.4260 }, { 0.0015, 0.4260 } }
};    /* AREA RATIO = 0.9625813488992564 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_82_270 : list of coordinate_l = { 
    { { 0.1160, 0.3170 }, { 0.3185, 0.3170 }, { 0.3185, 0.3730 }, { 0.1160, 0.3730 } },
    { { 0.1160, 0.0850 }, { 0.3185, 0.0850 }, { 0.3185, 0.1410 }, { 0.1160, 0.1410 } }
};    /* AREA RATIO = 0.16715678687509675 */
SHAPE_CELL6_1_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.2235, 0.0830 }, { 0.2785, 0.0830 }, { 0.2785, 0.4260 }, { 0.2235, 0.4260 } },
    { { 0.0885, 0.0830 }, { 0.1435, 0.0830 }, { 0.1435, 0.4260 }, { 0.0885, 0.4260 } }
};    /* AREA RATIO = 0.27807872878295414 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0230 }, { 0.2960, 0.0230 }, { 0.2960, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.8791798409504646 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0230 }, { 0.3020, 0.0230 }, { 0.3020, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.8970010539427038 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.3450 }, { 0.2550, 0.3450 }, { 0.2550, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.1522320737612488 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.2750 }, { 0.2735, 0.2750 }, { 0.2735, 0.4150 }, { 0.0000, 0.4150 } },
    { { 0.0000, 0.0790 }, { 0.2735, 0.0790 }, { 0.2735, 0.1630 }, { 0.0000, 0.1630 } }
};    /* AREA RATIO = 0.4515296909663107 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1740 }, { 0.2300, 0.1740 }, { 0.2300, 0.2640 }, { 0.0000, 0.2640 } }
};    /* AREA RATIO = 0.15256373405266765 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1180 }, { 0.2300, 0.1180 }, { 0.2300, 0.4260 }, { 0.3170, 0.4260 }, { 0.3170, 0.0140 }, { 0.0000, 0.0140 } }
};    /* AREA RATIO = 0.4404743479190159 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.2550, 0.1130 }, { 0.2850, 0.1130 }, { 0.2850, 0.4260 }, { 0.2550, 0.4260 } },
    { { 0.1200, 0.1130 }, { 0.1500, 0.1130 }, { 0.1500, 0.4260 }, { 0.1200, 0.4260 } },
    { { 0.0000, 0.1130 }, { 0.0150, 0.1130 }, { 0.0150, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.17301611869016295 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0140 }, { 0.3170, 0.0140 }, { 0.3170, 0.4260 }, { 0.0000, 0.4260 } }
};    /* AREA RATIO = 0.9625813488992564 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.3170 }, { 0.2025, 0.3170 }, { 0.2025, 0.3730 }, { 0.0000, 0.3730 } },
    { { 0.0000, 0.0850 }, { 0.2025, 0.0850 }, { 0.2025, 0.1410 }, { 0.0000, 0.1410 } }
};    /* AREA RATIO = 0.16715678687509675 */
SHAPE_CELL6_1_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.1750, 0.0830 }, { 0.2300, 0.0830 }, { 0.2300, 0.4260 }, { 0.1750, 0.4260 } },
    { { 0.0400, 0.0830 }, { 0.0950, 0.0830 }, { 0.0950, 0.4260 }, { 0.0400, 0.4260 } }
};    /* AREA RATIO = 0.27807872878295414 */
SHAPE_CELL6_1_CAPLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0225, 0.0560 } }
};    /* AREA RATIO = 0.9293563579277865 */
SHAPE_CELL6_1_CAPLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0165, 0.0560 } }
};    /* AREA RATIO = 0.9481946624803768 */
SHAPE_CELL6_1_CAPLEFT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0635, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0635, 0.0560 } }
};    /* AREA RATIO = 0.8006279434850864 */
SHAPE_CELL6_1_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0885, 0.0560 } }
};    /* AREA RATIO = 0.7221350078492935 */
SHAPE_CELL6_1_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.0885, 0.0000 }, { 0.0885, 0.0560 }, { 0.0015, 0.0560 } }
};    /* AREA RATIO = 0.2731554160125589 */
SHAPE_CELL6_1_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3035, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.3035, 0.0560 } },
    { { 0.1685, 0.0000 }, { 0.1985, 0.0000 }, { 0.1985, 0.0560 }, { 0.1685, 0.0560 } },
    { { 0.0335, 0.0000 }, { 0.0635, 0.0000 }, { 0.0635, 0.0560 }, { 0.0335, 0.0560 } }
};    /* AREA RATIO = 0.23547880690737832 */
SHAPE_CELL6_1_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0015, 0.0560 } }
};    /* AREA RATIO = 0.9952904238618524 */
SHAPE_CELL6_1_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2235, 0.0000 }, { 0.2785, 0.0000 }, { 0.2785, 0.0560 }, { 0.2235, 0.0560 } },
    { { 0.0885, 0.0000 }, { 0.1435, 0.0000 }, { 0.1435, 0.0560 }, { 0.0885, 0.0560 } }
};    /* AREA RATIO = 0.3453689167974882 */
SHAPE_CELL6_1_CAPRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2960, 0.0000 }, { 0.2960, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.9293563579277865 */
SHAPE_CELL6_1_CAPRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3020, 0.0000 }, { 0.3020, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.9481946624803768 */
SHAPE_CELL6_1_CAPRIGHT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2550, 0.0000 }, { 0.2550, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.8006279434850864 */
SHAPE_CELL6_1_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2300, 0.0000 }, { 0.2300, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.7221350078492935 */
SHAPE_CELL6_1_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.2300, 0.0000 }, { 0.3170, 0.0000 }, { 0.3170, 0.0560 }, { 0.2300, 0.0560 } }
};    /* AREA RATIO = 0.2731554160125589 */
SHAPE_CELL6_1_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.2550, 0.0000 }, { 0.2850, 0.0000 }, { 0.2850, 0.0560 }, { 0.2550, 0.0560 } },
    { { 0.1200, 0.0000 }, { 0.1500, 0.0000 }, { 0.1500, 0.0560 }, { 0.1200, 0.0560 } },
    { { 0.0000, 0.0000 }, { 0.0150, 0.0000 }, { 0.0150, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.23547880690737832 */
SHAPE_CELL6_1_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3170, 0.0000 }, { 0.3170, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.9952904238618524 */
SHAPE_CELL6_1_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.1750, 0.0000 }, { 0.2300, 0.0000 }, { 0.2300, 0.0560 }, { 0.1750, 0.0560 } },
    { { 0.0400, 0.0000 }, { 0.0950, 0.0000 }, { 0.0950, 0.0560 }, { 0.0400, 0.0560 } }
};    /* AREA RATIO = 0.3453689167974882 */
SHAPE_CELL6_1_CAPTOP_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1570 }, { 0.0000, 0.1570 } }
};    /* AREA RATIO = 0.7772277227722773 */
SHAPE_CELL6_1_CAPTOP_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1570 }, { 0.0000, 0.1570 } }
};    /* AREA RATIO = 0.7772277227722773 */
SHAPE_CELL6_1_CAPTOP_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.2020 }, { 0.0000, 0.2020 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPTOP_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1990 }, { 0.0000, 0.1990 } }
};    /* AREA RATIO = 0.9851485148514851 */
SHAPE_CELL6_1_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0450 }, { 0.1350, 0.0450 }, { 0.1350, 0.1290 }, { 0.0000, 0.1290 } }
};    /* AREA RATIO = 0.4158415841584158 */
SHAPE_CELL6_1_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0340 }, { 0.0000, 0.0340 } }
};    /* AREA RATIO = 0.16831683168316833 */
SHAPE_CELL6_1_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0900 }, { 0.1350, 0.0900 }, { 0.1350, 0.1880 }, { 0.0000, 0.1880 } }
};    /* AREA RATIO = 0.48514851485148514 */
SHAPE_CELL6_1_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.1200, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0950 }, { 0.1200, 0.0950 } },
    { { 0.0000, 0.0000 }, { 0.0150, 0.0000 }, { 0.0150, 0.0950 }, { 0.0000, 0.0950 } }
};    /* AREA RATIO = 0.10451045104510451 */
SHAPE_CELL6_1_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.1880 }, { 0.0000, 0.1880 } }
};    /* AREA RATIO = 0.9306930693069307 */
SHAPE_CELL6_1_CAPTOP_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0670 }, { 0.1350, 0.0670 }, { 0.1350, 0.1230 }, { 0.0000, 0.1230 } }
};    /* AREA RATIO = 0.27722772277227725 */
SHAPE_CELL6_1_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0950, 0.0000 }, { 0.0950, 0.1250 }, { 0.0400, 0.1250 } }
};    /* AREA RATIO = 0.2521085441877521 */
SHAPE_CELL6_1_CAPTOPLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.1570 }, { 0.0225, 0.1570 } }
};    /* AREA RATIO = 0.7223215257161509 */
SHAPE_CELL6_1_CAPTOPLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.1570 }, { 0.0165, 0.1570 } }
};    /* AREA RATIO = 0.7369631782644512 */
SHAPE_CELL6_1_CAPTOPLEFT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.2020 }, { 0.0000, 0.2020 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPTOPLEFT_257_201 : list of coordinate_l = { 
    { { 0.0635, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.1990 }, { 0.0635, 0.1990 } }
};    /* AREA RATIO = 0.7887374294729316 */
SHAPE_CELL6_1_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0450, 0.0450 }, { 0.3185, 0.0450 }, { 0.3185, 0.1290 }, { 0.0450, 0.1290 } }
};    /* AREA RATIO = 0.3570884560983571 */
SHAPE_CELL6_1_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0340 }, { 0.0885, 0.0340 } }
};    /* AREA RATIO = 0.12154747656869297 */
SHAPE_CELL6_1_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.1880 }, { 0.3185, 0.1880 }, { 0.3185, 0.0900 }, { 0.0885, 0.0900 }, { 0.0885, 0.0000 }, { 0.0015, 0.0000 } }
};    /* AREA RATIO = 0.6045665791068903 */
SHAPE_CELL6_1_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.3035, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.0950 }, { 0.3035, 0.0950 } },
    { { 0.1685, 0.0000 }, { 0.1985, 0.0000 }, { 0.1985, 0.0950 }, { 0.1685, 0.0950 } },
    { { 0.0335, 0.0000 }, { 0.0635, 0.0000 }, { 0.0635, 0.0950 }, { 0.0335, 0.0950 } }
};    /* AREA RATIO = 0.11074498344653931 */
SHAPE_CELL6_1_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.1880 }, { 0.0015, 0.1880 } }
};    /* AREA RATIO = 0.9263098994357835 */
SHAPE_CELL6_1_CAPTOPLEFT_82_270 : list of coordinate_l = { 
    { { 0.1160, 0.0670 }, { 0.3185, 0.0670 }, { 0.3185, 0.1230 }, { 0.1160, 0.1230 } }
};    /* AREA RATIO = 0.17625938418017625 */
SHAPE_CELL6_1_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.2235, 0.0000 }, { 0.2785, 0.0000 }, { 0.2785, 0.1250 }, { 0.2235, 0.1250 } },
    { { 0.0885, 0.0000 }, { 0.1435, 0.0000 }, { 0.1435, 0.1250 }, { 0.0885, 0.1250 } }
};    /* AREA RATIO = 0.21371838910735658 */
SHAPE_CELL6_1_CAPTOPRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2960, 0.0000 }, { 0.2960, 0.1570 }, { 0.0000, 0.1570 } }
};    /* AREA RATIO = 0.7223215257161509 */
SHAPE_CELL6_1_CAPTOPRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3020, 0.0000 }, { 0.3020, 0.1570 }, { 0.0000, 0.1570 } }
};    /* AREA RATIO = 0.7369631782644512 */
SHAPE_CELL6_1_CAPTOPRIGHT_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3185, 0.0000 }, { 0.3185, 0.2020 }, { 0.0000, 0.2020 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CAPTOPRIGHT_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2550, 0.0000 }, { 0.2550, 0.1990 }, { 0.0000, 0.1990 } }
};    /* AREA RATIO = 0.7887374294729316 */
SHAPE_CELL6_1_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0450 }, { 0.2735, 0.0450 }, { 0.2735, 0.1290 }, { 0.0000, 0.1290 } }
};    /* AREA RATIO = 0.3570884560983571 */
SHAPE_CELL6_1_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2300, 0.0000 }, { 0.2300, 0.0340 }, { 0.0000, 0.0340 } }
};    /* AREA RATIO = 0.12154747656869297 */
SHAPE_CELL6_1_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1880 }, { 0.3170, 0.1880 }, { 0.3170, 0.0000 }, { 0.2300, 0.0000 }, { 0.2300, 0.0900 }, { 0.0000, 0.0900 } }
};    /* AREA RATIO = 0.6045665791068903 */
SHAPE_CELL6_1_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.2550, 0.0000 }, { 0.2850, 0.0000 }, { 0.2850, 0.0950 }, { 0.2550, 0.0950 } },
    { { 0.1200, 0.0000 }, { 0.1500, 0.0000 }, { 0.1500, 0.0950 }, { 0.1200, 0.0950 } },
    { { 0.0000, 0.0000 }, { 0.0150, 0.0000 }, { 0.0150, 0.0950 }, { 0.0000, 0.0950 } }
};    /* AREA RATIO = 0.11074498344653931 */
SHAPE_CELL6_1_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.3170, 0.0000 }, { 0.3170, 0.1880 }, { 0.0000, 0.1880 } }
};    /* AREA RATIO = 0.9263098994357835 */
SHAPE_CELL6_1_CAPTOPRIGHT_82_270 : list of coordinate_l = { 
    { { 0.0000, 0.0670 }, { 0.2025, 0.0670 }, { 0.2025, 0.1230 }, { 0.0000, 0.1230 } }
};    /* AREA RATIO = 0.17625938418017625 */
SHAPE_CELL6_1_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.1750, 0.0000 }, { 0.2300, 0.0000 }, { 0.2300, 0.1250 }, { 0.1750, 0.1250 } },
    { { 0.0400, 0.0000 }, { 0.0950, 0.0000 }, { 0.0950, 0.1250 }, { 0.0400, 0.1250 } }
};    /* AREA RATIO = 0.21371838910735658 */
SHAPE_CELL6_1_CORE_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_257_61 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_257_201 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_82_170 : list of coordinate_l = { 
    { { 0.1200, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.1200, 0.0560 } },
    { { 0.0000, 0.0000 }, { 0.0150, 0.0000 }, { 0.0150, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.2222222222222222 */
SHAPE_CELL6_1_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1350, 0.0000 }, { 0.1350, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_1_CORE_17_7 : list of coordinate_l = { 
    { { 0.0400, 0.0000 }, { 0.0950, 0.0000 }, { 0.0950, 0.0560 }, { 0.0400, 0.0560 } }
};    /* AREA RATIO = 0.4074074074074074 */
#
LAYER_SHAPE_CELL6_1_CORE_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CORE_257_201
};

LAYER_SHAPE_CELL6_1_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CORE_6_7
};

LAYER_SHAPE_CELL6_1_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CORE_6_170
};

LAYER_SHAPE_CELL6_1_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CORE_82_170
};

LAYER_SHAPE_CELL6_1_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CORE_17_7
};

LAYER_SHAPE_CELL6_1_CORE_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CORE_14_0
};

LAYER_SHAPE_CELL6_1_CORE_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CORE_257_61
};

LAYER_SHAPE_CELL6_1_CORE_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CORE_250_2
};

LAYER_SHAPE_CELL6_1_CAPTOP_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_257_201
};

LAYER_SHAPE_CELL6_1_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_6_7
};

LAYER_SHAPE_CELL6_1_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_6_160
};

LAYER_SHAPE_CELL6_1_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_6_161
};

LAYER_SHAPE_CELL6_1_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_6_170
};

LAYER_SHAPE_CELL6_1_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_82_170
};

LAYER_SHAPE_CELL6_1_CAPTOP_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_82_270
};

LAYER_SHAPE_CELL6_1_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_17_7
};

LAYER_SHAPE_CELL6_1_CAPTOP_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_257_61
};

LAYER_SHAPE_CELL6_1_CAPTOP_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_14_0
};

LAYER_SHAPE_CELL6_1_CAPTOP_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPTOP_250_2
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_257_201
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_82_270
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_14_0
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_257_61
};

LAYER_SHAPE_CELL6_1_CAPBOTTOM_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOM_250_2
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_257_201
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_14_0
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_257_61
};

LAYER_SHAPE_CELL6_1_CAPRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPRIGHT_250_2
};

LAYER_SHAPE_CELL6_1_CAPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_257_201
};

LAYER_SHAPE_CELL6_1_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_6_7
};

LAYER_SHAPE_CELL6_1_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_6_161
};

LAYER_SHAPE_CELL6_1_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_82_170
};

LAYER_SHAPE_CELL6_1_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_6_170
};

LAYER_SHAPE_CELL6_1_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_17_7
};

LAYER_SHAPE_CELL6_1_CAPLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_14_0
};

LAYER_SHAPE_CELL6_1_CAPLEFT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_257_61
};

LAYER_SHAPE_CELL6_1_CAPLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPLEFT_250_2
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_257_201
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_82_270
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_14_0
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_257_61
};

LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPTOPRIGHT_250_2
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_257_201
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_82_270
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_14_0
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_257_61
};

LAYER_SHAPE_CELL6_1_CAPTOPLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPTOPLEFT_250_2
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_201
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_270
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_14_0
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_61
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMRIGHT_250_2
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_257_201 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_201"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_257_201
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_160"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_161"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_82_270"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_82_270
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_6_170"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_17_7"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_14_0"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_14_0
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_257_61 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_257_61"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_257_61
};

LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_1_250_2"
    },
    polygons = SHAPE_CELL6_1_CAPBOTTOMLEFT_250_2
};



// DUMMY SPEC : Cell6_1
FSS_CELL6_1 : list of fill_to_signal_spacing_s = {
    { forbiden_area, min_space = 0.2 },
    { forbiden_area2, min_space = 0.1 },

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL6_1_CHIPX, min_space_y = CELL6_1_CHIPY, context = INTERIOR },
    { CHIP_snps, min_space_x = CELL6_1_CHIPX, min_space_y = CELL6_1_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL6_1_IPX, min_space_y = CELL6_1_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_1, min_space_x = CELL6_1_FB1X, min_space_y = CELL6_1_FB1Y, space_extension_x = CELL6_1_FB1X, space_extension_y = CELL6_1_FB1Y },
#   
    { over_size_v( FB_2, CELL6_1_FB2X ), min_space = 0 },
    { over_size_h( FB_2, CELL6_1_FB2Y ), min_space = 0 },
    { corner_size_ext( FB2_CORNER_V, CELL6_1_FB2Y, CELL6_1_FB2X ), min_space = 0 },
    { corner_size_ext( FB2_CORNER_H, CELL6_1_FB2X, CELL6_1_FB2Y ), min_space = 0 },

    { FB_26, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { FB_28, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { FB_29, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { FB_31, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { FB_38, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { FB_36, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { STD_FILLER, min_space_x = CELL6_1_FBOTHERX, min_space_y = CELL6_1_FBOTHERY, space_extension_x = CELL6_1_FBOTHERX, space_extension_y = CELL6_1_FBOTHERY },
    { SRM, min_space_x = CELL6_1_SRAMX, min_space_y = CELL6_1_SRAMY, space_extension_x = CELL6_1_SRAMX, space_extension_y = CELL6_1_SRAMY },
    { SRM_1, min_space_x = CELL6_1_SRAMX, min_space_y = CELL6_1_SRAMY, space_extension_x = CELL6_1_SRAMX, space_extension_y = CELL6_1_SRAMY },
    { SRAMDMY, min_space_x = CELL6_1_SRAMX, min_space_y = CELL6_1_SRAMY, space_extension_x = CELL6_1_SRAMX, space_extension_y = CELL6_1_SRAMY },
    { OD, min_space_x = CELL6_1_ODX, min_space_y = CELL6_1_ODY, space_extension_x = CELL6_1_ODX, space_extension_y = CELL6_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL6_1_ODX, min_space_y = CELL6_1_ODY, space_extension_x = CELL6_1_ODX, space_extension_y = CELL6_1_ODY },
    { COD_H_NT_SR, min_space_x = CELL6_1_CODHX, min_space_y = CELL6_1_CODHY, space_extension_x = CELL6_1_CODHX, space_extension_y = CELL6_1_CODHY },
    { DCOD_H, min_space_x = CELL6_1_CODHX, min_space_y = CELL6_1_CODHY, space_extension_x = CELL6_1_CODHX, space_extension_y = CELL6_1_CODHY },
    { COD_V_NT_SR, min_space_x = CELL6_1_CODVX, min_space_y = CELL6_1_CODVY, space_extension_x = CELL6_1_CODVX, space_extension_y = CELL6_1_CODVY },
    { DCOD_V, min_space_x = CELL6_1_CODVX, min_space_y = CELL6_1_CODVY, space_extension_x = CELL6_1_CODVX, space_extension_y = CELL6_1_CODVY },
    { COD_BLOCK_NT_SR, min_space = CELL6_1_CODBLK },
    { DCOD_BLOCK, min_space = CELL6_1_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL6_1_ODMMBX, min_space_y = CELL6_1_ODMMBY, space_extension_x = CELL6_1_ODMMBX, space_extension_y = CELL6_1_ODMMBY },
    { PO, min_space_x = CELL6_1_POX, min_space_y = CELL6_1_POY, space_extension_x = CELL6_1_POX, space_extension_y = CELL6_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL6_1_SRDPOX, min_space_y = CELL6_1_SRDPOY, space_extension_x = CELL6_1_SRDPOX, space_extension_y = CELL6_1_SRDPOY },
    { PO3, min_space_x = CELL6_1_PO3X, min_space_y = CELL6_1_PO3Y, space_extension_x = CELL6_1_PO3X, space_extension_y = CELL6_1_PO3Y },
    { POLE8, min_space_x = CELL6_1_POLE8X, min_space_y = CELL6_1_POLE8Y, space_extension_x = CELL6_1_POLE8X, space_extension_y = CELL6_1_POLE8Y },
    { PO9, min_space_x = CELL6_1_PO9X, min_space_y = CELL6_1_PO9Y, space_extension_x = CELL6_1_PO9X, space_extension_y = CELL6_1_PO9Y },
    { PO54, min_space_x = CELL6_1_PO54X, min_space_y = CELL6_1_PO54Y, space_extension_x = CELL6_1_PO54X, space_extension_y = CELL6_1_PO54Y },
    { PO86, min_space_x = CELL6_1_PO86X, min_space_y = CELL6_1_PO86Y, space_extension_x = CELL6_1_PO86X, space_extension_y = CELL6_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL6_1_SR_DPO3X, min_space_y = CELL6_1_SR_DPO3Y, space_extension_x = CELL6_1_SR_DPO3X, space_extension_y = CELL6_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL6_1_SR_DPOLE8X, min_space_y = CELL6_1_SR_DPOLE8Y, space_extension_x = CELL6_1_SR_DPOLE8X, space_extension_y = CELL6_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL6_1_SR_DPO9X, min_space_y = CELL6_1_SR_DPO9Y, space_extension_x = CELL6_1_SR_DPO9X, space_extension_y = CELL6_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL6_1_SR_DPO54X, min_space_y = CELL6_1_SR_DPO54Y, space_extension_x = CELL6_1_SR_DPO54X, space_extension_y = CELL6_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL6_1_SR_DPO86X, min_space_y = CELL6_1_SR_DPO86Y, space_extension_x = CELL6_1_SR_DPO86X, space_extension_y = CELL6_1_SR_DPO86Y },
    { PO_P54, min_space = CELL6_1_PO_P54 },
    { PO_P81, min_space = CELL6_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL6_1_PO_P81_WPO },
    { PO_P57, min_space = CELL6_1_PO_P57 },
    { CPO, min_space_x = CELL6_1_CPOX, min_space_y = CELL6_1_CPOY, space_extension_x = CELL6_1_CPOX, space_extension_y = CELL6_1_CPOY },
    { SR_DCPO, min_space_x = CELL6_1_SR_DCPOX, min_space_y = CELL6_1_SR_DCPOY, space_extension_x = CELL6_1_SR_DCPOX, space_extension_y = CELL6_1_SR_DCPOY },
    { CPO20, min_space_x = CELL6_1_CPO20X, min_space_y = CELL6_1_CPO20Y, space_extension_x = CELL6_1_CPO20X, space_extension_y = CELL6_1_CPO20Y },
    { CPO22, min_space_x = CELL6_1_CPO22X, min_space_y = CELL6_1_CPO22Y, space_extension_x = CELL6_1_CPO22X, space_extension_y = CELL6_1_CPO22Y },
    { CPO25, min_space_x = CELL6_1_CPO25X, min_space_y = CELL6_1_CPO25Y, space_extension_x = CELL6_1_CPO25X, space_extension_y = CELL6_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL6_1_SR_DCPO20X, min_space_y = CELL6_1_SR_DCPO20Y, space_extension_x = CELL6_1_SR_DCPO20X, space_extension_y = CELL6_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL6_1_SR_DCPO22X, min_space_y = CELL6_1_SR_DCPO22Y, space_extension_x = CELL6_1_SR_DCPO22X, space_extension_y = CELL6_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL6_1_SR_DCPO25X, min_space_y = CELL6_1_SR_DCPO25Y, space_extension_x = CELL6_1_SR_DCPO25X, space_extension_y = CELL6_1_SR_DCPO25Y },
    { MD, min_space_x = CELL6_1_MDX, min_space_y = CELL6_1_MDY, space_extension_x = CELL6_1_MDX, space_extension_y = CELL6_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL6_1_SRDMDX, min_space_y = CELL6_1_SRDMDY, space_extension_x = CELL6_1_SRDMDX, space_extension_y = CELL6_1_SRDMDY },
    { MD16, min_space_x = CELL6_1_MD16X, min_space_y = CELL6_1_MD16Y, space_extension_x = CELL6_1_MD16X, space_extension_y = CELL6_1_MD16Y },
    { MD30, min_space_x = CELL6_1_MD30X, min_space_y = CELL6_1_MD30Y, space_extension_x = CELL6_1_MD30X, space_extension_y = CELL6_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL6_1_SR_DMD16X, min_space_y = CELL6_1_SR_DMD16Y, space_extension_x = CELL6_1_SR_DMD16X, space_extension_y = CELL6_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL6_1_SR_DMD30X, min_space_y = CELL6_1_SR_DMD30Y, space_extension_x = CELL6_1_SR_DMD30X, space_extension_y = CELL6_1_SR_DMD30Y },
    { CMD, min_space_x = CELL6_1_CMDX, min_space_y = CELL6_1_CMDY, space_extension_x = CELL6_1_CMDX, space_extension_y = CELL6_1_CMDY },
    { SR_DCMD_NT_SR, min_space_x = CELL6_1_SR_DCMDX, min_space_y = CELL6_1_SR_DCMDY, space_extension_x = CELL6_1_SR_DCMDX, space_extension_y = CELL6_1_SR_DCMDY },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL6_1_NW_CENTERLINE },
    { NT_N, min_space = CELL6_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL6_1_OD2X, min_space_y = CELL6_1_OD2Y, context = INTERIOR },
    { NWDMY, min_space = CELL6_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL6_1_DIODMY, context = EXTERIOR_INTERIOR },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { DC1, min_space_x = CELL6_1_CELL1X, min_space_y = CELL6_1_CELL1Y, space_extension_x = CELL6_1_CELL1X, space_extension_y = CELL6_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL6_1_CELL2_1X, min_space_y = CELL6_1_CELL2_1Y, space_extension_x = CELL6_1_CELL2_1X, space_extension_y = CELL6_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL6_1_CELL2_2X, min_space_y = CELL6_1_CELL2_2Y, space_extension_x = CELL6_1_CELL2_2X, space_extension_y = CELL6_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL6_1_CELL2_3X, min_space_y = CELL6_1_CELL2_3Y, space_extension_x = CELL6_1_CELL2_3X, space_extension_y = CELL6_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL6_1_CELL4_1X, min_space_y = CELL6_1_CELL4_1Y, space_extension_x = CELL6_1_CELL4_1X, space_extension_y = CELL6_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL6_1_CELL4_2X, min_space_y = CELL6_1_CELL4_2Y, space_extension_x = CELL6_1_CELL4_2X, space_extension_y = CELL6_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL6_1_CELL5_1X, min_space_y = CELL6_1_CELL5_1Y, space_extension_x = CELL6_1_CELL5_1X, space_extension_y = CELL6_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL6_1_CELL5_2X, min_space_y = CELL6_1_CELL5_2Y, space_extension_x = CELL6_1_CELL5_2X, space_extension_y = CELL6_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL6_1_CELL6_1X, min_space_y = CELL6_1_CELL6_1Y, space_extension_x = CELL6_1_CELL6_1X, space_extension_y = CELL6_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL6_1_CELL6_2X, min_space_y = CELL6_1_CELL6_2Y, space_extension_x = CELL6_1_CELL6_2X, space_extension_y = CELL6_1_CELL6_2Y },
    { DC7, min_space_x = CELL6_1_CELL7X, min_space_y = CELL6_1_CELL7Y, space_extension_x = CELL6_1_CELL7X, space_extension_y = CELL6_1_CELL7Y },
    { DC8_1, min_space_x = CELL6_1_CELL8_1X, min_space_y = CELL6_1_CELL8_1Y, space_extension_x = CELL6_1_CELL8_1X, space_extension_y = CELL6_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL6_1_CELL8_2X, min_space_y = CELL6_1_CELL8_2Y, space_extension_x = CELL6_1_CELL8_2X, space_extension_y = CELL6_1_CELL8_2Y },
    
#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL6_1_CELL4_1X, min_space_y = CELL6_1_CELL4_1Y, space_extension_x = CELL6_1_CELL4_1X, space_extension_y = CELL6_1_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL6_1_CELL4_2X, min_space_y = CELL6_1_CELL4_2Y, space_extension_x = CELL6_1_CELL4_2X, space_extension_y = CELL6_1_CELL4_2Y },
    { CELL1_E, min_space_x = CELL6_1_CELL1X, min_space_y = CELL6_1_CELL1Y, space_extension_x = CELL6_1_CELL1X, space_extension_y = CELL6_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL6_1_CELL2_1X, min_space_y = CELL6_1_CELL2_1Y, space_extension_x = CELL6_1_CELL2_1X, space_extension_y = CELL6_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL6_1_CELL2_2X, min_space_y = CELL6_1_CELL2_2Y, space_extension_x = CELL6_1_CELL2_2X, space_extension_y = CELL6_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL6_1_CELL2_3X, min_space_y = CELL6_1_CELL2_3Y, space_extension_x = CELL6_1_CELL2_3X, space_extension_y = CELL6_1_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL6_1_CELL4_1X, min_space_y = CELL6_1_CELL4_1Y, space_extension_x = CELL6_1_CELL4_1X, space_extension_y = CELL6_1_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL6_1_CELL4_2X, min_space_y = CELL6_1_CELL4_2Y, space_extension_x = CELL6_1_CELL4_2X, space_extension_y = CELL6_1_CELL4_2Y },
    { OD2_WPO_BLOCK, min_space = 0 },
}; // end of FSS_CELL6_1
//=========================================================================================

BASE_CELL6_1_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_82_270,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPTOPLEFT_250_2,
    },
    repeatable = false
};
BASE_CELL6_1_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPTOP_257_201,
	    LAYER_SHAPE_CELL6_1_CAPTOP_6_7,
	    LAYER_SHAPE_CELL6_1_CAPTOP_6_160,
	    LAYER_SHAPE_CELL6_1_CAPTOP_6_161,
	    LAYER_SHAPE_CELL6_1_CAPTOP_6_170,
	    LAYER_SHAPE_CELL6_1_CAPTOP_82_170,
	    LAYER_SHAPE_CELL6_1_CAPTOP_82_270,
	    LAYER_SHAPE_CELL6_1_CAPTOP_17_7,
	    LAYER_SHAPE_CELL6_1_CAPTOP_257_61,
	    LAYER_SHAPE_CELL6_1_CAPTOP_14_0,
	    LAYER_SHAPE_CELL6_1_CAPTOP_250_2,
    },
    repeatable = true,
};
BASE_CELL6_1_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_82_270,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPTOPRIGHT_250_2,
    },
    repeatable = false
};
BASE_CELL6_1_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPLEFT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPLEFT_250_2,
    },
    repeatable = true,
};
BASE_CELL6_1_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CORE_257_201,
	    LAYER_SHAPE_CELL6_1_CORE_6_7,
	    LAYER_SHAPE_CELL6_1_CORE_6_170,
	    LAYER_SHAPE_CELL6_1_CORE_82_170,
	    LAYER_SHAPE_CELL6_1_CORE_17_7,
	    LAYER_SHAPE_CELL6_1_CORE_14_0,
	    LAYER_SHAPE_CELL6_1_CORE_257_61,
	    LAYER_SHAPE_CELL6_1_CORE_250_2,
    },
    repeatable = true,
};
BASE_CELL6_1_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPRIGHT_250_2,
    },
    repeatable = true,
};
BASE_CELL6_1_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_82_270,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMLEFT_250_2,
    },
    repeatable = false
};
BASE_CELL6_1_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_257_201,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_82_270,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_14_0,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_257_61,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOM_250_2,
    },
    repeatable = true,
};
BASE_CELL6_1_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_201,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_82_270,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_14_0,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_257_61,
	    LAYER_SHAPE_CELL6_1_CAPBOTTOMRIGHT_250_2,
    },
    repeatable = false
};

OD2_new = OD2;
OD2_new = copy(PRBOUNDARY, predicate = [[!OD2]]);
PATTERN_CELL6_1 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.045,
		space_y = 0.044,
	    },
	    base_cell = {
		BASE_CELL6_1_4,
		BASE_CELL6_1_5,
		BASE_CELL6_1_6,
	    },
	    base_cell_top = {
		BASE_CELL6_1_1,
		BASE_CELL6_1_2,
		BASE_CELL6_1_3,
	    },
	    base_cell_bottom = {
		BASE_CELL6_1_7,
		BASE_CELL6_1_8,
		BASE_CELL6_1_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER_FB2, east = 0 , south = 0.022  ),
		x = vGRID,
		y = 0.028,
	    },
	    cell_prefix = "CELL6_1",
	    fill_to_signal_spacing = FSS_CELL6_1,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=11}},
#ifndef FULL_CHIP
        boundary_alignment = { inside = { OD2_new, {0.4, 0.4, 0.4, 0.4} } },
#else
        boundary_alignment = { inside = { OD2, {0.4, 0.4, 0.4, 0.4} } },
#endif         
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif        
               
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,        
	}
    },
}; // end of PATTERN_CELL6_1

SPEC_CELL6_1 = unified_fill(
    fill_patterns = PATTERN_CELL6_1,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL6_1_EXTENT"
	},
    }
);

CELL6_1_257_201_C    = SPEC_CELL6_1["OUTPUT_CELL6_1_257_201"][0];
CELL6_1_257_61_C    = SPEC_CELL6_1["OUTPUT_CELL6_1_257_61"][0];
CELL6_1_14_0_C      = SPEC_CELL6_1["OUTPUT_CELL6_1_14_0"][0];
CELL6_1_250_2_C     = SPEC_CELL6_1["OUTPUT_CELL6_1_250_2"][0];
CELL6_1_6_160_C     = SPEC_CELL6_1["OUTPUT_CELL6_1_6_160"][0];
CELL6_1_6_7_C       = SPEC_CELL6_1["OUTPUT_CELL6_1_6_7"][0];
CELL6_1_82_170_C    = SPEC_CELL6_1["OUTPUT_CELL6_1_82_170"][0];
CELL6_1_6_170_C     = SPEC_CELL6_1["OUTPUT_CELL6_1_6_170"][0];
CELL6_1_6_161_C     = SPEC_CELL6_1["OUTPUT_CELL6_1_6_161"][0];
CELL6_1_82_270_C    = SPEC_CELL6_1["OUTPUT_CELL6_1_82_270"][0];
CELL6_1_17_7_C      = SPEC_CELL6_1["OUTPUT_CELL6_1_17_7"][0];
CELL6_1_E           = SPEC_CELL6_1["CELL6_1_EXTENT"][0];



SHAPE_CELL6_2_CAPBOTTOM_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1700, 0.0410 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.7734806629834254 */
SHAPE_CELL6_2_CAPBOTTOM_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1700, 0.0410 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.7734806629834254 */
SHAPE_CELL6_2_CAPBOTTOM_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1700, 0.0410 }, { 0.1700, 0.1250 }, { 0.0000, 0.1250 } }
};    /* AREA RATIO = 0.46408839779005523 */
SHAPE_CELL6_2_CAPBOTTOM_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1360 }, { 0.1700, 0.1360 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.24861878453038674 */
SHAPE_CELL6_2_CAPBOTTOM_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPBOTTOM_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.1700, 0.0030 }, { 0.1700, 0.0830 }, { 0.0000, 0.0830 } }
};    /* AREA RATIO = 0.4419889502762431 */
SHAPE_CELL6_2_CAPBOTTOM_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0750 }, { 0.1000, 0.0750 }, { 0.1000, 0.1810 }, { 0.0700, 0.1810 } }
};    /* AREA RATIO = 0.10334741631459214 */
SHAPE_CELL6_2_CAPBOTTOM_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.1700, 0.0030 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.9834254143646409 */
SHAPE_CELL6_2_CAPBOTTOM_17_7 : list of coordinate_l = { 
    { { 0.1270, 0.0450 }, { 0.1700, 0.0450 }, { 0.1700, 0.1810 }, { 0.1270, 0.1810 } },
    { { 0.0000, 0.0450 }, { 0.0430, 0.0450 }, { 0.0430, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.38011049723756907 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0410 }, { 0.1315, 0.0410 }, { 0.1315, 0.1810 }, { 0.0225, 0.1810 } }
};    /* AREA RATIO = 0.6411360628531815 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0410 }, { 0.1315, 0.0410 }, { 0.1315, 0.1810 }, { 0.0165, 0.1810 } }
};    /* AREA RATIO = 0.6764279562212465 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_6_160 : list of coordinate_l = { 
    { { 0.0450, 0.0410 }, { 0.1315, 0.0410 }, { 0.1315, 0.1250 }, { 0.0450, 0.1250 } }
};    /* AREA RATIO = 0.3052748776337626 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.1360 }, { 0.1315, 0.1360 }, { 0.1315, 0.1810 }, { 0.0885, 0.1810 } }
};    /* AREA RATIO = 0.08129739722286411 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.1810 }, { 0.0885, 0.1810 }, { 0.0885, 0.0830 }, { 0.1315, 0.0830 }, { 0.1315, 0.0030 }, { 0.0015, 0.0030 } }
};    /* AREA RATIO = 0.7951599689095226 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_82_170 : list of coordinate_l = { 
    { { 0.0315, 0.0750 }, { 0.0615, 0.0750 }, { 0.0615, 0.1810 }, { 0.0315, 0.1810 } }
};    /* AREA RATIO = 0.13360502489338907 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0030 }, { 0.1315, 0.0030 }, { 0.1315, 0.1810 }, { 0.0015, 0.1810 } }
};    /* AREA RATIO = 0.9722076339726488 */
SHAPE_CELL6_2_CAPBOTTOMLEFT_17_7 : list of coordinate_l = { 
    { { 0.0885, 0.0450 }, { 0.1315, 0.0450 }, { 0.1315, 0.1810 }, { 0.0885, 0.1810 } }
};    /* AREA RATIO = 0.24569880049576706 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1090, 0.0410 }, { 0.1090, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.6411360628531815 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.1150, 0.0410 }, { 0.1150, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.6764279562212465 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0410 }, { 0.0865, 0.0410 }, { 0.0865, 0.1250 }, { 0.0000, 0.1250 } }
};    /* AREA RATIO = 0.3052748776337626 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.1360 }, { 0.0430, 0.1360 }, { 0.0430, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.08129739722286411 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0830 }, { 0.0430, 0.0830 }, { 0.0430, 0.1810 }, { 0.1300, 0.1810 }, { 0.1300, 0.0030 }, { 0.0000, 0.0030 } }
};    /* AREA RATIO = 0.7951599689095226 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0750 }, { 0.1000, 0.0750 }, { 0.1000, 0.1810 }, { 0.0700, 0.1810 } }
};    /* AREA RATIO = 0.13360502489338907 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0030 }, { 0.1300, 0.0030 }, { 0.1300, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.9722076339726488 */
SHAPE_CELL6_2_CAPBOTTOMRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0450 }, { 0.0430, 0.0450 }, { 0.0430, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 0.24569880049576706 */
SHAPE_CELL6_2_CAPLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0225, 0.0560 } }
};    /* AREA RATIO = 0.8288973384030418 */
SHAPE_CELL6_2_CAPLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0165, 0.0560 } }
};    /* AREA RATIO = 0.8745247148288974 */
SHAPE_CELL6_2_CAPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0885, 0.0560 } }
};    /* AREA RATIO = 0.3269961977186312 */
SHAPE_CELL6_2_CAPLEFT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.0885, 0.0000 }, { 0.0885, 0.0560 }, { 0.0015, 0.0560 } }
};    /* AREA RATIO = 0.6615969581749049 */
SHAPE_CELL6_2_CAPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0315, 0.0000 }, { 0.0615, 0.0000 }, { 0.0615, 0.0560 }, { 0.0315, 0.0560 } }
};    /* AREA RATIO = 0.22813688212927757 */
SHAPE_CELL6_2_CAPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0015, 0.0560 } }
};    /* AREA RATIO = 0.9885931558935361 */
SHAPE_CELL6_2_CAPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0885, 0.0560 } }
};    /* AREA RATIO = 0.3269961977186312 */
SHAPE_CELL6_2_CAPRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1090, 0.0000 }, { 0.1090, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.8288973384030418 */
SHAPE_CELL6_2_CAPRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1150, 0.0000 }, { 0.1150, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.8745247148288974 */
SHAPE_CELL6_2_CAPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.3269961977186312 */
SHAPE_CELL6_2_CAPRIGHT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0430, 0.0000 }, { 0.1300, 0.0000 }, { 0.1300, 0.0560 }, { 0.0430, 0.0560 } }
};    /* AREA RATIO = 0.6615969581749049 */
SHAPE_CELL6_2_CAPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0000 }, { 0.1000, 0.0000 }, { 0.1000, 0.0560 }, { 0.0700, 0.0560 } }
};    /* AREA RATIO = 0.22813688212927757 */
SHAPE_CELL6_2_CAPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1300, 0.0000 }, { 0.1300, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.9885931558935361 */
SHAPE_CELL6_2_CAPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.3269961977186312 */
SHAPE_CELL6_2_CAPTOP_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.7734806629834254 */
SHAPE_CELL6_2_CAPTOP_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.7734806629834254 */
SHAPE_CELL6_2_CAPTOP_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0560 }, { 0.1700, 0.0560 }, { 0.1700, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.46408839779005523 */
SHAPE_CELL6_2_CAPTOP_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0450 }, { 0.0000, 0.0450 } }
};    /* AREA RATIO = 0.24861878453038674 */
SHAPE_CELL6_2_CAPTOP_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPTOP_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.0980 }, { 0.1700, 0.0980 }, { 0.1700, 0.1780 }, { 0.0000, 0.1780 } }
};    /* AREA RATIO = 0.4419889502762431 */
SHAPE_CELL6_2_CAPTOP_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0000 }, { 0.1000, 0.0000 }, { 0.1000, 0.1060 }, { 0.0700, 0.1060 } }
};    /* AREA RATIO = 0.10334741631459214 */
SHAPE_CELL6_2_CAPTOP_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1780 }, { 0.0000, 0.1780 } }
};    /* AREA RATIO = 0.9834254143646409 */
SHAPE_CELL6_2_CAPTOP_17_7 : list of coordinate_l = { 
    { { 0.1270, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.1360 }, { 0.1270, 0.1360 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 0.38011049723756907 */
SHAPE_CELL6_2_CAPTOPLEFT_250_2 : list of coordinate_l = { 
    { { 0.0225, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1400 }, { 0.0225, 0.1400 } }
};    /* AREA RATIO = 0.6411360628531815 */
SHAPE_CELL6_2_CAPTOPLEFT_14_0 : list of coordinate_l = { 
    { { 0.0165, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1400 }, { 0.0165, 0.1400 } }
};    /* AREA RATIO = 0.6764279562212465 */
SHAPE_CELL6_2_CAPTOPLEFT_6_160 : list of coordinate_l = { 
    { { 0.0450, 0.0560 }, { 0.1315, 0.0560 }, { 0.1315, 0.1400 }, { 0.0450, 0.1400 } }
};    /* AREA RATIO = 0.3052748776337626 */
SHAPE_CELL6_2_CAPTOPLEFT_6_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.0450 }, { 0.0885, 0.0450 } }
};    /* AREA RATIO = 0.08129739722286411 */
SHAPE_CELL6_2_CAPTOPLEFT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPTOPLEFT_6_161 : list of coordinate_l = { 
    { { 0.0015, 0.1780 }, { 0.1315, 0.1780 }, { 0.1315, 0.0980 }, { 0.0885, 0.0980 }, { 0.0885, 0.0000 }, { 0.0015, 0.0000 } }
};    /* AREA RATIO = 0.7951599689095226 */
SHAPE_CELL6_2_CAPTOPLEFT_82_170 : list of coordinate_l = { 
    { { 0.0315, 0.0000 }, { 0.0615, 0.0000 }, { 0.0615, 0.1060 }, { 0.0315, 0.1060 } }
};    /* AREA RATIO = 0.13360502489338907 */
SHAPE_CELL6_2_CAPTOPLEFT_6_170 : list of coordinate_l = { 
    { { 0.0015, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1780 }, { 0.0015, 0.1780 } }
};    /* AREA RATIO = 0.9722076339726488 */
SHAPE_CELL6_2_CAPTOPLEFT_17_7 : list of coordinate_l = { 
    { { 0.0885, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1360 }, { 0.0885, 0.1360 } }
};    /* AREA RATIO = 0.24569880049576706 */
SHAPE_CELL6_2_CAPTOPRIGHT_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1090, 0.0000 }, { 0.1090, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.6411360628531815 */
SHAPE_CELL6_2_CAPTOPRIGHT_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1150, 0.0000 }, { 0.1150, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.6764279562212465 */
SHAPE_CELL6_2_CAPTOPRIGHT_6_160 : list of coordinate_l = { 
    { { 0.0000, 0.0560 }, { 0.0865, 0.0560 }, { 0.0865, 0.1400 }, { 0.0000, 0.1400 } }
};    /* AREA RATIO = 0.3052748776337626 */
SHAPE_CELL6_2_CAPTOPRIGHT_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0450 }, { 0.0000, 0.0450 } }
};    /* AREA RATIO = 0.08129739722286411 */
SHAPE_CELL6_2_CAPTOPRIGHT_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1315, 0.0000 }, { 0.1315, 0.1810 }, { 0.0000, 0.1810 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CAPTOPRIGHT_6_161 : list of coordinate_l = { 
    { { 0.0000, 0.1780 }, { 0.1300, 0.1780 }, { 0.1300, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0980 }, { 0.0000, 0.0980 } }
};    /* AREA RATIO = 0.7951599689095226 */
SHAPE_CELL6_2_CAPTOPRIGHT_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0000 }, { 0.1000, 0.0000 }, { 0.1000, 0.1060 }, { 0.0700, 0.1060 } }
};    /* AREA RATIO = 0.13360502489338907 */
SHAPE_CELL6_2_CAPTOPRIGHT_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1300, 0.0000 }, { 0.1300, 0.1780 }, { 0.0000, 0.1780 } }
};    /* AREA RATIO = 0.9722076339726488 */
SHAPE_CELL6_2_CAPTOPRIGHT_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.1360 }, { 0.0000, 0.1360 } }
};    /* AREA RATIO = 0.24569880049576706 */
SHAPE_CELL6_2_CORE_250_2 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CORE_14_0 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CORE_6_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CORE_257_62 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CORE_82_170 : list of coordinate_l = { 
    { { 0.0700, 0.0000 }, { 0.1000, 0.0000 }, { 0.1000, 0.0560 }, { 0.0700, 0.0560 } }
};    /* AREA RATIO = 0.17647058823529413 */
SHAPE_CELL6_2_CORE_6_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL6_2_CORE_17_7 : list of coordinate_l = { 
    { { 0.1270, 0.0000 }, { 0.1700, 0.0000 }, { 0.1700, 0.0560 }, { 0.1270, 0.0560 } },
    { { 0.0000, 0.0000 }, { 0.0430, 0.0000 }, { 0.0430, 0.0560 }, { 0.0000, 0.0560 } }
};    /* AREA RATIO = 0.5058823529411764 */

LAYER_SHAPE_CELL6_2_CORE_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CORE_6_7
};

LAYER_SHAPE_CELL6_2_CORE_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CORE_6_170
};

LAYER_SHAPE_CELL6_2_CORE_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CORE_82_170
};

LAYER_SHAPE_CELL6_2_CORE_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CORE_17_7
};

LAYER_SHAPE_CELL6_2_CORE_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CORE_14_0
};

LAYER_SHAPE_CELL6_2_CORE_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CORE_257_62
};

LAYER_SHAPE_CELL6_2_CORE_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CORE_250_2
};

LAYER_SHAPE_CELL6_2_CAPTOP_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_6_7
};

LAYER_SHAPE_CELL6_2_CAPTOP_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_6_160
};

LAYER_SHAPE_CELL6_2_CAPTOP_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_6_161
};

LAYER_SHAPE_CELL6_2_CAPTOP_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_6_170
};

LAYER_SHAPE_CELL6_2_CAPTOP_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_82_170
};

LAYER_SHAPE_CELL6_2_CAPTOP_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_17_7
};

LAYER_SHAPE_CELL6_2_CAPTOP_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_257_62
};

LAYER_SHAPE_CELL6_2_CAPTOP_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_14_0
};

LAYER_SHAPE_CELL6_2_CAPTOP_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPTOP_250_2
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_6_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_6_160
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_6_161
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_6_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_82_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_17_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_14_0
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_257_62
};

LAYER_SHAPE_CELL6_2_CAPBOTTOM_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOM_250_2
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_6_7
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_6_161
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_6_170
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_82_170
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_17_7
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_14_0
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_257_62
};

LAYER_SHAPE_CELL6_2_CAPRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPRIGHT_250_2
};

LAYER_SHAPE_CELL6_2_CAPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_6_7
};

LAYER_SHAPE_CELL6_2_CAPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_6_161
};

LAYER_SHAPE_CELL6_2_CAPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_6_170
};

LAYER_SHAPE_CELL6_2_CAPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_82_170
};

LAYER_SHAPE_CELL6_2_CAPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_17_7
};

LAYER_SHAPE_CELL6_2_CAPLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_14_0
};

LAYER_SHAPE_CELL6_2_CAPLEFT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_257_62
};

LAYER_SHAPE_CELL6_2_CAPLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPLEFT_250_2
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_6_7
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_6_160
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_6_161
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_6_170
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_82_170
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_17_7
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_14_0
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_257_62
};

LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPTOPRIGHT_250_2
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_6_7
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_6_160
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_6_161
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_6_170
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_82_170
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_17_7
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_14_0
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_257_62
};

LAYER_SHAPE_CELL6_2_CAPTOPLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPTOPLEFT_250_2
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_160
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_161
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_82_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_17_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_14_0
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_257_62
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMRIGHT_250_2
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_6_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_160 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_160"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_6_160
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_161 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_161"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_6_161
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_6_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_6_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_82_170"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_82_170
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_17_7"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_17_7
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_14_0 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_14_0"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_14_0
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_257_62 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_257_62"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_257_62
};

LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_250_2 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL6_2_250_2"
    },
    polygons = SHAPE_CELL6_2_CAPBOTTOMLEFT_250_2
};




// DUMMY SPEC : Cell6_2
FSS_CELL6_2 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL6_2_CHIPX, min_space_y = CELL6_2_CHIPY, context = INTERIOR },
    { CHIP_snps, min_space_x = CELL6_2_CHIPX, min_space_y = CELL6_2_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL6_2_IPX, min_space_y = CELL6_2_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space = CELL_FEOLBLK },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_1, min_space_x = CELL6_2_FB1X, min_space_y = CELL6_2_FB1Y, space_extension_x = CELL6_2_FB1X, space_extension_y = CELL6_2_FB1Y },
    { over_size_v( FB_2, CELL6_2_FB2X ), min_space = 0 },
    { over_size_h( FB_2, CELL6_2_FB2Y ), min_space = 0 },
    { corner_size_ext( FB2_CORNER_V, CELL6_2_FB2Y, CELL6_2_FB2X ), min_space = 0 },
    { corner_size_ext( FB2_CORNER_H, CELL6_2_FB2X, CELL6_2_FB2Y ), min_space = 0 },
    { FB_26, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { FB_28, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { FB_29, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { FB_31, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { FB_38, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { FB_36, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { STD_FILLER, min_space_x = CELL6_2_FBOTHERX, min_space_y = CELL6_2_FBOTHERY, space_extension_x = CELL6_2_FBOTHERX, space_extension_y = CELL6_2_FBOTHERY },
    { SRM, min_space_x = CELL6_2_SRAMX, min_space_y = CELL6_2_SRAMY, space_extension_x = CELL6_2_SRAMX, space_extension_y = CELL6_2_SRAMY },
    { SRM_1, min_space_x = CELL6_2_SRAMX, min_space_y = CELL6_2_SRAMY, space_extension_x = CELL6_2_SRAMX, space_extension_y = CELL6_2_SRAMY },
    { SRAMDMY, min_space_x = CELL6_2_SRAMX, min_space_y = CELL6_2_SRAMY, space_extension_x = CELL6_2_SRAMX, space_extension_y = CELL6_2_SRAMY },
    { OD, min_space_x = CELL6_2_ODX, min_space_y = CELL6_2_ODY, space_extension_x = CELL6_2_ODX, space_extension_y = CELL6_2_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL6_2_ODX, min_space_y = CELL6_2_ODY, space_extension_x = CELL6_2_ODX, space_extension_y = CELL6_2_ODY },
    { COD_H_NT_SR, min_space_x = CELL6_2_CODHX, min_space_y = CELL6_2_CODHY, space_extension_x = CELL6_2_CODHX, space_extension_y = CELL6_2_CODHY },
    { DCOD_H, min_space_x = CELL6_2_CODHX, min_space_y = CELL6_2_CODHY, space_extension_x = CELL6_2_CODHX, space_extension_y = CELL6_2_CODHY },
    { COD_V_NT_SR, min_space_x = CELL6_2_CODVX, min_space_y = CELL6_2_CODVY, space_extension_x = CELL6_2_CODVX, space_extension_y = CELL6_2_CODVY },
    { DCOD_V, min_space_x = CELL6_2_CODVX, min_space_y = CELL6_2_CODVY, space_extension_x = CELL6_2_CODVX, space_extension_y = CELL6_2_CODVY },
    { COD_BLOCK_NT_SR, min_space = CELL6_2_CODBLK },
    { DCOD_BLOCK, min_space = CELL6_2_CODBLK },
    { ODMMB_NT_SR, min_space_x = CELL6_2_ODMMBX, min_space_y = CELL6_2_ODMMBY, space_extension_x = CELL6_2_ODMMBX, space_extension_y = CELL6_2_ODMMBY },
    { PO, min_space_x = CELL6_2_POX, min_space_y = CELL6_2_POY, space_extension_x = CELL6_2_POX, space_extension_y = CELL6_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL6_2_SRDPOX, min_space_y = CELL6_2_SRDPOY, space_extension_x = CELL6_2_SRDPOX, space_extension_y = CELL6_2_SRDPOY },
    { PO3, min_space_x = CELL6_2_PO3X, min_space_y = CELL6_2_PO3Y, space_extension_x = CELL6_2_PO3X, space_extension_y = CELL6_2_PO3Y },
    { POLE8, min_space_x = CELL6_2_POLE8X, min_space_y = CELL6_2_POLE8Y, space_extension_x = CELL6_2_POLE8X, space_extension_y = CELL6_2_POLE8Y },
    { PO9, min_space_x = CELL6_2_PO9X, min_space_y = CELL6_2_PO9Y, space_extension_x = CELL6_2_PO9X, space_extension_y = CELL6_2_PO9Y },
    { PO54, min_space_x = CELL6_2_PO54X, min_space_y = CELL6_2_PO54Y, space_extension_x = CELL6_2_PO54X, space_extension_y = CELL6_2_PO54Y },
    { PO86, min_space_x = CELL6_2_PO86X, min_space_y = CELL6_2_PO86Y, space_extension_x = CELL6_2_PO86X, space_extension_y = CELL6_2_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL6_2_SR_DPO3X, min_space_y = CELL6_2_SR_DPO3Y, space_extension_x = CELL6_2_SR_DPO3X, space_extension_y = CELL6_2_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL6_2_SR_DPOLE8X, min_space_y = CELL6_2_SR_DPOLE8Y, space_extension_x = CELL6_2_SR_DPOLE8X, space_extension_y = CELL6_2_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL6_2_SR_DPO9X, min_space_y = CELL6_2_SR_DPO9Y, space_extension_x = CELL6_2_SR_DPO9X, space_extension_y = CELL6_2_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL6_2_SR_DPO54X, min_space_y = CELL6_2_SR_DPO54Y, space_extension_x = CELL6_2_SR_DPO54X, space_extension_y = CELL6_2_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL6_2_SR_DPO86X, min_space_y = CELL6_2_SR_DPO86Y, space_extension_x = CELL6_2_SR_DPO86X, space_extension_y = CELL6_2_SR_DPO86Y },
    { CPO, min_space_x = CELL6_2_CPOX, min_space_y = CELL6_2_CPOY, space_extension_x = CELL6_2_CPOX, space_extension_y = CELL6_2_CPOY },
    { SR_DCPO, min_space_x = CELL6_2_SR_DCPOX, min_space_y = CELL6_2_SR_DCPOY, space_extension_x = CELL6_2_SR_DCPOX, space_extension_y = CELL6_2_SR_DCPOY },
    { CPO20, min_space_x = CELL6_2_CPO20X, min_space_y = CELL6_2_CPO20Y, space_extension_x = CELL6_2_CPO20X, space_extension_y = CELL6_2_CPO20Y },
    { CPO22, min_space_x = CELL6_2_CPO22X, min_space_y = CELL6_2_CPO22Y, space_extension_x = CELL6_2_CPO22X, space_extension_y = CELL6_2_CPO22Y },
    { CPO25, min_space_x = CELL6_2_CPO25X, min_space_y = CELL6_2_CPO25Y, space_extension_x = CELL6_2_CPO25X, space_extension_y = CELL6_2_CPO25Y },
    { SR_DCPO20, min_space_x = CELL6_2_SR_DCPO20X, min_space_y = CELL6_2_SR_DCPO20Y, space_extension_x = CELL6_2_SR_DCPO20X, space_extension_y = CELL6_2_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL6_2_SR_DCPO22X, min_space_y = CELL6_2_SR_DCPO22Y, space_extension_x = CELL6_2_SR_DCPO22X, space_extension_y = CELL6_2_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL6_2_SR_DCPO25X, min_space_y = CELL6_2_SR_DCPO25Y, space_extension_x = CELL6_2_SR_DCPO25X, space_extension_y = CELL6_2_SR_DCPO25Y },
    { PO_P54, min_space = CELL6_2_PO_P54 },
    { PO_P81, min_space = CELL6_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL6_2_PO_P81_WPO },
    { PO_P57, min_space = CELL6_2_PO_P57 },
    { MD, min_space_x = CELL6_2_MDX, min_space_y = CELL6_2_MDY, space_extension_x = CELL6_2_MDX, space_extension_y = CELL6_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL6_2_SRDMDX, min_space_y = CELL6_2_SRDMDY, space_extension_x = CELL6_2_SRDMDX, space_extension_y = CELL6_2_SRDMDY },
    { MD16, min_space_x = CELL6_2_MD16X, min_space_y = CELL6_2_MD16Y, space_extension_x = CELL6_2_MD16X, space_extension_y = CELL6_2_MD16Y },
    { MD30, min_space_x = CELL6_2_MD30X, min_space_y = CELL6_2_MD30Y, space_extension_x = CELL6_2_MD30X, space_extension_y = CELL6_2_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL6_2_SR_DMD16X, min_space_y = CELL6_2_SR_DMD16Y, space_extension_x = CELL6_2_SR_DMD16X, space_extension_y = CELL6_2_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL6_2_SR_DMD30X, min_space_y = CELL6_2_SR_DMD30Y, space_extension_x = CELL6_2_SR_DMD30X, space_extension_y = CELL6_2_SR_DMD30Y },
    { CMD, min_space = CELL6_2_CMD },
    { SR_DCMD_NT_SR, min_space = CELL6_2_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL6_2_NW_CENTERLINE },
    { NT_N, min_space = CELL6_2_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space_x = CELL6_2_OD2X, min_space_y = CELL6_2_OD2Y, context = INTERIOR },
    { NWDMY, min_space = CELL6_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { DIODMY, min_space = CELL6_2_DIODMY, context = EXTERIOR_INTERIOR },
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { DC1, min_space_x = CELL6_2_CELL1X, min_space_y = CELL6_2_CELL1Y, space_extension_x = CELL6_2_CELL1X, space_extension_y = CELL6_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL6_2_CELL2_1X, min_space_y = CELL6_2_CELL2_1Y, space_extension_x = CELL6_2_CELL2_1X, space_extension_y = CELL6_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL6_2_CELL2_2X, min_space_y = CELL6_2_CELL2_2Y, space_extension_x = CELL6_2_CELL2_2X, space_extension_y = CELL6_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL6_2_CELL2_3X, min_space_y = CELL6_2_CELL2_3Y, space_extension_x = CELL6_2_CELL2_3X, space_extension_y = CELL6_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL6_2_CELL4_1X, min_space_y = CELL6_2_CELL4_1Y, space_extension_x = CELL6_2_CELL4_1X, space_extension_y = CELL6_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL6_2_CELL4_2X, min_space_y = CELL6_2_CELL4_2Y, space_extension_x = CELL6_2_CELL4_2X, space_extension_y = CELL6_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL6_2_CELL5_1X, min_space_y = CELL6_2_CELL5_1Y, space_extension_x = CELL6_2_CELL5_1X, space_extension_y = CELL6_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL6_2_CELL5_2X, min_space_y = CELL6_2_CELL5_2Y, space_extension_x = CELL6_2_CELL5_2X, space_extension_y = CELL6_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL6_2_CELL6_1X, min_space_y = CELL6_2_CELL6_1Y, space_extension_x = CELL6_2_CELL6_1X, space_extension_y = CELL6_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL6_2_CELL6_2X, min_space_y = CELL6_2_CELL6_2Y, space_extension_x = CELL6_2_CELL6_2X, space_extension_y = CELL6_2_CELL6_2Y },
    { DC7, min_space_x = CELL6_2_CELL7X, min_space_y = CELL6_2_CELL7Y, space_extension_x = CELL6_2_CELL7X, space_extension_y = CELL6_2_CELL7Y },
    { DC8_1, min_space_x = CELL6_2_CELL8_1X, min_space_y = CELL6_2_CELL8_1Y, space_extension_x = CELL6_2_CELL8_1X, space_extension_y = CELL6_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL6_2_CELL8_2X, min_space_y = CELL6_2_CELL8_2Y, space_extension_x = CELL6_2_CELL8_2X, space_extension_y = CELL6_2_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL6_2_CELL4_1X, min_space_y = CELL6_2_CELL4_1Y, space_extension_x = CELL6_2_CELL4_1X, space_extension_y = CELL6_2_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL6_2_CELL4_2X, min_space_y = CELL6_2_CELL4_2Y, space_extension_x = CELL6_2_CELL4_2X, space_extension_y = CELL6_2_CELL4_2Y },
    { CELL1_E, min_space_x = CELL6_2_CELL1X, min_space_y = CELL6_2_CELL1Y, space_extension_x = CELL6_2_CELL1X, space_extension_y = CELL6_2_CELL1Y },
    { CELL2_1_E, min_space_x = CELL6_2_CELL2_1X, min_space_y = CELL6_2_CELL2_1Y, space_extension_x = CELL6_2_CELL2_1X, space_extension_y = CELL6_2_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL6_2_CELL2_2X, min_space_y = CELL6_2_CELL2_2Y, space_extension_x = CELL6_2_CELL2_2X, space_extension_y = CELL6_2_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL6_2_CELL2_3X, min_space_y = CELL6_2_CELL2_3Y, space_extension_x = CELL6_2_CELL2_3X, space_extension_y = CELL6_2_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL6_2_CELL4_1X, min_space_y = CELL6_2_CELL4_1Y, space_extension_x = CELL6_2_CELL4_1X, space_extension_y = CELL6_2_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL6_2_CELL4_2X, min_space_y = CELL6_2_CELL4_2Y, space_extension_x = CELL6_2_CELL4_2X, space_extension_y = CELL6_2_CELL4_2Y },
    { CELL6_1_E, min_space_x = CELL6_2_CELL6_1X, min_space_y = CELL6_2_CELL6_1Y, space_extension_x = CELL6_2_CELL6_1X, space_extension_y = CELL6_2_CELL6_1Y },
    { OD2_WPO_BLOCK, min_space = 0 },

}; // end of FSS_CELL6_2
//=========================================================================================

BASE_CELL6_2_1 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_160,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPTOPLEFT_250_2,
    },
    repeatable = false
};
BASE_CELL6_2_2 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPTOP_6_7,
	    LAYER_SHAPE_CELL6_2_CAPTOP_6_160,
	    LAYER_SHAPE_CELL6_2_CAPTOP_6_161,
	    LAYER_SHAPE_CELL6_2_CAPTOP_6_170,
	    LAYER_SHAPE_CELL6_2_CAPTOP_82_170,
	    LAYER_SHAPE_CELL6_2_CAPTOP_17_7,
	    LAYER_SHAPE_CELL6_2_CAPTOP_257_62,
	    LAYER_SHAPE_CELL6_2_CAPTOP_14_0,
	    LAYER_SHAPE_CELL6_2_CAPTOP_250_2,
    },
    repeatable = true,
};
BASE_CELL6_2_3 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_160,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPTOPRIGHT_250_2,
    },
    repeatable = false
};
BASE_CELL6_2_4 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPLEFT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPLEFT_250_2,
    },
    repeatable = true,
};
BASE_CELL6_2_5 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CORE_6_7,
	    LAYER_SHAPE_CELL6_2_CORE_6_170,
	    LAYER_SHAPE_CELL6_2_CORE_82_170,
	    LAYER_SHAPE_CELL6_2_CORE_17_7,
	    LAYER_SHAPE_CELL6_2_CORE_14_0,
	    LAYER_SHAPE_CELL6_2_CORE_257_62,
	    LAYER_SHAPE_CELL6_2_CORE_250_2,
    },
    repeatable = true,
};
BASE_CELL6_2_6 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPRIGHT_250_2,
    },
    repeatable = true,
};
BASE_CELL6_2_7 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_160,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMLEFT_250_2,
    },
    repeatable = false
};
BASE_CELL6_2_8 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_160,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_161,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_6_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_82_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_17_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_14_0,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_257_62,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOM_250_2,
    },
    repeatable = true,
};
BASE_CELL6_2_9 : base_cell_s = {
    layers = {
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_160,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_161,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_6_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_82_170,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_17_7,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_14_0,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_257_62,
	    LAYER_SHAPE_CELL6_2_CAPBOTTOMRIGHT_250_2,
    },
    repeatable = false
};

PATTERN_CELL6_2 : list of uf_fill_pattern_s = {
   {
	type = UF_EXPANDABLE,
	expandable_polygon_fill = {
	    pattern_spec = {
		space_x = 0.045,
		space_y = 0.03,
	    },
	    base_cell = {
		BASE_CELL6_2_4,
		BASE_CELL6_2_5,
		BASE_CELL6_2_6,
	    },
	    base_cell_top = {
		BASE_CELL6_2_1,
		BASE_CELL6_2_2,
		BASE_CELL6_2_3,
	    },
	    base_cell_bottom = {
		BASE_CELL6_2_7,
		BASE_CELL6_2_8,
		BASE_CELL6_2_9,
	    },
	    insertion = {
		iterations = 2,
	    },
	    partition = {},
	    pitch = {
		context_layer = shrink( INITIAL_LAYER_FB2, west = 0 , south = 0.004  ),
		x = vGRID,
		y = 0.028,
	    },
	    cell_prefix = "CELL6_2",
	    fill_to_signal_spacing = FSS_CELL6_2,
	    //expansion_mode = BOUNDARY_EXPANSION, //MAX_EXPANSION
	    fill_to_fill_spacing_direction = END_DIRECTION, 
        maximum_expansion_ranges = {{<=10, <=10}},
#ifndef FULL_CHIP
        boundary_alignment = {  inside = { PRBOUNDARY, {0.4, 0.4, 0.4, 0.4} } },
#else
        boundary_alignment = {  inside = { OD2, {0.4, 0.4, 0.4, 0.4} } },
#endif        
#ifdef  MINIMIZE_EMPTY       
        fill_area_alignment = UF_ORTHOGONAL,
#endif        
        density_optimization = TOUCH_BOUNDARY,
        corner_optimization = HORIZONTAL,        
	}
    },
}; // end of PATTERN_CELL6_2

SPEC_CELL6_2 = unified_fill(
    fill_patterns = PATTERN_CELL6_2,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL6_2_EXTENT"
	},
    }
);

CELL6_2_250_2_C     = SPEC_CELL6_2["OUTPUT_CELL6_2_250_2"][0];
CELL6_2_6_160_C     = SPEC_CELL6_2["OUTPUT_CELL6_2_6_160"][0];
CELL6_2_6_7_C       = SPEC_CELL6_2["OUTPUT_CELL6_2_6_7"][0];
CELL6_2_14_0_C      = SPEC_CELL6_2["OUTPUT_CELL6_2_14_0"][0];
CELL6_2_257_62_C    = SPEC_CELL6_2["OUTPUT_CELL6_2_257_62"][0];
CELL6_2_82_170_C    = SPEC_CELL6_2["OUTPUT_CELL6_2_82_170"][0];
CELL6_2_6_170_C     = SPEC_CELL6_2["OUTPUT_CELL6_2_6_170"][0];
CELL6_2_6_161_C     = SPEC_CELL6_2["OUTPUT_CELL6_2_6_161"][0];
CELL6_2_17_7_C      = SPEC_CELL6_2["OUTPUT_CELL6_2_17_7"][0];
CELL6_2_E           = SPEC_CELL6_2["CELL6_2_EXTENT"][0];



SHAPE_CELL5_1_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0550, 0.0000 }, { 0.0550, 0.2200 }, { 0.0000, 0.2200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL5_1_257_51 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0550, 0.0000 }, { 0.0550, 0.2200 }, { 0.0000, 0.2200 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL5_1_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL5_1_17_7"
    },
    polygons = SHAPE_CELL5_1_17_7
};

LAYER_SHAPE_CELL5_1_257_51 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL5_1_257_51"
    },
    polygons = SHAPE_CELL5_1_257_51
};



VAR_CELL5_1_sized = size( VAR, clip_acute = NONE, distance = CELL5_1_VAR_OUT );
// DUMMY SPEC : Cell5_1
FSS_CELL5_1_1st : list of fill_to_signal_spacing_s = {
    { OD2, min_space = CELL5_1_OD2 },
    { FB_2, min_space = CELL5_1_FB2},

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL5_1_CHIPX, min_space_y = CELL5_1_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL5_1_IPX, min_space_y = CELL5_1_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL5_1_FEOLBLKX, min_space_y = CELL5_1_FEOLBLKY, space_extension_x = CELL5_1_FEOLBLKX, space_extension_y = CELL5_1_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_2, min_space = CELL5_1_FB2, context = EXTERIOR_INTERIOR },
    { FB_26, min_space = CELL5_1_FBOTHER },
    { FB_28, min_space = CELL5_1_FBOTHER },
    { FB_29, min_space = CELL5_1_FBOTHER },
    { FB_31, min_space = CELL5_1_FBOTHER },
    { FB_36, min_space = CELL5_1_FBOTHER },
    { FB_38, min_space = CELL5_1_FBOTHER },
    { STD_FILLER, min_space = CELL5_1_FBOTHER },
    { SRM, min_space = CELL5_1_SRAM },
    { SRM_1, min_space = CELL5_1_SRAM },
    { SRAMDMY, min_space = CELL5_1_SRAM },
    { OD, min_space = CELL5_1_OD },
    { SR_DOD_NT_SR, min_space = CELL5_1_OD },
    { PO, min_space_x = CELL5_1_POX, min_space_y = CELL5_1_POY, space_extension_x = CELL5_1_POX, space_extension_y = CELL5_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL5_1_SRDPOX, min_space_y = CELL5_1_SRDPOY, space_extension_x = CELL5_1_SRDPOX, space_extension_y = CELL5_1_SRDPOY },
    { PO3, min_space_x = CELL5_1_PO3X, min_space_y = CELL5_1_PO3Y, space_extension_x = CELL5_1_PO3X, space_extension_y = CELL5_1_PO3Y },
    { POLE8, min_space_x = CELL5_1_POLE8X, min_space_y = CELL5_1_POLE8Y, space_extension_x = CELL5_1_POLE8X, space_extension_y = CELL5_1_POLE8Y },
    { PO9, min_space_x = CELL5_1_PO9X, min_space_y = CELL5_1_PO9Y, space_extension_x = CELL5_1_PO9X, space_extension_y = CELL5_1_PO9Y },
    { PO54, min_space_x = CELL5_1_PO54X, min_space_y = CELL5_1_PO54Y, space_extension_x = CELL5_1_PO54X, space_extension_y = CELL5_1_PO54Y },
    { PO86, min_space_x = CELL5_1_PO86X, min_space_y = CELL5_1_PO86Y, space_extension_x = CELL5_1_PO86X, space_extension_y = CELL5_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL5_1_SR_DPO3X, min_space_y = CELL5_1_SR_DPO3Y, space_extension_x = CELL5_1_SR_DPO3X, space_extension_y = CELL5_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL5_1_SR_DPOLE8X, min_space_y = CELL5_1_SR_DPOLE8Y, space_extension_x = CELL5_1_SR_DPOLE8X, space_extension_y = CELL5_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL5_1_SR_DPO9X, min_space_y = CELL5_1_SR_DPO9Y, space_extension_x = CELL5_1_SR_DPO9X, space_extension_y = CELL5_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL5_1_SR_DPO54X, min_space_y = CELL5_1_SR_DPO54Y, space_extension_x = CELL5_1_SR_DPO54X, space_extension_y = CELL5_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL5_1_SR_DPO86X, min_space_y = CELL5_1_SR_DPO86Y, space_extension_x = CELL5_1_SR_DPO86X, space_extension_y = CELL5_1_SR_DPO86Y },
    { PO9_OD2, min_space_x = CELL5_1_POOD2X, min_space_y = CELL5_1_POOD2Y, space_extension_x = CELL5_1_POOD2X, space_extension_y = CELL5_1_POOD2Y },
    { PO54_OD2, min_space_x = CELL5_1_PO54OD2X, min_space_y = CELL5_1_PO54OD2Y, space_extension_x = CELL5_1_PO54OD2X, space_extension_y = CELL5_1_PO54OD2Y },
    { PO86_OD2, min_space_x = CELL5_1_PO86OD2X, min_space_y = CELL5_1_PO86OD2Y, space_extension_x = CELL5_1_PO86OD2X, space_extension_y = CELL5_1_PO86OD2Y },
    { SR_DPO_NT_SR9_OD2, min_space_x = CELL5_1_SR_DPOOD2X, min_space_y = CELL5_1_SR_DPOOD2Y, space_extension_x = CELL5_1_SR_DPOOD2X, space_extension_y = CELL5_1_SR_DPOOD2Y },
    { SR_DPO_NT_SR54_OD2, min_space_x = CELL5_1_SR_DPO54OD2X, min_space_y = CELL5_1_SR_DPO54OD2Y, space_extension_x = CELL5_1_SR_DPO54OD2X, space_extension_y = CELL5_1_SR_DPO54OD2Y },
    { SR_DPO_NT_SR86_OD2, min_space_x = CELL5_1_SR_DPO86OD2X, min_space_y = CELL5_1_SR_DPO86OD2Y, space_extension_x = CELL5_1_SR_DPO86OD2X, space_extension_y = CELL5_1_SR_DPO86OD2Y },
    { PO_P54, min_space = CELL5_1_PO_P54 },
    { PO_P81, min_space = CELL5_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL5_1_PO_P81_WPO },
    { PO_P57, min_space = CELL5_1_PO_P57 },
    { CPO, min_space_x = CELL5_1_CPOX, min_space_y = CELL5_1_CPOY, space_extension_x = CELL5_1_CPOX, space_extension_y = CELL5_1_CPOY },
    { SR_DCPO, min_space_x = CELL5_1_SRDCPOX, min_space_y = CELL5_1_SRDCPOY, space_extension_x = CELL5_1_SRDCPOX, space_extension_y = CELL5_1_SRDCPOY },
    { CPO20, min_space_x = CELL5_1_CPO20X, min_space_y = CELL5_1_CPO20Y, space_extension_x = CELL5_1_CPO20X, space_extension_y = CELL5_1_CPO20Y },
    { CPO22, min_space_x = CELL5_1_CPO22X, min_space_y = CELL5_1_CPO22Y, space_extension_x = CELL5_1_CPO22X, space_extension_y = CELL5_1_CPO22Y },
    { CPO25, min_space_x = CELL5_1_CPO25X, min_space_y = CELL5_1_CPO25Y, space_extension_x = CELL5_1_CPO25X, space_extension_y = CELL5_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL5_1_SR_DCPO20X, min_space_y = CELL5_1_SR_DCPO20Y, space_extension_x = CELL5_1_SR_DCPO20X, space_extension_y = CELL5_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL5_1_SR_DCPO22X, min_space_y = CELL5_1_SR_DCPO22Y, space_extension_x = CELL5_1_SR_DCPO22X, space_extension_y = CELL5_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL5_1_SR_DCPO25X, min_space_y = CELL5_1_SR_DCPO25Y, space_extension_x = CELL5_1_SR_DCPO25X, space_extension_y = CELL5_1_SR_DCPO25Y },
    { MD, min_space_x = CELL5_1_MDX, min_space_y = CELL5_1_MDY, space_extension_x = CELL5_1_MDX, space_extension_y = CELL5_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL5_1_SRDMDX, min_space_y = CELL5_1_SRDMDY, space_extension_x = CELL5_1_SRDMDX, space_extension_y = CELL5_1_SRDMDY },
    { MD16, min_space_x = CELL5_1_MD16X, min_space_y = CELL5_1_MD16Y, space_extension_x = CELL5_1_MD16X, space_extension_y = CELL5_1_MD16Y },
    { MD30, min_space_x = CELL5_1_MD30X, min_space_y = CELL5_1_MD30Y, space_extension_x = CELL5_1_MD30X, space_extension_y = CELL5_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL5_1_SR_DMD16X, min_space_y = CELL5_1_SR_DMD16Y, space_extension_x = CELL5_1_SR_DMD16X, space_extension_y = CELL5_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL5_1_SR_DMD30X, min_space_y = CELL5_1_SR_DMD30Y, space_extension_x = CELL5_1_SR_DMD30X, space_extension_y = CELL5_1_SR_DMD30Y },
    { CMD, min_space = CELL5_1_CMD },
    { SR_DCMD_NT_SR, min_space = CELL5_1_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL5_1_NW_CENTERLINE },
    { NT_N, min_space = CELL5_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space = CELL5_1_OD2, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL5_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL5_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL5_1_VAR_OUT, min_space_inside = CELL5_1_VAR_IN, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL5_1_HIADMY },
    { DFBC_ALL, min_space = 0, min_space_x = CELL5_1_DFBC_ALLX },
    { DFBC, min_space = 0, min_space_y = CELL5_1_DFBCY },
    { PP_SEALRING, min_space = CELL5_1_PP_SEALRING },
    { CCTE_SR_PP, min_space = CELL5_1_CCTE_SR_PP },
    { DC1, min_space_x = CELL5_1_CELL1X, min_space_y = CELL5_1_CELL1Y, space_extension_x = CELL5_1_CELL1X, space_extension_y = CELL5_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL5_1_CELL2_1X, min_space_y = CELL5_1_CELL2_1Y, space_extension_x = CELL5_1_CELL2_1X, space_extension_y = CELL5_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL5_1_CELL2_2X, min_space_y = CELL5_1_CELL2_2Y, space_extension_x = CELL5_1_CELL2_2X, space_extension_y = CELL5_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL5_1_CELL2_3X, min_space_y = CELL5_1_CELL2_3Y, space_extension_x = CELL5_1_CELL2_3X, space_extension_y = CELL5_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL5_1_CELL4_1X, min_space_y = CELL5_1_CELL4_1Y, space_extension_x = CELL5_1_CELL4_1X, space_extension_y = CELL5_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL5_1_CELL4_2X, min_space_y = CELL5_1_CELL4_2Y, space_extension_x = CELL5_1_CELL4_2X, space_extension_y = CELL5_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL5_1_CELL5_1X, min_space_y = CELL5_1_CELL5_1Y, space_extension_x = CELL5_1_CELL5_1X, space_extension_y = CELL5_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL5_1_CELL5_2X, min_space_y = CELL5_1_CELL5_2Y, space_extension_x = CELL5_1_CELL5_2X, space_extension_y = CELL5_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL5_1_CELL6_1X, min_space_y = CELL5_1_CELL6_1Y, space_extension_x = CELL5_1_CELL6_1X, space_extension_y = CELL5_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL5_1_CELL6_2X, min_space_y = CELL5_1_CELL6_2Y, space_extension_x = CELL5_1_CELL6_2X, space_extension_y = CELL5_1_CELL6_2Y },
    { DC7, min_space_x = CELL5_1_CELL7X, min_space_y = CELL5_1_CELL7Y, space_extension_x = CELL5_1_CELL7X, space_extension_y = CELL5_1_CELL7Y },
    { DC8_1, min_space_x = CELL5_1_CELL8_1X, min_space_y = CELL5_1_CELL8_1Y, space_extension_x = CELL5_1_CELL8_1X, space_extension_y = CELL5_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL5_1_CELL8_2X, min_space_y = CELL5_1_CELL8_2Y, space_extension_x = CELL5_1_CELL8_2X, space_extension_y = CELL5_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL5_1X, min_space_y = CELL4_2_CELL5_1Y, space_extension_x = CELL4_2_CELL5_1X, space_extension_y = CELL4_2_CELL5_1Y },
    { CELL1_E, min_space_x = CELL5_1_CELL1X, min_space_y = CELL5_1_CELL1Y, space_extension_x = CELL5_1_CELL1X, space_extension_y = CELL5_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL5_1_CELL2_1X, min_space_y = CELL5_1_CELL2_1Y, space_extension_x = CELL5_1_CELL2_1X, space_extension_y = CELL5_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL5_1_CELL2_2X, min_space_y = CELL5_1_CELL2_2Y, space_extension_x = CELL5_1_CELL2_2X, space_extension_y = CELL5_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL5_1_CELL2_3X, min_space_y = CELL5_1_CELL2_3Y, space_extension_x = CELL5_1_CELL2_3X, space_extension_y = CELL5_1_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL5_1_CELL4_1X, min_space_y = CELL5_1_CELL4_1Y, space_extension_x = CELL5_1_CELL4_1X, space_extension_y = CELL5_1_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL5_1_CELL4_2X, min_space_y = CELL5_1_CELL4_2Y, space_extension_x = CELL5_1_CELL4_2X, space_extension_y = CELL5_1_CELL4_2Y },
    { CELL6_1_E, min_space_x = CELL5_1_CELL6_1X, min_space_y = CELL5_1_CELL6_1Y, space_extension_x = CELL5_1_CELL6_1X, space_extension_y = CELL5_1_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL5_1_CELL6_2X, min_space_y = CELL5_1_CELL6_2Y, space_extension_x = CELL5_1_CELL6_2X, space_extension_y = CELL5_1_CELL6_2Y },
    
}; // end of FSS_CELL5_1_1st

PATTERN_CELL5_1_1st : list of uf_fill_pattern_s = {
    {
   	type = UF_POLYGON,     
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL5_1_1st,
	    insertion = {
		iterations = 2, 
        shift_factor = 4,
	    },
	    layers = {
	    LAYER_SHAPE_CELL5_1_17_7,
	    LAYER_SHAPE_CELL5_1_257_51,
	    },
	    pattern_spec = {
		//other_pattern_spacing = FSS_CELL5_1,
            pattern_spacing = {
		        allowed_spacing_x = {>= CELL5_1_CELL5_1X},
		        allowed_spacing_y = {>= CELL5_1_CELL5_1Y},
		        extension = INTERSECTION,
		    },
		space_x = CELL5_1_CELL5_1X,
		space_y = CELL5_1_CELL5_1Y,
	    },

	    cell_prefix = "CELL5_1" ,
	}
    }
}; // end of PATTERN_CELL5_1_1st

SPEC_CELL5_1_1st = unified_fill(
    fill_patterns = PATTERN_CELL5_1_1st,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL5_1_1st_EXTENT"
	},
    }
);

CELL5_1_17_7_C_1st      = SPEC_CELL5_1_1st["OUTPUT_CELL5_1_17_7"][0];
CELL5_1_257_51_C_1st    = SPEC_CELL5_1_1st["OUTPUT_CELL5_1_257_51"][0];
CELL5_1_E_1st           = SPEC_CELL5_1_1st["CELL5_1_1st_EXTENT"][0];

FSS_CELL5_1_IO : list of fill_to_signal_spacing_s = {
    { CELL5_1_257_51_C_1st, min_space = CELL5_1_CELL5_1X },

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL5_1_CHIPX, min_space_y = CELL5_1_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL5_1_IPX, min_space_y = CELL5_1_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL5_1_FEOLBLKX, min_space_y = CELL5_1_FEOLBLKY, space_extension_x = CELL5_1_FEOLBLKX, space_extension_y = CELL5_1_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_2, min_space = CELL5_1_FB2, context = EXTERIOR_INTERIOR },
    { FB_26, min_space = CELL5_1_FBOTHER },
    { FB_28, min_space = CELL5_1_FBOTHER },
    { FB_29, min_space = CELL5_1_FBOTHER },
    { FB_31, min_space = CELL5_1_FBOTHER },
    { FB_36, min_space = CELL5_1_FBOTHER },
    { FB_38, min_space = CELL5_1_FBOTHER },
    { STD_FILLER, min_space = CELL5_1_FBOTHER },
    { SRM, min_space = CELL5_1_SRAM },
    { SRM_1, min_space = CELL5_1_SRAM },
    { SRAMDMY, min_space = CELL5_1_SRAM },
    { OD, min_space = CELL5_1_OD },
    { SR_DOD_NT_SR, min_space = CELL5_1_OD },
    { PO, min_space_x = CELL5_1_POX, min_space_y = CELL5_1_POY, space_extension_x = CELL5_1_POX, space_extension_y = CELL5_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL5_1_SRDPOX, min_space_y = CELL5_1_SRDPOY, space_extension_x = CELL5_1_SRDPOX, space_extension_y = CELL5_1_SRDPOY },
    { PO3, min_space_x = CELL5_1_PO3X, min_space_y = CELL5_1_PO3Y, space_extension_x = CELL5_1_PO3X, space_extension_y = CELL5_1_PO3Y },
    { POLE8, min_space_x = CELL5_1_POLE8X, min_space_y = CELL5_1_POLE8Y, space_extension_x = CELL5_1_POLE8X, space_extension_y = CELL5_1_POLE8Y },
    { PO9, min_space_x = CELL5_1_PO9X, min_space_y = CELL5_1_PO9Y, space_extension_x = CELL5_1_PO9X, space_extension_y = CELL5_1_PO9Y },
    { PO54, min_space_x = CELL5_1_PO54X, min_space_y = CELL5_1_PO54Y, space_extension_x = CELL5_1_PO54X, space_extension_y = CELL5_1_PO54Y },
    { PO86, min_space_x = CELL5_1_PO86X, min_space_y = CELL5_1_PO86Y, space_extension_x = CELL5_1_PO86X, space_extension_y = CELL5_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL5_1_SR_DPO3X, min_space_y = CELL5_1_SR_DPO3Y, space_extension_x = CELL5_1_SR_DPO3X, space_extension_y = CELL5_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL5_1_SR_DPOLE8X, min_space_y = CELL5_1_SR_DPOLE8Y, space_extension_x = CELL5_1_SR_DPOLE8X, space_extension_y = CELL5_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL5_1_SR_DPO9X, min_space_y = CELL5_1_SR_DPO9Y, space_extension_x = CELL5_1_SR_DPO9X, space_extension_y = CELL5_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL5_1_SR_DPO54X, min_space_y = CELL5_1_SR_DPO54Y, space_extension_x = CELL5_1_SR_DPO54X, space_extension_y = CELL5_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL5_1_SR_DPO86X, min_space_y = CELL5_1_SR_DPO86Y, space_extension_x = CELL5_1_SR_DPO86X, space_extension_y = CELL5_1_SR_DPO86Y },
    { PO9_OD2, min_space_x = CELL5_1_POOD2X, min_space_y = CELL5_1_POOD2Y, space_extension_x = CELL5_1_POOD2X, space_extension_y = CELL5_1_POOD2Y },
    { PO54_OD2, min_space_x = CELL5_1_PO54OD2X, min_space_y = CELL5_1_PO54OD2Y, space_extension_x = CELL5_1_PO54OD2X, space_extension_y = CELL5_1_PO54OD2Y },
    { PO86_OD2, min_space_x = CELL5_1_PO86OD2X, min_space_y = CELL5_1_PO86OD2Y, space_extension_x = CELL5_1_PO86OD2X, space_extension_y = CELL5_1_PO86OD2Y },
    { SR_DPO_NT_SR9_OD2, min_space_x = CELL5_1_SR_DPOOD2X, min_space_y = CELL5_1_SR_DPOOD2Y, space_extension_x = CELL5_1_SR_DPOOD2X, space_extension_y = CELL5_1_SR_DPOOD2Y },
    { SR_DPO_NT_SR54_OD2, min_space_x = CELL5_1_SR_DPO54OD2X, min_space_y = CELL5_1_SR_DPO54OD2Y, space_extension_x = CELL5_1_SR_DPO54OD2X, space_extension_y = CELL5_1_SR_DPO54OD2Y },
    { SR_DPO_NT_SR86_OD2, min_space_x = CELL5_1_SR_DPO86OD2X, min_space_y = CELL5_1_SR_DPO86OD2Y, space_extension_x = CELL5_1_SR_DPO86OD2X, space_extension_y = CELL5_1_SR_DPO86OD2Y },
    { PO_P54, min_space = CELL5_1_PO_P54 },
    { PO_P81, min_space = CELL5_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL5_1_PO_P81_WPO },
    { PO_P57, min_space = CELL5_1_PO_P57 },
    { CPO, min_space_x = CELL5_1_CPOX, min_space_y = CELL5_1_CPOY, space_extension_x = CELL5_1_CPOX, space_extension_y = CELL5_1_CPOY },
    { SR_DCPO, min_space_x = CELL5_1_SRDCPOX, min_space_y = CELL5_1_SRDCPOY, space_extension_x = CELL5_1_SRDCPOX, space_extension_y = CELL5_1_SRDCPOY },
    { CPO20, min_space_x = CELL5_1_CPO20X, min_space_y = CELL5_1_CPO20Y, space_extension_x = CELL5_1_CPO20X, space_extension_y = CELL5_1_CPO20Y },
    { CPO22, min_space_x = CELL5_1_CPO22X, min_space_y = CELL5_1_CPO22Y, space_extension_x = CELL5_1_CPO22X, space_extension_y = CELL5_1_CPO22Y },
    { CPO25, min_space_x = CELL5_1_CPO25X, min_space_y = CELL5_1_CPO25Y, space_extension_x = CELL5_1_CPO25X, space_extension_y = CELL5_1_CPO25Y },
    { SR_DCPO20, min_space_x = CELL5_1_SR_DCPO20X, min_space_y = CELL5_1_SR_DCPO20Y, space_extension_x = CELL5_1_SR_DCPO20X, space_extension_y = CELL5_1_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL5_1_SR_DCPO22X, min_space_y = CELL5_1_SR_DCPO22Y, space_extension_x = CELL5_1_SR_DCPO22X, space_extension_y = CELL5_1_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL5_1_SR_DCPO25X, min_space_y = CELL5_1_SR_DCPO25Y, space_extension_x = CELL5_1_SR_DCPO25X, space_extension_y = CELL5_1_SR_DCPO25Y },
    { MD, min_space_x = CELL5_1_MDX, min_space_y = CELL5_1_MDY, space_extension_x = CELL5_1_MDX, space_extension_y = CELL5_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL5_1_SRDMDX, min_space_y = CELL5_1_SRDMDY, space_extension_x = CELL5_1_SRDMDX, space_extension_y = CELL5_1_SRDMDY },
    { MD16, min_space_x = CELL5_1_MD16X, min_space_y = CELL5_1_MD16Y, space_extension_x = CELL5_1_MD16X, space_extension_y = CELL5_1_MD16Y },
    { MD30, min_space_x = CELL5_1_MD30X, min_space_y = CELL5_1_MD30Y, space_extension_x = CELL5_1_MD30X, space_extension_y = CELL5_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL5_1_SR_DMD16X, min_space_y = CELL5_1_SR_DMD16Y, space_extension_x = CELL5_1_SR_DMD16X, space_extension_y = CELL5_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL5_1_SR_DMD30X, min_space_y = CELL5_1_SR_DMD30Y, space_extension_x = CELL5_1_SR_DMD30X, space_extension_y = CELL5_1_SR_DMD30Y },
    { CMD, min_space = CELL5_1_CMD },
    { SR_DCMD_NT_SR, min_space = CELL5_1_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL5_1_NW_CENTERLINE },
    { NT_N, min_space = CELL5_1_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space = CELL5_1_OD2, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL5_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL5_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL5_1_VAR_OUT, min_space_inside = CELL5_1_VAR_IN, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL5_1_HIADMY },
    { DFBC_ALL, min_space = 0, min_space_x = CELL5_1_DFBC_ALLX },
    { DFBC, min_space = 0, min_space_y = CELL5_1_DFBCY },
    { PP_SEALRING, min_space = CELL5_1_PP_SEALRING },
    { CCTE_SR_PP, min_space = CELL5_1_CCTE_SR_PP },
    { DC1, min_space_x = CELL5_1_CELL1X, min_space_y = CELL5_1_CELL1Y, space_extension_x = CELL5_1_CELL1X, space_extension_y = CELL5_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL5_1_CELL2_1X, min_space_y = CELL5_1_CELL2_1Y, space_extension_x = CELL5_1_CELL2_1X, space_extension_y = CELL5_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL5_1_CELL2_2X, min_space_y = CELL5_1_CELL2_2Y, space_extension_x = CELL5_1_CELL2_2X, space_extension_y = CELL5_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL5_1_CELL2_3X, min_space_y = CELL5_1_CELL2_3Y, space_extension_x = CELL5_1_CELL2_3X, space_extension_y = CELL5_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL5_1_CELL4_1X, min_space_y = CELL5_1_CELL4_1Y, space_extension_x = CELL5_1_CELL4_1X, space_extension_y = CELL5_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL5_1_CELL4_2X, min_space_y = CELL5_1_CELL4_2Y, space_extension_x = CELL5_1_CELL4_2X, space_extension_y = CELL5_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL5_1_CELL5_1X, min_space_y = CELL5_1_CELL5_1Y, space_extension_x = CELL5_1_CELL5_1X, space_extension_y = CELL5_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL5_1_CELL5_2X, min_space_y = CELL5_1_CELL5_2Y, space_extension_x = CELL5_1_CELL5_2X, space_extension_y = CELL5_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL5_1_CELL6_1X, min_space_y = CELL5_1_CELL6_1Y, space_extension_x = CELL5_1_CELL6_1X, space_extension_y = CELL5_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL5_1_CELL6_2X, min_space_y = CELL5_1_CELL6_2Y, space_extension_x = CELL5_1_CELL6_2X, space_extension_y = CELL5_1_CELL6_2Y },
    { DC7, min_space_x = CELL5_1_CELL7X, min_space_y = CELL5_1_CELL7Y, space_extension_x = CELL5_1_CELL7X, space_extension_y = CELL5_1_CELL7Y },
    { DC8_1, min_space_x = CELL5_1_CELL8_1X, min_space_y = CELL5_1_CELL8_1Y, space_extension_x = CELL5_1_CELL8_1X, space_extension_y = CELL5_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL5_1_CELL8_2X, min_space_y = CELL5_1_CELL8_2Y, space_extension_x = CELL5_1_CELL8_2X, space_extension_y = CELL5_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL4_1_CELL5_1X, min_space_y = CELL4_1_CELL5_1Y, space_extension_x = CELL4_1_CELL5_1X, space_extension_y = CELL4_1_CELL5_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL4_2_CELL5_1X, min_space_y = CELL4_2_CELL5_1Y, space_extension_x = CELL4_2_CELL5_1X, space_extension_y = CELL4_2_CELL5_1Y },
    { CELL1_E, min_space_x = CELL5_1_CELL1X, min_space_y = CELL5_1_CELL1Y, space_extension_x = CELL5_1_CELL1X, space_extension_y = CELL5_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL5_1_CELL2_1X, min_space_y = CELL5_1_CELL2_1Y, space_extension_x = CELL5_1_CELL2_1X, space_extension_y = CELL5_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL5_1_CELL2_2X, min_space_y = CELL5_1_CELL2_2Y, space_extension_x = CELL5_1_CELL2_2X, space_extension_y = CELL5_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL5_1_CELL2_3X, min_space_y = CELL5_1_CELL2_3Y, space_extension_x = CELL5_1_CELL2_3X, space_extension_y = CELL5_1_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL5_1_CELL4_1X, min_space_y = CELL5_1_CELL4_1Y, space_extension_x = CELL5_1_CELL4_1X, space_extension_y = CELL5_1_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL5_1_CELL4_2X, min_space_y = CELL5_1_CELL4_2Y, space_extension_x = CELL5_1_CELL4_2X, space_extension_y = CELL5_1_CELL4_2Y },
    { CELL6_1_E, min_space_x = CELL5_1_CELL6_1X, min_space_y = CELL5_1_CELL6_1Y, space_extension_x = CELL5_1_CELL6_1X, space_extension_y = CELL5_1_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL5_1_CELL6_2X, min_space_y = CELL5_1_CELL6_2Y, space_extension_x = CELL5_1_CELL6_2X, space_extension_y = CELL5_1_CELL6_2Y },
}; // end of FSS_CELL5_1_IO
//=========================================================================================
PATTERN_CELL5_1_IO : list of uf_fill_pattern_s = {
    {
	type = UF_POLYGON, 
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL5_1_IO,
	    insertion = {
		iterations = 2,
        shift_factor = 2,
	    },
	    layers = {
	    LAYER_SHAPE_CELL5_1_17_7,
	    LAYER_SHAPE_CELL5_1_257_51,
	    },
	    pattern_spec = {
		//other_pattern_spacing = FSS_CELL5_1_IO,
            pattern_spacing = {
		        allowed_spacing_x = {>= CELL5_1_CELL5_1X},
		        allowed_spacing_y = {>= 0.264},
		        extension = INTERSECTION,
		    },
		space_x = CELL5_1_CELL5_1X,
		space_y = 0.264,
	    },

	    cell_prefix = "CELL5_1_IO" ,
	}
    },
}; // end of PATTERN_CELL5_1_IO

SPEC_CELL5_1_IO = unified_fill(
    fill_patterns = PATTERN_CELL5_1_IO,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL5_1_IO_EXTENT"
	},
    }
);

CELL5_1_IO_17_7_C      = SPEC_CELL5_1_IO["OUTPUT_CELL5_1_17_7"][0];
CELL5_1_IO_257_51_C    = SPEC_CELL5_1_IO["OUTPUT_CELL5_1_257_51"][0];
CELL5_1_IO_E           = SPEC_CELL5_1_IO["CELL5_1_IO_EXTENT"][0];

CELL5_1_17_7_C      = CELL5_1_17_7_C_1st or CELL5_1_IO_17_7_C;
CELL5_1_257_51_C    = CELL5_1_257_51_C_1st or CELL5_1_IO_257_51_C;
CELL5_1_E           = CELL5_1_E_1st or CELL5_1_IO_E;





SHAPE_CELL5_2_257_52 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2200, 0.0000 }, { 0.2200, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL5_2_17_7 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.2200, 0.0000 }, { 0.2200, 0.1200 }, { 0.0000, 0.1200 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL5_2_17_7 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL5_2_17_7"
    },
    polygons = SHAPE_CELL5_2_17_7
};

LAYER_SHAPE_CELL5_2_257_52 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL5_2_257_52"
    },
    polygons = SHAPE_CELL5_2_257_52
};


VAR_CELL5_2_sized = size( VAR, clip_acute = NONE, distance = CELL5_2_VAR_OUT );
// DUMMY SPEC : Cell5_2
FSS_CELL5_2 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL5_2_CHIPX, min_space_y = CELL5_2_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL5_2_IPX, min_space_y = CELL5_2_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL5_2_FEOLBLKX, min_space_y = CELL5_2_FEOLBLKY, space_extension_x = CELL5_2_FEOLBLKX, space_extension_y = CELL5_2_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_2, min_space = CELL5_2_FB2, context = EXTERIOR_INTERIOR },
    { FB_26, min_space = CELL5_2_FBOTHER },
    { FB_28, min_space = CELL5_2_FBOTHER },
    { FB_29, min_space = CELL5_2_FBOTHER },
    { FB_31, min_space = CELL5_2_FBOTHER },
    { FB_36, min_space = CELL5_2_FBOTHER },
    { FB_38, min_space = CELL5_2_FBOTHER },
    { STD_FILLER, min_space = CELL5_2_FBOTHER },
    { SRM, min_space = CELL5_2_SRAM },
    { SRM_1, min_space = CELL5_2_SRAM },
    { SRAMDMY, min_space = CELL5_2_SRAM },
    { OD, min_space = CELL5_2_OD },
    { SR_DOD_NT_SR, min_space = CELL5_2_OD },
    { PO, min_space_x = CELL5_2_POX, min_space_y = CELL5_2_POY, space_extension_x = CELL5_2_POX, space_extension_y = CELL5_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL5_2_SRDPOX, min_space_y = CELL5_2_SRDPOY, space_extension_x = CELL5_2_SRDPOX, space_extension_y = CELL5_2_SRDPOY },
    { PO3, min_space_x = CELL5_2_PO3X, min_space_y = CELL5_2_PO3Y, space_extension_x = CELL5_2_PO3X, space_extension_y = CELL5_2_PO3Y },
    { POLE8, min_space_x = CELL5_2_POLE8X, min_space_y = CELL5_2_POLE8Y, space_extension_x = CELL5_2_POLE8X, space_extension_y = CELL5_2_POLE8Y },
    { PO9, min_space_x = CELL5_2_PO9X, min_space_y = CELL5_2_PO9Y, space_extension_x = CELL5_2_PO9X, space_extension_y = CELL5_2_PO9Y },
    { PO54, min_space_x = CELL5_2_PO54X, min_space_y = CELL5_2_PO54Y, space_extension_x = CELL5_2_PO54X, space_extension_y = CELL5_2_PO54Y },
    { PO86, min_space_x = CELL5_2_PO86X, min_space_y = CELL5_2_PO86Y, space_extension_x = CELL5_2_PO86X, space_extension_y = CELL5_2_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL5_2_SR_DPO3X, min_space_y = CELL5_2_SR_DPO3Y, space_extension_x = CELL5_2_SR_DPO3X, space_extension_y = CELL5_2_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL5_2_SR_DPOLE8X, min_space_y = CELL5_2_SR_DPOLE8Y, space_extension_x = CELL5_2_SR_DPOLE8X, space_extension_y = CELL5_2_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL5_2_SR_DPO9X, min_space_y = CELL5_2_SR_DPO9Y, space_extension_x = CELL5_2_SR_DPO9X, space_extension_y = CELL5_2_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL5_2_SR_DPO54X, min_space_y = CELL5_2_SR_DPO54Y, space_extension_x = CELL5_2_SR_DPO54X, space_extension_y = CELL5_2_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL5_2_SR_DPO86X, min_space_y = CELL5_2_SR_DPO86Y, space_extension_x = CELL5_2_SR_DPO86X, space_extension_y = CELL5_2_SR_DPO86Y },
    { PO9_OD2, min_space_x = CELL5_2_PO9OD2X, min_space_y = CELL5_2_PO9OD2Y, space_extension_x = CELL5_2_PO9OD2X, space_extension_y = CELL5_2_PO9OD2Y },
    { PO54_OD2, min_space_x = CELL5_2_PO54OD2X, min_space_y = CELL5_2_PO54OD2Y, space_extension_x = CELL5_2_PO54OD2X, space_extension_y = CELL5_2_PO54OD2Y },
    { PO86_OD2, min_space_x = CELL5_2_PO86OD2X, min_space_y = CELL5_2_PO86OD2Y, space_extension_x = CELL5_2_PO86OD2X, space_extension_y = CELL5_2_PO86OD2Y },
    { SR_DPO_NT_SR9_OD2, min_space_x = CELL5_2_SR_DPO9OD2X, min_space_y = CELL5_2_SR_DPO9OD2Y, space_extension_x = CELL5_2_SR_DPO9OD2X, space_extension_y = CELL5_2_SR_DPO9OD2Y },
    { SR_DPO_NT_SR54_OD2, min_space_x = CELL5_2_SR_DPO54OD2X, min_space_y = CELL5_2_SR_DPO54OD2Y, space_extension_x = CELL5_2_SR_DPO54OD2X, space_extension_y = CELL5_2_SR_DPO54OD2Y },
    { SR_DPO_NT_SR86_OD2, min_space_x = CELL5_2_SR_DPO86OD2X, min_space_y = CELL5_2_SR_DPO86OD2Y, space_extension_x = CELL5_2_SR_DPO86OD2X, space_extension_y = CELL5_2_SR_DPO86OD2Y },
    { PO_P54, min_space = CELL5_2_PO_P54 },
    { PO_P81, min_space = CELL5_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL5_2_PO_P81_WPO },
    { PO_P57, min_space = CELL5_2_PO_P57 },
    { CPO, min_space_x = CELL5_2_CPOX, min_space_y = CELL5_2_CPOY, space_extension_x = CELL5_2_CPOX, space_extension_y = CELL5_2_CPOY },
    { SR_DCPO, min_space_x = CELL5_2_SRDCPOX, min_space_y = CELL5_2_SRDCPOY, space_extension_x = CELL5_2_SRDCPOX, space_extension_y = CELL5_2_SRDCPOY },
    { CPO20, min_space_x = CELL5_2_CPO20X, min_space_y = CELL5_2_CPO20Y, space_extension_x = CELL5_2_CPO20X, space_extension_y = CELL5_2_CPO20Y },
    { CPO22, min_space_x = CELL5_2_CPO22X, min_space_y = CELL5_2_CPO22Y, space_extension_x = CELL5_2_CPO22X, space_extension_y = CELL5_2_CPO22Y },
    { CPO25, min_space_x = CELL5_2_CPO25X, min_space_y = CELL5_2_CPO25Y, space_extension_x = CELL5_2_CPO25X, space_extension_y = CELL5_2_CPO25Y },
    { SR_DCPO20, min_space_x = CELL5_2_SR_DCPO20X, min_space_y = CELL5_2_SR_DCPO20Y, space_extension_x = CELL5_2_SR_DCPO20X, space_extension_y = CELL5_2_SR_DCPO20Y },
    { SR_DCPO22, min_space_x = CELL5_2_SR_DCPO22X, min_space_y = CELL5_2_SR_DCPO22Y, space_extension_x = CELL5_2_SR_DCPO22X, space_extension_y = CELL5_2_SR_DCPO22Y },
    { SR_DCPO25, min_space_x = CELL5_2_SR_DCPO25X, min_space_y = CELL5_2_SR_DCPO25Y, space_extension_x = CELL5_2_SR_DCPO25X, space_extension_y = CELL5_2_SR_DCPO25Y },
    { MD, min_space_x = CELL5_2_MDX, min_space_y = CELL5_2_MDY, space_extension_x = CELL5_2_MDX, space_extension_y = CELL5_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL5_2_SRDMDX, min_space_y = CELL5_2_SRDMDY, space_extension_x = CELL5_2_SRDMDX, space_extension_y = CELL5_2_SRDMDY },
    { MD16, min_space_x = CELL5_2_MD16X, min_space_y = CELL5_2_MD16Y, space_extension_x = CELL5_2_MD16X, space_extension_y = CELL5_2_MD16Y },
    { MD30, min_space_x = CELL5_2_MD30X, min_space_y = CELL5_2_MD30Y, space_extension_x = CELL5_2_MD30X, space_extension_y = CELL5_2_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL5_2_SR_DMD16X, min_space_y = CELL5_2_SR_DMD16Y, space_extension_x = CELL5_2_SR_DMD16X, space_extension_y = CELL5_2_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL5_2_SR_DMD30X, min_space_y = CELL5_2_SR_DMD30Y, space_extension_x = CELL5_2_SR_DMD30X, space_extension_y = CELL5_2_SR_DMD30Y },
    { CMD, min_space = CELL5_2_CMD },
    { SR_DCMD_NT_SR, min_space = CELL5_2_CMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL5_2_NW_CENTERLINE },
    { NT_N, min_space = CELL5_2_NTNI, context = EXTERIOR_INTERIOR },
    { OD2, min_space = CELL5_2_OD2, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL5_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL5_2_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL5_2_VAR_OUT, min_space_inside = CELL5_2_VAR_IN, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL5_2_HIADMY },
    { DFBC_ALL, min_space = 0, min_space_x = CELL5_2_DFBC_ALLX },
    { DFBC, min_space = 0, min_space_y = CELL5_2_DFBCY },
    { PP_SEALRING, min_space = CELL5_2_PP_SEALRING },
    { CCTE_SR_PP, min_space = CELL5_2_CCTE_SR_PP },
    { DC1, min_space_x = CELL5_2_CELL1X, min_space_y = CELL5_2_CELL1Y, space_extension_x = CELL5_2_CELL1X, space_extension_y = CELL5_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL5_2_CELL2_1X, min_space_y = CELL5_2_CELL2_1Y, space_extension_x = CELL5_2_CELL2_1X, space_extension_y = CELL5_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL5_2_CELL2_2X, min_space_y = CELL5_2_CELL2_2Y, space_extension_x = CELL5_2_CELL2_2X, space_extension_y = CELL5_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL5_2_CELL2_3X, min_space_y = CELL5_2_CELL2_3Y, space_extension_x = CELL5_2_CELL2_3X, space_extension_y = CELL5_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL5_2_CELL4_1X, min_space_y = CELL5_2_CELL4_1Y, space_extension_x = CELL5_2_CELL4_1X, space_extension_y = CELL5_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL5_2_CELL4_2X, min_space_y = CELL5_2_CELL4_2Y, space_extension_x = CELL5_2_CELL4_2X, space_extension_y = CELL5_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL5_2_CELL5_1X, min_space_y = CELL5_2_CELL5_1Y, space_extension_x = CELL5_2_CELL5_1X, space_extension_y = CELL5_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL5_2_CELL5_2X, min_space_y = CELL5_2_CELL5_2Y, space_extension_x = CELL5_2_CELL5_2X, space_extension_y = CELL5_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL5_2_CELL6_1X, min_space_y = CELL5_2_CELL6_1Y, space_extension_x = CELL5_2_CELL6_1X, space_extension_y = CELL5_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL5_2_CELL6_2X, min_space_y = CELL5_2_CELL6_2Y, space_extension_x = CELL5_2_CELL6_2X, space_extension_y = CELL5_2_CELL6_2Y },
    { DC7, min_space_x = CELL5_2_CELL7X, min_space_y = CELL5_2_CELL7Y, space_extension_x = CELL5_2_CELL7X, space_extension_y = CELL5_2_CELL7Y },
    { DC8_1, min_space_x = CELL5_2_CELL8_1X, min_space_y = CELL5_2_CELL8_1Y, space_extension_x = CELL5_2_CELL8_1X, space_extension_y = CELL5_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL5_2_CELL8_2X, min_space_y = CELL5_2_CELL8_2Y, space_extension_x = CELL5_2_CELL8_2X, space_extension_y = CELL5_2_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL5_2_CELL4_1X, min_space_y = CELL5_2_CELL4_1Y, space_extension_x = CELL5_2_CELL4_1X, space_extension_y = CELL5_2_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL5_2_CELL4_2X, min_space_y = CELL5_2_CELL4_2Y, space_extension_x = CELL5_2_CELL4_2X, space_extension_y = CELL5_2_CELL4_2Y },
    { CELL1_E, min_space_x = CELL5_2_CELL1X, min_space_y = CELL5_2_CELL1Y, space_extension_x = CELL5_2_CELL1X, space_extension_y = CELL5_2_CELL1Y },
    { CELL2_1_E, min_space_x = CELL5_2_CELL2_1X, min_space_y = CELL5_2_CELL2_1Y, space_extension_x = CELL5_2_CELL2_1X, space_extension_y = CELL5_2_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL5_2_CELL2_2X, min_space_y = CELL5_2_CELL2_2Y, space_extension_x = CELL5_2_CELL2_2X, space_extension_y = CELL5_2_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL5_2_CELL2_3X, min_space_y = CELL5_2_CELL2_3Y, space_extension_x = CELL5_2_CELL2_3X, space_extension_y = CELL5_2_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL5_2_CELL4_1X, min_space_y = CELL5_2_CELL4_1Y, space_extension_x = CELL5_2_CELL4_1X, space_extension_y = CELL5_2_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL5_2_CELL4_2X, min_space_y = CELL5_2_CELL4_2Y, space_extension_x = CELL5_2_CELL4_2X, space_extension_y = CELL5_2_CELL4_2Y },
    { CELL6_1_E, min_space_x = CELL5_2_CELL6_1X, min_space_y = CELL5_2_CELL6_1Y, space_extension_x = CELL5_2_CELL6_1X, space_extension_y = CELL5_2_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL5_2_CELL6_2X, min_space_y = CELL5_2_CELL6_2Y, space_extension_x = CELL5_2_CELL6_2X, space_extension_y = CELL5_2_CELL6_2Y },
    { CELL5_1_E, min_space_x = CELL5_2_CELL5_1X, min_space_y = CELL5_2_CELL5_1Y, space_extension_x = CELL5_2_CELL5_1X, space_extension_y = CELL5_2_CELL5_1Y },
    
}; // end of FSS_CELL5_2
//=========================================================================================
PATTERN_CELL5_2 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL5_2,
	    insertion = {
		iterations = 2,
        shift_factor = 2,
	    },
	    layers = {
LAYER_SHAPE_CELL5_2_17_7,
LAYER_SHAPE_CELL5_2_257_52
	    },
	    pattern_spec = {
		//other_pattern_spacing = FSS_CELL5_2,
		space_x = CELL5_2_CELL5_2X,
		space_y = CELL5_2_CELL5_2Y,
	    },
	    cell_prefix = "CELL5_2",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL5_2

SPEC_CELL5_2 = unified_fill(
    fill_patterns = PATTERN_CELL5_2,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL5_2_EXTENT"
	},
    }
);

CELL5_2_17_7_C      = SPEC_CELL5_2["OUTPUT_CELL5_2_17_7"][0];
CELL5_2_257_52_C    = SPEC_CELL5_2["OUTPUT_CELL5_2_257_52"][0];
CELL5_2_E           = SPEC_CELL5_2["CELL5_2_EXTENT"][0];



SHAPE_CELL7_257_71 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1400, 0.0000 }, { 0.1400, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL7_82_170 : list of coordinate_l = { 
    { { 0.1000, 0.0000 }, { 0.1400, 0.0000 }, { 0.1400, 0.1300 }, { 0.1000, 0.1300 } },
    { { 0.0000, 0.0000 }, { 0.0400, 0.0000 }, { 0.0400, 0.1300 }, { 0.0000, 0.1300 } }
};    /* AREA RATIO = 0.5714285714285714 */

LAYER_SHAPE_CELL7_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL7_82_170"
    },
    polygons = SHAPE_CELL7_82_170
};

LAYER_SHAPE_CELL7_257_71 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL7_257_71"
    },
    polygons = SHAPE_CELL7_257_71
};


// DUMMY SPEC : Cell7
FSS_CELL7 : list of fill_to_signal_spacing_s = {

#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL7_CHIPX, min_space_y = CELL7_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL7_IPX, min_space_y = CELL7_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL7_FEOLBLKX, min_space_y = CELL7_FEOLBLKY, space_extension_x = CELL7_FEOLBLKX, space_extension_y = CELL7_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_26, min_space = CELL7_FBOTHER },
    { FB_28, min_space = CELL7_FBOTHER },
    { FB_29, min_space = CELL7_FBOTHER },
    { FB_31, min_space = CELL7_FBOTHER },
    { FB_36, min_space = CELL7_FBOTHER },
    { FB_38, min_space = CELL7_FBOTHER },
    { STD_FILLER, min_space = CELL7_FBOTHER },
    { SRM, min_space = CELL7_SRAM },
    { SRM_1, min_space = CELL7_SRAM },
    { SRAMDMY, min_space = CELL7_SRAM },
    { OD, min_space_x = CELL7_ODX, min_space_y = CELL7_ODY, space_extension_x = CELL7_ODX, space_extension_y = CELL7_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL7_SR_DODX, min_space_y = CELL7_SR_DODY, space_extension_x = CELL7_SR_DODX, space_extension_y = CELL7_SR_DODY },
    { PO, min_space_x = CELL7_POX, min_space_y = CELL7_POY, space_extension_x = CELL7_POX, space_extension_y = CELL7_POY },
    { SR_DPO_NT_SR, min_space_x = CELL7_SRDPOX, min_space_y = CELL7_SRDPOY, space_extension_x = CELL7_SRDPOX, space_extension_y = CELL7_SRDPOY },
    { PO3, min_space_x = CELL7_PO3X, min_space_y = CELL7_PO3Y, space_extension_x = CELL7_PO3X, space_extension_y = CELL7_PO3Y },
    { POLE8, min_space_x = CELL7_POLE8X, min_space_y = CELL7_POLE8Y, space_extension_x = CELL7_POLE8X, space_extension_y = CELL7_POLE8Y },
    { PO9, min_space_x = CELL7_PO9X, min_space_y = CELL7_PO9Y, space_extension_x = CELL7_PO9X, space_extension_y = CELL7_PO9Y },
    { PO54, min_space_x = CELL7_PO54X, min_space_y = CELL7_PO54Y, space_extension_x = CELL7_PO54X, space_extension_y = CELL7_PO54Y },
    { PO86, min_space_x = CELL7_PO86X, min_space_y = CELL7_PO86Y, space_extension_x = CELL7_PO86X, space_extension_y = CELL7_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL7_SR_DPO3X, min_space_y = CELL7_SR_DPO3Y, space_extension_x = CELL7_SR_DPO3X, space_extension_y = CELL7_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL7_SR_DPOLE8X, min_space_y = CELL7_SR_DPOLE8Y, space_extension_x = CELL7_SR_DPOLE8X, space_extension_y = CELL7_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL7_SR_DPO9X, min_space_y = CELL7_SR_DPO9Y, space_extension_x = CELL7_SR_DPO9X, space_extension_y = CELL7_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL7_SR_DPO54X, min_space_y = CELL7_SR_DPO54Y, space_extension_x = CELL7_SR_DPO54X, space_extension_y = CELL7_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL7_SR_DPO86X, min_space_y = CELL7_SR_DPO86Y, space_extension_x = CELL7_SR_DPO86X, space_extension_y = CELL7_SR_DPO86Y },
    { PO_P54, min_space = CELL7_PO_P54 },
    { PO_P81, min_space = CELL7_PO_P81 },
    { PO_P81_WPO, min_space = CELL7_PO_P81_WPO },
    { PO_P57, min_space = CELL7_PO_P57 },
    { MD, min_space_x = CELL7_MDX, min_space_y = CELL7_MDY, space_extension_x = CELL7_MDX, space_extension_y = CELL7_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL7_SRDMDX, min_space_y = CELL7_SRDMDY, space_extension_x = CELL7_SRDMDX, space_extension_y = CELL7_SRDMDY },
    { MD16, min_space_x = CELL7_MD16X, min_space_y = CELL7_MD16Y, space_extension_x = CELL7_MD16X, space_extension_y = CELL7_MD16Y },
    { MD30, min_space_x = CELL7_MD30X, min_space_y = CELL7_MD30Y, space_extension_x = CELL7_MD30X, space_extension_y = CELL7_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL7_SR_DMD16X, min_space_y = CELL7_SR_DMD16Y, space_extension_x = CELL7_SR_DMD16X, space_extension_y = CELL7_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL7_SR_DMD30X, min_space_y = CELL7_SR_DMD30Y, space_extension_x = CELL7_SR_DMD30X, space_extension_y = CELL7_SR_DMD30Y },
    { CMD, min_space = CELL7_CMD },
    { SR_DCMD_NT_SR, min_space = CELL7_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL7_NW_CENTERLINE },
    { NT_N, min_space = CELL7_NTNI, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL7_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL7_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL7_VAR, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL7_HIADMY },
    { DC1, min_space_x = CELL7_CELL1X, min_space_y = CELL7_CELL1Y, space_extension_x = CELL7_CELL1X, space_extension_y = CELL7_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL7_CELL2_1X, min_space_y = CELL7_CELL2_1Y, space_extension_x = CELL7_CELL2_1X, space_extension_y = CELL7_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL7_CELL2_2X, min_space_y = CELL7_CELL2_2Y, space_extension_x = CELL7_CELL2_2X, space_extension_y = CELL7_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL7_CELL2_3X, min_space_y = CELL7_CELL2_3Y, space_extension_x = CELL7_CELL2_3X, space_extension_y = CELL7_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL7_CELL4_1X, min_space_y = CELL7_CELL4_1Y, space_extension_x = CELL7_CELL4_1X, space_extension_y = CELL7_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL7_CELL4_2X, min_space_y = CELL7_CELL4_2Y, space_extension_x = CELL7_CELL4_2X, space_extension_y = CELL7_CELL4_2Y },
    { DC5_1, min_space_x = CELL7_CELL5_1X, min_space_y = CELL7_CELL5_1Y, space_extension_x = CELL7_CELL5_1X, space_extension_y = CELL7_CELL5_1Y },
    { DC5_2, min_space_x = CELL7_CELL5_2X, min_space_y = CELL7_CELL5_2Y, space_extension_x = CELL7_CELL5_2X, space_extension_y = CELL7_CELL5_2Y },
    { DC6_1, min_space_x = CELL7_CELL6_1X, min_space_y = CELL7_CELL6_1Y, space_extension_x = CELL7_CELL6_1X, space_extension_y = CELL7_CELL6_1Y },
    { DC6_2, min_space_x = CELL7_CELL6_2X, min_space_y = CELL7_CELL6_2Y, space_extension_x = CELL7_CELL6_2X, space_extension_y = CELL7_CELL6_2Y },
    { DC7, min_space_x = CELL7_CELL7X, min_space_y = CELL7_CELL7Y, space_extension_x = CELL7_CELL7X, space_extension_y = CELL7_CELL7Y },
    { DC8_1, min_space_x = CELL7_CELL8_1X, min_space_y = CELL7_CELL8_1Y, space_extension_x = CELL7_CELL8_1X, space_extension_y = CELL7_CELL8_1Y },
    { DC8_2, min_space_x = CELL7_CELL8_2X, min_space_y = CELL7_CELL8_2Y, space_extension_x = CELL7_CELL8_2X, space_extension_y = CELL7_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL7_CELL4_1X, min_space_y = CELL7_CELL4_1Y, space_extension_x = CELL7_CELL4_1X, space_extension_y = CELL7_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL7_CELL4_2X, min_space_y = CELL7_CELL4_2Y, space_extension_x = CELL7_CELL4_2X, space_extension_y = CELL7_CELL4_2Y },
    { CELL1_E, min_space_x = CELL7_CELL1X, min_space_y = CELL7_CELL1Y, space_extension_x = CELL7_CELL1X, space_extension_y = CELL7_CELL1Y },
    { CELL2_1_E, min_space_x = CELL7_CELL2_1X, min_space_y = CELL7_CELL2_1Y, space_extension_x = CELL7_CELL2_1X, space_extension_y = CELL7_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL7_CELL2_2X, min_space_y = CELL7_CELL2_2Y, space_extension_x = CELL7_CELL2_2X, space_extension_y = CELL7_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL7_CELL2_3X, min_space_y = CELL7_CELL2_3Y, space_extension_x = CELL7_CELL2_3X, space_extension_y = CELL7_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL7_CELL4_1X, min_space_y = CELL7_CELL4_1Y, space_extension_x = CELL7_CELL4_1X, space_extension_y = CELL7_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL7_CELL4_2X, min_space_y = CELL7_CELL4_2Y, space_extension_x = CELL7_CELL4_2X, space_extension_y = CELL7_CELL4_2Y },
    { CELL5_1_E, min_space_x = CELL7_CELL5_1X, min_space_y = CELL7_CELL5_1Y, space_extension_x = CELL7_CELL5_1X, space_extension_y = CELL7_CELL5_1Y },
    { CELL5_2_E, min_space_x = CELL7_CELL5_2X, min_space_y = CELL7_CELL5_2Y, space_extension_x = CELL7_CELL5_2X, space_extension_y = CELL7_CELL5_2Y },
    { CELL6_1_E, min_space_x = CELL7_CELL6_1X, min_space_y = CELL7_CELL6_1Y, space_extension_x = CELL7_CELL6_1X, space_extension_y = CELL7_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL7_CELL6_2X, min_space_y = CELL7_CELL6_2Y, space_extension_x = CELL7_CELL6_2X, space_extension_y = CELL7_CELL6_2Y },
}; // end of FSS_CELL7
//=========================================================================================
PATTERN_CELL7 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL7,
	    insertion = {
		iterations = 5,
        shift_factor = 2,
        starting_point = CENTER,
	    },
	    layers = {
	    LAYER_SHAPE_CELL7_82_170,
	    LAYER_SHAPE_CELL7_257_71,
	    },
	    pattern_spec = {
		//other_pattern_spacing = FSS_CELL7,
            pattern_spacing = {
		        allowed_spacing_x = {>= CELL7_CELL7X },
		        allowed_spacing_y = {>= CELL7_CELL7Y },
		        extension = INTERSECTION,
		    },
		space_x = CELL7_CELL7X,
		space_y = CELL7_CELL7Y,
	    },
	    cell_prefix = "CELL7",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL7

SPEC_CELL7 = unified_fill(
    fill_patterns = PATTERN_CELL7,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL7_EXTENT"
	},
    }
);

CELL7_82_170_C    = SPEC_CELL7["OUTPUT_CELL7_82_170"][0];
CELL7_257_71_C    = SPEC_CELL7["OUTPUT_CELL7_257_71"][0];
CELL7_E           = SPEC_CELL7["CELL7_EXTENT"][0];



SHAPE_CELL8_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0400, 0.0000 }, { 0.0400, 0.1700 }, { 0.0000, 0.1700 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL8_257_81 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.0400, 0.0000 }, { 0.0400, 0.1700 }, { 0.0000, 0.1700 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL8_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL8_1_82_170"
    },
    polygons = SHAPE_CELL8_82_170
};

LAYER_SHAPE_CELL8_257_81 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL8_1_257_81"
    },
    polygons = SHAPE_CELL8_257_81
};



// DUMMY SPEC : Cell8_1
FSS_CELL8_1 : list of fill_to_signal_spacing_s = {

    { CHIP_snps, min_space = 0.001, context = INTERIOR },
#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL8_1_CHIPX, min_space_y = CELL8_1_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL8_1_IPX, min_space_y = CELL8_1_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL8_1_FEOLBLKX, min_space_y = CELL8_1_FEOLBLKY, space_extension_x = CELL8_1_FEOLBLKX, space_extension_y = CELL8_1_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_26, min_space = CELL8_1_FBOTHER },
    { FB_28, min_space = CELL8_1_FBOTHER },
    { FB_29, min_space = CELL8_1_FBOTHER },
    { FB_31, min_space = CELL8_1_FBOTHER },
    { FB_36, min_space = CELL8_1_FBOTHER },
    { FB_38, min_space = CELL8_1_FBOTHER },
    { STD_FILLER, min_space = CELL8_1_FBOTHER },
    { SRM, min_space = CELL8_1_SRAM },
    { SRM_1, min_space = CELL8_1_SRAM },
    { SRAMDMY, min_space = CELL8_1_SRAM },
    { OD, min_space_x = CELL8_1_ODX, min_space_y = CELL8_1_ODY, space_extension_x = CELL8_1_ODX, space_extension_y = CELL8_1_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL8_1_SR_DODX, min_space_y = CELL8_1_SR_DODY, space_extension_x = CELL8_1_SR_DODX, space_extension_y = CELL8_1_SR_DODY },
    { PO, min_space_x = CELL8_1_POX, min_space_y = CELL8_1_POY, space_extension_x = CELL8_1_POX, space_extension_y = CELL8_1_POY },
    { SR_DPO_NT_SR, min_space_x = CELL8_1_SRDPOX, min_space_y = CELL8_1_SRDPOY, space_extension_x = CELL8_1_SRDPOX, space_extension_y = CELL8_1_SRDPOY },
    { PO3, min_space_x = CELL8_1_PO3X, min_space_y = CELL8_1_PO3Y, space_extension_x = CELL8_1_PO3X, space_extension_y = CELL8_1_PO3Y },
    { POLE8, min_space_x = CELL8_1_POLE8X, min_space_y = CELL8_1_POLE8Y, space_extension_x = CELL8_1_POLE8X, space_extension_y = CELL8_1_POLE8Y },
    { PO9, min_space_x = CELL8_1_PO9X, min_space_y = CELL8_1_PO9Y, space_extension_x = CELL8_1_PO9X, space_extension_y = CELL8_1_PO9Y },
    { PO54, min_space_x = CELL8_1_PO54X, min_space_y = CELL8_1_PO54Y, space_extension_x = CELL8_1_PO54X, space_extension_y = CELL8_1_PO54Y },
    { PO86, min_space_x = CELL8_1_PO86X, min_space_y = CELL8_1_PO86Y, space_extension_x = CELL8_1_PO86X, space_extension_y = CELL8_1_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL8_1_SR_DPO3X, min_space_y = CELL8_1_SR_DPO3Y, space_extension_x = CELL8_1_SR_DPO3X, space_extension_y = CELL8_1_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL8_1_SR_DPOLE8X, min_space_y = CELL8_1_SR_DPOLE8Y, space_extension_x = CELL8_1_SR_DPOLE8X, space_extension_y = CELL8_1_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL8_1_SR_DPO9X, min_space_y = CELL8_1_SR_DPO9Y, space_extension_x = CELL8_1_SR_DPO9X, space_extension_y = CELL8_1_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL8_1_SR_DPO54X, min_space_y = CELL8_1_SR_DPO54Y, space_extension_x = CELL8_1_SR_DPO54X, space_extension_y = CELL8_1_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL8_1_SR_DPO86X, min_space_y = CELL8_1_SR_DPO86Y, space_extension_x = CELL8_1_SR_DPO86X, space_extension_y = CELL8_1_SR_DPO86Y },
    { PO_P54, min_space = CELL8_1_PO_P54 },
    { PO_P81, min_space = CELL8_1_PO_P81 },
    { PO_P81_WPO, min_space = CELL8_1_PO_P81_WPO },
    { PO_P57, min_space = CELL8_1_PO_P57 },
    { MD, min_space_x = CELL8_1_MDX, min_space_y = CELL8_1_MDY, space_extension_x = CELL8_1_MDX, space_extension_y = CELL8_1_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL8_1_SRDMDX, min_space_y = CELL8_1_SRDMDY, space_extension_x = CELL8_1_SRDMDX, space_extension_y = CELL8_1_SRDMDY },
    { MD16, min_space_x = CELL8_1_MD16X, min_space_y = CELL8_1_MD16Y, space_extension_x = CELL8_1_MD16X, space_extension_y = CELL8_1_MD16Y },
    { MD30, min_space_x = CELL8_1_MD30X, min_space_y = CELL8_1_MD30Y, space_extension_x = CELL8_1_MD30X, space_extension_y = CELL8_1_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL8_1_SR_DMD16X, min_space_y = CELL8_1_SR_DMD16Y, space_extension_x = CELL8_1_SR_DMD16X, space_extension_y = CELL8_1_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL8_1_SR_DMD30X, min_space_y = CELL8_1_SR_DMD30Y, space_extension_x = CELL8_1_SR_DMD30X, space_extension_y = CELL8_1_SR_DMD30Y },
    { CMD, min_space = CELL8_1_CMD },
    { SR_DCMD_NT_SR, min_space = CELL8_1_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL8_1_NW_CENTERLINE },
    { NT_N, min_space = CELL8_1_NTNI, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL8_1_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL8_1_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL8_1_VAR, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL8_1_HIADMY },
    { DC1, min_space_x = CELL8_1_CELL1X, min_space_y = CELL8_1_CELL1Y, space_extension_x = CELL8_1_CELL1X, space_extension_y = CELL8_1_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL8_1_CELL2_1X, min_space_y = CELL8_1_CELL2_1Y, space_extension_x = CELL8_1_CELL2_1X, space_extension_y = CELL8_1_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL8_1_CELL2_2X, min_space_y = CELL8_1_CELL2_2Y, space_extension_x = CELL8_1_CELL2_2X, space_extension_y = CELL8_1_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL8_1_CELL2_3X, min_space_y = CELL8_1_CELL2_3Y, space_extension_x = CELL8_1_CELL2_3X, space_extension_y = CELL8_1_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL8_1_CELL4_1X, min_space_y = CELL8_1_CELL4_1Y, space_extension_x = CELL8_1_CELL4_1X, space_extension_y = CELL8_1_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL8_1_CELL4_2X, min_space_y = CELL8_1_CELL4_2Y, space_extension_x = CELL8_1_CELL4_2X, space_extension_y = CELL8_1_CELL4_2Y },
    { DC5_1, min_space_x = CELL8_1_CELL5_1X, min_space_y = CELL8_1_CELL5_1Y, space_extension_x = CELL8_1_CELL5_1X, space_extension_y = CELL8_1_CELL5_1Y },
    { DC5_2, min_space_x = CELL8_1_CELL5_2X, min_space_y = CELL8_1_CELL5_2Y, space_extension_x = CELL8_1_CELL5_2X, space_extension_y = CELL8_1_CELL5_2Y },
    { DC6_1, min_space_x = CELL8_1_CELL6_1X, min_space_y = CELL8_1_CELL6_1Y, space_extension_x = CELL8_1_CELL6_1X, space_extension_y = CELL8_1_CELL6_1Y },
    { DC6_2, min_space_x = CELL8_1_CELL6_2X, min_space_y = CELL8_1_CELL6_2Y, space_extension_x = CELL8_1_CELL6_2X, space_extension_y = CELL8_1_CELL6_2Y },
    { DC7, min_space_x = CELL8_1_CELL7X, min_space_y = CELL8_1_CELL7Y, space_extension_x = CELL8_1_CELL7X, space_extension_y = CELL8_1_CELL7Y },
    { DC8_1, min_space_x = CELL8_1_CELL8_1X, min_space_y = CELL8_1_CELL8_1Y, space_extension_x = CELL8_1_CELL8_1X, space_extension_y = CELL8_1_CELL8_1Y },
    { DC8_2, min_space_x = CELL8_1_CELL8_2X, min_space_y = CELL8_1_CELL8_2Y, space_extension_x = CELL8_1_CELL8_2X, space_extension_y = CELL8_1_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL8_1_CELL4_1X, min_space_y = CELL8_1_CELL4_1Y, space_extension_x = CELL8_1_CELL4_1X, space_extension_y = CELL8_1_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL8_1_CELL4_2X, min_space_y = CELL8_1_CELL4_2Y, space_extension_x = CELL8_1_CELL4_2X, space_extension_y = CELL8_1_CELL4_2Y },
    { CELL1_E, min_space_x = CELL8_1_CELL1X, min_space_y = CELL8_1_CELL1Y, space_extension_x = CELL8_1_CELL1X, space_extension_y = CELL8_1_CELL1Y },
    { CELL2_1_E, min_space_x = CELL8_1_CELL2_1X, min_space_y = CELL8_1_CELL2_1Y, space_extension_x = CELL8_1_CELL2_1X, space_extension_y = CELL8_1_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL8_1_CELL2_2X, min_space_y = CELL8_1_CELL2_2Y, space_extension_x = CELL8_1_CELL2_2X, space_extension_y = CELL8_1_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL8_1_CELL2_3X, min_space_y = CELL8_1_CELL2_3Y, space_extension_x = CELL8_1_CELL2_3X, space_extension_y = CELL8_1_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL8_1_CELL4_1X, min_space_y = CELL8_1_CELL4_1Y, space_extension_x = CELL8_1_CELL4_1X, space_extension_y = CELL8_1_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL8_1_CELL4_2X, min_space_y = CELL8_1_CELL4_2Y, space_extension_x = CELL8_1_CELL4_2X, space_extension_y = CELL8_1_CELL4_2Y },
    { CELL5_1_E, min_space_x = CELL8_1_CELL5_1X, min_space_y = CELL8_1_CELL5_1Y, space_extension_x = CELL8_1_CELL5_1X, space_extension_y = CELL8_1_CELL5_1Y },
    { CELL5_2_E, min_space_x = CELL8_1_CELL5_2X, min_space_y = CELL8_1_CELL5_2Y, space_extension_x = CELL8_1_CELL5_2X, space_extension_y = CELL8_1_CELL5_2Y },
    { CELL6_1_E, min_space_x = CELL8_1_CELL6_1X, min_space_y = CELL8_1_CELL6_1Y, space_extension_x = CELL8_1_CELL6_1X, space_extension_y = CELL8_1_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL8_1_CELL6_2X, min_space_y = CELL8_1_CELL6_2Y, space_extension_x = CELL8_1_CELL6_2X, space_extension_y = CELL8_1_CELL6_2Y },
    { CELL7_E, min_space_x = CELL8_1_CELL7X, min_space_y = CELL8_1_CELL7Y, space_extension_x = CELL8_1_CELL7X, space_extension_y = CELL8_1_CELL7Y },
}; // end of FSS_CELL8_1
//=========================================================================================
PATTERN_CELL8_1 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL8_1,
	    insertion = {
		iterations = 3,
        starting_point = CENTER,
        shift_factor = 2,
	    },
	    layers = {
LAYER_SHAPE_CELL8_82_170,
LAYER_SHAPE_CELL8_257_81
	    },
	    pattern_spec = {
            pattern_spacing = {
		        allowed_spacing_x = {>= CELL8_1_CELL8_1X },
		        allowed_spacing_y = {>= CELL8_1_CELL8_1Y },
		        extension = INTERSECTION,
		    },
		//other_pattern_spacing = FSS_CELL8_1,
		space_x = CELL8_1_CELL8_1X,
		space_y = CELL8_1_CELL8_1Y,
	    },
	    cell_prefix = "CELL8_1",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL8_1

SPEC_CELL8_1 = unified_fill(
    fill_patterns = PATTERN_CELL8_1,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL8_1_EXTENT"
	},
    }
);
CELL8_1_82_170_C    = SPEC_CELL8_1["OUTPUT_CELL8_1_82_170"][0];
CELL8_1_257_81_C    = SPEC_CELL8_1["OUTPUT_CELL8_1_257_81"][0];
CELL8_1_E           = SPEC_CELL8_1["CELL8_1_EXTENT"][0];



SHAPE_CELL8_2_82_170 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1400, 0.0000 }, { 0.1400, 0.0460 }, { 0.0000, 0.0460 } }
};    /* AREA RATIO = 1.0 */
SHAPE_CELL8_2_257_82 : list of coordinate_l = { 
    { { 0.0000, 0.0000 }, { 0.1400, 0.0000 }, { 0.1400, 0.0460 }, { 0.0000, 0.0460 } }
};    /* AREA RATIO = 1.0 */

LAYER_SHAPE_CELL8_2_82_170 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL8_2_82_170"
    },
    polygons = SHAPE_CELL8_2_82_170
};

LAYER_SHAPE_CELL8_2_257_82 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL8_2_257_82"
    },
    polygons = SHAPE_CELL8_2_257_82
};



// DUMMY SPEC : Cell8_2
FSS_CELL8_2 : list of fill_to_signal_spacing_s = {

    { CHIP_snps, min_space = 0.001, context = INTERIOR },
#ifdef FULL_CHIP
    { CHIP_BOUNDARY, min_space_x = CELL8_2_CHIPX, min_space_y = CELL8_2_CHIPY, context = INTERIOR },
#else
    { PRBOUNDARY, min_space_x = CELL8_2_IPX, min_space_y = CELL8_2_IPY, context = INTERIOR },
#endif
    { FEOLBLK_FINAL, min_space = CELL_FEOLBLK_F },
    { BLACK_BOX_FEOLBLK, min_space_x = CELL8_2_FEOLBLKX, min_space_y = CELL8_2_FEOLBLKY, space_extension_x = CELL8_2_FEOLBLKX, space_extension_y = CELL8_2_FEOLBLKY },
    { ODBLK, min_space = CELL_BLK },
    { POBLK, min_space = CELL_BLK },
    { MDBLK, min_space = CELL_BLK },
    { FB_26, min_space = CELL8_2_FBOTHER },
    { FB_28, min_space = CELL8_2_FBOTHER },
    { FB_29, min_space = CELL8_2_FBOTHER },
    { FB_31, min_space = CELL8_2_FBOTHER },
    { FB_36, min_space = CELL8_2_FBOTHER },
    { FB_38, min_space = CELL8_2_FBOTHER },
    { STD_FILLER, min_space = CELL8_2_FBOTHER },
    { SRM, min_space = CELL8_2_SRAM },
    { SRM_1, min_space = CELL8_2_SRAM },
    { SRAMDMY, min_space = CELL8_2_SRAM },
    { OD, min_space_x = CELL8_2_ODX, min_space_y = CELL8_2_ODY, space_extension_x = CELL8_2_ODX, space_extension_y = CELL8_2_ODY },
    { SR_DOD_NT_SR, min_space_x = CELL8_2_SR_DODX, min_space_y = CELL8_2_SR_DODY, space_extension_x = CELL8_2_SR_DODX, space_extension_y = CELL8_2_SR_DODY },
    { PO, min_space_x = CELL8_2_POX, min_space_y = CELL8_2_POY, space_extension_x = CELL8_2_POX, space_extension_y = CELL8_2_POY },
    { SR_DPO_NT_SR, min_space_x = CELL8_2_SRDPOX, min_space_y = CELL8_2_SRDPOY, space_extension_x = CELL8_2_SRDPOX, space_extension_y = CELL8_2_SRDPOY },
    { PO3, min_space_x = CELL8_2_PO3X, min_space_y = CELL8_2_PO3Y, space_extension_x = CELL8_2_PO3X, space_extension_y = CELL8_2_PO3Y },
    { POLE8, min_space_x = CELL8_2_POLE8X, min_space_y = CELL8_2_POLE8Y, space_extension_x = CELL8_2_POLE8X, space_extension_y = CELL8_2_POLE8Y },
    { PO9, min_space_x = CELL8_2_PO9X, min_space_y = CELL8_2_PO9Y, space_extension_x = CELL8_2_PO9X, space_extension_y = CELL8_2_PO9Y },
    { PO54, min_space_x = CELL8_2_PO54X, min_space_y = CELL8_2_PO54Y, space_extension_x = CELL8_2_PO54X, space_extension_y = CELL8_2_PO54Y },
    { PO86, min_space_x = CELL8_2_PO86X, min_space_y = CELL8_2_PO86Y, space_extension_x = CELL8_2_PO86X, space_extension_y = CELL8_2_PO86Y },
    { SR_DPO_NT_SR3, min_space_x = CELL8_2_SR_DPO3X, min_space_y = CELL8_2_SR_DPO3Y, space_extension_x = CELL8_2_SR_DPO3X, space_extension_y = CELL8_2_SR_DPO3Y },
    { SR_DPOLE8_NT_SR, min_space_x = CELL8_2_SR_DPOLE8X, min_space_y = CELL8_2_SR_DPOLE8Y, space_extension_x = CELL8_2_SR_DPOLE8X, space_extension_y = CELL8_2_SR_DPOLE8Y },
    { SR_DPO_NT_SR9, min_space_x = CELL8_2_SR_DPO9X, min_space_y = CELL8_2_SR_DPO9Y, space_extension_x = CELL8_2_SR_DPO9X, space_extension_y = CELL8_2_SR_DPO9Y },
    { SR_DPO_NT_SR54, min_space_x = CELL8_2_SR_DPO54X, min_space_y = CELL8_2_SR_DPO54Y, space_extension_x = CELL8_2_SR_DPO54X, space_extension_y = CELL8_2_SR_DPO54Y },
    { SR_DPO_NT_SR86, min_space_x = CELL8_2_SR_DPO86X, min_space_y = CELL8_2_SR_DPO86Y, space_extension_x = CELL8_2_SR_DPO86X, space_extension_y = CELL8_2_SR_DPO86Y },
    { PO_P54, min_space = CELL8_2_PO_P54 },
    { PO_P81, min_space = CELL8_2_PO_P81 },
    { PO_P81_WPO, min_space = CELL8_2_PO_P81_WPO },
    { PO_P57, min_space = CELL8_2_PO_P57 },
    { MD, min_space_x = CELL8_2_MDX, min_space_y = CELL8_2_MDY, space_extension_x = CELL8_2_MDX, space_extension_y = CELL8_2_MDY },
    { SR_DMD_NT_SR, min_space_x = CELL8_2_SRDMDX, min_space_y = CELL8_2_SRDMDY, space_extension_x = CELL8_2_SRDMDX, space_extension_y = CELL8_2_SRDMDY },
    { MD16, min_space_x = CELL8_2_MD16X, min_space_y = CELL8_2_MD16Y, space_extension_x = CELL8_2_MD16X, space_extension_y = CELL8_2_MD16Y },
    { MD30, min_space_x = CELL8_2_MD30X, min_space_y = CELL8_2_MD30Y, space_extension_x = CELL8_2_MD30X, space_extension_y = CELL8_2_MD30Y },
    { SR_DMD_NT_SR16, min_space_x = CELL8_2_SR_DMD16X, min_space_y = CELL8_2_SR_DMD16Y, space_extension_x = CELL8_2_SR_DMD16X, space_extension_y = CELL8_2_SR_DMD16Y },
    { SR_DMD_NT_SR30, min_space_x = CELL8_2_SR_DMD30X, min_space_y = CELL8_2_SR_DMD30Y, space_extension_x = CELL8_2_SR_DMD30X, space_extension_y = CELL8_2_SR_DMD30Y },
    { CMD, min_space = CELL8_2_CMD },
    { SR_DCMD_NT_SR, min_space = CELL8_2_SR_DCMD },
    { NW_CENTERLINE, min_space = 0, min_space_y = CELL8_2_NW_CENTERLINE },
    { NT_N, min_space = CELL8_2_NTNI, context = EXTERIOR_INTERIOR },
    { NWDMY, min_space = CELL8_2_NWDMY },
#ifndef Dummy_Under_INDDMY
    { INDDMY, min_space = CELL_INDDMY },
#endif
    { BJTDMY, min_space = CELL_BJT },
    { BJTEDMY, min_space = CELL_BJT },
    { IBJTDMY, min_space = CELL_BJT },
    { DIODMY, min_space = CELL8_2_DIODMY, context = EXTERIOR_INTERIOR },
    { VAR, min_space = CELL8_2_VAR, context = EXTERIOR_INTERIOR },
    { TCDDMY, min_space = CELL_TCDDMY },
    { ICOVL_SINGLE, min_space = CELL_ICOVL },
    { HIA_DUMMY, min_space = CELL8_2_HIADMY },
    { DC1, min_space_x = CELL8_2_CELL1X, min_space_y = CELL8_2_CELL1Y, space_extension_x = CELL8_2_CELL1X, space_extension_y = CELL8_2_CELL1Y },
    { DC2_MANDREL, min_space_x = CELL8_2_CELL2_1X, min_space_y = CELL8_2_CELL2_1Y, space_extension_x = CELL8_2_CELL2_1X, space_extension_y = CELL8_2_CELL2_1Y },
    { DC2_CORE, min_space_x = CELL8_2_CELL2_2X, min_space_y = CELL8_2_CELL2_2Y, space_extension_x = CELL8_2_CELL2_2X, space_extension_y = CELL8_2_CELL2_2Y },
    { DC2_CORE_TYPE3, min_space_x = CELL8_2_CELL2_3X, min_space_y = CELL8_2_CELL2_3Y, space_extension_x = CELL8_2_CELL2_3X, space_extension_y = CELL8_2_CELL2_3Y },
    { DC4_CORE, min_space_x = CELL8_2_CELL4_1X, min_space_y = CELL8_2_CELL4_1Y, space_extension_x = CELL8_2_CELL4_1X, space_extension_y = CELL8_2_CELL4_1Y },
    { DC4_CORE_TYPE2, min_space_x = CELL8_2_CELL4_2X, min_space_y = CELL8_2_CELL4_2Y, space_extension_x = CELL8_2_CELL4_2X, space_extension_y = CELL8_2_CELL4_2Y },
    { DC5_1, min_space_x = CELL8_2_CELL5_1X, min_space_y = CELL8_2_CELL5_1Y, space_extension_x = CELL8_2_CELL5_1X, space_extension_y = CELL8_2_CELL5_1Y },
    { DC5_2, min_space_x = CELL8_2_CELL5_2X, min_space_y = CELL8_2_CELL5_2Y, space_extension_x = CELL8_2_CELL5_2X, space_extension_y = CELL8_2_CELL5_2Y },
    { DC6_1, min_space_x = CELL8_2_CELL6_1X, min_space_y = CELL8_2_CELL6_1Y, space_extension_x = CELL8_2_CELL6_1X, space_extension_y = CELL8_2_CELL6_1Y },
    { DC6_2, min_space_x = CELL8_2_CELL6_2X, min_space_y = CELL8_2_CELL6_2Y, space_extension_x = CELL8_2_CELL6_2X, space_extension_y = CELL8_2_CELL6_2Y },
    { DC7, min_space_x = CELL8_2_CELL7X, min_space_y = CELL8_2_CELL7Y, space_extension_x = CELL8_2_CELL7X, space_extension_y = CELL8_2_CELL7Y },
    { DC8_1, min_space_x = CELL8_2_CELL8_1X, min_space_y = CELL8_2_CELL8_1Y, space_extension_x = CELL8_2_CELL8_1X, space_extension_y = CELL8_2_CELL8_1Y },
    { DC8_2, min_space_x = CELL8_2_CELL8_2X, min_space_y = CELL8_2_CELL8_2Y, space_extension_x = CELL8_2_CELL8_2X, space_extension_y = CELL8_2_CELL8_2Y },

#ifdef FILL_TCD
    { TCD_E, min_space = CELL_TCDDMY },
#endif
    { CELL4_1_DIWPO_E, min_space_x = CELL8_2_CELL4_1X, min_space_y = CELL8_2_CELL4_1Y, space_extension_x = CELL8_2_CELL4_1X, space_extension_y = CELL8_2_CELL4_1Y },
    { CELL4_2_DIWPO_E, min_space_x = CELL8_2_CELL4_2X, min_space_y = CELL8_2_CELL4_2Y, space_extension_x = CELL8_2_CELL4_2X, space_extension_y = CELL8_2_CELL4_2Y },
    { CELL1_E, min_space_x = CELL8_2_CELL1X, min_space_y = CELL8_2_CELL1Y, space_extension_x = CELL8_2_CELL1X, space_extension_y = CELL8_2_CELL1Y },
    { CELL2_1_E, min_space_x = CELL8_2_CELL2_1X, min_space_y = CELL8_2_CELL2_1Y, space_extension_x = CELL8_2_CELL2_1X, space_extension_y = CELL8_2_CELL2_1Y },
    { CELL2_2_E, min_space_x = CELL8_2_CELL2_2X, min_space_y = CELL8_2_CELL2_2Y, space_extension_x = CELL8_2_CELL2_2X, space_extension_y = CELL8_2_CELL2_2Y },
    { CELL2_3_E, min_space_x = CELL8_2_CELL2_3X, min_space_y = CELL8_2_CELL2_3Y, space_extension_x = CELL8_2_CELL2_3X, space_extension_y = CELL8_2_CELL2_3Y },
    { CELL4_1_E, min_space_x = CELL8_2_CELL4_1X, min_space_y = CELL8_2_CELL4_1Y, space_extension_x = CELL8_2_CELL4_1X, space_extension_y = CELL8_2_CELL4_1Y },
    { CELL4_2_E, min_space_x = CELL8_2_CELL4_2X, min_space_y = CELL8_2_CELL4_2Y, space_extension_x = CELL8_2_CELL4_2X, space_extension_y = CELL8_2_CELL4_2Y },
    { CELL5_1_E, min_space_x = CELL8_2_CELL5_1X, min_space_y = CELL8_2_CELL5_1Y, space_extension_x = CELL8_2_CELL5_1X, space_extension_y = CELL8_2_CELL5_1Y },
    { CELL5_2_E, min_space_x = CELL8_2_CELL5_2X, min_space_y = CELL8_2_CELL5_2Y, space_extension_x = CELL8_2_CELL5_2X, space_extension_y = CELL8_2_CELL5_2Y },
    { CELL6_1_E, min_space_x = CELL8_2_CELL6_1X, min_space_y = CELL8_2_CELL6_1Y, space_extension_x = CELL8_2_CELL6_1X, space_extension_y = CELL8_2_CELL6_1Y },
    { CELL6_2_E, min_space_x = CELL8_2_CELL6_2X, min_space_y = CELL8_2_CELL6_2Y, space_extension_x = CELL8_2_CELL6_2X, space_extension_y = CELL8_2_CELL6_2Y },
    { CELL7_E, min_space_x = CELL8_2_CELL7X, min_space_y = CELL8_2_CELL7Y, space_extension_x = CELL8_2_CELL7X, space_extension_y = CELL8_2_CELL7Y },
    { CELL8_1_E, min_space_x = CELL8_2_CELL8_1X, min_space_y = CELL8_2_CELL8_1Y, space_extension_x = CELL8_2_CELL8_1X, space_extension_y = CELL8_2_CELL8_1Y },
}; // end of FSS_CELL8_2
//=========================================================================================
PATTERN_CELL8_2 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL8_2,
	    insertion = {
		iterations = 3,
        starting_point = CENTER,
        shift_factor = 2,
	    },
	    layers = {
LAYER_SHAPE_CELL8_2_82_170,
LAYER_SHAPE_CELL8_2_257_82
	    },
	    pattern_spec = {
            pattern_spacing = {
		        allowed_spacing_x = {>= CELL8_2_CELL8_2X },
		        allowed_spacing_y = {>= CELL8_2_CELL8_2Y },
		        extension = INTERSECTION,
		    },
		//other_pattern_spacing = FSS_CELL8_2,
		space_x = CELL8_2_CELL8_2X,
		space_y = CELL8_2_CELL8_2Y,
	    },
	    cell_prefix = "CELL8_2",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL8_2

SPEC_CELL8_2 = unified_fill(
    fill_patterns = PATTERN_CELL8_2,
    fill_boundary = {
	layer = CHIP_snps,
	type = LAYER
    },
    grid = vGRID,
    extents_output = {
	{
	    output_layer_key = "CELL8_2_EXTENT"
	},
    }
);
CELL8_2_82_170_C    = SPEC_CELL8_2["OUTPUT_CELL8_2_82_170"][0];
CELL8_2_257_82_C    = SPEC_CELL8_2["OUTPUT_CELL8_2_257_82"][0];
CELL8_2_E           = SPEC_CELL8_2["CELL8_2_EXTENT"][0];



CMD_FILL_REGION = CELL2_1_6_7_F or CELL2_1_6_7_L or CELL2_2_6_7_L or CELL2_3_6_7_L;
// DUMMY SPEC : Cell9
FSS_CELL9 : list of fill_to_signal_spacing_s = {
      { CMD_FILL_REGION, min_space_x = 0.0015, min_space_y = 0.059, context = INTERIOR },
}; // end of FSS_CELL9
//=========================================================================================
LAYER_SHAPE_CELL9_82_270 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL9_82_270"
    },
    polygons = { { { 0, 0 }, { 0.096, 0.056 } } }
};

LAYER_SHAPE_CELL9_257_91 : polygon_layer_s = {
    layer_spec = {
        output_layer_key = "OUTPUT_CELL9_257_91"
    },
    polygons = { { { 0, 0 }, { 0.096, 0.056 } } }
};


PATTERN_CELL9 : list of uf_fill_pattern_s = {
    {
	polygon_fill = {
	    fill_to_signal_spacing = FSS_CELL9,
	    layers = {
		LAYER_SHAPE_CELL9_82_270,
        LAYER_SHAPE_CELL9_257_91
	    },
	    pattern_spec = {
		//other_pattern_spacing = FSS_CELL9,
		space_x = 0.096, 
		space_y = 0.075, 
        stagger_x = 0.096,
	    stagger_y = 0.0,
	    },
	    pitch = {
		context_layer = CMD_FILL_REGION,
	    },
	    cell_prefix = "CELL9",
	},
	type = UF_POLYGON // UF_ADJUSTABLE, UF_EXPANDABLE, UF_STRIPE, 
    },
}; // end of PATTERN_CELL9

SPEC_CELL9 = unified_fill(
    fill_patterns = PATTERN_CELL9,
    fill_boundary = {
	layer = CMD_FILL_REGION,
	type = LAYER
    },
    extents_output = {
	{
	    output_layer_key = "CELL9_EXTENT"
	},
    }
);
CELL9_82_270_C    = SPEC_CELL9["OUTPUT_CELL9_82_270"][0];
CELL9_257_91_C    = SPEC_CELL9["OUTPUT_CELL9_257_91"][0];
CELL9_E           = SPEC_CELL9["CELL9_EXTENT"][0];



//******************************************************************************
//      OUTPUT
//******************************************************************************
output_layers : list of write_layer_map_s = {};

COMPRESS_TYPE : compress_fill_mode_e = AUTO;
//COMPRESS_TYPE : compress_fill_mode_e = NONE;

//******************************************************************************
//      OUTPUT
//******************************************************************************
#ifdef OUTPUT_GDS
#else
#endif
#ifdef FILL_TCD
output_layers.push_back({ TCD_165_1_C, { 165, 1 }, compress_fill = { cell = "TCD_165_1", mode = COMPRESS_TYPE}} );
#endif
output_layers.push_back({ CELL1_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL1_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL1_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL1_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL1_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_6_161_L, { 6, 161 }, compress_fill = { cell = "CELL1_6_161_L", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL1_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_3_0_C, { 3, 0 }, compress_fill = { cell = "CELL1_3_0", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_17_50_C, { 17, 50 }, compress_fill = { cell = "CELL1_17_50", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL1_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL1_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_25_0_C, { 25, 0 }, compress_fill = { cell = "CELL1_25_0", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_26_0_C, { 26, 0 }, compress_fill = { cell = "CELL1_26_0", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_206_170_C, { 206, 170 }, compress_fill = { cell = "CELL1_206_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL1_257_11_C, { 257, 11 }, compress_fill = { cell = "CELL1_257_11", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_257_201_M, { 257, 201 }, compress_fill = { cell = "CELL2_1_257_201", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_17_50_C, { 17, 50 }, compress_fill = { cell = "CELL2_1_17_50", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL2_1_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_161_L, { 6, 161 }, compress_fill = { cell = "CELL2_1_6_161_L", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL2_1_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_257_21_C, { 257, 21 }, compress_fill = { cell = "CELL2_1_257_21", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL2_1_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL2_1_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL2_1_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL2_1_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL2_1_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_CONNECT_257_21_C, { 257, 21 }, compress_fill = { cell = "CELL2_1ONNECT_257_21", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_CONNECT_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL2_1ONNECT_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_CONNECT_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL2_1ONNECT_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_CONNECT_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL2_1ONNECT_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_CONNECT_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL2_1ONNECT_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_7_F, { 6, 7 }, compress_fill = { cell = "CELL2_1_6_7_F", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_6_160_F, { 6, 160 }, compress_fill = { cell = "CELL2_1_6_160_F", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_17_50_F, { 17, 50 }, compress_fill = { cell = "CELL2_1_17_50_F", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_257_201_F, { 257, 201 }, compress_fill = { cell = "CELL2_1_257_201_F", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_1_82_270_F, { 82, 270 }, compress_fill = { cell = "CELL2_1_82_270_F", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_17_50_C, { 17, 50 }, compress_fill = { cell = "CELL2_2_17_50", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL2_2_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL2_2_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL2_2_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_257_22_C, { 257, 22 }, compress_fill = { cell = "CELL2_2_257_22", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL2_2_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL2_2_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL2_2_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL2_2_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_2_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL2_2_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL2_3_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL2_3_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL2_3_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_257_25_C, { 257, 25 }, compress_fill = { cell = "CELL2_3_257_25", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL2_3_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL2_3_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL2_3_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL2_3_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL2_3_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL2_3_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL4_1_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL4_1_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL4_1_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL4_1_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL4_1_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL4_1_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL4_1_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_257_42_C, { 257, 42 }, compress_fill = { cell = "CELL4_1_257_42", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL4_1_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_257_44_C, { 257, 44 }, compress_fill = { cell = "CELL4_2_257_44", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL4_2_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL4_2_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL4_2_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL4_2_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL4_2_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL4_2_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL4_2_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL4_2_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL4_1_DIWPO_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL4_1_DIWPO_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL4_1_DIWPO_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL4_1_DIWPO_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL4_1_DIWPO_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL4_1_DIWPO_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL4_1_DIWPO_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_257_42_C, { 257, 42 }, compress_fill = { cell = "CELL4_1_DIWPO_257_42", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_1_DIWPO_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL4_1_DIWPO_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_257_44_C, { 257, 44 }, compress_fill = { cell = "CELL4_2_DIWPO_257_44", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL4_2_DIWPO_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL4_2_DIWPO_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL4_2_DIWPO_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL4_2_DIWPO_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL4_2_DIWPO_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL4_2_DIWPO_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL4_2_DIWPO_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL4_2_DIWPO_250_1_C, { 250, 1 }, compress_fill = { cell = "CELL4_2_DIWPO_250_1", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL5_1_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL5_1_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL5_1_257_51_C, { 257, 51 }, compress_fill = { cell = "CELL5_1_257_51", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL5_2_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL5_2_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL5_2_257_52_C, { 257, 52 }, compress_fill = { cell = "CELL5_2_257_52", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_257_61_C, { 257, 61 }, compress_fill = { cell = "CELL6_1_257_61", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_14_0_C, { 14, 0 }, compress_fill = { cell = "CELL6_1_14_0", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_250_2_C, { 250, 2 }, compress_fill = { cell = "CELL6_1_250_2", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL6_1_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL6_1_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL6_1_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL6_1_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL6_1_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL6_1_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_1_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL6_1_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_250_2_C, { 250, 2 }, compress_fill = { cell = "CELL6_2_250_2", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_6_160_C, { 6, 160 }, compress_fill = { cell = "CELL6_2_6_160", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_6_7_C, { 6, 7 }, compress_fill = { cell = "CELL6_2_6_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_14_0_C, { 14, 0 }, compress_fill = { cell = "CELL6_2_14_0", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_257_62_C, { 257, 62 }, compress_fill = { cell = "CELL6_2_257_62", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL6_2_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_6_170_C, { 6, 170 }, compress_fill = { cell = "CELL6_2_6_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_6_161_C, { 6, 161 }, compress_fill = { cell = "CELL6_2_6_161", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL6_2_17_7_C, { 17, 7 }, compress_fill = { cell = "CELL6_2_17_7", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL7_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL7_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL7_257_71_C, { 257, 71 }, compress_fill = { cell = "CELL7_257_71", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL8_1_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL8_1_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL8_1_257_81_C, { 257, 81 }, compress_fill = { cell = "CELL8_1_257_81", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL8_2_82_170_C, { 82, 170 }, compress_fill = { cell = "CELL8_2_82_170", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL8_2_257_82_C, { 257, 82 }, compress_fill = { cell = "CELL8_2_257_82", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL9_82_270_C, { 82, 270 }, compress_fill = { cell = "CELL9_82_270", mode = COMPRESS_TYPE}} );
output_layers.push_back({ CELL9_257_91_C, { 257, 91 }, compress_fill = { cell = "CELL9_257_91", mode = COMPRESS_TYPE}} );



FEOL_output_size : integer = output_layers.size();

#ifndef COMBINE
#ifdef OUTPUT_GDS
write_gds(
    output_library = out_file,
#ifdef MERGE_ORIGINAL_DESIGN
    merge_input_layout = true,
#endif
    cell_prefix = output_cell_prefix,
    layers = output_layers
);
#else
write_oasis(
    output_library = out_file,
#ifdef MERGE_ORIGINAL_DESIGN
    merge_input_layout = true,
#endif
    cell_prefix = output_cell_prefix,
    layers = output_layers
);
#endif  // end of #ifdef OUTPUT_GDS

#endif

