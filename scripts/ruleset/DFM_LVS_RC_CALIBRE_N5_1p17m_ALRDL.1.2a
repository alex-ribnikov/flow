#!tvf

tvf::VERBATIM {


// xCalibre/calibre  RC/LVS command file based on the follow calibre command file//
/////////////////////////////////////////////////////////////////////////////////
// 
// 
// 
// 
///////////////////////////////////////////////////////////////////////// 
//// 
////                      TSMC CONFIDENTIAL 
//// 
///////////////////////////////////////////////////////////////////////// 
//   @(#) TSMC N5 CALIBRE LVS/RC COMMAND FILE  
//   @(#) COMMAND FILE DOCUMENT: T-N05-CL-LS-007-C1 
//   @(#) COMMAND FILE VERSION: 1.2a  
//   @(#) COMMAND FILE METAL SCHEME: 1P17M  
//   @(#) COMMAND FILE DATE: 11/08/2021  
//   @(#) EDA TOOL VERSION: Calibre v2021.1_38.25  
////////////////////////////////////////////////////////////////// 
//    
//   TSMC has developed this deck using Mentor Graphics proprietary SVRF and TVF formats.  
//   The deck is to be used only in Calibre tools  
// 
//////////////////////////////////////////////////////////////////    
//////////////////////////////////////////////////////////////////////////////// 
// DISCLAIMER 
// 
// This file usually contains the super set of device extraction rule at TSMC
// processes. However, all of device in basic deck may not be offered at current
// SPICE model. PLEASE ALWAYS REFER TO THE CORRESPONDING SPICE MODEL DOCUMENT
// FOR ANY DEVICE YOU WOULD LIKE USE.
// 
// The information contained herein is provided by TSMC on an "AS IS" basis 
// without any warranty, and TSMC has no obligation to support or otherwise 
// maintain the information.  TSMC disclaims any representation that the 
// information does not infringe any intellectual property rights or proprietary 
// rights of any third parties.  There are no other warranties given by TSMC, 
// whether express, implied or statutory, including, without limitation, implied 
// warranties of merchantability and fitness for a particular purpose. 
// 
// STATEMENT OF USE 
// 
// This information contains confidential and proprietary information of TSMC. 
// No part of this information may be reproduced, transmitted, transcribed, 
// stored in a retrieval system, or translated into any human or computer 
// language, in any form or by any means, electronic, mechanical, magnetic, 
// optical, chemical, manual, or otherwise, without the prior written permission 
// of TSMC.  This information was prepared for informational purpose and is for 
// use by TSMC's customers only.  TSMC reserves the right to make changes in the 
// information at any time and without notice. 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//                             DEVICE FORMULA 
//   CORE == 0.7v  
//   I/O  == 1.2v  
//   ----- ----------------------------- ---------------------------------- 
//   NAME     DESCRIPTION                   DEVICE LAYER OPERATION 
//   ----- ----------------------------- ---------------------------------- 
// 
// 
//    
// 
// 
// 
// 
//   M[nch_svt_mac]             CORE Standard-Vt NMOS                             (NGATE-OD2-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_svt_dnw_mac]         CORE Standard-Vt NMOS in DNW                      (NGATE-OD2-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD*DNWDMY) 
// 
// 
//   M[nch_lvt_mac]             CORE Low VT NMOS                                  (NGATE-OD2-NT_N*VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_lvtll_mac]           CORE Low VT Low Leakage NMOS                      (NGATE-OD2-NT_N-VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL*VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_lvt_dnw_mac]         CORE Low VT NMOS in DNW                           (NGATE-OD2-NT_N*VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD*DNWDMY) 
//   M[nch_lvtll_dnw_mac]       CORE Low VT Low Leakage NMOS in DNW               (NGATE-OD2-NT_N-VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL*VTLN_LL-SRM-SR_ESD*DNWDMY) 
// 
//   M[nch_ulvt_mac]            CORE Ultra Low VT NMOS                            (NGATE-OD2-NT_N*VTUL_N-VTS_N-VTL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_ulvtll_mac]          CORE Ultra Low VT Low Leakage NMOS                (NGATE-OD2-NT_N-VTUL_N-VTS_N-VTL_N-VTEL_N*VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_ulvt_dnw_mac]        CORE Ultra Low VT NMOS in DNW                     (NGATE-OD2-NT_N*VTUL_N-VTS_N-VTL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD*DNWDMY) 
//   M[nch_ulvtll_dnw_mac]      CORE Ultra Low VT Low Leakage NMOS in DNW         (NGATE-OD2-NT_N-VTUL_N-VTS_N-VTL_N-VTEL_N*VTULN_LL-VTLN_LL-SRM-SR_ESD*DNWDMY) 
// 
// 
//   M[nch_elvt_mac]            CORE Extreme Low VT NMOS                          (NGATE-OD2-NT_N*VTEL_N-VTS_N-VTL_N-VTUL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY) 
//   M[nch_elvt_dnw_mac]        CORE Extreme Low VT NMOS in DNW                   (NGATE-OD2-NT_N*VTEL_N-VTS_N-VTL_N-VTUL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD*DNWDMY) 
// 
//   M[nch_flrsvt_mac]          CORE Standard-Vt FILLER NMOS                      (NGATE-FB1-OD2-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
//   M[nch_flrlvt_mac]          CORE Low VT FILLER NMOS                           (NGATE-FB1-OD2-NT_N*VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
//   M[nch_flrlvtll_mac]        CORE Low VT FILLER Low Leakage NMOS               (NGATE-FB1-OD2-NT_N-VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL*VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
//   M[nch_flrulvt_mac]         CORE Ultra Low VT FILLER NMOS                     (NGATE-FB1-OD2-NT_N*VTUL_N-VTS_N-VTL_N-VTEL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
//   M[nch_flrulvtll_mac]       CORE Ultra Low VT FILLER Low Leakage NMOS         (NGATE-FB1-OD2-NT_N-VTUL_N-VTS_N-VTL_N-VTEL_N*VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
//   M[nch_flrelvt_mac]         CORE Extreme Low VT FILLER NMOS                   (NGATE-FB1-OD2-NT_N*VTEL_N-VTS_N-VTL_N-VTUL_N-VTULN_LL-VTLN_LL-SRM-SR_ESD-DNWDMY*FILLER_MOS) 
// 
// 
//   M[nch_12_mac]              I/O 1.2V VT NMOS                                  (NGATE*OD12-NT_N-DNWDMY) 
//   M[nch_12_dnw_mac]          I/O 1.2V VT NMOS in DNW                           (NGATE*OD12-NT_N*DNWDMY) 
//   M[nch_12od15_mac]          I/O 1.2V over-drive 1.5V VT NMOS                  (NGATE*OD12*OD12_15-NT_N-DNWDMY) 
//   M[nch_12od15_dnw_mac]      I/O 1.2V over-drive 1.5V VT NMOS in DNW           (NGATE*OD12*OD12_15-NT_N*DNWDMY) 
// 
// 
//   M[nch_hia12_mac]           ESD 1.2V HIA NMOS                                 (NGATES*OD12*SR_ESD*SDI*SDI_2-DNWDMY)  
// 
//   M[pch_svt_mac]             CORE Standard-Vt PMOS                             (PGATE-OD2*VTS_P-VTL_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM) 
//   M[pch_lvt_mac]             CORE Low VT PMOS                                  (PGATE-OD2*VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM) 
//   M[pch_lvtll_mac]           CORE Low VT Low Leakage PMOS                      (PGATE-OD2-VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL*VTLP_LL-SRM) 
//   M[pch_ulvt_mac]            CORE Ultra Low VT PMOS                            (PGATE-OD2*VTUL_P-VTS_P-VTL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM) 
//   M[pch_ulvtll_mac]          CORE Ultra Low VT Low Leakage PMOS                (PGATE-OD2-VTUL_P-VTS_P-VTL_P-VTEL_P*VTULP_LL-VTLP_LL-SRM) 
//   M[pch_elvt_mac]            CORE Extreme Low VT PMOS                          (PGATE-OD2*VTEL_P-VTS_P-VTL_P-VTUL_P-VTULP_LL-VTLP_LL-SRM) 
// 
//   M[pch_flrsvt_mac]          CORE Standard-Vt FILLER PMOS                      (PGATE-FB1-OD2*VTS_P-VTL_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM*FILLER_MOS) 
//   M[pch_flrlvt_mac]          CORE Low VT FILLER PMOS                           (PGATE-FB1-OD2*VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM*FILLER_MOS) 
//   M[pch_flrlvtll_mac]        CORE Low VT FILLER Low Leakage PMOS               (PGATE-FB1-OD2-VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL*VTLP_LL-SRM*FILLER_MOS) 
//   M[pch_flrulvt_mac]         CORE Ultra Low VT FILLER PMOS                     (PGATE-FB1-OD2*VTUL_P-VTS_P-VTL_P-VTEL_P-VTULP_LL-VTLP_LL-SRM*FILLER_MOS) 
//   M[pch_flrulvtll_mac]       CORE Ultra Low VT FILLER Low Leakage PMOS         (PGATE-FB1-OD2-VTUL_P-VTS_P-VTL_P-VTEL_P*VTULP_LL-VTLP_LL-SRM*FILLER_MOS) 
//   M[pch_flrelvt_mac]         CORE Extreme Low VT FILLER PMOS                   (PGATE-FB1-OD2*VTEL_P-VTS_P-VTL_P-VTUL_P-VTULP_LL-VTLP_LL-SRM*FILLER_MOS) 
// 
//   M[pch_12_mac]              I/O 1.2V VT PMOS                                  (PGATE*OD12) 
//   M[pch_12od15_mac]          I/O 1.2V VT over-drive 1.5V PMOS                  (PGATE*OD12*OD12_15) 
// 
// 
// 
//   M[nchpg_ulhdsr_mac]         SP (1 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2012*SRM2014) 
//   M[nchpd_ulhdsr_mac]         SP (1 fin) (pull-down)                                    (NGATES*SRMDEVi*SRM*SRM2012*SRM2014)     
//   M[pchpu_ulhdsr_mac]         SP (1 fin) (pull-up)                                      (PGATES*SRMDEVi*SRM*SRM2012*SRM2014)     
//   M[nchpg_hdsr_mac]           SP (1 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2014)     
//   M[nchpd_hdsr_mac]           SP (1 fin) (pull-down)                                    (NGATES*SRMDEVi*SRM*SRM2014)             
//   M[pchpu_hdsr_mac]           SP (1 fin) (pull-up)                                      (PGATES*SRMDEVi*SRM*SRM2014)             
//   M[nchpg_hcsr_mac]           SP (2 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2013)     
//   M[nchpd_hcsr_mac]           SP (2 fin) (pull-down)                                    (NGATES*SRMDEVi*SRM*SRM2013)             
//   M[pchpu_hcsr_mac]           SP (1 fin) (pull-up)                                      (PGATES*SRMDEVi*SRM*SRM2013)             
//   M[nchpg_hc8tsr_mac]         SP (2 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2019*SRM2020) 
//   M[nchpd_hc8tsr_mac]         2P8T (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2019*SRM2020)     
//   M[pchpu_hc8tsr_mac]         2P8T (1 fin) (pull-up)                                    (PGATES*SRMDEVi*SRM*SRM2019*SRM2020)     
//   M[nchpg_hc8trpsr_mac]       2P8T (3 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2020)     
//   M[nchpd_hc8trpsr_mac]       2P8T (3 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2020)             
//   M[nchpg_hssr_mac]           SP (2 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2013*SRM2033) 
//   M[nchpd_hssr_mac]           SP (2 fin) (pull-down)                                    (NGATES*SRMDEVi*SRM*SRM2013*SRM2033)     
//   M[pchpu_hssr_mac]           SP (1 fin) (pull-up)                                      (PGATES*SRMDEVi*SRM*SRM2013*SRM2033)     
//   M[nchpg_8tsr_mac]           2P8T (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2017*SRM2018) 
//   M[nchpd_8tsr_mac]           2P8T (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2017*SRM2018)     
//   M[pchpu_8tsr_mac]           2P8T (1 fin) (pull-up)                                    (PGATES*SRMDEVi*SRM*SRM2017*SRM2018)     
//   M[nchpg_8trpsr_mac]         2P8T (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2018)     
//   M[nchpd_8trpsr_mac]         2P8T (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2018)             
//   M[nchpg_tpsr_mac]           3P10T (2 fin) (pass-gate)                                 (NGATES*SRMDEVi*SRM*SRM2010*SRM2021*SRM2022) 
//   M[nchpd_tpsr_mac]           3P10T (2 fin) (pull-down)                                 (NGATES*SRMDEVi*SRM*SRM2021*SRM2022)     
//   M[pchpu_tpsr_mac]           3P10T (1 fin) (pull-up)                                   (PGATES*SRMDEVi*SRM*SRM2021*SRM2022)     
//   M[nchpg_tprpsr_mac]         3P10T (3 fin) (pass-gate)                                 (NGATES*SRMDEVi*SRM*SRM2010*SRM2022)     
//   M[nchpd_tprpsr_mac]         3P10T (3 fin) (pull-down)                                 (NGATES*SRMDEVi*SRM*SRM2022)             
//   M[nchpg_dpfsr_mac]          DP (2 fin) (pass-gate)                                    (NGATES*SRMDEVi*SRM*SRM2010*SRM2030)     
//   M[nchpd_dpfsr_mac]          DP (2 fin) (pull-down)                                    (NGATES*SRMDEVi*SRM*SRM2030)             
//   M[pchpu_dpfsr_mac]          DP (1 fin) (pull-up)                                      (PGATES*SRMDEVi*SRM*SRM2030)             
//   M[nchpg_camsr_mac]          TCAM (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2025*SRM2026) 
//   M[nchpd_camsr_mac]          TCAM (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2025*SRM2026)     
//   M[pchpu_camsr_mac]          TCAM (1 fin) (pull-up)                                    (PGATES*SRMDEVi*SRM*SRM2025*SRM2026)     
//   M[nchpg_camcpsr_mac]        TCAM (3 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2026)     
//   M[nchpd_camcpsr_mac]        TCAM (3 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2026)             
//   M[nchpg_hdcamsr_mac]        TCAM (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2025*SRM2026*SRM2031) 
//   M[nchpd_hdcamsr_mac]        TCAM (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2025*SRM2026*SRM2031) 
//   M[pchpu_hdcamsr_mac]        TCAM (1 fin) (pull-up)                                    (PGATES*SRMDEVi*SRM*SRM2025*SRM2026*SRM2031) 
//   M[nchpg_hdcamcpsr_mac]      TCAM (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM2010*SRM2026*SRM2031) 
//   M[nchpd_hdcamcpsr_mac]      TCAM (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM2026*SRM2031)     
// 
// 
// 
//   npode_svt_mac              CORE Standard-Vt NPODE                            (PODE_GATE*(NGATE-OD2-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   npode_lvt_mac              CORE Low VT NPODE                                 (PODE_GATE*(NGATE-OD2-NT_N*VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   npode_lvtll_mac            CORE Low VT Low Leakage NPODE                     (PODE_GATE*(NGATE-OD2-NT_N-VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL*VTLN_LL)-SRM-SR_ESD) 
//   npode_ulvt_mac             CORE Ultra Low VT NPODE                           (PODE_GATE*(NGATE-OD2-NT_N*VTUL_N-VTS_N-VTL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   npode_ulvtll_mac           CORE Ultra Low VT Low Leakage NPODE               (PODE_GATE*(NGATE-OD2-NT_N-VTUL_N-VTS_N-VTL_N-VTEL_N*VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   npode_elvt_mac             CORE Extreme Low VT NPODE                         (PODE_GATE*(NGATE-OD2-NT_N*VTEL_N-VTS_N-VTL_N-VTUL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
// 
//   npode_12_mac               I/O 1.2V VT NPODE                                 (PODE_GATE*(NGATE*OD12)-NT_N) 
//   npode_12od15_mac           I/O 1.2V over-drive 1.5V VT NPODE                 (PODE_GATE*(NGATE*OD12*OD12_15)-NT_N) 
// 
//   ppode_svt_mac              CORE Standard-Vt PPODE                            (PODE_GATE*(PGATE-OD2*VTS_P-VTL_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   ppode_lvt_mac              CORE Low VT PPODE                                 (PODE_GATE*(PGATE-OD2*VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   ppode_lvtll_mac            CORE Low VT Low Leakage PPODE                     (PODE_GATE*(PGATE-OD2-VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL*VTLP_LL)-SRM) 
//   ppode_ulvt_mac             CORE Ultra Low VT PPODE                           (PODE_GATE*(PGATE-OD2*VTUL_P-VTS_P-VTL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   ppode_ulvtll_mac           CORE Ultra Low VT Low Leakage PPODE               (PODE_GATE*(PGATE-OD2-VTUL_P-VTS_P-VTL_P-VTEL_P*VTULP_LL-VTLP_LL)-SRM) 
//   ppode_elvt_mac             CORE Extreme Low VT PPODE                         (PODE_GATE*(PGATE-OD2*VTEL_P-VTS_P-VTL_P-VTUL_P-VTULP_LL-VTLP_LL)-SRM) 
// 
//   ppode_12_mac               I/O 1.2V VT PPODE                                 (PODE_GATE*PGATE*OD12) 
//   ppode_12od15_mac           I/O 1.2V over-drive 1.5V VT PPODE                 (PODE_GATE*PGATE*OD12*OD12_15) 
// 
//   M[nch_mpodesvt_mac]        4T N-type MPODE                                   (PODE_GATE*(NGATE-OD2-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpodelvt_mac]        4T N-type LVT MPODE                               (PODE_GATE*(NGATE-OD2-NT_N*VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpodelvtll_mac]      4T N-type LVT Low Leakage MPODE                   (PODE_GATE*(NGATE-OD2-NT_N-VTL_N-VTS_N-VTUL_N-VTEL_N-VTULN_LL*VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpodeulvt_mac]       4T N-type ULVT MPODE                              (PODE_GATE*(NGATE-OD2-NT_N*VTUL_N-VTS_N-VTL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpodeulvtll_mac]     4T N-type ULVT Low Leakage MPODE                  (PODE_GATE*(NGATE-OD2-NT_N-VTUL_N-VTS_N-VTL_N-VTEL_N*VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpodeelvt_mac]       4T N-type Extreme MPODE                           (PODE_GATE*(NGATE-OD2-NT_N*VTEL_N-VTS_N-VTL_N-VTUL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpode12_mac]         4T N-type I/O 1.2V MPODE                          (PODE_GATE*(NGATE*OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[nch_mpode12od15_mac]     4T N-type I/O 1.2V over-drive 1.5V MPODE          (PODE_GATE*(NGATE*OD12*OD12_15-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//  
//   M[pch_mpodesvt_mac]        4T P-type MPODE                                   (PODE_GATE*(PGATE-OD2*VTS_P-VTL_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   M[pch_mpodelvt_mac]        4T P-type LVT MPODE                               (PODE_GATE*(PGATE-OD2*VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   M[pch_mpodelvtll_mac]      4T P-type LVT Low Leakage MPODE                   (PODE_GATE*(PGATE-OD2-VTL_P-VTS_P-VTUL_P-VTEL_P-VTULP_LL*VTLP_LL)-SRM) 
//   M[pch_mpodeulvt_mac]       4T P-type ULVT MPODE                              (PODE_GATE*(PGATE-OD2*VTUL_P-VTS_P-VTL_P-VTEL_P-VTULP_LL-VTLP_LL)-SRM) 
//   M[pch_mpodeulvtll_mac]     4T P-type ULVT Low Leakage MPODE                  (PODE_GATE*(PGATE-OD2-VTUL_P-VTS_P-VTL_P-VTEL_P*VTULP_LL-VTLP_LL)-SRM) 
//   M[pch_mpodeelvt_mac]       4T P-type Extreme MPODE                           (PODE_GATE*(PGATE-OD2*VTEL_P-VTS_P-VTL_P-VTUL_P-VTULP_LL-VTLP_LL)-SRM) 
//   M[pch_mpode12_mac]         4T P-type I/O 1.2V MPODE                          (PODE_GATE*(PGATE*OD12-NT_N-VTS_P-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
//   M[pch_mpode12od15_mac]     4T P-type I/O 1.2V over-drive 1.5V MPODE          (PODE_GATE*(PGATE*OD12*OD12_15-NT_N-VTS_P-VTL_N-VTUL_N-VTEL_N-VTULN_LL-VTLN_LL)-SRM-SR_ESD) 
// 
//   D[nwdio]                   CORE diode NW/PW                                  (DIODMY*PO*NW*VTUL_N-OD12)  
// 
//   D[dnwpsub]                 Diode DNW/PSUB                                    (DNW*PSUB) 
//   D[pwdnw]                   Diode DNW/PSUB                                    (DNW-NW) 
//   D[pnwdio]                  Parasitic NW/PW diode                             (NW-DIODMY)    
// 
//   ndio_mac                   CORE diode N+/PW                                  (DIODMY*OD*PO*NP*VTUL_N-OD2-NW) 
//   ndio_12_mac                1.2V diode N+/PW                                  (DIODMY*OD*PO*NP*OD12-NW-NT_N) 
//   ndio_12_ntn_mac            1.2V diode N+/NT_N                                (DIODMY*OD*PO*NP*OD12-NW*NT_N-DNW) 
//   pdio_mac                   CORE diode P+/NW                                  (DIODMY*OD*PO*PP*VTUL_P-OD2*NW) 
//   pdio_12_mac                1.2V diode P+/NW                                  (DIODMY*OD*PO*PP*OD12*NW) 
// 
//   ndio_hia12_mac             1.2V 2T ESD diode N+/PW                           (HIA_DUMMY*OD*NP*OD12-NW*POi-NT_N) 
//   ndio_hia12_ntn_mac         1.2V 2T ESD diode N+/NT_N                         (HIA_DUMMY*OD*NP*OD12-NW*POi*NT_N-DNW) 
//   pdio_hia12_mac             1.2V 2T ESD diode P+/NW                           (HIA_DUMMY*OD*PP*OD12*NW*POi)    
// 
//   Q[pnp_i1_mac]              Cascade PNP (P+/NW/Psub)                          (IBJTDMY-DNW*NW*BJTEDMY*OD*OD12*PO*PP) 
//   Q[pnp_i2_mac]              Cascade PNP (P+/NW/Psub)                          (IBJTDMY-DNW*NW*BJTEDMY*OD*OD12*PO*PP) 
//   Q[pnp_p1_mac]              Cascade PNP (PW/DNW/Psub)                         (IBJTDMY*DNW*NW*BJTEDMY*OD*OD12*PO*PP) 
// 
//   nmoscap                    CORE MOSCAP Varactor                              (VARGT*VTUL_N-OD12) 
//   nmoscap_12                 1.2V MOSCAP Varactor                              (VARGT*VTUL_N*OD12) 
//   nmoscap_12od15             1.2V over-drive 1.5V MOSCAP Varactor              (VARGT*VTUL_N*OD12*OD12_15) 
// 
//   rm0w                     M0 resistor                                       (RMDMY0*ALL_M0i) 
//   rm1w                     M1 resistor                                       (RMDMY1*ALL_M1i) 
//   rm2w                     M2 resistor                                       (RMDMY2*ALL_M2i) 
//   rm3w                     M3 resistor                                       (RMDMY3*ALL_M3i) 
//   rm4w                     M4 resistor                                       (RMDMY4*ALL_M4i) 
//   rm5w                     M5 resistor                                       (RMDMY5*ALL_M5i) 
//   rm6w                     M6 resistor                                       (RMDMY6*ALL_M6i) 
//   rm7w                     M7 resistor                                       (RMDMY7*ALL_M7i) 
//   rm8w                     M8 resistor                                       (RMDMY8*ALL_M8i) 
//   rm9w                     M9 resistor                                       (RMDMY9*ALL_M9i) 
//   rm10w                     M10 resistor                                       (RMDMY10*ALL_M10i) 
//   rm11w                     M11 resistor                                       (RMDMY11*ALL_M11i) 
//   rm12w                     M12 resistor                                       (RMDMY12*ALL_M12i) 
//   rm13w                     M13 resistor                                       (RMDMY13*ALL_M13i) 
//   rm14w                     M14 resistor                                       (RMDMY14*ALL_M14i) 
//   rm15w                     M15 resistor                                       (RMDMY15*ALL_M15i) 
//   rm16w                     M16 resistor                                       (RMDMY16*ALL_M16i) 
//   rm17w                     M17 resistor                                       (RMDMY17*ALL_M17i) 
//   rmap                       AP resistor                                       (RMDMYAP*APi) 
// 
//   rhim                       High Resistor (TiN)                               (RH_TN*RHDMY_ALL*RHDMYn)  
// 
//   efuse_m0                   M0 efuse resistor                                 (M0_Ai*MFUSE-RMDMY0) 
//   efuse_m1                   M1 efuse resistor                                 (M1_Ai*MFUSE-RMDMY1) 
//   efuse_mx                   M2 efuse resistor                                 (M2_Ai_X*MFUSE-RMDMY2) 
//   efuse_m4                   M4 efuse resistor                                 (M4_Ai_Xe*MFUSE-RMDMY4) 
// 
//   mimcap_sin_shd_3t          SHDMIM CAPACITOR                                  (BPCi*MPCi*TPCi*TPCDMY_AP-TPCDMY_AP2)	 
//   mimcap_sin_fhd             FHDMIM CAPACITOR                                  (BPCi*MPCi-TPCi*TPCDMY_AP*TPCDMY_AP2)	 
// 
// 
//   crtmom_wo                  3T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)-RFDMY-MOMDMY_MX*MOMDMY_NPO) 
//   crtmom_2t                  2T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)-MOMDMY_MX*MOMDMY_2T) 
//   crtmom_wo_mx               5T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*MOMDMY_MX*MOMDMY_NPO) 
//   crtmom_mx_4t               4T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*MOMDMY_MX*MOMDMY_2T)  
//   crtmom_wo_rf               RF RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RFDMY*MOMDMY_NPO)  
// 
//   moscap_rf_nw               CORE RF MOSCAP Varactor  wo DNW                   (VARGT-OD12-DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
//   moscap_rf12_nw             IO 12 RF MOSCAP Varactor wo DNW                   (VARGT*OD12-DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
//   moscap_rf12od15_nw         IO 12 over-drive 1.5v RF MOSCAP Varactor wo DNW   (VARGT*OD12*OD12_15-DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
//   moscap_rf                  CORE RF MOSCAP Varactor  wi DNW                   (VARGT-OD12*DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
//   moscap_rf12                IO 12 RF MOSCAP Varactor wi DNW                   (VARGT*OD12*DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
//   moscap_rf12od15            IO 12 over-drive 1.5v RF MOSCAP Varactor wi DNW   (VARGT*OD12*OD12_15*DNW*RFDMY*VTUL_N*VTUL_P-VARi_Mxs) 
// 
// 
// 
//   ----- ----------------------------- ---------------------------------- 
//   * OD    = ODi 
//   * PO    = POi 
//   * PSUB  = BULK 
//   * PODE_GATE = PODE_GATEi 
//   * ALL_M0i   = M0_Ai + M0_Bi 
//   * ALL_M1i   = M1_Ai + M1_Bi 
//   * ALL_M2i   = M2_Ai1 + M2_Bi + M2i + M2_Ai_X 
//   * ALL_M3i   = M3_Ai + M3_Bi + M3i 
//   * ALL_M4i   = M4_Ai1 + M4_Bi + M4i + M4_Ai_Xe 
//   * ALL_M5i   = M5_Ai + M5_Bi + M5i 
//   * ALL_M6i   = M6_Ai + M6_Bi + M6i 
//   * ALL_M7i   = M7_Ai + M7_Bi + M7i 
//   * ALL_M8i   = M8_Ai + M8_Bi + M8i 
//   * ALL_M9i   = M9_Ai + M9_Bi + M9i 
//   * ALL_M10i   = M10_Ai + M10_Bi + M10i 
//   * ALL_M11i   = M11_Ai + M11_Bi + M11i 
//   * ALL_M12i   = M12_Ai + M12_Bi + M12i 
//   * ALL_M13i   = M13_Ai + M13_Bi + M13i 
//   * ALL_M14i   = M14_Ai + M14_Bi + M14i 
//   * ALL_M15i   = M15_Ai + M15_Bi + M15i 
//   * ALL_M16i   = M16_Ai + M16_Bi + M16i 
//   * ALL_M17i   = M17_Ai + M17_Bi + M17i 
// 
//   * DNWDMY  = DNW * LVSDMY4 
//   * NGATE = ODi * POi * NPi - NW 
//   * PGATE = ODi * POi * PPi * NW 
//   * NGATES = ODi * POi * NPi - NW 
//   * PGATES = ODi * POi * PPi * NW 
//   * VARGT = ODi * POi * NPi * NW * VARi 
//   * PVARGT = ODi * POi * PPi - NW * VARi 
//   * PP = PPi 
//   * NP = NPi 
//   * VTS_N  = VTS_Ni  
//   * VTL_N  = VTL_Ni  
//   * VTUL_N = VTUL_Ni  
//   * VTEL_N = VTEL_Ni  
//   * VTS_P  = VTS_Pi  
//   * VTL_P  = VTL_Pi  
//   * VTUL_P = VTUL_Pi  
//   * VTEL_P = VTEL_Pi  
//   * OD2    = OD12 
//   * VAR    = VARi 
//   * DIODMY = DIODMYi 
//   * RH_TN = RH_TNi 
//   * RHDMYn = RHDMY0i + RHDMY1i + RHDMY2i + RHDMY3i + RHDMY4i + RHDMY5i + RHDMY6i + RHDMY7i + RHDMY8i + RHDMY9i + RHDMY10i + RHDMY11i + RHDMY12i + RHDMY13i + RHDMY14i + RHDMY15i + RHDMY16i + RHDMY17i + RHDMY18i + RHDMY19i 
//   * MOMDMY_NPO = MOMDMY_NWi + MOMDMY_PWi + MOMDMY_NTNi + MOMDMY_NW2i + MOMDMY_PW2i + MOMDMY_NTN2i 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
// USER NOTES :  
//  
// 1) Must execute LVS_install.pl to get correct LVS decks . 
// 
// 2) For Calibre "EDTEXT" file, use .INCLUDE strings.txt.  
//        LAYOUT TEXT  "text string" [x] [y]  (layer num) (cell name)  
//  
// 3) Input layer 'OD' is defined as thin oxide (OD) area which would   
//    be drawn by one generic od mask or by seperated N+OD and P+OD.   
//    Remove layers in the 'OD' entries you don't want to use at   
//    layer definition block.  
//  
// 4) Default setting for property check is 0%. Users should check with  
//    IP/Designe providers for proper tolerance.  
//  
// 5) It's recommended to run Calibre LVS by hierarchical mode since false  
//    errors have been encountered by only flat mode option '-lvs'.  
//  
// 6) Default property resolution for ambiguity is set to 32. It could be  
//    necessary to increase this setting to resolve serious ambiguity.  
//    Uncomment statement 'LVS PROPERTY RESOLUTION MAXIMUM' in this deck  
//    to reset the capability of property resolution.  
//  
// 7) Thin oxide layers PDIFF (7;0) and NDIFF (8;0) are not recommended to be  
//    used as tape out layers. Please use OD (6:0) for thin oxide tape out layers.  
//    If PDIFF (7;0) and NDIFF (8;0) layers are used, be sure to check MT (tape out)  
//    form for correctness after modifying this LVS deck (to pass LVS check)  
//  
// 8) Layer number 2000 - 2050 is saved for pseudo layer purpose.  
//    Please don't adopt these layers. 
// 
// 9) By default, VIRTUAL CONNECT COLON is set yes. Please set to "NO" as doing full-chip checking. 
// 
// 10) change default setting of option "LVS INJECT LOGIC NO". 
//     Set for "NO" to align the default setting of Calibre version before 2008 to do backward compatible. 
// 
// 11) This file usually reads all datatypes for each CAD layer defined.  
//     User customization datatype maybe already included in the layout mapping of this deck.  
//     PLEASE ALWAYS REVIEW THE LAYER DEFINITION AND MODIFY IT FOR USERS' PARTICULAR LAYER USAGE.      
//lvs_gen.pl version: 1.489
//calibre_ff.pl version: 1.620

// LVS/RC_DFM switch option
// --------------------
//#define RC_DFM_RULE    //uncomment this line when this deck would be used as a DFM RC command file
//#define SKIP_ODSE  //uncomment this line to skip od_space_effect
//#define FILTER_DGS_TIED_MOS // uncomment this line to filter MOS with D, G and S tied together (default filter MOS with all pins tied)
#define WELL_TO_PG_CHECK 
// Default is on. Turn on to highlight if nwell connects to ground or psub connects to power.
//#define GATE_TO_PG_CHECK 
// Default is off. Turn on to highlight if a mos gate directly connects to power or ground.
//#define PATH_CHECK 
// Default is off. Turn on to highlight if
//(1) nodes have a path to power but no path to ground
//(2) nodes have a path to ground but no path to power
//(3) nodes have no path to power or ground
//(4) nodes have no path to any label net
#define DS_TO_PG_CHECK 
// Default is on. Turn on to highlight if drain connects to power and source connects to ground.
#define FLOATING_WELL_CHECK 
// Default is on. Turn on to highlight if well does not connect to power or ground. 
//The nwell of moscaps and nwell-resistor are excluded.
#define LVSDMY4_CHECK   
// Default is on. Turn on to highlight if LVSDMY4 without DNW region interact NMOS.

VARIABLE PRESCALE 1.0

//#define NW_RING	//uncomment this line to enable the NW ring to separate the node from BULK

// POWER and GROUND name string variable setting
VARIABLE POWER_NAME  "AHVDD"  "AHVDDB"  "AHVDDG"  "AHVDDR"  "AHVDDWELL"  "AVDD"  "AVDDB"  "AVDDBG"  "AVDDG"  "AVDDR"  "AVDWELL"  "DHVDD"  "DVDD"  "HVDDWELL"  "TACVDD"  "TAVD33"  "TAVD33PST"  "TAVDD"  "TAVDDPST"  "TVDD"  "VD33"  "VDD"  "VDD5V"  "VDDESD"  "VDDG"  "VDDM"  "VDDPST"  "VDDSA"  "VDWELL" 

VARIABLE GROUND_NAME  "AGND"  "AHVSS"  "AHVSSB"  "AHVSSG"  "AHVSSR"  "AHVSSUB"  "AVSS"  "AVSSB"  "AVSSBG"  "AVSSG"  "AVSSR"  "AVSSUB"  "DHVSS"  "DVSS"  "GND"  "HVSSUB"  "TACVSS"  "TAVSS"  "TAVSSPST"  "TVSS"  "VS33"  "VSS"  "VSSESD"  "VSSG"  "VSSM"  "VSSPST"  "VSSUB" 

//#########################################################################
//# ENVIRONMENT SETTING                              
//#########################################################################

//  RC_BLOCKING SETTING
LAYOUT CELL LIST pcells "crtmom_2t*" "crtmom_mx_4t*" "crtmom_wo*" "crtmom_wo_mx*" "crtmom_wo_rf*" "moscap_rf*" "moscap_rf12*" "moscap_rf12_nw*" "moscap_rf12od15*" "moscap_rf12od15_nw*" "moscap_rf_nw*" 
#IFDEF RC_DFM_RULE
PEX PRESERVE CELL LIST pcells
#ENDIF


//#define unrecognized_device_checking // uncomment this line to do unrecognized device checking
#define PICKUP_CHECK            // comment this line to disable dummy pickup checking
#define PSUB2_ERC_CHECK         // comment this line to disable SR_DOD cut PSUB2 checking
//#define MNPP_MPGG_VIRT_PWR_ENABLE	// Default is off. Uncomment this line to enable virtual power recognition for mnpp and mpgg related check
#define REGMOS_MNPP_MPGG_CHECK		// Default is on. Perform mnpp and mpgg related check for all devices except MPODE/FLRMOS devices
#define MPODE_MNPP_MPGG_CHECK		// Default is on. Perform mnpp and mpgg related check for MPODE device which is covered by PODE_GATE(206;28) layer
#define FLRMOS_MNPP_MPGG_CHECK		// Default is on. Perform mnpp and mpgg related check for FLRMOS device which is covered by FILLER_MOS(206;30) layer
//#define MNPP_MPGG_LAYER_WAIVER_ENABLE	// Default is off. Uncomment this line to enable LUPVTWDMY cad layer waiver for mnpp and mpgg    
//#define WELL_TEXT             // uncomment this line to enable well pin, nxwell_text and psub_text  
//#define SKIP_PLE              // uncomment this line to skip DFM PLE effect( only valid when turn on DFM_LPE )
//#define SKIP_XVTMBE          // uncomment this line to skip Mixed VT MBE effect
//#define SKIP_CPO             // uncomment this line to skip LDE CPO effect
//#define SKIP_PODG            // uncomment this line to skip LDE PODG effect
//#define SKIP_VGP             // uncomment this line to skip VGP effect
//#define SKIP_CODH            // uncomment this line to skip CODH effect

#define FILTER_PODE               // comment this line to compare pode device, default will filter both layout and source pode device at LVS comparison stage
#define FILTER_MPODE              // comment this line to compare mpode device, default will filter both layout and source mpode device at LVS comparison stage
#define FILTER_FLRMOS             // comment this line to compare flrmos device, default will filter both layout and source flrmos device at LVS comparison stage
#define MATCHFLAG               // Turn on to extract matchingflag and edgeflag for high sensitivity mismatching design
#define METAL_MAIN_CHECK		// Default is on. Turn on to highlight if the layout has non-color M0,M1,MX,MXb,MXd,MXe metal layers
// n-well approximity parameter       
// These values are provided by SCLP/TSMC, may be changed in the future
VARIABLE        PMOS_TOP_EXT    0
VARIABLE        NMOS_BOT_EXT    0
VARIABLE        MOS_LR_EXT      0
VARIABLE        L_SHAPE_OD_GATE_LEN 0.221 
VARIABLE        EXPAND_VT_EDGE 0.003
VARIABLE        MIN_MOM_LR      1
//LVS HEAP DIRECTORY "/tmp"
//#define extract_dnwpsub  // Turn on to extract parasitic dnw/psub diode
//#define extract_pwdnw    // Turn on to extract parasitic pwell/dnw diode
//#define extract_pnwdio   // Turn on to extract parasitic nw-psub diode
//#define LVS_REDUCE_PARALLEL_MOS       // Turn on this switch to enable MOS parallel reduction
//#define LVS_REDUCE_PARALLEL_MIMCAP    // Turn on this switch to enable SHDMIMCAP parallel reduction
//#define LVS_REDUCE_SPLIT_GATES        // Turn on this switch to enable MOS SPLIT GATE reduction

//#define FLICKER_CORNER_EXTRACTION   // uncomment this line to enable flicker corner extraction.
//#define SELF_HEATING_EFFECT_EXTRACTION   // uncomment this line to enable self heating effect extraction.
#IFDEF FLICKER_CORNER_EXTRACTION
  #define MULTI_DEVICE_EXTRACTION
#ENDIF
#IFDEF SELF_HEATING_EFFECT_EXTRACTION
  #define MULTI_DEVICE_EXTRACTION
#ENDIF


#IFDEF LVS_REDUCE_SPLIT_GATES
#define LVS_REDUCE_PARALLEL_MOS
LVS SHORT EQUIVALENT NODES SPLIT
#ELSE
LVS SHORT EQUIVALENT NODES NO
#ENDIF

VARIABLE  MOS_Werr         0        
VARIABLE  MOS_Lerr         0
VARIABLE  MOS_NFINerr      0
VARIABLE  MOS_PPITCHerr    0
VARIABLE  MOS_FBOUNDerr    0

VARIABLE  DIO_Aerr         0
VARIABLE  DIO_Perr         0
VARIABLE  DIO_Werr         0
VARIABLE  DIO_Lerr         0
VARIABLE  DIO_NFINerr      0
VARIABLE  DIOWELL_Aerr     0
VARIABLE  BJT_Aerr         0
VARIABLE  RES_Werr         0
VARIABLE  RES_Lerr         0
VARIABLE  RES_HIEMerr      0
VARIABLE  MOSCAP_Werr      0
VARIABLE  MOSCAP_Lerr      0
VARIABLE  MOSCAP_NFINerr   0
VARIABLE  MOM_Werr         0
VARIABLE  MOM_Lerr         0
VARIABLE  MOM_Serr         0
VARIABLE  SPIRAL_Werr      0
VARIABLE  SPIRAL_Serr      0
VARIABLE  MIMCAP_Aerr      0
VARIABLE  DEFAULT_WP       0.054
VARIABLE  OSEY_LEXT        0.55

VARIABLE  FIN_WIDTH        0.006
VARIABLE  FIN_SPACE        0.022
VARIABLE  FIN_PITCH        0.028
VARIABLE  HALF_FIN_WIDTH   ( FIN_WIDTH / 2 )
VARIABLE  ANARRAY_SHRINK   15
// MINGRID_xxx variables are for internal using, don't change
VARIABLE  MINGRID_RECT1            0.0001
VARIABLE  MINGRID_RECT2            ( MINGRID_RECT1 * 2 )
VARIABLE  MINGRID_RECT3            ( MINGRID_RECT1 * 3 )
VARIABLE  MINGRID_RECT4            ( MINGRID_RECT1 * 4 )
VARIABLE  MINGRID_RECT5            ( MINGRID_RECT1 * 5 )
VARIABLE  MINGRID_RECT6            ( MINGRID_RECT1 * 6 )
VARIABLE  MINGRID_RECT7            ( MINGRID_RECT1 * 7 )
VARIABLE  MINGRID_RECT8            ( MINGRID_RECT1 * 8 )
VARIABLE  MINGRID_RECT9            ( MINGRID_RECT1 * 9 )
VARIABLE  MINGRID_RECT10            ( MINGRID_RECT1 * 10 )
VARIABLE  MINGRID_RECT11            ( MINGRID_RECT1 * 11 )
VARIABLE  MINGRID_RECT12            ( MINGRID_RECT1 * 12 )
VARIABLE  MINGRID_RECT13            ( MINGRID_RECT1 * 13 )
VARIABLE  MINGRID_RECT14            ( MINGRID_RECT1 * 14 )
VARIABLE  MINGRID_RECT15            ( MINGRID_RECT1 * 15 )
VARIABLE  MINGRID_RECT16            ( MINGRID_RECT1 * 16 )
VARIABLE  MINGRID_RECT17            ( MINGRID_RECT1 * 17 )
VARIABLE  MINGRID_RECT1_UNIT       ( MINGRID_RECT1 * 1e-6 )
VARIABLE  MINGRID_RECT1_01_UNIT    (( MINGRID_RECT1 + MINGRID_RECT1 * 0.01 ) * 1e-6)

//It's recommended to turn on the "FLATTEN CELL" option when dummy patterns are insered.
//======================================================================================
//FLATTEN CELL TOP_CELL_DM TOP_CELL_DODDPO  // fill in topcell name of dummy patterns.   
    
//LAYOUT PRIMARY "lvs_top"
//LAYOUT PATH "lvs_top.gds"
//LAYOUT SYSTEM GDSII
//LAYOUT PATH "layout.net"
//LAYOUT SYSTEM SPICE

//SOURCE PRIMARY "lvs_top"
//SOURCE PATH "lvs_top.cdl"
//SOURCE SYSTEM SPICE

DRC RESULTS DATABASE "calibre_drc.db" ASCII // ASCII or GDSII
DRC SUMMARY REPORT "calibre_drc.sum"

ERC RESULTS DATABASE "calibre_erc.db" ASCII // ASCII or GDSII
ERC SUMMARY REPORT "calibre_erc.sum"

LVS REPORT "lvs.rep"
LVS REPORT MAXIMUM 1000 // ALL
MASK RESULTS DATABASE NONE //"mask.db"

#IFDEF RC_DFM_RULE
  //MASK SVDB DIRECTORY "svdb" QUERY
#ELSE
  MASK SVDB DIRECTORY "svdb" QUERY
#ENDIF
LVS ISOLATE SHORTS YES
LVS REPORT OPTION S

SOURCE CASE YES                 // set case sensitivity for the source 
LAYOUT CASE YES                 // set case sensitivity for the source
LVS COMPARE CASE NAMES TYPES SUBTYPES VALUES    // set case sensititive during LVS comparison

LAYOUT PRECISION 2000
PRECISION 20000
LAYOUT MAGNIFY AUTO
RESOLUTION 1
UNIT LENGTH U

TEXT DEPTH PRIMARY
PORT DEPTH PRIMARY

FLAG SKEW YES
FLAG OFFGRID YES
//LAYOUT ALLOW DUPLICATE CELL YES

LVS INJECT LOGIC                 NO
LVS SPICE PREFER PINS            YES
LVS SPICE REPLICATE DEVICES      LPI
LVS SPICE STRICT WL              YES
LVS ABORT ON SUPPLY ERROR        NO
LVS ALL CAPACITOR PINS SWAPPABLE YES
LVS RECOGNIZE GATES              NONE
LVS IGNORE PORTS                 NO
LVS CHECK PORT NAMES             YES
LVS REDUCE PARALLEL BIPOLAR      NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL DIODES       NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL CAPACITORS   NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL RESISTORS    NO    // NOT recommend to set YES 
LVS REDUCE SERIES RESISTORS      NO    // NOT recommend to set YES   
LVS REDUCE SERIES CAPACITORS     NO    // NOT recommend to set YES  
// For tied S/D together and Gate is floating
//LVS FILTER UNUSED OPTION AC AD RC RE RG
//LVS FILTER UNUSED OPTION B D E O
//Strongly recommand to comment FILTER_DGS_TIED_MOS switch
//AG is to filter MOS with all pins tied together, AB is to filter MOS with D,G,S tied together
#IFNDEF FILTER_DGS_TIED_MOS
LVS FILTER UNUSED OPTION AG RC RE RG
#ELSE
LVS FILTER UNUSED OPTION AB RC RE RG
#ENDIF
LVS PROPERTY RESOLUTION MAXIMUM 65536 // ALL

//User Define Device Reduce
//====================================================================



#IFDEF LVS_REDUCE_PARALLEL_MIMCAP
LVS REDUCE mimcap_sin_shd_3t PARALLEL YES
[ 
  EFFECTIVE area_top_mim, area_bot_mim
  area_top_mim = sum(area_top_mim)
  area_bot_mim = sum(area_bot_mim)
]
LVS REDUCE mimcap_sin_fhd PARALLEL YES
[ 
  EFFECTIVE area_mim
  area_mim = sum(area_mim)
]
#ENDIF




LVS REDUCE rhim PARALLEL NO               // NOT recommend to set YES 
LVS REDUCE rhim SERIES PLUS MINUS NO      // NOT recommend to set YES 


//================================================================
// Only list layers relative with device formation, exclude wells

VIRTUAL CONNECT COLON YES

LVS DB LAYER  n_odtap_io_ext p_odtap_io_ext fin_lay M0_A_SRM01 M0_B_SRM01 M0_A_SRM02 M0_B_SRM02 M0_A_SRM03 M0_B_SRM03 mkr_vg mkr_vg_tie M1_A_SRM01 M1_B_SRM01 M1_A_SRM02 M1_B_SRM02 M1_A_SRM03 M1_B_SRM03  mkr_VDR_MD_TAP_FB9  mkr_VDR_MD_TAP  n_odtap_fb9_cpp57_ext  n_odtap_fb10_cpp57_ext  n_odtap_cpp57_ext  n_odtap_cpp85_ext  n_odtap_fb9_cpp51_ext  n_odtap_ext  p_odtap_fb9_cpp57_ext  p_odtap_fb10_cpp57_ext  p_odtap_cpp57_ext  p_odtap_cpp85_ext  p_odtap_fb9_cpp51_ext  p_odtap_ext  mkr_cfi_n_core_gpoly_fb1  mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85  mkr_cfi_n_core_gpoly_fb10_cpp57  mkr_cfi_n_core_gpoly_fb1_cpp51  mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85  mkr_cfi_n_core_gpoly_fb9_cpp57  mkr_cfi_p_core_gpoly_fb1  mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85  mkr_cfi_p_core_gpoly_fb10_cpp57  mkr_cfi_p_core_gpoly_fb1_cpp51  mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85  mkr_cfi_p_core_gpoly_fb9_cpp57 	// Preserve layers for RC
#IFDEF RC_DFM_RULE
LVS PUSH DEVICES SEPARATE PROPERTIES YES
LVS CENTER DEVICE PINS YES
LVS CENTER DEVICE LOCATION YES
#ENDIF

DMACRO LVS_PROPERTY_INITIALIZE ELEMENT {
    LVS PROPERTY INITIALIZE ELEMENT [
        PROPERTY m, nf
        in_NF = INP_NUM_VAL(nf)
        IF ( IS_MISSING( in_NF ) ) {
            nf = 1
        } ELSE {   
            nf = in_NF
        }
        in_m  = INP_NUM_VAL(m)
        IF ( IS_MISSING( in_M ) ) {
            m  = 1
        } ELSE {   
            m = in_m
        }	
        m = m * nf
    ]
}

CMACRO LVS_PROPERTY_INITIALIZE MN
CMACRO LVS_PROPERTY_INITIALIZE MP
CMACRO LVS_PROPERTY_INITIALIZE LDDN
CMACRO LVS_PROPERTY_INITIALIZE LDDP
CMACRO LVS_PROPERTY_INITIALIZE nmoscap
CMACRO LVS_PROPERTY_INITIALIZE nmoscap_12
CMACRO LVS_PROPERTY_INITIALIZE nmoscap_12od15

#IFDEF LVS_REDUCE_PARALLEL_MOS
LVS REDUCE PARALLEL MOS YES [
	TOLERANCE l 0
	EFFECTIVE nfin, l
	nfin = SUM( nfin )
	l = min(l)
]
LVS REDUCE MN(nch_12_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_12_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_12od15_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_12od15_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_elvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_elvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrlvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrlvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrsvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_flrulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_lvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_lvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_lvtll_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_lvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpode12_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpode12od15_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodeelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodelvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodesvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodeulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_mpodeulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_svt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_svt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_ulvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_ulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_ulvtll_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MN(nch_ulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_12_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_12od15_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_elvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrlvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrlvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrsvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_flrulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_lvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_lvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpode12_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpode12od15_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodeelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodelvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodesvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodeulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_mpodeulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_svt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_ulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE MP(pch_ulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0 fbound 0
    EFFECTIVE nfin, l, ppitch, fbound
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
    fbound = min(fbound)
]
LVS REDUCE LDDN(nch_hia12_mac) PARALLEL YES [
    TOLERANCE l 0 fbound 0
    EFFECTIVE nfin, l, fbound
    nfin = SUM( nfin )
    l = min(l)
    fbound = min(fbound)
]
#ELSE
LVS REDUCE PARALLEL MOS NO
#ENDIF

LVS REDUCE SPLIT GATES NO

LAYOUT BASE LAYER ODi POi MDi VDi VGi VDRi MOMDMY0 MOMDMY1 MOMDMY2 MOMDMY3 MOMDMY4 MOMDMY5 MOMDMY6 MOMDMY7 MOMDMY8 MOMDMY9 MOMDMY10 MOMDMY11 MOMDMY12 MOMDMY13 MOMDMY14 MOMDMY15 MOMDMY16 MOMDMY17
LVS POWER NAME POWER_NAME 
LVS GROUND NAME GROUND_NAME 
//#############################################
//# MAPPING                                   #
//#############################################
LAYER DNW            3000 
LAYER MAP 1 DATATYPE 0 3000 //  Deep N-Well
LAYER NW             3001 
LAYER MAP 3 DATATYPE 0 3001 //  N-Well
LAYER ODi            3002 
LAYER MAP 6 DATATYPE 0 3002 //  Active area, thin oxide for device, or interconnection
LAYER SR_DOD         3003 
LAYER MAP 6 DATATYPE 7 3003 //  For special rule dummy OD
LAYER SRMDEVi        3004 
LAYER MAP 6 DATATYPE 100 3004 //  Dummy layer to calculate SRAM finfet od on device
LAYER NT_N           3005 
LAYER MAP 11 DATATYPE 0 3005 //   Native NMOS blocked implant
LAYER VTL_Ni         3006 
LAYER MAP 12 DATATYPE 0 3006 //  CORE Low VT NMOS
LAYER VTEL_Ni        3007 
LAYER MAP 12 DATATYPE 2 3007 //  CORE ELow VT NMOS
LAYER VTLN_LL        3008 
LAYER MAP 12 DATATYPE 4 3008 //  CORE Low VT Low Leakage NMOS
LAYER VTL_Pi         3009 
LAYER MAP 13 DATATYPE 0 3009 //  CORE Low VT PMOS
LAYER VTEL_Pi        3010 
LAYER MAP 13 DATATYPE 2 3010 //  CORE ELow VT PMOS
LAYER VTLP_LL        3011 
LAYER MAP 13 DATATYPE 4 3011 //  CORE Low VT Low Leakage PMOS
LAYER OD12           3012 
LAYER MAP 14 DATATYPE 0 3012 //  FOR 1.2V thick oxide 
LAYER OD12_15        3013 
LAYER MAP 14 DATATYPE 2 3013 //  FOR 1.2V over-drive 1.5v thick oxide 
LAYER POi            3014 
LAYER MAP 17 DATATYPE 0 3014 //  Gate poly, poly Si
LAYER SR_DPO         3015 
LAYER MAP 17 DATATYPE 7 3015 //  Special rule dummy PO
LAYER CPOi           3016 
LAYER MAP 17 DATATYPE 30 3016 //  Poly double cutting
LAYER DCPO           3017 
LAYER MAP 17 DATATYPE 50 3017 //  Dummy cut poly
LAYER CPP57          3018 
LAYER MAP 17 DATATYPE 93 3018 //  CPP57
LAYER CPP85          3019 
LAYER MAP 17 DATATYPE 94 3019 //  CPP85
LAYER VTS_Ni         3020 
LAYER MAP 23 DATATYPE 0 3020 //  Standard Vt N+ implant layer
LAYER VTS_Pi         3021 
LAYER MAP 24 DATATYPE 0 3021 //  Standard Vt P+ implant layer
LAYER PPi            3022 
LAYER MAP 25 DATATYPE 0 3022 //  P+ S/D Implant
LAYER NPi            3023 
LAYER MAP 26 DATATYPE 0 3023 //  N+ S/D Implant
LAYER M1_Ai          3024 
LAYER MAP 31 DATATYPE 171 3024 //  metal1a
LAYER M1_Bi          3025 
LAYER MAP 31 DATATYPE 172 3025 //  metal1b
LAYER DUM1_Ai        3026 3027 
LAYER MAP 331 DATATYPE 171 3026
LAYER MAP 331 DATATYPE 181 3027 //  Dummy metal1a
LAYER DUM1_Bi        3028 3029 
LAYER MAP 331 DATATYPE 172 3028
LAYER MAP 331 DATATYPE 182 3029 //  Dummy metal1b
LAYER MAIN_M0        3030 3031 3032 
LAYER MAP 30 DATATYPE 150 3030
LAYER MAP 330 DATATYPE 150 3031
LAYER MAP 330 DATATYPE 160 3032 //  main non-color M0
LAYER MAIN_M1        3033 3034 3035 
LAYER MAP 31 DATATYPE 170 3033
LAYER MAP 331 DATATYPE 170 3034
LAYER MAP 331 DATATYPE 180 3035 //  main non-color M1
LAYER MAIN_M2        3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 
LAYER MAP 32 DATATYPE 150 3036
LAYER MAP 32 DATATYPE 170 3037
LAYER MAP 32 DATATYPE 250 3038
LAYER MAP 32 DATATYPE 270 3039
LAYER MAP 32 DATATYPE 350 3040
LAYER MAP 32 DATATYPE 370 3041
LAYER MAP 32 DATATYPE 400 3042
LAYER MAP 32 DATATYPE 420 3043
LAYER MAP 332 DATATYPE 150 3044
LAYER MAP 332 DATATYPE 160 3045
LAYER MAP 332 DATATYPE 170 3046
LAYER MAP 332 DATATYPE 180 3047
LAYER MAP 332 DATATYPE 250 3048
LAYER MAP 332 DATATYPE 260 3049
LAYER MAP 332 DATATYPE 270 3050
LAYER MAP 332 DATATYPE 280 3051
LAYER MAP 332 DATATYPE 350 3052
LAYER MAP 332 DATATYPE 360 3053
LAYER MAP 332 DATATYPE 370 3054
LAYER MAP 332 DATATYPE 380 3055
LAYER MAP 332 DATATYPE 400 3056
LAYER MAP 332 DATATYPE 410 3057
LAYER MAP 332 DATATYPE 420 3058
LAYER MAP 332 DATATYPE 430 3059 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M3        3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 
LAYER MAP 33 DATATYPE 150 3060
LAYER MAP 33 DATATYPE 170 3061
LAYER MAP 33 DATATYPE 250 3062
LAYER MAP 33 DATATYPE 270 3063
LAYER MAP 33 DATATYPE 350 3064
LAYER MAP 33 DATATYPE 370 3065
LAYER MAP 33 DATATYPE 400 3066
LAYER MAP 33 DATATYPE 420 3067
LAYER MAP 333 DATATYPE 150 3068
LAYER MAP 333 DATATYPE 160 3069
LAYER MAP 333 DATATYPE 170 3070
LAYER MAP 333 DATATYPE 180 3071
LAYER MAP 333 DATATYPE 250 3072
LAYER MAP 333 DATATYPE 260 3073
LAYER MAP 333 DATATYPE 270 3074
LAYER MAP 333 DATATYPE 280 3075
LAYER MAP 333 DATATYPE 350 3076
LAYER MAP 333 DATATYPE 360 3077
LAYER MAP 333 DATATYPE 370 3078
LAYER MAP 333 DATATYPE 380 3079
LAYER MAP 333 DATATYPE 400 3080
LAYER MAP 333 DATATYPE 410 3081
LAYER MAP 333 DATATYPE 420 3082
LAYER MAP 333 DATATYPE 430 3083 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M4        3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 
LAYER MAP 334 DATATYPE 150 3084
LAYER MAP 334 DATATYPE 160 3085
LAYER MAP 334 DATATYPE 170 3086
LAYER MAP 334 DATATYPE 180 3087
LAYER MAP 334 DATATYPE 250 3088
LAYER MAP 334 DATATYPE 260 3089
LAYER MAP 334 DATATYPE 270 3090
LAYER MAP 334 DATATYPE 280 3091
LAYER MAP 334 DATATYPE 350 3092
LAYER MAP 334 DATATYPE 360 3093
LAYER MAP 334 DATATYPE 370 3094
LAYER MAP 334 DATATYPE 380 3095
LAYER MAP 334 DATATYPE 400 3096
LAYER MAP 334 DATATYPE 410 3097
LAYER MAP 334 DATATYPE 420 3098
LAYER MAP 334 DATATYPE 430 3099
LAYER MAP 34 DATATYPE 150 3100
LAYER MAP 34 DATATYPE 170 3101
LAYER MAP 34 DATATYPE 250 3102
LAYER MAP 34 DATATYPE 270 3103
LAYER MAP 34 DATATYPE 350 3104
LAYER MAP 34 DATATYPE 370 3105
LAYER MAP 34 DATATYPE 400 3106
LAYER MAP 34 DATATYPE 420 3107 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M5        3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 
LAYER MAP 335 DATATYPE 150 3108
LAYER MAP 335 DATATYPE 160 3109
LAYER MAP 335 DATATYPE 170 3110
LAYER MAP 335 DATATYPE 180 3111
LAYER MAP 335 DATATYPE 250 3112
LAYER MAP 335 DATATYPE 260 3113
LAYER MAP 335 DATATYPE 270 3114
LAYER MAP 335 DATATYPE 280 3115
LAYER MAP 335 DATATYPE 350 3116
LAYER MAP 335 DATATYPE 360 3117
LAYER MAP 335 DATATYPE 370 3118
LAYER MAP 335 DATATYPE 380 3119
LAYER MAP 335 DATATYPE 400 3120
LAYER MAP 335 DATATYPE 410 3121
LAYER MAP 335 DATATYPE 420 3122
LAYER MAP 335 DATATYPE 430 3123
LAYER MAP 35 DATATYPE 150 3124
LAYER MAP 35 DATATYPE 170 3125
LAYER MAP 35 DATATYPE 250 3126
LAYER MAP 35 DATATYPE 270 3127
LAYER MAP 35 DATATYPE 350 3128
LAYER MAP 35 DATATYPE 370 3129
LAYER MAP 35 DATATYPE 400 3130
LAYER MAP 35 DATATYPE 420 3131 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M6        3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 
LAYER MAP 336 DATATYPE 150 3132
LAYER MAP 336 DATATYPE 160 3133
LAYER MAP 336 DATATYPE 170 3134
LAYER MAP 336 DATATYPE 180 3135
LAYER MAP 336 DATATYPE 250 3136
LAYER MAP 336 DATATYPE 260 3137
LAYER MAP 336 DATATYPE 270 3138
LAYER MAP 336 DATATYPE 280 3139
LAYER MAP 336 DATATYPE 350 3140
LAYER MAP 336 DATATYPE 360 3141
LAYER MAP 336 DATATYPE 370 3142
LAYER MAP 336 DATATYPE 380 3143
LAYER MAP 336 DATATYPE 400 3144
LAYER MAP 336 DATATYPE 410 3145
LAYER MAP 336 DATATYPE 420 3146
LAYER MAP 336 DATATYPE 430 3147
LAYER MAP 36 DATATYPE 150 3148
LAYER MAP 36 DATATYPE 170 3149
LAYER MAP 36 DATATYPE 250 3150
LAYER MAP 36 DATATYPE 270 3151
LAYER MAP 36 DATATYPE 350 3152
LAYER MAP 36 DATATYPE 370 3153
LAYER MAP 36 DATATYPE 400 3154
LAYER MAP 36 DATATYPE 420 3155 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M7        3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 
LAYER MAP 337 DATATYPE 150 3156
LAYER MAP 337 DATATYPE 160 3157
LAYER MAP 337 DATATYPE 170 3158
LAYER MAP 337 DATATYPE 180 3159
LAYER MAP 337 DATATYPE 250 3160
LAYER MAP 337 DATATYPE 260 3161
LAYER MAP 337 DATATYPE 270 3162
LAYER MAP 337 DATATYPE 280 3163
LAYER MAP 337 DATATYPE 350 3164
LAYER MAP 337 DATATYPE 360 3165
LAYER MAP 337 DATATYPE 370 3166
LAYER MAP 337 DATATYPE 380 3167
LAYER MAP 337 DATATYPE 400 3168
LAYER MAP 337 DATATYPE 410 3169
LAYER MAP 337 DATATYPE 420 3170
LAYER MAP 337 DATATYPE 430 3171
LAYER MAP 37 DATATYPE 150 3172
LAYER MAP 37 DATATYPE 170 3173
LAYER MAP 37 DATATYPE 250 3174
LAYER MAP 37 DATATYPE 270 3175
LAYER MAP 37 DATATYPE 350 3176
LAYER MAP 37 DATATYPE 370 3177
LAYER MAP 37 DATATYPE 400 3178
LAYER MAP 37 DATATYPE 420 3179 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M8        3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 
LAYER MAP 338 DATATYPE 150 3180
LAYER MAP 338 DATATYPE 160 3181
LAYER MAP 338 DATATYPE 170 3182
LAYER MAP 338 DATATYPE 180 3183
LAYER MAP 338 DATATYPE 250 3184
LAYER MAP 338 DATATYPE 260 3185
LAYER MAP 338 DATATYPE 270 3186
LAYER MAP 338 DATATYPE 280 3187
LAYER MAP 338 DATATYPE 350 3188
LAYER MAP 338 DATATYPE 360 3189
LAYER MAP 338 DATATYPE 370 3190
LAYER MAP 338 DATATYPE 380 3191
LAYER MAP 338 DATATYPE 400 3192
LAYER MAP 338 DATATYPE 410 3193
LAYER MAP 338 DATATYPE 420 3194
LAYER MAP 338 DATATYPE 430 3195
LAYER MAP 38 DATATYPE 150 3196
LAYER MAP 38 DATATYPE 170 3197
LAYER MAP 38 DATATYPE 250 3198
LAYER MAP 38 DATATYPE 270 3199
LAYER MAP 38 DATATYPE 350 3200
LAYER MAP 38 DATATYPE 370 3201
LAYER MAP 38 DATATYPE 400 3202
LAYER MAP 38 DATATYPE 420 3203 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M9        3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 
LAYER MAP 339 DATATYPE 150 3204
LAYER MAP 339 DATATYPE 160 3205
LAYER MAP 339 DATATYPE 170 3206
LAYER MAP 339 DATATYPE 180 3207
LAYER MAP 339 DATATYPE 250 3208
LAYER MAP 339 DATATYPE 260 3209
LAYER MAP 339 DATATYPE 270 3210
LAYER MAP 339 DATATYPE 280 3211
LAYER MAP 339 DATATYPE 350 3212
LAYER MAP 339 DATATYPE 360 3213
LAYER MAP 339 DATATYPE 370 3214
LAYER MAP 339 DATATYPE 380 3215
LAYER MAP 339 DATATYPE 400 3216
LAYER MAP 339 DATATYPE 410 3217
LAYER MAP 339 DATATYPE 420 3218
LAYER MAP 339 DATATYPE 430 3219
LAYER MAP 39 DATATYPE 150 3220
LAYER MAP 39 DATATYPE 170 3221
LAYER MAP 39 DATATYPE 250 3222
LAYER MAP 39 DATATYPE 270 3223
LAYER MAP 39 DATATYPE 350 3224
LAYER MAP 39 DATATYPE 370 3225
LAYER MAP 39 DATATYPE 400 3226
LAYER MAP 39 DATATYPE 420 3227 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M10       3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 
LAYER MAP 340 DATATYPE 150 3228
LAYER MAP 340 DATATYPE 160 3229
LAYER MAP 340 DATATYPE 170 3230
LAYER MAP 340 DATATYPE 180 3231
LAYER MAP 340 DATATYPE 250 3232
LAYER MAP 340 DATATYPE 260 3233
LAYER MAP 340 DATATYPE 270 3234
LAYER MAP 340 DATATYPE 280 3235
LAYER MAP 340 DATATYPE 350 3236
LAYER MAP 340 DATATYPE 360 3237
LAYER MAP 340 DATATYPE 370 3238
LAYER MAP 340 DATATYPE 380 3239
LAYER MAP 340 DATATYPE 400 3240
LAYER MAP 340 DATATYPE 410 3241
LAYER MAP 340 DATATYPE 420 3242
LAYER MAP 340 DATATYPE 430 3243
LAYER MAP 40 DATATYPE 150 3244
LAYER MAP 40 DATATYPE 170 3245
LAYER MAP 40 DATATYPE 250 3246
LAYER MAP 40 DATATYPE 270 3247
LAYER MAP 40 DATATYPE 350 3248
LAYER MAP 40 DATATYPE 370 3249
LAYER MAP 40 DATATYPE 400 3250
LAYER MAP 40 DATATYPE 420 3251 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M11       3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 
LAYER MAP 341 DATATYPE 150 3252
LAYER MAP 341 DATATYPE 160 3253
LAYER MAP 341 DATATYPE 170 3254
LAYER MAP 341 DATATYPE 180 3255
LAYER MAP 341 DATATYPE 250 3256
LAYER MAP 341 DATATYPE 260 3257
LAYER MAP 341 DATATYPE 270 3258
LAYER MAP 341 DATATYPE 280 3259
LAYER MAP 341 DATATYPE 350 3260
LAYER MAP 341 DATATYPE 360 3261
LAYER MAP 341 DATATYPE 370 3262
LAYER MAP 341 DATATYPE 380 3263
LAYER MAP 341 DATATYPE 400 3264
LAYER MAP 341 DATATYPE 410 3265
LAYER MAP 341 DATATYPE 420 3266
LAYER MAP 341 DATATYPE 430 3267
LAYER MAP 41 DATATYPE 150 3268
LAYER MAP 41 DATATYPE 170 3269
LAYER MAP 41 DATATYPE 250 3270
LAYER MAP 41 DATATYPE 270 3271
LAYER MAP 41 DATATYPE 350 3272
LAYER MAP 41 DATATYPE 370 3273
LAYER MAP 41 DATATYPE 400 3274
LAYER MAP 41 DATATYPE 420 3275 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M12       3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 
LAYER MAP 342 DATATYPE 150 3276
LAYER MAP 342 DATATYPE 160 3277
LAYER MAP 342 DATATYPE 170 3278
LAYER MAP 342 DATATYPE 180 3279
LAYER MAP 342 DATATYPE 250 3280
LAYER MAP 342 DATATYPE 260 3281
LAYER MAP 342 DATATYPE 270 3282
LAYER MAP 342 DATATYPE 280 3283
LAYER MAP 342 DATATYPE 350 3284
LAYER MAP 342 DATATYPE 360 3285
LAYER MAP 342 DATATYPE 370 3286
LAYER MAP 342 DATATYPE 380 3287
LAYER MAP 342 DATATYPE 400 3288
LAYER MAP 342 DATATYPE 410 3289
LAYER MAP 342 DATATYPE 420 3290
LAYER MAP 342 DATATYPE 430 3291
LAYER MAP 42 DATATYPE 150 3292
LAYER MAP 42 DATATYPE 170 3293
LAYER MAP 42 DATATYPE 250 3294
LAYER MAP 42 DATATYPE 270 3295
LAYER MAP 42 DATATYPE 350 3296
LAYER MAP 42 DATATYPE 370 3297
LAYER MAP 42 DATATYPE 400 3298
LAYER MAP 42 DATATYPE 420 3299 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M13       3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 
LAYER MAP 343 DATATYPE 150 3300
LAYER MAP 343 DATATYPE 160 3301
LAYER MAP 343 DATATYPE 170 3302
LAYER MAP 343 DATATYPE 180 3303
LAYER MAP 343 DATATYPE 250 3304
LAYER MAP 343 DATATYPE 260 3305
LAYER MAP 343 DATATYPE 270 3306
LAYER MAP 343 DATATYPE 280 3307
LAYER MAP 343 DATATYPE 350 3308
LAYER MAP 343 DATATYPE 360 3309
LAYER MAP 343 DATATYPE 370 3310
LAYER MAP 343 DATATYPE 380 3311
LAYER MAP 343 DATATYPE 400 3312
LAYER MAP 343 DATATYPE 410 3313
LAYER MAP 343 DATATYPE 420 3314
LAYER MAP 343 DATATYPE 430 3315
LAYER MAP 43 DATATYPE 150 3316
LAYER MAP 43 DATATYPE 170 3317
LAYER MAP 43 DATATYPE 250 3318
LAYER MAP 43 DATATYPE 270 3319
LAYER MAP 43 DATATYPE 350 3320
LAYER MAP 43 DATATYPE 370 3321
LAYER MAP 43 DATATYPE 400 3322
LAYER MAP 43 DATATYPE 420 3323 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M14       3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 
LAYER MAP 344 DATATYPE 150 3324
LAYER MAP 344 DATATYPE 160 3325
LAYER MAP 344 DATATYPE 170 3326
LAYER MAP 344 DATATYPE 180 3327
LAYER MAP 344 DATATYPE 250 3328
LAYER MAP 344 DATATYPE 260 3329
LAYER MAP 344 DATATYPE 270 3330
LAYER MAP 344 DATATYPE 280 3331
LAYER MAP 344 DATATYPE 350 3332
LAYER MAP 344 DATATYPE 360 3333
LAYER MAP 344 DATATYPE 370 3334
LAYER MAP 344 DATATYPE 380 3335
LAYER MAP 344 DATATYPE 400 3336
LAYER MAP 344 DATATYPE 410 3337
LAYER MAP 344 DATATYPE 420 3338
LAYER MAP 344 DATATYPE 430 3339
LAYER MAP 44 DATATYPE 150 3340
LAYER MAP 44 DATATYPE 170 3341
LAYER MAP 44 DATATYPE 250 3342
LAYER MAP 44 DATATYPE 270 3343
LAYER MAP 44 DATATYPE 350 3344
LAYER MAP 44 DATATYPE 370 3345
LAYER MAP 44 DATATYPE 400 3346
LAYER MAP 44 DATATYPE 420 3347 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M15       3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 
LAYER MAP 345 DATATYPE 150 3348
LAYER MAP 345 DATATYPE 160 3349
LAYER MAP 345 DATATYPE 170 3350
LAYER MAP 345 DATATYPE 180 3351
LAYER MAP 345 DATATYPE 250 3352
LAYER MAP 345 DATATYPE 260 3353
LAYER MAP 345 DATATYPE 270 3354
LAYER MAP 345 DATATYPE 280 3355
LAYER MAP 345 DATATYPE 350 3356
LAYER MAP 345 DATATYPE 360 3357
LAYER MAP 345 DATATYPE 370 3358
LAYER MAP 345 DATATYPE 380 3359
LAYER MAP 345 DATATYPE 400 3360
LAYER MAP 345 DATATYPE 410 3361
LAYER MAP 345 DATATYPE 420 3362
LAYER MAP 345 DATATYPE 430 3363
LAYER MAP 45 DATATYPE 150 3364
LAYER MAP 45 DATATYPE 170 3365
LAYER MAP 45 DATATYPE 250 3366
LAYER MAP 45 DATATYPE 270 3367
LAYER MAP 45 DATATYPE 350 3368
LAYER MAP 45 DATATYPE 370 3369
LAYER MAP 45 DATATYPE 400 3370
LAYER MAP 45 DATATYPE 420 3371 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M16       3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 
LAYER MAP 346 DATATYPE 150 3372
LAYER MAP 346 DATATYPE 160 3373
LAYER MAP 346 DATATYPE 170 3374
LAYER MAP 346 DATATYPE 180 3375
LAYER MAP 346 DATATYPE 250 3376
LAYER MAP 346 DATATYPE 260 3377
LAYER MAP 346 DATATYPE 270 3378
LAYER MAP 346 DATATYPE 280 3379
LAYER MAP 346 DATATYPE 350 3380
LAYER MAP 346 DATATYPE 360 3381
LAYER MAP 346 DATATYPE 370 3382
LAYER MAP 346 DATATYPE 380 3383
LAYER MAP 346 DATATYPE 400 3384
LAYER MAP 346 DATATYPE 410 3385
LAYER MAP 346 DATATYPE 420 3386
LAYER MAP 346 DATATYPE 430 3387
LAYER MAP 46 DATATYPE 150 3388
LAYER MAP 46 DATATYPE 170 3389
LAYER MAP 46 DATATYPE 250 3390
LAYER MAP 46 DATATYPE 270 3391
LAYER MAP 46 DATATYPE 350 3392
LAYER MAP 46 DATATYPE 370 3393
LAYER MAP 46 DATATYPE 400 3394
LAYER MAP 46 DATATYPE 420 3395 //  main non-color MX,MXb,MXd,MXe
LAYER MAIN_M17       3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 
LAYER MAP 347 DATATYPE 150 3396
LAYER MAP 347 DATATYPE 160 3397
LAYER MAP 347 DATATYPE 170 3398
LAYER MAP 347 DATATYPE 180 3399
LAYER MAP 347 DATATYPE 250 3400
LAYER MAP 347 DATATYPE 260 3401
LAYER MAP 347 DATATYPE 270 3402
LAYER MAP 347 DATATYPE 280 3403
LAYER MAP 347 DATATYPE 350 3404
LAYER MAP 347 DATATYPE 360 3405
LAYER MAP 347 DATATYPE 370 3406
LAYER MAP 347 DATATYPE 380 3407
LAYER MAP 347 DATATYPE 400 3408
LAYER MAP 347 DATATYPE 410 3409
LAYER MAP 347 DATATYPE 420 3410
LAYER MAP 347 DATATYPE 430 3411
LAYER MAP 47 DATATYPE 150 3412
LAYER MAP 47 DATATYPE 170 3413
LAYER MAP 47 DATATYPE 250 3414
LAYER MAP 47 DATATYPE 270 3415
LAYER MAP 47 DATATYPE 350 3416
LAYER MAP 47 DATATYPE 370 3417
LAYER MAP 47 DATATYPE 400 3418
LAYER MAP 47 DATATYPE 420 3419 //  main non-color MX,MXb,MXd,MXe
LAYER M2_Ai_X        3420 
LAYER MAP 32 DATATYPE 151 3420 // 
LAYER M2_Ai1         3421 3422 3423 3424 3425 3426 3427 
LAYER MAP 32 DATATYPE 171 3421
LAYER MAP 32 DATATYPE 251 3422
LAYER MAP 32 DATATYPE 271 3423
LAYER MAP 32 DATATYPE 351 3424
LAYER MAP 32 DATATYPE 371 3425
LAYER MAP 32 DATATYPE 401 3426
LAYER MAP 32 DATATYPE 421 3427 // 
LAYER M2_Bi          3428 3429 3430 3431 3432 3433 3434 3435 
LAYER MAP 32 DATATYPE 152 3428
LAYER MAP 32 DATATYPE 172 3429
LAYER MAP 32 DATATYPE 252 3430
LAYER MAP 32 DATATYPE 272 3431
LAYER MAP 32 DATATYPE 352 3432
LAYER MAP 32 DATATYPE 372 3433
LAYER MAP 32 DATATYPE 402 3434
LAYER MAP 32 DATATYPE 422 3435 // 
LAYER M2i            3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 
LAYER MAP 32 DATATYPE 40 3436
LAYER MAP 32 DATATYPE 70 3437
LAYER MAP 32 DATATYPE 80 3438
LAYER MAP 32 DATATYPE 800 3439
LAYER MAP 32 DATATYPE 810 3440
LAYER MAP 32 DATATYPE 90 3441
LAYER MAP 32 DATATYPE 950 3442
LAYER MAP 32 DATATYPE 960 3443
LAYER MAP 32 DATATYPE 970 3444
LAYER MAP 32 DATATYPE 980 3445 // 
LAYER DUM2_Ai        3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 
LAYER MAP 332 DATATYPE 151 3446
LAYER MAP 332 DATATYPE 161 3447
LAYER MAP 332 DATATYPE 171 3448
LAYER MAP 332 DATATYPE 181 3449
LAYER MAP 332 DATATYPE 251 3450
LAYER MAP 332 DATATYPE 261 3451
LAYER MAP 332 DATATYPE 271 3452
LAYER MAP 332 DATATYPE 281 3453
LAYER MAP 332 DATATYPE 351 3454
LAYER MAP 332 DATATYPE 361 3455
LAYER MAP 332 DATATYPE 371 3456
LAYER MAP 332 DATATYPE 381 3457
LAYER MAP 332 DATATYPE 401 3458
LAYER MAP 332 DATATYPE 411 3459
LAYER MAP 332 DATATYPE 421 3460
LAYER MAP 332 DATATYPE 431 3461 // 
LAYER DUM2_Bi        3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 
LAYER MAP 332 DATATYPE 152 3462
LAYER MAP 332 DATATYPE 162 3463
LAYER MAP 332 DATATYPE 172 3464
LAYER MAP 332 DATATYPE 182 3465
LAYER MAP 332 DATATYPE 252 3466
LAYER MAP 332 DATATYPE 262 3467
LAYER MAP 332 DATATYPE 272 3468
LAYER MAP 332 DATATYPE 282 3469
LAYER MAP 332 DATATYPE 352 3470
LAYER MAP 332 DATATYPE 362 3471
LAYER MAP 332 DATATYPE 372 3472
LAYER MAP 332 DATATYPE 382 3473
LAYER MAP 332 DATATYPE 402 3474
LAYER MAP 332 DATATYPE 412 3475
LAYER MAP 332 DATATYPE 422 3476
LAYER MAP 332 DATATYPE 432 3477 // 
LAYER DUM2i          3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 
LAYER MAP 332 DATATYPE 45 3478
LAYER MAP 332 DATATYPE 75 3479
LAYER MAP 332 DATATYPE 800 3480
LAYER MAP 332 DATATYPE 805 3481
LAYER MAP 332 DATATYPE 810 3482
LAYER MAP 332 DATATYPE 815 3483
LAYER MAP 332 DATATYPE 85 3484
LAYER MAP 332 DATATYPE 90 3485
LAYER MAP 332 DATATYPE 95 3486
LAYER MAP 332 DATATYPE 950 3487
LAYER MAP 332 DATATYPE 955 3488
LAYER MAP 332 DATATYPE 960 3489
LAYER MAP 332 DATATYPE 965 3490
LAYER MAP 332 DATATYPE 970 3491
LAYER MAP 332 DATATYPE 975 3492
LAYER MAP 332 DATATYPE 980 3493
LAYER MAP 332 DATATYPE 985 3494 // 
LAYER M3_Ai          3495 3496 3497 3498 3499 3500 3501 3502 
LAYER MAP 33 DATATYPE 151 3495
LAYER MAP 33 DATATYPE 171 3496
LAYER MAP 33 DATATYPE 251 3497
LAYER MAP 33 DATATYPE 271 3498
LAYER MAP 33 DATATYPE 351 3499
LAYER MAP 33 DATATYPE 371 3500
LAYER MAP 33 DATATYPE 401 3501
LAYER MAP 33 DATATYPE 421 3502 // 
LAYER M3_Bi          3503 3504 3505 3506 3507 3508 3509 3510 
LAYER MAP 33 DATATYPE 152 3503
LAYER MAP 33 DATATYPE 172 3504
LAYER MAP 33 DATATYPE 252 3505
LAYER MAP 33 DATATYPE 272 3506
LAYER MAP 33 DATATYPE 352 3507
LAYER MAP 33 DATATYPE 372 3508
LAYER MAP 33 DATATYPE 402 3509
LAYER MAP 33 DATATYPE 422 3510 // 
LAYER M3i            3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 
LAYER MAP 33 DATATYPE 40 3511
LAYER MAP 33 DATATYPE 70 3512
LAYER MAP 33 DATATYPE 80 3513
LAYER MAP 33 DATATYPE 800 3514
LAYER MAP 33 DATATYPE 810 3515
LAYER MAP 33 DATATYPE 90 3516
LAYER MAP 33 DATATYPE 950 3517
LAYER MAP 33 DATATYPE 960 3518
LAYER MAP 33 DATATYPE 970 3519
LAYER MAP 33 DATATYPE 980 3520 // 
LAYER DUM3_Ai        3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 
LAYER MAP 333 DATATYPE 151 3521
LAYER MAP 333 DATATYPE 161 3522
LAYER MAP 333 DATATYPE 171 3523
LAYER MAP 333 DATATYPE 181 3524
LAYER MAP 333 DATATYPE 251 3525
LAYER MAP 333 DATATYPE 261 3526
LAYER MAP 333 DATATYPE 271 3527
LAYER MAP 333 DATATYPE 281 3528
LAYER MAP 333 DATATYPE 351 3529
LAYER MAP 333 DATATYPE 361 3530
LAYER MAP 333 DATATYPE 371 3531
LAYER MAP 333 DATATYPE 381 3532
LAYER MAP 333 DATATYPE 401 3533
LAYER MAP 333 DATATYPE 411 3534
LAYER MAP 333 DATATYPE 421 3535
LAYER MAP 333 DATATYPE 431 3536 // 
LAYER DUM3_Bi        3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 
LAYER MAP 333 DATATYPE 152 3537
LAYER MAP 333 DATATYPE 162 3538
LAYER MAP 333 DATATYPE 172 3539
LAYER MAP 333 DATATYPE 182 3540
LAYER MAP 333 DATATYPE 252 3541
LAYER MAP 333 DATATYPE 262 3542
LAYER MAP 333 DATATYPE 272 3543
LAYER MAP 333 DATATYPE 282 3544
LAYER MAP 333 DATATYPE 352 3545
LAYER MAP 333 DATATYPE 362 3546
LAYER MAP 333 DATATYPE 372 3547
LAYER MAP 333 DATATYPE 382 3548
LAYER MAP 333 DATATYPE 402 3549
LAYER MAP 333 DATATYPE 412 3550
LAYER MAP 333 DATATYPE 422 3551
LAYER MAP 333 DATATYPE 432 3552 // 
LAYER DUM3i          3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 
LAYER MAP 333 DATATYPE 45 3553
LAYER MAP 333 DATATYPE 75 3554
LAYER MAP 333 DATATYPE 800 3555
LAYER MAP 333 DATATYPE 805 3556
LAYER MAP 333 DATATYPE 810 3557
LAYER MAP 333 DATATYPE 815 3558
LAYER MAP 333 DATATYPE 85 3559
LAYER MAP 333 DATATYPE 90 3560
LAYER MAP 333 DATATYPE 95 3561
LAYER MAP 333 DATATYPE 950 3562
LAYER MAP 333 DATATYPE 955 3563
LAYER MAP 333 DATATYPE 960 3564
LAYER MAP 333 DATATYPE 965 3565
LAYER MAP 333 DATATYPE 970 3566
LAYER MAP 333 DATATYPE 975 3567
LAYER MAP 333 DATATYPE 980 3568
LAYER MAP 333 DATATYPE 985 3569 // 
LAYER M4_Ai_Xe       3570 
LAYER MAP 34 DATATYPE 401 3570 // 
LAYER M4_Ai1         3571 3572 3573 3574 3575 3576 3577 
LAYER MAP 34 DATATYPE 151 3571
LAYER MAP 34 DATATYPE 171 3572
LAYER MAP 34 DATATYPE 251 3573
LAYER MAP 34 DATATYPE 271 3574
LAYER MAP 34 DATATYPE 351 3575
LAYER MAP 34 DATATYPE 371 3576
LAYER MAP 34 DATATYPE 421 3577 // 
LAYER M4_Bi          3578 3579 3580 3581 3582 3583 3584 3585 
LAYER MAP 34 DATATYPE 152 3578
LAYER MAP 34 DATATYPE 172 3579
LAYER MAP 34 DATATYPE 252 3580
LAYER MAP 34 DATATYPE 272 3581
LAYER MAP 34 DATATYPE 352 3582
LAYER MAP 34 DATATYPE 372 3583
LAYER MAP 34 DATATYPE 402 3584
LAYER MAP 34 DATATYPE 422 3585 // 
LAYER M4i            3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 
LAYER MAP 34 DATATYPE 40 3586
LAYER MAP 34 DATATYPE 70 3587
LAYER MAP 34 DATATYPE 80 3588
LAYER MAP 34 DATATYPE 800 3589
LAYER MAP 34 DATATYPE 810 3590
LAYER MAP 34 DATATYPE 90 3591
LAYER MAP 34 DATATYPE 950 3592
LAYER MAP 34 DATATYPE 960 3593
LAYER MAP 34 DATATYPE 970 3594
LAYER MAP 34 DATATYPE 980 3595 // 
LAYER DUM4_Ai        3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 
LAYER MAP 334 DATATYPE 151 3596
LAYER MAP 334 DATATYPE 161 3597
LAYER MAP 334 DATATYPE 171 3598
LAYER MAP 334 DATATYPE 181 3599
LAYER MAP 334 DATATYPE 251 3600
LAYER MAP 334 DATATYPE 261 3601
LAYER MAP 334 DATATYPE 271 3602
LAYER MAP 334 DATATYPE 281 3603
LAYER MAP 334 DATATYPE 351 3604
LAYER MAP 334 DATATYPE 361 3605
LAYER MAP 334 DATATYPE 371 3606
LAYER MAP 334 DATATYPE 381 3607
LAYER MAP 334 DATATYPE 401 3608
LAYER MAP 334 DATATYPE 411 3609
LAYER MAP 334 DATATYPE 421 3610
LAYER MAP 334 DATATYPE 431 3611 // 
LAYER DUM4_Bi        3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 
LAYER MAP 334 DATATYPE 152 3612
LAYER MAP 334 DATATYPE 162 3613
LAYER MAP 334 DATATYPE 172 3614
LAYER MAP 334 DATATYPE 182 3615
LAYER MAP 334 DATATYPE 252 3616
LAYER MAP 334 DATATYPE 262 3617
LAYER MAP 334 DATATYPE 272 3618
LAYER MAP 334 DATATYPE 282 3619
LAYER MAP 334 DATATYPE 352 3620
LAYER MAP 334 DATATYPE 362 3621
LAYER MAP 334 DATATYPE 372 3622
LAYER MAP 334 DATATYPE 382 3623
LAYER MAP 334 DATATYPE 402 3624
LAYER MAP 334 DATATYPE 412 3625
LAYER MAP 334 DATATYPE 422 3626
LAYER MAP 334 DATATYPE 432 3627 // 
LAYER DUM4i          3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 
LAYER MAP 334 DATATYPE 45 3628
LAYER MAP 334 DATATYPE 75 3629
LAYER MAP 334 DATATYPE 800 3630
LAYER MAP 334 DATATYPE 805 3631
LAYER MAP 334 DATATYPE 810 3632
LAYER MAP 334 DATATYPE 815 3633
LAYER MAP 334 DATATYPE 85 3634
LAYER MAP 334 DATATYPE 90 3635
LAYER MAP 334 DATATYPE 95 3636
LAYER MAP 334 DATATYPE 950 3637
LAYER MAP 334 DATATYPE 955 3638
LAYER MAP 334 DATATYPE 960 3639
LAYER MAP 334 DATATYPE 965 3640
LAYER MAP 334 DATATYPE 970 3641
LAYER MAP 334 DATATYPE 975 3642
LAYER MAP 334 DATATYPE 980 3643
LAYER MAP 334 DATATYPE 985 3644 // 
LAYER M5_Ai          3645 3646 3647 3648 3649 3650 3651 3652 
LAYER MAP 35 DATATYPE 151 3645
LAYER MAP 35 DATATYPE 171 3646
LAYER MAP 35 DATATYPE 251 3647
LAYER MAP 35 DATATYPE 271 3648
LAYER MAP 35 DATATYPE 351 3649
LAYER MAP 35 DATATYPE 371 3650
LAYER MAP 35 DATATYPE 401 3651
LAYER MAP 35 DATATYPE 421 3652 // 
LAYER M5_Bi          3653 3654 3655 3656 3657 3658 3659 3660 
LAYER MAP 35 DATATYPE 152 3653
LAYER MAP 35 DATATYPE 172 3654
LAYER MAP 35 DATATYPE 252 3655
LAYER MAP 35 DATATYPE 272 3656
LAYER MAP 35 DATATYPE 352 3657
LAYER MAP 35 DATATYPE 372 3658
LAYER MAP 35 DATATYPE 402 3659
LAYER MAP 35 DATATYPE 422 3660 // 
LAYER M5i            3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 
LAYER MAP 35 DATATYPE 40 3661
LAYER MAP 35 DATATYPE 70 3662
LAYER MAP 35 DATATYPE 80 3663
LAYER MAP 35 DATATYPE 800 3664
LAYER MAP 35 DATATYPE 810 3665
LAYER MAP 35 DATATYPE 90 3666
LAYER MAP 35 DATATYPE 950 3667
LAYER MAP 35 DATATYPE 960 3668
LAYER MAP 35 DATATYPE 970 3669
LAYER MAP 35 DATATYPE 980 3670 // 
LAYER DUM5_Ai        3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 
LAYER MAP 335 DATATYPE 151 3671
LAYER MAP 335 DATATYPE 161 3672
LAYER MAP 335 DATATYPE 171 3673
LAYER MAP 335 DATATYPE 181 3674
LAYER MAP 335 DATATYPE 251 3675
LAYER MAP 335 DATATYPE 261 3676
LAYER MAP 335 DATATYPE 271 3677
LAYER MAP 335 DATATYPE 281 3678
LAYER MAP 335 DATATYPE 351 3679
LAYER MAP 335 DATATYPE 361 3680
LAYER MAP 335 DATATYPE 371 3681
LAYER MAP 335 DATATYPE 381 3682
LAYER MAP 335 DATATYPE 401 3683
LAYER MAP 335 DATATYPE 411 3684
LAYER MAP 335 DATATYPE 421 3685
LAYER MAP 335 DATATYPE 431 3686 // 
LAYER DUM5_Bi        3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 
LAYER MAP 335 DATATYPE 152 3687
LAYER MAP 335 DATATYPE 162 3688
LAYER MAP 335 DATATYPE 172 3689
LAYER MAP 335 DATATYPE 182 3690
LAYER MAP 335 DATATYPE 252 3691
LAYER MAP 335 DATATYPE 262 3692
LAYER MAP 335 DATATYPE 272 3693
LAYER MAP 335 DATATYPE 282 3694
LAYER MAP 335 DATATYPE 352 3695
LAYER MAP 335 DATATYPE 362 3696
LAYER MAP 335 DATATYPE 372 3697
LAYER MAP 335 DATATYPE 382 3698
LAYER MAP 335 DATATYPE 402 3699
LAYER MAP 335 DATATYPE 412 3700
LAYER MAP 335 DATATYPE 422 3701
LAYER MAP 335 DATATYPE 432 3702 // 
LAYER DUM5i          3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 
LAYER MAP 335 DATATYPE 45 3703
LAYER MAP 335 DATATYPE 75 3704
LAYER MAP 335 DATATYPE 800 3705
LAYER MAP 335 DATATYPE 805 3706
LAYER MAP 335 DATATYPE 810 3707
LAYER MAP 335 DATATYPE 815 3708
LAYER MAP 335 DATATYPE 85 3709
LAYER MAP 335 DATATYPE 90 3710
LAYER MAP 335 DATATYPE 95 3711
LAYER MAP 335 DATATYPE 950 3712
LAYER MAP 335 DATATYPE 955 3713
LAYER MAP 335 DATATYPE 960 3714
LAYER MAP 335 DATATYPE 965 3715
LAYER MAP 335 DATATYPE 970 3716
LAYER MAP 335 DATATYPE 975 3717
LAYER MAP 335 DATATYPE 980 3718
LAYER MAP 335 DATATYPE 985 3719 // 
LAYER M6_Ai          3720 3721 3722 3723 3724 3725 3726 3727 
LAYER MAP 36 DATATYPE 151 3720
LAYER MAP 36 DATATYPE 171 3721
LAYER MAP 36 DATATYPE 251 3722
LAYER MAP 36 DATATYPE 271 3723
LAYER MAP 36 DATATYPE 351 3724
LAYER MAP 36 DATATYPE 371 3725
LAYER MAP 36 DATATYPE 401 3726
LAYER MAP 36 DATATYPE 421 3727 // 
LAYER M6_Bi          3728 3729 3730 3731 3732 3733 3734 3735 
LAYER MAP 36 DATATYPE 152 3728
LAYER MAP 36 DATATYPE 172 3729
LAYER MAP 36 DATATYPE 252 3730
LAYER MAP 36 DATATYPE 272 3731
LAYER MAP 36 DATATYPE 352 3732
LAYER MAP 36 DATATYPE 372 3733
LAYER MAP 36 DATATYPE 402 3734
LAYER MAP 36 DATATYPE 422 3735 // 
LAYER M6i            3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 
LAYER MAP 36 DATATYPE 40 3736
LAYER MAP 36 DATATYPE 70 3737
LAYER MAP 36 DATATYPE 80 3738
LAYER MAP 36 DATATYPE 800 3739
LAYER MAP 36 DATATYPE 810 3740
LAYER MAP 36 DATATYPE 90 3741
LAYER MAP 36 DATATYPE 950 3742
LAYER MAP 36 DATATYPE 960 3743
LAYER MAP 36 DATATYPE 970 3744
LAYER MAP 36 DATATYPE 980 3745 // 
LAYER DUM6_Ai        3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 
LAYER MAP 336 DATATYPE 151 3746
LAYER MAP 336 DATATYPE 161 3747
LAYER MAP 336 DATATYPE 171 3748
LAYER MAP 336 DATATYPE 181 3749
LAYER MAP 336 DATATYPE 251 3750
LAYER MAP 336 DATATYPE 261 3751
LAYER MAP 336 DATATYPE 271 3752
LAYER MAP 336 DATATYPE 281 3753
LAYER MAP 336 DATATYPE 351 3754
LAYER MAP 336 DATATYPE 361 3755
LAYER MAP 336 DATATYPE 371 3756
LAYER MAP 336 DATATYPE 381 3757
LAYER MAP 336 DATATYPE 401 3758
LAYER MAP 336 DATATYPE 411 3759
LAYER MAP 336 DATATYPE 421 3760
LAYER MAP 336 DATATYPE 431 3761 // 
LAYER DUM6_Bi        3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 
LAYER MAP 336 DATATYPE 152 3762
LAYER MAP 336 DATATYPE 162 3763
LAYER MAP 336 DATATYPE 172 3764
LAYER MAP 336 DATATYPE 182 3765
LAYER MAP 336 DATATYPE 252 3766
LAYER MAP 336 DATATYPE 262 3767
LAYER MAP 336 DATATYPE 272 3768
LAYER MAP 336 DATATYPE 282 3769
LAYER MAP 336 DATATYPE 352 3770
LAYER MAP 336 DATATYPE 362 3771
LAYER MAP 336 DATATYPE 372 3772
LAYER MAP 336 DATATYPE 382 3773
LAYER MAP 336 DATATYPE 402 3774
LAYER MAP 336 DATATYPE 412 3775
LAYER MAP 336 DATATYPE 422 3776
LAYER MAP 336 DATATYPE 432 3777 // 
LAYER DUM6i          3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 
LAYER MAP 336 DATATYPE 45 3778
LAYER MAP 336 DATATYPE 75 3779
LAYER MAP 336 DATATYPE 800 3780
LAYER MAP 336 DATATYPE 805 3781
LAYER MAP 336 DATATYPE 810 3782
LAYER MAP 336 DATATYPE 815 3783
LAYER MAP 336 DATATYPE 85 3784
LAYER MAP 336 DATATYPE 90 3785
LAYER MAP 336 DATATYPE 95 3786
LAYER MAP 336 DATATYPE 950 3787
LAYER MAP 336 DATATYPE 955 3788
LAYER MAP 336 DATATYPE 960 3789
LAYER MAP 336 DATATYPE 965 3790
LAYER MAP 336 DATATYPE 970 3791
LAYER MAP 336 DATATYPE 975 3792
LAYER MAP 336 DATATYPE 980 3793
LAYER MAP 336 DATATYPE 985 3794 // 
LAYER M7_Ai          3795 3796 3797 3798 3799 3800 3801 3802 
LAYER MAP 37 DATATYPE 151 3795
LAYER MAP 37 DATATYPE 171 3796
LAYER MAP 37 DATATYPE 251 3797
LAYER MAP 37 DATATYPE 271 3798
LAYER MAP 37 DATATYPE 351 3799
LAYER MAP 37 DATATYPE 371 3800
LAYER MAP 37 DATATYPE 401 3801
LAYER MAP 37 DATATYPE 421 3802 // 
LAYER M7_Bi          3803 3804 3805 3806 3807 3808 3809 3810 
LAYER MAP 37 DATATYPE 152 3803
LAYER MAP 37 DATATYPE 172 3804
LAYER MAP 37 DATATYPE 252 3805
LAYER MAP 37 DATATYPE 272 3806
LAYER MAP 37 DATATYPE 352 3807
LAYER MAP 37 DATATYPE 372 3808
LAYER MAP 37 DATATYPE 402 3809
LAYER MAP 37 DATATYPE 422 3810 // 
LAYER M7i            3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 
LAYER MAP 37 DATATYPE 40 3811
LAYER MAP 37 DATATYPE 70 3812
LAYER MAP 37 DATATYPE 80 3813
LAYER MAP 37 DATATYPE 800 3814
LAYER MAP 37 DATATYPE 810 3815
LAYER MAP 37 DATATYPE 90 3816
LAYER MAP 37 DATATYPE 950 3817
LAYER MAP 37 DATATYPE 960 3818
LAYER MAP 37 DATATYPE 970 3819
LAYER MAP 37 DATATYPE 980 3820 // 
LAYER DUM7_Ai        3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 
LAYER MAP 337 DATATYPE 151 3821
LAYER MAP 337 DATATYPE 161 3822
LAYER MAP 337 DATATYPE 171 3823
LAYER MAP 337 DATATYPE 181 3824
LAYER MAP 337 DATATYPE 251 3825
LAYER MAP 337 DATATYPE 261 3826
LAYER MAP 337 DATATYPE 271 3827
LAYER MAP 337 DATATYPE 281 3828
LAYER MAP 337 DATATYPE 351 3829
LAYER MAP 337 DATATYPE 361 3830
LAYER MAP 337 DATATYPE 371 3831
LAYER MAP 337 DATATYPE 381 3832
LAYER MAP 337 DATATYPE 401 3833
LAYER MAP 337 DATATYPE 411 3834
LAYER MAP 337 DATATYPE 421 3835
LAYER MAP 337 DATATYPE 431 3836 // 
LAYER DUM7_Bi        3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 
LAYER MAP 337 DATATYPE 152 3837
LAYER MAP 337 DATATYPE 162 3838
LAYER MAP 337 DATATYPE 172 3839
LAYER MAP 337 DATATYPE 182 3840
LAYER MAP 337 DATATYPE 252 3841
LAYER MAP 337 DATATYPE 262 3842
LAYER MAP 337 DATATYPE 272 3843
LAYER MAP 337 DATATYPE 282 3844
LAYER MAP 337 DATATYPE 352 3845
LAYER MAP 337 DATATYPE 362 3846
LAYER MAP 337 DATATYPE 372 3847
LAYER MAP 337 DATATYPE 382 3848
LAYER MAP 337 DATATYPE 402 3849
LAYER MAP 337 DATATYPE 412 3850
LAYER MAP 337 DATATYPE 422 3851
LAYER MAP 337 DATATYPE 432 3852 // 
LAYER DUM7i          3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 
LAYER MAP 337 DATATYPE 45 3853
LAYER MAP 337 DATATYPE 75 3854
LAYER MAP 337 DATATYPE 800 3855
LAYER MAP 337 DATATYPE 805 3856
LAYER MAP 337 DATATYPE 810 3857
LAYER MAP 337 DATATYPE 815 3858
LAYER MAP 337 DATATYPE 85 3859
LAYER MAP 337 DATATYPE 90 3860
LAYER MAP 337 DATATYPE 95 3861
LAYER MAP 337 DATATYPE 950 3862
LAYER MAP 337 DATATYPE 955 3863
LAYER MAP 337 DATATYPE 960 3864
LAYER MAP 337 DATATYPE 965 3865
LAYER MAP 337 DATATYPE 970 3866
LAYER MAP 337 DATATYPE 975 3867
LAYER MAP 337 DATATYPE 980 3868
LAYER MAP 337 DATATYPE 985 3869 // 
LAYER M8_Ai          3870 3871 3872 3873 3874 3875 3876 3877 
LAYER MAP 38 DATATYPE 151 3870
LAYER MAP 38 DATATYPE 171 3871
LAYER MAP 38 DATATYPE 251 3872
LAYER MAP 38 DATATYPE 271 3873
LAYER MAP 38 DATATYPE 351 3874
LAYER MAP 38 DATATYPE 371 3875
LAYER MAP 38 DATATYPE 401 3876
LAYER MAP 38 DATATYPE 421 3877 // 
LAYER M8_Bi          3878 3879 3880 3881 3882 3883 3884 3885 
LAYER MAP 38 DATATYPE 152 3878
LAYER MAP 38 DATATYPE 172 3879
LAYER MAP 38 DATATYPE 252 3880
LAYER MAP 38 DATATYPE 272 3881
LAYER MAP 38 DATATYPE 352 3882
LAYER MAP 38 DATATYPE 372 3883
LAYER MAP 38 DATATYPE 402 3884
LAYER MAP 38 DATATYPE 422 3885 // 
LAYER M8i            3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 
LAYER MAP 38 DATATYPE 40 3886
LAYER MAP 38 DATATYPE 70 3887
LAYER MAP 38 DATATYPE 80 3888
LAYER MAP 38 DATATYPE 800 3889
LAYER MAP 38 DATATYPE 810 3890
LAYER MAP 38 DATATYPE 90 3891
LAYER MAP 38 DATATYPE 950 3892
LAYER MAP 38 DATATYPE 960 3893
LAYER MAP 38 DATATYPE 970 3894
LAYER MAP 38 DATATYPE 980 3895 // 
LAYER DUM8_Ai        3896 3897 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 
LAYER MAP 338 DATATYPE 151 3896
LAYER MAP 338 DATATYPE 161 3897
LAYER MAP 338 DATATYPE 171 3898
LAYER MAP 338 DATATYPE 181 3899
LAYER MAP 338 DATATYPE 251 3900
LAYER MAP 338 DATATYPE 261 3901
LAYER MAP 338 DATATYPE 271 3902
LAYER MAP 338 DATATYPE 281 3903
LAYER MAP 338 DATATYPE 351 3904
LAYER MAP 338 DATATYPE 361 3905
LAYER MAP 338 DATATYPE 371 3906
LAYER MAP 338 DATATYPE 381 3907
LAYER MAP 338 DATATYPE 401 3908
LAYER MAP 338 DATATYPE 411 3909
LAYER MAP 338 DATATYPE 421 3910
LAYER MAP 338 DATATYPE 431 3911 // 
LAYER DUM8_Bi        3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 
LAYER MAP 338 DATATYPE 152 3912
LAYER MAP 338 DATATYPE 162 3913
LAYER MAP 338 DATATYPE 172 3914
LAYER MAP 338 DATATYPE 182 3915
LAYER MAP 338 DATATYPE 252 3916
LAYER MAP 338 DATATYPE 262 3917
LAYER MAP 338 DATATYPE 272 3918
LAYER MAP 338 DATATYPE 282 3919
LAYER MAP 338 DATATYPE 352 3920
LAYER MAP 338 DATATYPE 362 3921
LAYER MAP 338 DATATYPE 372 3922
LAYER MAP 338 DATATYPE 382 3923
LAYER MAP 338 DATATYPE 402 3924
LAYER MAP 338 DATATYPE 412 3925
LAYER MAP 338 DATATYPE 422 3926
LAYER MAP 338 DATATYPE 432 3927 // 
LAYER DUM8i          3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 
LAYER MAP 338 DATATYPE 45 3928
LAYER MAP 338 DATATYPE 75 3929
LAYER MAP 338 DATATYPE 800 3930
LAYER MAP 338 DATATYPE 805 3931
LAYER MAP 338 DATATYPE 810 3932
LAYER MAP 338 DATATYPE 815 3933
LAYER MAP 338 DATATYPE 85 3934
LAYER MAP 338 DATATYPE 90 3935
LAYER MAP 338 DATATYPE 95 3936
LAYER MAP 338 DATATYPE 950 3937
LAYER MAP 338 DATATYPE 955 3938
LAYER MAP 338 DATATYPE 960 3939
LAYER MAP 338 DATATYPE 965 3940
LAYER MAP 338 DATATYPE 970 3941
LAYER MAP 338 DATATYPE 975 3942
LAYER MAP 338 DATATYPE 980 3943
LAYER MAP 338 DATATYPE 985 3944 // 
LAYER M9_Ai          3945 3946 3947 3948 3949 3950 3951 3952 
LAYER MAP 39 DATATYPE 151 3945
LAYER MAP 39 DATATYPE 171 3946
LAYER MAP 39 DATATYPE 251 3947
LAYER MAP 39 DATATYPE 271 3948
LAYER MAP 39 DATATYPE 351 3949
LAYER MAP 39 DATATYPE 371 3950
LAYER MAP 39 DATATYPE 401 3951
LAYER MAP 39 DATATYPE 421 3952 // 
LAYER M9_Bi          3953 3954 3955 3956 3957 3958 3959 3960 
LAYER MAP 39 DATATYPE 152 3953
LAYER MAP 39 DATATYPE 172 3954
LAYER MAP 39 DATATYPE 252 3955
LAYER MAP 39 DATATYPE 272 3956
LAYER MAP 39 DATATYPE 352 3957
LAYER MAP 39 DATATYPE 372 3958
LAYER MAP 39 DATATYPE 402 3959
LAYER MAP 39 DATATYPE 422 3960 // 
LAYER M9i            3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 
LAYER MAP 39 DATATYPE 40 3961
LAYER MAP 39 DATATYPE 70 3962
LAYER MAP 39 DATATYPE 80 3963
LAYER MAP 39 DATATYPE 800 3964
LAYER MAP 39 DATATYPE 810 3965
LAYER MAP 39 DATATYPE 90 3966
LAYER MAP 39 DATATYPE 950 3967
LAYER MAP 39 DATATYPE 960 3968
LAYER MAP 39 DATATYPE 970 3969
LAYER MAP 39 DATATYPE 980 3970 // 
LAYER DUM9_Ai        3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 
LAYER MAP 339 DATATYPE 151 3971
LAYER MAP 339 DATATYPE 161 3972
LAYER MAP 339 DATATYPE 171 3973
LAYER MAP 339 DATATYPE 181 3974
LAYER MAP 339 DATATYPE 251 3975
LAYER MAP 339 DATATYPE 261 3976
LAYER MAP 339 DATATYPE 271 3977
LAYER MAP 339 DATATYPE 281 3978
LAYER MAP 339 DATATYPE 351 3979
LAYER MAP 339 DATATYPE 361 3980
LAYER MAP 339 DATATYPE 371 3981
LAYER MAP 339 DATATYPE 381 3982
LAYER MAP 339 DATATYPE 401 3983
LAYER MAP 339 DATATYPE 411 3984
LAYER MAP 339 DATATYPE 421 3985
LAYER MAP 339 DATATYPE 431 3986 // 
LAYER DUM9_Bi        3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 
LAYER MAP 339 DATATYPE 152 3987
LAYER MAP 339 DATATYPE 162 3988
LAYER MAP 339 DATATYPE 172 3989
LAYER MAP 339 DATATYPE 182 3990
LAYER MAP 339 DATATYPE 252 3991
LAYER MAP 339 DATATYPE 262 3992
LAYER MAP 339 DATATYPE 272 3993
LAYER MAP 339 DATATYPE 282 3994
LAYER MAP 339 DATATYPE 352 3995
LAYER MAP 339 DATATYPE 362 3996
LAYER MAP 339 DATATYPE 372 3997
LAYER MAP 339 DATATYPE 382 3998
LAYER MAP 339 DATATYPE 402 3999
LAYER MAP 339 DATATYPE 412 4000
LAYER MAP 339 DATATYPE 422 4001
LAYER MAP 339 DATATYPE 432 4002 // 
LAYER DUM9i          4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 
LAYER MAP 339 DATATYPE 45 4003
LAYER MAP 339 DATATYPE 75 4004
LAYER MAP 339 DATATYPE 800 4005
LAYER MAP 339 DATATYPE 805 4006
LAYER MAP 339 DATATYPE 810 4007
LAYER MAP 339 DATATYPE 815 4008
LAYER MAP 339 DATATYPE 85 4009
LAYER MAP 339 DATATYPE 90 4010
LAYER MAP 339 DATATYPE 95 4011
LAYER MAP 339 DATATYPE 950 4012
LAYER MAP 339 DATATYPE 955 4013
LAYER MAP 339 DATATYPE 960 4014
LAYER MAP 339 DATATYPE 965 4015
LAYER MAP 339 DATATYPE 970 4016
LAYER MAP 339 DATATYPE 975 4017
LAYER MAP 339 DATATYPE 980 4018
LAYER MAP 339 DATATYPE 985 4019 // 
LAYER M10_Ai         4020 4021 4022 4023 4024 4025 4026 4027 
LAYER MAP 40 DATATYPE 151 4020
LAYER MAP 40 DATATYPE 171 4021
LAYER MAP 40 DATATYPE 251 4022
LAYER MAP 40 DATATYPE 271 4023
LAYER MAP 40 DATATYPE 351 4024
LAYER MAP 40 DATATYPE 371 4025
LAYER MAP 40 DATATYPE 401 4026
LAYER MAP 40 DATATYPE 421 4027 // 
LAYER M10_Bi         4028 4029 4030 4031 4032 4033 4034 4035 
LAYER MAP 40 DATATYPE 152 4028
LAYER MAP 40 DATATYPE 172 4029
LAYER MAP 40 DATATYPE 252 4030
LAYER MAP 40 DATATYPE 272 4031
LAYER MAP 40 DATATYPE 352 4032
LAYER MAP 40 DATATYPE 372 4033
LAYER MAP 40 DATATYPE 402 4034
LAYER MAP 40 DATATYPE 422 4035 // 
LAYER M10i           4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 
LAYER MAP 40 DATATYPE 40 4036
LAYER MAP 40 DATATYPE 70 4037
LAYER MAP 40 DATATYPE 80 4038
LAYER MAP 40 DATATYPE 800 4039
LAYER MAP 40 DATATYPE 810 4040
LAYER MAP 40 DATATYPE 90 4041
LAYER MAP 40 DATATYPE 950 4042
LAYER MAP 40 DATATYPE 960 4043
LAYER MAP 40 DATATYPE 970 4044
LAYER MAP 40 DATATYPE 980 4045 // 
LAYER DUM10_Ai       4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 
LAYER MAP 340 DATATYPE 151 4046
LAYER MAP 340 DATATYPE 161 4047
LAYER MAP 340 DATATYPE 171 4048
LAYER MAP 340 DATATYPE 181 4049
LAYER MAP 340 DATATYPE 251 4050
LAYER MAP 340 DATATYPE 261 4051
LAYER MAP 340 DATATYPE 271 4052
LAYER MAP 340 DATATYPE 281 4053
LAYER MAP 340 DATATYPE 351 4054
LAYER MAP 340 DATATYPE 361 4055
LAYER MAP 340 DATATYPE 371 4056
LAYER MAP 340 DATATYPE 381 4057
LAYER MAP 340 DATATYPE 401 4058
LAYER MAP 340 DATATYPE 411 4059
LAYER MAP 340 DATATYPE 421 4060
LAYER MAP 340 DATATYPE 431 4061 // 
LAYER DUM10_Bi       4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 
LAYER MAP 340 DATATYPE 152 4062
LAYER MAP 340 DATATYPE 162 4063
LAYER MAP 340 DATATYPE 172 4064
LAYER MAP 340 DATATYPE 182 4065
LAYER MAP 340 DATATYPE 252 4066
LAYER MAP 340 DATATYPE 262 4067
LAYER MAP 340 DATATYPE 272 4068
LAYER MAP 340 DATATYPE 282 4069
LAYER MAP 340 DATATYPE 352 4070
LAYER MAP 340 DATATYPE 362 4071
LAYER MAP 340 DATATYPE 372 4072
LAYER MAP 340 DATATYPE 382 4073
LAYER MAP 340 DATATYPE 402 4074
LAYER MAP 340 DATATYPE 412 4075
LAYER MAP 340 DATATYPE 422 4076
LAYER MAP 340 DATATYPE 432 4077 // 
LAYER DUM10i         4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 
LAYER MAP 340 DATATYPE 45 4078
LAYER MAP 340 DATATYPE 75 4079
LAYER MAP 340 DATATYPE 800 4080
LAYER MAP 340 DATATYPE 805 4081
LAYER MAP 340 DATATYPE 810 4082
LAYER MAP 340 DATATYPE 815 4083
LAYER MAP 340 DATATYPE 85 4084
LAYER MAP 340 DATATYPE 90 4085
LAYER MAP 340 DATATYPE 95 4086
LAYER MAP 340 DATATYPE 950 4087
LAYER MAP 340 DATATYPE 955 4088
LAYER MAP 340 DATATYPE 960 4089
LAYER MAP 340 DATATYPE 965 4090
LAYER MAP 340 DATATYPE 970 4091
LAYER MAP 340 DATATYPE 975 4092
LAYER MAP 340 DATATYPE 980 4093
LAYER MAP 340 DATATYPE 985 4094 // 
LAYER M11_Ai         4095 4096 4097 4098 4099 4100 4101 4102 
LAYER MAP 41 DATATYPE 151 4095
LAYER MAP 41 DATATYPE 171 4096
LAYER MAP 41 DATATYPE 251 4097
LAYER MAP 41 DATATYPE 271 4098
LAYER MAP 41 DATATYPE 351 4099
LAYER MAP 41 DATATYPE 371 4100
LAYER MAP 41 DATATYPE 401 4101
LAYER MAP 41 DATATYPE 421 4102 // 
LAYER M11_Bi         4103 4104 4105 4106 4107 4108 4109 4110 
LAYER MAP 41 DATATYPE 152 4103
LAYER MAP 41 DATATYPE 172 4104
LAYER MAP 41 DATATYPE 252 4105
LAYER MAP 41 DATATYPE 272 4106
LAYER MAP 41 DATATYPE 352 4107
LAYER MAP 41 DATATYPE 372 4108
LAYER MAP 41 DATATYPE 402 4109
LAYER MAP 41 DATATYPE 422 4110 // 
LAYER M11i           4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 
LAYER MAP 41 DATATYPE 40 4111
LAYER MAP 41 DATATYPE 70 4112
LAYER MAP 41 DATATYPE 80 4113
LAYER MAP 41 DATATYPE 800 4114
LAYER MAP 41 DATATYPE 810 4115
LAYER MAP 41 DATATYPE 90 4116
LAYER MAP 41 DATATYPE 950 4117
LAYER MAP 41 DATATYPE 960 4118
LAYER MAP 41 DATATYPE 970 4119
LAYER MAP 41 DATATYPE 980 4120 // 
LAYER DUM11_Ai       4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 
LAYER MAP 341 DATATYPE 151 4121
LAYER MAP 341 DATATYPE 161 4122
LAYER MAP 341 DATATYPE 171 4123
LAYER MAP 341 DATATYPE 181 4124
LAYER MAP 341 DATATYPE 251 4125
LAYER MAP 341 DATATYPE 261 4126
LAYER MAP 341 DATATYPE 271 4127
LAYER MAP 341 DATATYPE 281 4128
LAYER MAP 341 DATATYPE 351 4129
LAYER MAP 341 DATATYPE 361 4130
LAYER MAP 341 DATATYPE 371 4131
LAYER MAP 341 DATATYPE 381 4132
LAYER MAP 341 DATATYPE 401 4133
LAYER MAP 341 DATATYPE 411 4134
LAYER MAP 341 DATATYPE 421 4135
LAYER MAP 341 DATATYPE 431 4136 // 
LAYER DUM11_Bi       4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 
LAYER MAP 341 DATATYPE 152 4137
LAYER MAP 341 DATATYPE 162 4138
LAYER MAP 341 DATATYPE 172 4139
LAYER MAP 341 DATATYPE 182 4140
LAYER MAP 341 DATATYPE 252 4141
LAYER MAP 341 DATATYPE 262 4142
LAYER MAP 341 DATATYPE 272 4143
LAYER MAP 341 DATATYPE 282 4144
LAYER MAP 341 DATATYPE 352 4145
LAYER MAP 341 DATATYPE 362 4146
LAYER MAP 341 DATATYPE 372 4147
LAYER MAP 341 DATATYPE 382 4148
LAYER MAP 341 DATATYPE 402 4149
LAYER MAP 341 DATATYPE 412 4150
LAYER MAP 341 DATATYPE 422 4151
LAYER MAP 341 DATATYPE 432 4152 // 
LAYER DUM11i         4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 
LAYER MAP 341 DATATYPE 45 4153
LAYER MAP 341 DATATYPE 75 4154
LAYER MAP 341 DATATYPE 800 4155
LAYER MAP 341 DATATYPE 805 4156
LAYER MAP 341 DATATYPE 810 4157
LAYER MAP 341 DATATYPE 815 4158
LAYER MAP 341 DATATYPE 85 4159
LAYER MAP 341 DATATYPE 90 4160
LAYER MAP 341 DATATYPE 95 4161
LAYER MAP 341 DATATYPE 950 4162
LAYER MAP 341 DATATYPE 955 4163
LAYER MAP 341 DATATYPE 960 4164
LAYER MAP 341 DATATYPE 965 4165
LAYER MAP 341 DATATYPE 970 4166
LAYER MAP 341 DATATYPE 975 4167
LAYER MAP 341 DATATYPE 980 4168
LAYER MAP 341 DATATYPE 985 4169 // 
LAYER M12_Ai         4170 4171 4172 4173 4174 4175 4176 4177 
LAYER MAP 42 DATATYPE 151 4170
LAYER MAP 42 DATATYPE 171 4171
LAYER MAP 42 DATATYPE 251 4172
LAYER MAP 42 DATATYPE 271 4173
LAYER MAP 42 DATATYPE 351 4174
LAYER MAP 42 DATATYPE 371 4175
LAYER MAP 42 DATATYPE 401 4176
LAYER MAP 42 DATATYPE 421 4177 // 
LAYER M12_Bi         4178 4179 4180 4181 4182 4183 4184 4185 
LAYER MAP 42 DATATYPE 152 4178
LAYER MAP 42 DATATYPE 172 4179
LAYER MAP 42 DATATYPE 252 4180
LAYER MAP 42 DATATYPE 272 4181
LAYER MAP 42 DATATYPE 352 4182
LAYER MAP 42 DATATYPE 372 4183
LAYER MAP 42 DATATYPE 402 4184
LAYER MAP 42 DATATYPE 422 4185 // 
LAYER M12i           4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 
LAYER MAP 42 DATATYPE 40 4186
LAYER MAP 42 DATATYPE 70 4187
LAYER MAP 42 DATATYPE 80 4188
LAYER MAP 42 DATATYPE 800 4189
LAYER MAP 42 DATATYPE 810 4190
LAYER MAP 42 DATATYPE 90 4191
LAYER MAP 42 DATATYPE 950 4192
LAYER MAP 42 DATATYPE 960 4193
LAYER MAP 42 DATATYPE 970 4194
LAYER MAP 42 DATATYPE 980 4195 // 
LAYER DUM12_Ai       4196 4197 4198 4199 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 
LAYER MAP 342 DATATYPE 151 4196
LAYER MAP 342 DATATYPE 161 4197
LAYER MAP 342 DATATYPE 171 4198
LAYER MAP 342 DATATYPE 181 4199
LAYER MAP 342 DATATYPE 251 4200
LAYER MAP 342 DATATYPE 261 4201
LAYER MAP 342 DATATYPE 271 4202
LAYER MAP 342 DATATYPE 281 4203
LAYER MAP 342 DATATYPE 351 4204
LAYER MAP 342 DATATYPE 361 4205
LAYER MAP 342 DATATYPE 371 4206
LAYER MAP 342 DATATYPE 381 4207
LAYER MAP 342 DATATYPE 401 4208
LAYER MAP 342 DATATYPE 411 4209
LAYER MAP 342 DATATYPE 421 4210
LAYER MAP 342 DATATYPE 431 4211 // 
LAYER DUM12_Bi       4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 
LAYER MAP 342 DATATYPE 152 4212
LAYER MAP 342 DATATYPE 162 4213
LAYER MAP 342 DATATYPE 172 4214
LAYER MAP 342 DATATYPE 182 4215
LAYER MAP 342 DATATYPE 252 4216
LAYER MAP 342 DATATYPE 262 4217
LAYER MAP 342 DATATYPE 272 4218
LAYER MAP 342 DATATYPE 282 4219
LAYER MAP 342 DATATYPE 352 4220
LAYER MAP 342 DATATYPE 362 4221
LAYER MAP 342 DATATYPE 372 4222
LAYER MAP 342 DATATYPE 382 4223
LAYER MAP 342 DATATYPE 402 4224
LAYER MAP 342 DATATYPE 412 4225
LAYER MAP 342 DATATYPE 422 4226
LAYER MAP 342 DATATYPE 432 4227 // 
LAYER DUM12i         4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 
LAYER MAP 342 DATATYPE 45 4228
LAYER MAP 342 DATATYPE 75 4229
LAYER MAP 342 DATATYPE 800 4230
LAYER MAP 342 DATATYPE 805 4231
LAYER MAP 342 DATATYPE 810 4232
LAYER MAP 342 DATATYPE 815 4233
LAYER MAP 342 DATATYPE 85 4234
LAYER MAP 342 DATATYPE 90 4235
LAYER MAP 342 DATATYPE 95 4236
LAYER MAP 342 DATATYPE 950 4237
LAYER MAP 342 DATATYPE 955 4238
LAYER MAP 342 DATATYPE 960 4239
LAYER MAP 342 DATATYPE 965 4240
LAYER MAP 342 DATATYPE 970 4241
LAYER MAP 342 DATATYPE 975 4242
LAYER MAP 342 DATATYPE 980 4243
LAYER MAP 342 DATATYPE 985 4244 // 
LAYER M13_Ai         4245 4246 4247 4248 4249 4250 4251 4252 
LAYER MAP 43 DATATYPE 151 4245
LAYER MAP 43 DATATYPE 171 4246
LAYER MAP 43 DATATYPE 251 4247
LAYER MAP 43 DATATYPE 271 4248
LAYER MAP 43 DATATYPE 351 4249
LAYER MAP 43 DATATYPE 371 4250
LAYER MAP 43 DATATYPE 401 4251
LAYER MAP 43 DATATYPE 421 4252 // 
LAYER M13_Bi         4253 4254 4255 4256 4257 4258 4259 4260 
LAYER MAP 43 DATATYPE 152 4253
LAYER MAP 43 DATATYPE 172 4254
LAYER MAP 43 DATATYPE 252 4255
LAYER MAP 43 DATATYPE 272 4256
LAYER MAP 43 DATATYPE 352 4257
LAYER MAP 43 DATATYPE 372 4258
LAYER MAP 43 DATATYPE 402 4259
LAYER MAP 43 DATATYPE 422 4260 // 
LAYER M13i           4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 
LAYER MAP 43 DATATYPE 40 4261
LAYER MAP 43 DATATYPE 70 4262
LAYER MAP 43 DATATYPE 80 4263
LAYER MAP 43 DATATYPE 800 4264
LAYER MAP 43 DATATYPE 810 4265
LAYER MAP 43 DATATYPE 90 4266
LAYER MAP 43 DATATYPE 950 4267
LAYER MAP 43 DATATYPE 960 4268
LAYER MAP 43 DATATYPE 970 4269
LAYER MAP 43 DATATYPE 980 4270 // 
LAYER DUM13_Ai       4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 
LAYER MAP 343 DATATYPE 151 4271
LAYER MAP 343 DATATYPE 161 4272
LAYER MAP 343 DATATYPE 171 4273
LAYER MAP 343 DATATYPE 181 4274
LAYER MAP 343 DATATYPE 251 4275
LAYER MAP 343 DATATYPE 261 4276
LAYER MAP 343 DATATYPE 271 4277
LAYER MAP 343 DATATYPE 281 4278
LAYER MAP 343 DATATYPE 351 4279
LAYER MAP 343 DATATYPE 361 4280
LAYER MAP 343 DATATYPE 371 4281
LAYER MAP 343 DATATYPE 381 4282
LAYER MAP 343 DATATYPE 401 4283
LAYER MAP 343 DATATYPE 411 4284
LAYER MAP 343 DATATYPE 421 4285
LAYER MAP 343 DATATYPE 431 4286 // 
LAYER DUM13_Bi       4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299 4300 4301 4302 
LAYER MAP 343 DATATYPE 152 4287
LAYER MAP 343 DATATYPE 162 4288
LAYER MAP 343 DATATYPE 172 4289
LAYER MAP 343 DATATYPE 182 4290
LAYER MAP 343 DATATYPE 252 4291
LAYER MAP 343 DATATYPE 262 4292
LAYER MAP 343 DATATYPE 272 4293
LAYER MAP 343 DATATYPE 282 4294
LAYER MAP 343 DATATYPE 352 4295
LAYER MAP 343 DATATYPE 362 4296
LAYER MAP 343 DATATYPE 372 4297
LAYER MAP 343 DATATYPE 382 4298
LAYER MAP 343 DATATYPE 402 4299
LAYER MAP 343 DATATYPE 412 4300
LAYER MAP 343 DATATYPE 422 4301
LAYER MAP 343 DATATYPE 432 4302 // 
LAYER DUM13i         4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 
LAYER MAP 343 DATATYPE 45 4303
LAYER MAP 343 DATATYPE 75 4304
LAYER MAP 343 DATATYPE 800 4305
LAYER MAP 343 DATATYPE 805 4306
LAYER MAP 343 DATATYPE 810 4307
LAYER MAP 343 DATATYPE 815 4308
LAYER MAP 343 DATATYPE 85 4309
LAYER MAP 343 DATATYPE 90 4310
LAYER MAP 343 DATATYPE 95 4311
LAYER MAP 343 DATATYPE 950 4312
LAYER MAP 343 DATATYPE 955 4313
LAYER MAP 343 DATATYPE 960 4314
LAYER MAP 343 DATATYPE 965 4315
LAYER MAP 343 DATATYPE 970 4316
LAYER MAP 343 DATATYPE 975 4317
LAYER MAP 343 DATATYPE 980 4318
LAYER MAP 343 DATATYPE 985 4319 // 
LAYER M14_Ai         4320 4321 4322 4323 4324 4325 4326 4327 
LAYER MAP 44 DATATYPE 151 4320
LAYER MAP 44 DATATYPE 171 4321
LAYER MAP 44 DATATYPE 251 4322
LAYER MAP 44 DATATYPE 271 4323
LAYER MAP 44 DATATYPE 351 4324
LAYER MAP 44 DATATYPE 371 4325
LAYER MAP 44 DATATYPE 401 4326
LAYER MAP 44 DATATYPE 421 4327 // 
LAYER M14_Bi         4328 4329 4330 4331 4332 4333 4334 4335 
LAYER MAP 44 DATATYPE 152 4328
LAYER MAP 44 DATATYPE 172 4329
LAYER MAP 44 DATATYPE 252 4330
LAYER MAP 44 DATATYPE 272 4331
LAYER MAP 44 DATATYPE 352 4332
LAYER MAP 44 DATATYPE 372 4333
LAYER MAP 44 DATATYPE 402 4334
LAYER MAP 44 DATATYPE 422 4335 // 
LAYER M14i           4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 
LAYER MAP 44 DATATYPE 40 4336
LAYER MAP 44 DATATYPE 70 4337
LAYER MAP 44 DATATYPE 80 4338
LAYER MAP 44 DATATYPE 800 4339
LAYER MAP 44 DATATYPE 810 4340
LAYER MAP 44 DATATYPE 90 4341
LAYER MAP 44 DATATYPE 950 4342
LAYER MAP 44 DATATYPE 960 4343
LAYER MAP 44 DATATYPE 970 4344
LAYER MAP 44 DATATYPE 980 4345 // 
LAYER DUM14_Ai       4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 
LAYER MAP 344 DATATYPE 151 4346
LAYER MAP 344 DATATYPE 161 4347
LAYER MAP 344 DATATYPE 171 4348
LAYER MAP 344 DATATYPE 181 4349
LAYER MAP 344 DATATYPE 251 4350
LAYER MAP 344 DATATYPE 261 4351
LAYER MAP 344 DATATYPE 271 4352
LAYER MAP 344 DATATYPE 281 4353
LAYER MAP 344 DATATYPE 351 4354
LAYER MAP 344 DATATYPE 361 4355
LAYER MAP 344 DATATYPE 371 4356
LAYER MAP 344 DATATYPE 381 4357
LAYER MAP 344 DATATYPE 401 4358
LAYER MAP 344 DATATYPE 411 4359
LAYER MAP 344 DATATYPE 421 4360
LAYER MAP 344 DATATYPE 431 4361 // 
LAYER DUM14_Bi       4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 
LAYER MAP 344 DATATYPE 152 4362
LAYER MAP 344 DATATYPE 162 4363
LAYER MAP 344 DATATYPE 172 4364
LAYER MAP 344 DATATYPE 182 4365
LAYER MAP 344 DATATYPE 252 4366
LAYER MAP 344 DATATYPE 262 4367
LAYER MAP 344 DATATYPE 272 4368
LAYER MAP 344 DATATYPE 282 4369
LAYER MAP 344 DATATYPE 352 4370
LAYER MAP 344 DATATYPE 362 4371
LAYER MAP 344 DATATYPE 372 4372
LAYER MAP 344 DATATYPE 382 4373
LAYER MAP 344 DATATYPE 402 4374
LAYER MAP 344 DATATYPE 412 4375
LAYER MAP 344 DATATYPE 422 4376
LAYER MAP 344 DATATYPE 432 4377 // 
LAYER DUM14i         4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 
LAYER MAP 344 DATATYPE 45 4378
LAYER MAP 344 DATATYPE 75 4379
LAYER MAP 344 DATATYPE 800 4380
LAYER MAP 344 DATATYPE 805 4381
LAYER MAP 344 DATATYPE 810 4382
LAYER MAP 344 DATATYPE 815 4383
LAYER MAP 344 DATATYPE 85 4384
LAYER MAP 344 DATATYPE 90 4385
LAYER MAP 344 DATATYPE 95 4386
LAYER MAP 344 DATATYPE 950 4387
LAYER MAP 344 DATATYPE 955 4388
LAYER MAP 344 DATATYPE 960 4389
LAYER MAP 344 DATATYPE 965 4390
LAYER MAP 344 DATATYPE 970 4391
LAYER MAP 344 DATATYPE 975 4392
LAYER MAP 344 DATATYPE 980 4393
LAYER MAP 344 DATATYPE 985 4394 // 
LAYER M15_Ai         4395 4396 4397 4398 4399 4400 4401 4402 
LAYER MAP 45 DATATYPE 151 4395
LAYER MAP 45 DATATYPE 171 4396
LAYER MAP 45 DATATYPE 251 4397
LAYER MAP 45 DATATYPE 271 4398
LAYER MAP 45 DATATYPE 351 4399
LAYER MAP 45 DATATYPE 371 4400
LAYER MAP 45 DATATYPE 401 4401
LAYER MAP 45 DATATYPE 421 4402 // 
LAYER M15_Bi         4403 4404 4405 4406 4407 4408 4409 4410 
LAYER MAP 45 DATATYPE 152 4403
LAYER MAP 45 DATATYPE 172 4404
LAYER MAP 45 DATATYPE 252 4405
LAYER MAP 45 DATATYPE 272 4406
LAYER MAP 45 DATATYPE 352 4407
LAYER MAP 45 DATATYPE 372 4408
LAYER MAP 45 DATATYPE 402 4409
LAYER MAP 45 DATATYPE 422 4410 // 
LAYER M15i           4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 
LAYER MAP 45 DATATYPE 40 4411
LAYER MAP 45 DATATYPE 70 4412
LAYER MAP 45 DATATYPE 80 4413
LAYER MAP 45 DATATYPE 800 4414
LAYER MAP 45 DATATYPE 810 4415
LAYER MAP 45 DATATYPE 90 4416
LAYER MAP 45 DATATYPE 950 4417
LAYER MAP 45 DATATYPE 960 4418
LAYER MAP 45 DATATYPE 970 4419
LAYER MAP 45 DATATYPE 980 4420 // 
LAYER DUM15_Ai       4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 
LAYER MAP 345 DATATYPE 151 4421
LAYER MAP 345 DATATYPE 161 4422
LAYER MAP 345 DATATYPE 171 4423
LAYER MAP 345 DATATYPE 181 4424
LAYER MAP 345 DATATYPE 251 4425
LAYER MAP 345 DATATYPE 261 4426
LAYER MAP 345 DATATYPE 271 4427
LAYER MAP 345 DATATYPE 281 4428
LAYER MAP 345 DATATYPE 351 4429
LAYER MAP 345 DATATYPE 361 4430
LAYER MAP 345 DATATYPE 371 4431
LAYER MAP 345 DATATYPE 381 4432
LAYER MAP 345 DATATYPE 401 4433
LAYER MAP 345 DATATYPE 411 4434
LAYER MAP 345 DATATYPE 421 4435
LAYER MAP 345 DATATYPE 431 4436 // 
LAYER DUM15_Bi       4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 
LAYER MAP 345 DATATYPE 152 4437
LAYER MAP 345 DATATYPE 162 4438
LAYER MAP 345 DATATYPE 172 4439
LAYER MAP 345 DATATYPE 182 4440
LAYER MAP 345 DATATYPE 252 4441
LAYER MAP 345 DATATYPE 262 4442
LAYER MAP 345 DATATYPE 272 4443
LAYER MAP 345 DATATYPE 282 4444
LAYER MAP 345 DATATYPE 352 4445
LAYER MAP 345 DATATYPE 362 4446
LAYER MAP 345 DATATYPE 372 4447
LAYER MAP 345 DATATYPE 382 4448
LAYER MAP 345 DATATYPE 402 4449
LAYER MAP 345 DATATYPE 412 4450
LAYER MAP 345 DATATYPE 422 4451
LAYER MAP 345 DATATYPE 432 4452 // 
LAYER DUM15i         4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 
LAYER MAP 345 DATATYPE 45 4453
LAYER MAP 345 DATATYPE 75 4454
LAYER MAP 345 DATATYPE 800 4455
LAYER MAP 345 DATATYPE 805 4456
LAYER MAP 345 DATATYPE 810 4457
LAYER MAP 345 DATATYPE 815 4458
LAYER MAP 345 DATATYPE 85 4459
LAYER MAP 345 DATATYPE 90 4460
LAYER MAP 345 DATATYPE 95 4461
LAYER MAP 345 DATATYPE 950 4462
LAYER MAP 345 DATATYPE 955 4463
LAYER MAP 345 DATATYPE 960 4464
LAYER MAP 345 DATATYPE 965 4465
LAYER MAP 345 DATATYPE 970 4466
LAYER MAP 345 DATATYPE 975 4467
LAYER MAP 345 DATATYPE 980 4468
LAYER MAP 345 DATATYPE 985 4469 // 
LAYER M16_Ai         4470 4471 4472 4473 4474 4475 4476 4477 
LAYER MAP 46 DATATYPE 151 4470
LAYER MAP 46 DATATYPE 171 4471
LAYER MAP 46 DATATYPE 251 4472
LAYER MAP 46 DATATYPE 271 4473
LAYER MAP 46 DATATYPE 351 4474
LAYER MAP 46 DATATYPE 371 4475
LAYER MAP 46 DATATYPE 401 4476
LAYER MAP 46 DATATYPE 421 4477 // 
LAYER M16_Bi         4478 4479 4480 4481 4482 4483 4484 4485 
LAYER MAP 46 DATATYPE 152 4478
LAYER MAP 46 DATATYPE 172 4479
LAYER MAP 46 DATATYPE 252 4480
LAYER MAP 46 DATATYPE 272 4481
LAYER MAP 46 DATATYPE 352 4482
LAYER MAP 46 DATATYPE 372 4483
LAYER MAP 46 DATATYPE 402 4484
LAYER MAP 46 DATATYPE 422 4485 // 
LAYER M16i           4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 
LAYER MAP 46 DATATYPE 40 4486
LAYER MAP 46 DATATYPE 70 4487
LAYER MAP 46 DATATYPE 80 4488
LAYER MAP 46 DATATYPE 800 4489
LAYER MAP 46 DATATYPE 810 4490
LAYER MAP 46 DATATYPE 90 4491
LAYER MAP 46 DATATYPE 950 4492
LAYER MAP 46 DATATYPE 960 4493
LAYER MAP 46 DATATYPE 970 4494
LAYER MAP 46 DATATYPE 980 4495 // 
LAYER DUM16_Ai       4496 4497 4498 4499 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 
LAYER MAP 346 DATATYPE 151 4496
LAYER MAP 346 DATATYPE 161 4497
LAYER MAP 346 DATATYPE 171 4498
LAYER MAP 346 DATATYPE 181 4499
LAYER MAP 346 DATATYPE 251 4500
LAYER MAP 346 DATATYPE 261 4501
LAYER MAP 346 DATATYPE 271 4502
LAYER MAP 346 DATATYPE 281 4503
LAYER MAP 346 DATATYPE 351 4504
LAYER MAP 346 DATATYPE 361 4505
LAYER MAP 346 DATATYPE 371 4506
LAYER MAP 346 DATATYPE 381 4507
LAYER MAP 346 DATATYPE 401 4508
LAYER MAP 346 DATATYPE 411 4509
LAYER MAP 346 DATATYPE 421 4510
LAYER MAP 346 DATATYPE 431 4511 // 
LAYER DUM16_Bi       4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 
LAYER MAP 346 DATATYPE 152 4512
LAYER MAP 346 DATATYPE 162 4513
LAYER MAP 346 DATATYPE 172 4514
LAYER MAP 346 DATATYPE 182 4515
LAYER MAP 346 DATATYPE 252 4516
LAYER MAP 346 DATATYPE 262 4517
LAYER MAP 346 DATATYPE 272 4518
LAYER MAP 346 DATATYPE 282 4519
LAYER MAP 346 DATATYPE 352 4520
LAYER MAP 346 DATATYPE 362 4521
LAYER MAP 346 DATATYPE 372 4522
LAYER MAP 346 DATATYPE 382 4523
LAYER MAP 346 DATATYPE 402 4524
LAYER MAP 346 DATATYPE 412 4525
LAYER MAP 346 DATATYPE 422 4526
LAYER MAP 346 DATATYPE 432 4527 // 
LAYER DUM16i         4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 
LAYER MAP 346 DATATYPE 45 4528
LAYER MAP 346 DATATYPE 75 4529
LAYER MAP 346 DATATYPE 800 4530
LAYER MAP 346 DATATYPE 805 4531
LAYER MAP 346 DATATYPE 810 4532
LAYER MAP 346 DATATYPE 815 4533
LAYER MAP 346 DATATYPE 85 4534
LAYER MAP 346 DATATYPE 90 4535
LAYER MAP 346 DATATYPE 95 4536
LAYER MAP 346 DATATYPE 950 4537
LAYER MAP 346 DATATYPE 955 4538
LAYER MAP 346 DATATYPE 960 4539
LAYER MAP 346 DATATYPE 965 4540
LAYER MAP 346 DATATYPE 970 4541
LAYER MAP 346 DATATYPE 975 4542
LAYER MAP 346 DATATYPE 980 4543
LAYER MAP 346 DATATYPE 985 4544 // 
LAYER M17_Ai         4545 4546 4547 4548 4549 4550 4551 4552 
LAYER MAP 47 DATATYPE 151 4545
LAYER MAP 47 DATATYPE 171 4546
LAYER MAP 47 DATATYPE 251 4547
LAYER MAP 47 DATATYPE 271 4548
LAYER MAP 47 DATATYPE 351 4549
LAYER MAP 47 DATATYPE 371 4550
LAYER MAP 47 DATATYPE 401 4551
LAYER MAP 47 DATATYPE 421 4552 // 
LAYER M17_Bi         4553 4554 4555 4556 4557 4558 4559 4560 
LAYER MAP 47 DATATYPE 152 4553
LAYER MAP 47 DATATYPE 172 4554
LAYER MAP 47 DATATYPE 252 4555
LAYER MAP 47 DATATYPE 272 4556
LAYER MAP 47 DATATYPE 352 4557
LAYER MAP 47 DATATYPE 372 4558
LAYER MAP 47 DATATYPE 402 4559
LAYER MAP 47 DATATYPE 422 4560 // 
LAYER M17i           4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 
LAYER MAP 47 DATATYPE 40 4561
LAYER MAP 47 DATATYPE 70 4562
LAYER MAP 47 DATATYPE 80 4563
LAYER MAP 47 DATATYPE 800 4564
LAYER MAP 47 DATATYPE 810 4565
LAYER MAP 47 DATATYPE 90 4566
LAYER MAP 47 DATATYPE 950 4567
LAYER MAP 47 DATATYPE 960 4568
LAYER MAP 47 DATATYPE 970 4569
LAYER MAP 47 DATATYPE 980 4570 // 
LAYER DUM17_Ai       4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 
LAYER MAP 347 DATATYPE 151 4571
LAYER MAP 347 DATATYPE 161 4572
LAYER MAP 347 DATATYPE 171 4573
LAYER MAP 347 DATATYPE 181 4574
LAYER MAP 347 DATATYPE 251 4575
LAYER MAP 347 DATATYPE 261 4576
LAYER MAP 347 DATATYPE 271 4577
LAYER MAP 347 DATATYPE 281 4578
LAYER MAP 347 DATATYPE 351 4579
LAYER MAP 347 DATATYPE 361 4580
LAYER MAP 347 DATATYPE 371 4581
LAYER MAP 347 DATATYPE 381 4582
LAYER MAP 347 DATATYPE 401 4583
LAYER MAP 347 DATATYPE 411 4584
LAYER MAP 347 DATATYPE 421 4585
LAYER MAP 347 DATATYPE 431 4586 // 
LAYER DUM17_Bi       4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 4602 
LAYER MAP 347 DATATYPE 152 4587
LAYER MAP 347 DATATYPE 162 4588
LAYER MAP 347 DATATYPE 172 4589
LAYER MAP 347 DATATYPE 182 4590
LAYER MAP 347 DATATYPE 252 4591
LAYER MAP 347 DATATYPE 262 4592
LAYER MAP 347 DATATYPE 272 4593
LAYER MAP 347 DATATYPE 282 4594
LAYER MAP 347 DATATYPE 352 4595
LAYER MAP 347 DATATYPE 362 4596
LAYER MAP 347 DATATYPE 372 4597
LAYER MAP 347 DATATYPE 382 4598
LAYER MAP 347 DATATYPE 402 4599
LAYER MAP 347 DATATYPE 412 4600
LAYER MAP 347 DATATYPE 422 4601
LAYER MAP 347 DATATYPE 432 4602 // 
LAYER DUM17i         4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 
LAYER MAP 347 DATATYPE 45 4603
LAYER MAP 347 DATATYPE 75 4604
LAYER MAP 347 DATATYPE 800 4605
LAYER MAP 347 DATATYPE 805 4606
LAYER MAP 347 DATATYPE 810 4607
LAYER MAP 347 DATATYPE 815 4608
LAYER MAP 347 DATATYPE 85 4609
LAYER MAP 347 DATATYPE 90 4610
LAYER MAP 347 DATATYPE 95 4611
LAYER MAP 347 DATATYPE 950 4612
LAYER MAP 347 DATATYPE 955 4613
LAYER MAP 347 DATATYPE 960 4614
LAYER MAP 347 DATATYPE 965 4615
LAYER MAP 347 DATATYPE 970 4616
LAYER MAP 347 DATATYPE 975 4617
LAYER MAP 347 DATATYPE 980 4618
LAYER MAP 347 DATATYPE 985 4619 // 
LAYER RODMY          4620 
LAYER MAP 6 DATATYPE 101 4620 //  dummy layer for LVS to exclude OD area inside SRM region
LAYER SRM            4621 
LAYER MAP 20 DATATYPE 0 4621 //  Define SRM region
LAYER SRM2010        4622 
LAYER MAP 20 DATATYPE 10 4622 //  FOR SRAM use
LAYER SRM2011        4623 
LAYER MAP 20 DATATYPE 11 4623 //  FOR SRAM use
LAYER SRM2012        4624 
LAYER MAP 20 DATATYPE 12 4624 //  Identify SRAM devices
LAYER SRM2013        4625 
LAYER MAP 20 DATATYPE 13 4625 //  Identify SRAM devices
LAYER SRM2014        4626 
LAYER MAP 20 DATATYPE 14 4626 //  Identify SRAM devices
LAYER SRM2015        4627 
LAYER MAP 20 DATATYPE 15 4627 //  Identify SRAM devices
LAYER SRM2017        4628 
LAYER MAP 20 DATATYPE 17 4628 //  Identify SRAM devices
LAYER SRM2018        4629 
LAYER MAP 20 DATATYPE 18 4629 //  Identify SRAM devices
LAYER SRM2019        4630 
LAYER MAP 20 DATATYPE 19 4630 //  Identify SRAM devices
LAYER SRM2020        4631 
LAYER MAP 20 DATATYPE 20 4631 //  Identify SRAM devices
LAYER SRM2021        4632 
LAYER MAP 20 DATATYPE 21 4632 //  Identify SRAM devices
LAYER SRM2022        4633 
LAYER MAP 20 DATATYPE 22 4633 //  Identify SRAM devices
LAYER SRM2025        4634 
LAYER MAP 20 DATATYPE 25 4634 //  Identify SRAM devices
LAYER SRM2026        4635 
LAYER MAP 20 DATATYPE 26 4635 //  Identify SRAM devices
LAYER SRM2027        4636 
LAYER MAP 20 DATATYPE 27 4636 //  Identify SRAM devices
LAYER SRM2030        4637 
LAYER MAP 20 DATATYPE 30 4637 //  Identify SRAM DP devices
LAYER SRM2031        4638 
LAYER MAP 20 DATATYPE 31 4638 //  Identify SRAM split1
LAYER SRM2032        4639 
LAYER MAP 20 DATATYPE 32 4639 //  Identify SRAM split2
LAYER SRM2033        4640 
LAYER MAP 20 DATATYPE 33 4640 //  Identify SRAM split3
LAYER SRM2034        4641 
LAYER MAP 20 DATATYPE 34 4641 //  Identify SRAM split4
LAYER SRM2035        4642 
LAYER MAP 20 DATATYPE 35 4642 //  Identify SRAM split5
LAYER SRM2036        4643 
LAYER MAP 20 DATATYPE 36 4643 //  Identify SRAM split6
LAYER SRM2037        4644 
LAYER MAP 20 DATATYPE 37 4644 //  Identify SRAM split7
LAYER SRM2038        4645 
LAYER MAP 20 DATATYPE 38 4645 //  Identify SRAM split8
LAYER SRM2044        4646 
LAYER MAP 20 DATATYPE 44 4646 //  Identify SRAM retention diode
LAYER SRM2054        4647 
LAYER MAP 20 DATATYPE 54 4647 //  Identify SRAM split
LAYER VIA1i          4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 
LAYER MAP 351 DATATYPE 150 4648
LAYER MAP 351 DATATYPE 250 4649
LAYER MAP 351 DATATYPE 350 4650
LAYER MAP 351 DATATYPE 400 4651
LAYER MAP 351 DATATYPE 805 4652
LAYER MAP 351 DATATYPE 95 4653
LAYER MAP 351 DATATYPE 955 4654
LAYER MAP 351 DATATYPE 975 4655
LAYER MAP 51 DATATYPE 150 4656
LAYER MAP 51 DATATYPE 250 4657
LAYER MAP 51 DATATYPE 350 4658
LAYER MAP 51 DATATYPE 351 4659
LAYER MAP 51 DATATYPE 352 4660
LAYER MAP 51 DATATYPE 40 4661
LAYER MAP 51 DATATYPE 400 4662
LAYER MAP 51 DATATYPE 70 4663
LAYER MAP 51 DATATYPE 80 4664
LAYER MAP 51 DATATYPE 800 4665
LAYER MAP 51 DATATYPE 90 4666
LAYER MAP 51 DATATYPE 950 4667
LAYER MAP 51 DATATYPE 970 4668 //  Via1
LAYER VIA2i          4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 
LAYER MAP 352 DATATYPE 150 4669
LAYER MAP 352 DATATYPE 250 4670
LAYER MAP 352 DATATYPE 350 4671
LAYER MAP 352 DATATYPE 400 4672
LAYER MAP 352 DATATYPE 805 4673
LAYER MAP 352 DATATYPE 95 4674
LAYER MAP 352 DATATYPE 955 4675
LAYER MAP 352 DATATYPE 975 4676
LAYER MAP 52 DATATYPE 150 4677
LAYER MAP 52 DATATYPE 250 4678
LAYER MAP 52 DATATYPE 350 4679
LAYER MAP 52 DATATYPE 351 4680
LAYER MAP 52 DATATYPE 352 4681
LAYER MAP 52 DATATYPE 40 4682
LAYER MAP 52 DATATYPE 400 4683
LAYER MAP 52 DATATYPE 70 4684
LAYER MAP 52 DATATYPE 80 4685
LAYER MAP 52 DATATYPE 800 4686
LAYER MAP 52 DATATYPE 90 4687
LAYER MAP 52 DATATYPE 950 4688
LAYER MAP 52 DATATYPE 970 4689 //  Via2
LAYER VIA3i          4690 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 
LAYER MAP 353 DATATYPE 150 4690
LAYER MAP 353 DATATYPE 250 4691
LAYER MAP 353 DATATYPE 350 4692
LAYER MAP 353 DATATYPE 400 4693
LAYER MAP 353 DATATYPE 805 4694
LAYER MAP 353 DATATYPE 95 4695
LAYER MAP 353 DATATYPE 955 4696
LAYER MAP 353 DATATYPE 975 4697
LAYER MAP 53 DATATYPE 150 4698
LAYER MAP 53 DATATYPE 250 4699
LAYER MAP 53 DATATYPE 350 4700
LAYER MAP 53 DATATYPE 351 4701
LAYER MAP 53 DATATYPE 352 4702
LAYER MAP 53 DATATYPE 40 4703
LAYER MAP 53 DATATYPE 400 4704
LAYER MAP 53 DATATYPE 70 4705
LAYER MAP 53 DATATYPE 80 4706
LAYER MAP 53 DATATYPE 800 4707
LAYER MAP 53 DATATYPE 90 4708
LAYER MAP 53 DATATYPE 950 4709
LAYER MAP 53 DATATYPE 970 4710 //  Via3
LAYER VIA4i          4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 
LAYER MAP 354 DATATYPE 150 4711
LAYER MAP 354 DATATYPE 250 4712
LAYER MAP 354 DATATYPE 350 4713
LAYER MAP 354 DATATYPE 400 4714
LAYER MAP 354 DATATYPE 805 4715
LAYER MAP 354 DATATYPE 95 4716
LAYER MAP 354 DATATYPE 955 4717
LAYER MAP 354 DATATYPE 975 4718
LAYER MAP 54 DATATYPE 150 4719
LAYER MAP 54 DATATYPE 250 4720
LAYER MAP 54 DATATYPE 350 4721
LAYER MAP 54 DATATYPE 351 4722
LAYER MAP 54 DATATYPE 352 4723
LAYER MAP 54 DATATYPE 40 4724
LAYER MAP 54 DATATYPE 400 4725
LAYER MAP 54 DATATYPE 70 4726
LAYER MAP 54 DATATYPE 80 4727
LAYER MAP 54 DATATYPE 800 4728
LAYER MAP 54 DATATYPE 90 4729
LAYER MAP 54 DATATYPE 950 4730
LAYER MAP 54 DATATYPE 970 4731 //  Via4
LAYER VIA5i          4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 
LAYER MAP 355 DATATYPE 150 4732
LAYER MAP 355 DATATYPE 250 4733
LAYER MAP 355 DATATYPE 350 4734
LAYER MAP 355 DATATYPE 400 4735
LAYER MAP 355 DATATYPE 805 4736
LAYER MAP 355 DATATYPE 95 4737
LAYER MAP 355 DATATYPE 955 4738
LAYER MAP 355 DATATYPE 975 4739
LAYER MAP 55 DATATYPE 150 4740
LAYER MAP 55 DATATYPE 250 4741
LAYER MAP 55 DATATYPE 350 4742
LAYER MAP 55 DATATYPE 351 4743
LAYER MAP 55 DATATYPE 352 4744
LAYER MAP 55 DATATYPE 40 4745
LAYER MAP 55 DATATYPE 400 4746
LAYER MAP 55 DATATYPE 70 4747
LAYER MAP 55 DATATYPE 80 4748
LAYER MAP 55 DATATYPE 800 4749
LAYER MAP 55 DATATYPE 90 4750
LAYER MAP 55 DATATYPE 950 4751
LAYER MAP 55 DATATYPE 970 4752 //  Via5
LAYER VIA6i          4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 
LAYER MAP 356 DATATYPE 150 4753
LAYER MAP 356 DATATYPE 250 4754
LAYER MAP 356 DATATYPE 350 4755
LAYER MAP 356 DATATYPE 400 4756
LAYER MAP 356 DATATYPE 805 4757
LAYER MAP 356 DATATYPE 95 4758
LAYER MAP 356 DATATYPE 955 4759
LAYER MAP 356 DATATYPE 975 4760
LAYER MAP 56 DATATYPE 150 4761
LAYER MAP 56 DATATYPE 250 4762
LAYER MAP 56 DATATYPE 350 4763
LAYER MAP 56 DATATYPE 351 4764
LAYER MAP 56 DATATYPE 352 4765
LAYER MAP 56 DATATYPE 40 4766
LAYER MAP 56 DATATYPE 400 4767
LAYER MAP 56 DATATYPE 70 4768
LAYER MAP 56 DATATYPE 80 4769
LAYER MAP 56 DATATYPE 800 4770
LAYER MAP 56 DATATYPE 90 4771
LAYER MAP 56 DATATYPE 950 4772
LAYER MAP 56 DATATYPE 970 4773 //  Via6
LAYER VIA7i          4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 
LAYER MAP 357 DATATYPE 150 4774
LAYER MAP 357 DATATYPE 250 4775
LAYER MAP 357 DATATYPE 350 4776
LAYER MAP 357 DATATYPE 400 4777
LAYER MAP 357 DATATYPE 805 4778
LAYER MAP 357 DATATYPE 95 4779
LAYER MAP 357 DATATYPE 955 4780
LAYER MAP 357 DATATYPE 975 4781
LAYER MAP 57 DATATYPE 150 4782
LAYER MAP 57 DATATYPE 250 4783
LAYER MAP 57 DATATYPE 350 4784
LAYER MAP 57 DATATYPE 351 4785
LAYER MAP 57 DATATYPE 352 4786
LAYER MAP 57 DATATYPE 40 4787
LAYER MAP 57 DATATYPE 400 4788
LAYER MAP 57 DATATYPE 70 4789
LAYER MAP 57 DATATYPE 80 4790
LAYER MAP 57 DATATYPE 800 4791
LAYER MAP 57 DATATYPE 90 4792
LAYER MAP 57 DATATYPE 950 4793
LAYER MAP 57 DATATYPE 970 4794 //  Via7
LAYER VIA8i          4795 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 
LAYER MAP 358 DATATYPE 150 4795
LAYER MAP 358 DATATYPE 250 4796
LAYER MAP 358 DATATYPE 350 4797
LAYER MAP 358 DATATYPE 400 4798
LAYER MAP 358 DATATYPE 805 4799
LAYER MAP 358 DATATYPE 95 4800
LAYER MAP 358 DATATYPE 955 4801
LAYER MAP 358 DATATYPE 975 4802
LAYER MAP 58 DATATYPE 150 4803
LAYER MAP 58 DATATYPE 250 4804
LAYER MAP 58 DATATYPE 350 4805
LAYER MAP 58 DATATYPE 351 4806
LAYER MAP 58 DATATYPE 352 4807
LAYER MAP 58 DATATYPE 40 4808
LAYER MAP 58 DATATYPE 400 4809
LAYER MAP 58 DATATYPE 70 4810
LAYER MAP 58 DATATYPE 80 4811
LAYER MAP 58 DATATYPE 800 4812
LAYER MAP 58 DATATYPE 90 4813
LAYER MAP 58 DATATYPE 950 4814
LAYER MAP 58 DATATYPE 970 4815 //  Via8
LAYER VIA9i          4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 
LAYER MAP 359 DATATYPE 150 4816
LAYER MAP 359 DATATYPE 250 4817
LAYER MAP 359 DATATYPE 350 4818
LAYER MAP 359 DATATYPE 400 4819
LAYER MAP 359 DATATYPE 805 4820
LAYER MAP 359 DATATYPE 95 4821
LAYER MAP 359 DATATYPE 955 4822
LAYER MAP 359 DATATYPE 975 4823
LAYER MAP 59 DATATYPE 150 4824
LAYER MAP 59 DATATYPE 250 4825
LAYER MAP 59 DATATYPE 350 4826
LAYER MAP 59 DATATYPE 351 4827
LAYER MAP 59 DATATYPE 352 4828
LAYER MAP 59 DATATYPE 40 4829
LAYER MAP 59 DATATYPE 400 4830
LAYER MAP 59 DATATYPE 70 4831
LAYER MAP 59 DATATYPE 80 4832
LAYER MAP 59 DATATYPE 800 4833
LAYER MAP 59 DATATYPE 90 4834
LAYER MAP 59 DATATYPE 950 4835
LAYER MAP 59 DATATYPE 970 4836 //  Via9
LAYER VIA10i         4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 
LAYER MAP 360 DATATYPE 150 4837
LAYER MAP 360 DATATYPE 250 4838
LAYER MAP 360 DATATYPE 350 4839
LAYER MAP 360 DATATYPE 400 4840
LAYER MAP 360 DATATYPE 805 4841
LAYER MAP 360 DATATYPE 95 4842
LAYER MAP 360 DATATYPE 955 4843
LAYER MAP 360 DATATYPE 975 4844
LAYER MAP 60 DATATYPE 150 4845
LAYER MAP 60 DATATYPE 250 4846
LAYER MAP 60 DATATYPE 350 4847
LAYER MAP 60 DATATYPE 351 4848
LAYER MAP 60 DATATYPE 352 4849
LAYER MAP 60 DATATYPE 40 4850
LAYER MAP 60 DATATYPE 400 4851
LAYER MAP 60 DATATYPE 70 4852
LAYER MAP 60 DATATYPE 80 4853
LAYER MAP 60 DATATYPE 800 4854
LAYER MAP 60 DATATYPE 90 4855
LAYER MAP 60 DATATYPE 950 4856
LAYER MAP 60 DATATYPE 970 4857 //  Via10
LAYER VIA11i         4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 
LAYER MAP 361 DATATYPE 150 4858
LAYER MAP 361 DATATYPE 250 4859
LAYER MAP 361 DATATYPE 350 4860
LAYER MAP 361 DATATYPE 400 4861
LAYER MAP 361 DATATYPE 805 4862
LAYER MAP 361 DATATYPE 95 4863
LAYER MAP 361 DATATYPE 955 4864
LAYER MAP 361 DATATYPE 975 4865
LAYER MAP 61 DATATYPE 150 4866
LAYER MAP 61 DATATYPE 250 4867
LAYER MAP 61 DATATYPE 350 4868
LAYER MAP 61 DATATYPE 351 4869
LAYER MAP 61 DATATYPE 352 4870
LAYER MAP 61 DATATYPE 40 4871
LAYER MAP 61 DATATYPE 400 4872
LAYER MAP 61 DATATYPE 70 4873
LAYER MAP 61 DATATYPE 80 4874
LAYER MAP 61 DATATYPE 800 4875
LAYER MAP 61 DATATYPE 90 4876
LAYER MAP 61 DATATYPE 950 4877
LAYER MAP 61 DATATYPE 970 4878 //  Via11
LAYER VIA12i         4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 
LAYER MAP 362 DATATYPE 150 4879
LAYER MAP 362 DATATYPE 250 4880
LAYER MAP 362 DATATYPE 350 4881
LAYER MAP 362 DATATYPE 400 4882
LAYER MAP 362 DATATYPE 805 4883
LAYER MAP 362 DATATYPE 95 4884
LAYER MAP 362 DATATYPE 955 4885
LAYER MAP 362 DATATYPE 975 4886
LAYER MAP 62 DATATYPE 150 4887
LAYER MAP 62 DATATYPE 250 4888
LAYER MAP 62 DATATYPE 350 4889
LAYER MAP 62 DATATYPE 351 4890
LAYER MAP 62 DATATYPE 352 4891
LAYER MAP 62 DATATYPE 40 4892
LAYER MAP 62 DATATYPE 400 4893
LAYER MAP 62 DATATYPE 70 4894
LAYER MAP 62 DATATYPE 80 4895
LAYER MAP 62 DATATYPE 800 4896
LAYER MAP 62 DATATYPE 90 4897
LAYER MAP 62 DATATYPE 950 4898
LAYER MAP 62 DATATYPE 970 4899 //  Via12
LAYER VIA13i         4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 
LAYER MAP 363 DATATYPE 150 4900
LAYER MAP 363 DATATYPE 250 4901
LAYER MAP 363 DATATYPE 350 4902
LAYER MAP 363 DATATYPE 400 4903
LAYER MAP 363 DATATYPE 805 4904
LAYER MAP 363 DATATYPE 95 4905
LAYER MAP 363 DATATYPE 955 4906
LAYER MAP 363 DATATYPE 975 4907
LAYER MAP 63 DATATYPE 150 4908
LAYER MAP 63 DATATYPE 250 4909
LAYER MAP 63 DATATYPE 350 4910
LAYER MAP 63 DATATYPE 351 4911
LAYER MAP 63 DATATYPE 352 4912
LAYER MAP 63 DATATYPE 40 4913
LAYER MAP 63 DATATYPE 400 4914
LAYER MAP 63 DATATYPE 70 4915
LAYER MAP 63 DATATYPE 80 4916
LAYER MAP 63 DATATYPE 800 4917
LAYER MAP 63 DATATYPE 90 4918
LAYER MAP 63 DATATYPE 950 4919
LAYER MAP 63 DATATYPE 970 4920 //  Via13
LAYER VIA14i         4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 
LAYER MAP 364 DATATYPE 150 4921
LAYER MAP 364 DATATYPE 250 4922
LAYER MAP 364 DATATYPE 350 4923
LAYER MAP 364 DATATYPE 400 4924
LAYER MAP 364 DATATYPE 805 4925
LAYER MAP 364 DATATYPE 95 4926
LAYER MAP 364 DATATYPE 955 4927
LAYER MAP 364 DATATYPE 975 4928
LAYER MAP 64 DATATYPE 150 4929
LAYER MAP 64 DATATYPE 250 4930
LAYER MAP 64 DATATYPE 350 4931
LAYER MAP 64 DATATYPE 351 4932
LAYER MAP 64 DATATYPE 352 4933
LAYER MAP 64 DATATYPE 40 4934
LAYER MAP 64 DATATYPE 400 4935
LAYER MAP 64 DATATYPE 70 4936
LAYER MAP 64 DATATYPE 80 4937
LAYER MAP 64 DATATYPE 800 4938
LAYER MAP 64 DATATYPE 90 4939
LAYER MAP 64 DATATYPE 950 4940
LAYER MAP 64 DATATYPE 970 4941 //  Via14
LAYER VIA15i         4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 
LAYER MAP 365 DATATYPE 150 4942
LAYER MAP 365 DATATYPE 250 4943
LAYER MAP 365 DATATYPE 350 4944
LAYER MAP 365 DATATYPE 400 4945
LAYER MAP 365 DATATYPE 805 4946
LAYER MAP 365 DATATYPE 95 4947
LAYER MAP 365 DATATYPE 955 4948
LAYER MAP 365 DATATYPE 975 4949
LAYER MAP 65 DATATYPE 150 4950
LAYER MAP 65 DATATYPE 250 4951
LAYER MAP 65 DATATYPE 350 4952
LAYER MAP 65 DATATYPE 351 4953
LAYER MAP 65 DATATYPE 352 4954
LAYER MAP 65 DATATYPE 40 4955
LAYER MAP 65 DATATYPE 400 4956
LAYER MAP 65 DATATYPE 70 4957
LAYER MAP 65 DATATYPE 80 4958
LAYER MAP 65 DATATYPE 800 4959
LAYER MAP 65 DATATYPE 90 4960
LAYER MAP 65 DATATYPE 950 4961
LAYER MAP 65 DATATYPE 970 4962 //  Via15
LAYER VIA16i         4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 
LAYER MAP 366 DATATYPE 150 4963
LAYER MAP 366 DATATYPE 250 4964
LAYER MAP 366 DATATYPE 350 4965
LAYER MAP 366 DATATYPE 400 4966
LAYER MAP 366 DATATYPE 805 4967
LAYER MAP 366 DATATYPE 95 4968
LAYER MAP 366 DATATYPE 955 4969
LAYER MAP 366 DATATYPE 975 4970
LAYER MAP 66 DATATYPE 150 4971
LAYER MAP 66 DATATYPE 250 4972
LAYER MAP 66 DATATYPE 350 4973
LAYER MAP 66 DATATYPE 351 4974
LAYER MAP 66 DATATYPE 352 4975
LAYER MAP 66 DATATYPE 40 4976
LAYER MAP 66 DATATYPE 400 4977
LAYER MAP 66 DATATYPE 70 4978
LAYER MAP 66 DATATYPE 80 4979
LAYER MAP 66 DATATYPE 800 4980
LAYER MAP 66 DATATYPE 90 4981
LAYER MAP 66 DATATYPE 950 4982
LAYER MAP 66 DATATYPE 970 4983 //  Via16
LAYER APi            4984 
LAYER MAP 74 DATATYPE 0 4984 //  Al RDL
LAYER CB             4985 
LAYER MAP 76 DATATYPE 0 4985 //  Passivation opening for Bond Pad
LAYER MDi            4986 
LAYER MAP 82 DATATYPE 150 4986 //  MD between OD and M0 - one step process
LAYER DMD            4987 
LAYER MAP 82 DATATYPE 170 4987 //  Dummy MD 
LAYER CMDi           4988 
LAYER MAP 82 DATATYPE 250 4988 //  MD cut layer
LAYER DCMD           4989 
LAYER MAP 82 DATATYPE 270 4989 //  Dummy MD cut layer
LAYER RVi            4990 
LAYER MAP 85 DATATYPE 0 4990 //  VIA hole between APRDL and top metal
LAYER CB2            4991 4992 
LAYER MAP 86 DATATYPE 0 4991
LAYER MAP 86 DATATYPE 20 4992 //  Passivation-2 opening for Bond-Pad or Flip-Chip
LAYER BJTDMYi        4993 
LAYER MAP 110 DATATYPE 0 4993 //  BJT dummy layer for LVS
LAYER BJTEDMY        4994 
LAYER MAP 110 DATATYPE 2 4994 //  BJT emit dummy layer
LAYER IBJTDMY        4995 
LAYER MAP 110 DATATYPE 3 4995 //  BJT dummy layer for IO BJT devices
LAYER PSUB2          4996 
LAYER MAP 111 DATATYPE 0 4996 //  Dummy layer for isolation power domains of PW
LAYER NWDMYi         4997 
LAYER MAP 114 DATATYPE 0 4997 //  Dummy layer to form N-Well 2-terminal resistor
LAYER NWDMY1         4998 
LAYER MAP 114 DATATYPE 1 4998 //  Dummy layer to form N-Well 3-terminal resistor
LAYER RMDMY0         4999 
LAYER MAP 116 DATATYPE 30 4999 //  Dummy layer to form M0 resistor
LAYER RMDMY1         5000 
LAYER MAP 116 DATATYPE 31 5000 //  Dummy layer to form M1 resistor
LAYER RMDMY2         5001 
LAYER MAP 116 DATATYPE 32 5001 //  Dummy layer to form M2 resistor
LAYER RMDMY3         5002 
LAYER MAP 116 DATATYPE 33 5002 //  Dummy layer to form M3 resistor
LAYER RMDMY4         5003 
LAYER MAP 116 DATATYPE 34 5003 //  Dummy layer to form M4 resistor
LAYER RMDMY5         5004 
LAYER MAP 116 DATATYPE 35 5004 //  Dummy layer to form M5 resistor
LAYER RMDMY6         5005 
LAYER MAP 116 DATATYPE 36 5005 //  Dummy layer to form M6 resistor
LAYER RMDMY7         5006 
LAYER MAP 116 DATATYPE 37 5006 //  Dummy layer to form M7 resistor
LAYER RMDMY8         5007 
LAYER MAP 116 DATATYPE 38 5007 //  Dummy layer to form M8 resistor
LAYER RMDMY9         5008 
LAYER MAP 116 DATATYPE 39 5008 //  Dummy layer to form M9 resistor
LAYER RMDMY10        5009 
LAYER MAP 116 DATATYPE 40 5009 //  Dummy layer to form M10 resistor
LAYER RMDMY11        5010 
LAYER MAP 116 DATATYPE 41 5010 //  Dummy layer to form M11 resistor
LAYER RMDMY12        5011 
LAYER MAP 116 DATATYPE 42 5011 //  Dummy layer to form M12 resistor
LAYER RMDMY13        5012 
LAYER MAP 116 DATATYPE 43 5012 //  Dummy layer to form M13 resistor
LAYER RMDMY14        5013 
LAYER MAP 116 DATATYPE 44 5013 //  Dummy layer to form M14 resistor
LAYER RMDMY15        5014 
LAYER MAP 116 DATATYPE 45 5014 //  Dummy layer to form M15 resistor
LAYER RMDMY16        5015 
LAYER MAP 116 DATATYPE 46 5015 //  Dummy layer to form M16 resistor
LAYER RMDMY17        5016 
LAYER MAP 116 DATATYPE 47 5016 //  Dummy layer to form M17 resistor
LAYER RMDMYAP        5017 
LAYER MAP 116 DATATYPE 74 5017 //  Dummy layer to form AP resistor
LAYER RH_TNi         5018 
LAYER MAP 117 DATATYPE 6 5018 //  Layer to form HiR TiN resistor
LAYER SR_DTN         5019 
LAYER MAP 117 DATATYPE 7 5019 //  Dummy TiN
LAYER RH_TNB         5020 
LAYER MAP 117 DATATYPE 8 5020 //  HiR block
LAYER RHDMY_ALL      5021 
LAYER MAP 117 DATATYPE 9 5021 //  HiR resistor device
LAYER RH_TNE         5022 
LAYER MAP 117 DATATYPE 10 5022 //  HiR block layer
LAYER RHDMY0i        5023 
LAYER MAP 117 DATATYPE 30 5023 //  Dummy layer to form M0 resistor
LAYER RHDMY1i        5024 
LAYER MAP 117 DATATYPE 31 5024 //  Dummy layer to form M1 resistor
LAYER RHDMY2i        5025 
LAYER MAP 117 DATATYPE 32 5025 //  Dummy layer to form M2 resistor
LAYER RHDMY3i        5026 
LAYER MAP 117 DATATYPE 33 5026 //  Dummy layer to form M3 resistor
LAYER RHDMY4i        5027 
LAYER MAP 117 DATATYPE 34 5027 //  Dummy layer to form M4 resistor
LAYER RHDMY5i        5028 
LAYER MAP 117 DATATYPE 35 5028 //  Dummy layer to form M5 resistor
LAYER RHDMY6i        5029 
LAYER MAP 117 DATATYPE 36 5029 //  Dummy layer to form M6 resistor
LAYER RHDMY7i        5030 
LAYER MAP 117 DATATYPE 37 5030 //  Dummy layer to form M7 resistor
LAYER RHDMY8i        5031 
LAYER MAP 117 DATATYPE 38 5031 //  Dummy layer to form M8 resistor
LAYER RHDMY9i        5032 
LAYER MAP 117 DATATYPE 39 5032 //  Dummy layer to form M9 resistor
LAYER RHDMY10i       5033 
LAYER MAP 117 DATATYPE 40 5033 //  Dummy layer to form M10 resistor
LAYER RHDMY11i       5034 
LAYER MAP 117 DATATYPE 41 5034 //  Dummy layer to form M11 resistor
LAYER RHDMY12i       5035 
LAYER MAP 117 DATATYPE 42 5035 //  Dummy layer to form M12 resistor
LAYER RHDMY13i       5036 
LAYER MAP 117 DATATYPE 43 5036 //  Dummy layer to form M13 resistor
LAYER RHDMY14i       5037 
LAYER MAP 117 DATATYPE 44 5037 //  Dummy layer to form M14 resistor
LAYER RHDMY15i       5038 
LAYER MAP 117 DATATYPE 45 5038 //  Dummy layer to form M15 resistor
LAYER RHDMY16i       5039 
LAYER MAP 117 DATATYPE 46 5039 //  Dummy layer to form M16 resistor
LAYER RHDMY17i       5040 
LAYER MAP 117 DATATYPE 47 5040 //  Dummy layer to form M17 resistor
LAYER DIODMYi        5041 
LAYER MAP 119 DATATYPE 0 5041 //  Dummy layer to form diode
LAYER SR_ESD         5042 
LAYER MAP 121 DATATYPE 0 5042 //  Used for ESD HIA MOS devices
LAYER SDI            5043 
LAYER MAP 122 DATATYPE 0 5043 //  Used for ESD HIA MOS devices
LAYER SDI_2          5044 
LAYER MAP 122 DATATYPE 2 5044 //  Used for ESD HIA MOS devices and covered on drain terminal
LAYER VARi           5045 
LAYER MAP 143 DATATYPE 0 5045 //  Layer to form Varactor
LAYER VARi_Mxs       5046 
LAYER MAP 143 DATATYPE 5 5046 //  Layer to form Mxs Varactor
LAYER INDDMY         5047 
LAYER MAP 144 DATATYPE 0 5047 //  For RF Inductor devices
LAYER IND_RAD        5048 
LAYER MAP 144 DATATYPE 30 5048 //  Dummy layer to calculate radius of Inductor devices
LAYER IND_GDIS       5049 
LAYER MAP 144 DATATYPE 31 5049 //  Dummy layer to calculate guardring distance of Inductor devices
LAYER IND_NR         5050 
LAYER MAP 144 DATATYPE 32 5050 //  Dummy layer to calculate turns of Inductor devices
LAYER IND_MP         5051 
LAYER MAP 144 DATATYPE 33 5051 //  Dummy layer to identify the minus pin of Inductor devices
LAYER IND_W          5052 
LAYER MAP 144 DATATYPE 35 5052 //  Dummy layer to calculate width of Inductor devices
LAYER IND_S          5053 
LAYER MAP 144 DATATYPE 36 5053 //  Dummy layer to calculate spacing of Inductor devices
LAYER TPCDMY_AP      5054 
LAYER MAP 148 DATATYPE 74 5054 //  DRC/LVS dummy layer for AP 3-plates MiM region
LAYER TPCDMY_AP2     5055 
LAYER MAP 148 DATATYPE 75 5055 //  DRC/LVS dummy layer for AP 2-plates MiM region
LAYER VTUL_Ni        5056 
LAYER MAP 151 DATATYPE 0 5056 //  CORE ULTRA LOW VT NMOS
LAYER VTULN_LL       5057 
LAYER MAP 151 DATATYPE 5 5057 //  CORE ULTRA LOW VT LL NMOS
LAYER VTUL_Pi        5058 
LAYER MAP 152 DATATYPE 0 5058 //  CORE ULTRA LOW VT PMOS
LAYER VTULP_LL       5059 
LAYER MAP 152 DATATYPE 5 5059 //  CORE ULTRA LOW VT LL PMOS
LAYER RTMOMDMY       5060 
LAYER MAP 155 DATATYPE 0 5060 //  Dummy layer for RT MOM devices
LAYER MOMDMY0        5061 
LAYER MAP 155 DATATYPE 30 5061 //  Dummy layer for MOM device M0
LAYER MOMDMY1        5062 
LAYER MAP 155 DATATYPE 31 5062 //  Dummy layer for MOM devices M1
LAYER MOMDMY2        5063 
LAYER MAP 155 DATATYPE 32 5063 //  Dummy layer for MOM devices M2
LAYER MOMDMY3        5064 
LAYER MAP 155 DATATYPE 33 5064 //  Dummy layer for MOM devices M3
LAYER MOMDMY4        5065 
LAYER MAP 155 DATATYPE 34 5065 //  Dummy layer for MOM devices M4
LAYER MOMDMY5        5066 
LAYER MAP 155 DATATYPE 35 5066 //  Dummy layer for MOM devices M5
LAYER MOMDMY6        5067 
LAYER MAP 155 DATATYPE 36 5067 //  Dummy layer for MOM devices M6
LAYER MOMDMY7        5068 
LAYER MAP 155 DATATYPE 37 5068 //  Dummy layer for MOM devices M7
LAYER MOMDMY8        5069 
LAYER MAP 155 DATATYPE 38 5069 //  Dummy layer for MOM devices M8
LAYER MOMDMY9        5070 
LAYER MAP 155 DATATYPE 39 5070 //  Dummy layer for MOM devices M9
LAYER MOMDMY10       5071 
LAYER MAP 155 DATATYPE 40 5071 //  Dummy layer for MOM devices M10
LAYER MOMDMY11       5072 
LAYER MAP 155 DATATYPE 41 5072 //  Dummy layer for MOM devices M11
LAYER MOMDMY12       5073 
LAYER MAP 155 DATATYPE 42 5073 //  Dummy layer for MOM devices M12
LAYER MOMDMY13       5074 
LAYER MAP 155 DATATYPE 43 5074 //  Dummy layer for MOM devices M13
LAYER MOMDMY14       5075 
LAYER MAP 155 DATATYPE 44 5075 //  Dummy layer for MOM devices M14
LAYER MOMDMY15       5076 
LAYER MAP 155 DATATYPE 45 5076 //  Dummy layer for MOM devices M15
LAYER MOMDMY16       5077 
LAYER MAP 155 DATATYPE 46 5077 //  Dummy layer for MOM devices M16
LAYER MOMDMY17       5078 
LAYER MAP 155 DATATYPE 47 5078 //  Dummy layer for MOM devices M17
LAYER MOMDMY_VAP     5079 
LAYER MAP 155 DATATYPE 1 5079 //  Dummy layer for vapmod
LAYER MOMDMY_MXDE    5080 
LAYER MAP 155 DATATYPE 2 5080 //  Dummy layer for n_mxde
LAYER MOMDMY_NH      5081 
LAYER MAP 155 DATATYPE 3 5081 //  Dummy layer for nh
LAYER MOMDMY_NV      5082 
LAYER MAP 155 DATATYPE 4 5082 //  Dummy layer for nv
LAYER MOMDMY_2T      5083 
LAYER MAP 155 DATATYPE 5 5083 //  Dummy layer for MOM wo shield (2T)
LAYER MOMDMY_MX      5084 
LAYER MAP 155 DATATYPE 6 5084 //  Dummy layer for MX MOM device
LAYER MOMDMY_MXP1    5085 
LAYER MAP 155 DATATYPE 7 5085 //  Dummy layer for MX plus1
LAYER MOMDMY_MXP2    5086 
LAYER MAP 155 DATATYPE 8 5086 //  Dummy layer for MX plus2
LAYER MOMDMY_MXP12   5087 
LAYER MAP 155 DATATYPE 9 5087 //  Dummy layer for MX MOM plus1 & plus2
LAYER MOMDMY_NWi     5088 
LAYER MAP 155 DATATYPE 11 5088 //  Dummy layer for MOM wi NW shield
LAYER MOMDMY_PWi     5089 
LAYER MAP 155 DATATYPE 12 5089 //  Dummy layer for MOM wi PW shield
LAYER MOMDMY_NTNi    5090 
LAYER MAP 155 DATATYPE 13 5090 //  Dummy layer for MOM wi NTN shield
LAYER MOMDMY_NW2i    5091 
LAYER MAP 155 DATATYPE 16 5091 //  Dummy layer for MOM wi NW shield
LAYER MOMDMY_PW2i    5092 
LAYER MAP 155 DATATYPE 17 5092 //  Dummy layer for MOM wi PW shield
LAYER MOMDMY_NTN2i   5093 
LAYER MAP 155 DATATYPE 18 5093 //  Dummy layer for MOM wi NTN shield
LAYER MOMDMY_MINUS   5094 
LAYER MAP 155 DATATYPE 14 5094 //  Dummy layer for MOM MINUS
LAYER MOMDMY_PLUS    5095 
LAYER MAP 155 DATATYPE 15 5095 //  Dummy layer for MOM PLUS
LAYER MOMDMY21       5096 
LAYER MAP 155 DATATYPE 21 5096 //  Dummy layer for dummy OD under MOM devices
LAYER MFUSE          5097 
LAYER MAP 156 DATATYPE 3 5097 //  Metal fuse recognition
LAYER VIA0i          5098 5099 
LAYER MAP 350 DATATYPE 150 5098
LAYER MAP 50 DATATYPE 150 5099 //  Via layer between metal0 and metal1
LAYER RFDMY          5100 
LAYER MAP 161 DATATYPE 0 5100 //  For RF Device using only ( some layout using datatype 1 )
LAYER SEALRING_ALL   5101 
LAYER MAP 162 DATATYPE 2 5101 //  DRC recognition layer for the general seal ring region
LAYER TCDDMY         5102 
LAYER MAP 165 DATATYPE 1 5102 //  Dummy layer to cover CDU pattern for TCD purpose
LAYER ICOVL          5103 
LAYER MAP 165 DATATYPE 320 5103 //  Dummy layer for ICOVL purpose
LAYER HIA_DUMMY      5104 
LAYER MAP 168 DATATYPE 0 5104 //  Dummy layer for ESD HIA diode devices
LAYER CBD            5105 
LAYER MAP 169 DATATYPE 0 5105 //  Passivation window solder bump and ALRDL
LAYER VDi            5106 
LAYER MAP 179 DATATYPE 150 5106 //  Via between MD and M0
LAYER VGi            5107 
LAYER MAP 178 DATATYPE 150 5107 //  Via between MG and M0
LAYER TIE_VG         5108 
LAYER MAP 178 DATATYPE 190 5108 //  Maker layer for tie-off VG 
LAYER VDRi           5109 
LAYER MAP 177 DATATYPE 150 5109 //  Via between MD and M0 (VD Rail)
LAYER M0_Ai          5110 
LAYER MAP 30 DATATYPE 151 5110 //  metal0a
LAYER M0_Bi          5111 
LAYER MAP 30 DATATYPE 152 5111 //  metal0b
LAYER DUM0_Ai        5112 5113 
LAYER MAP 330 DATATYPE 151 5112
LAYER MAP 330 DATATYPE 161 5113 //  Dummy metal0a
LAYER DUM0_Bi        5114 5115 
LAYER MAP 330 DATATYPE 152 5114
LAYER MAP 330 DATATYPE 162 5115 //  Dummy metal0b
LAYER CM0Ai          5116 
LAYER MAP 430 DATATYPE 140 5116 //  Cut metal0a
LAYER DCM0A          5117 
LAYER MAP 530 DATATYPE 140 5117 //  Cut metal0a
LAYER CM0Bi          5118 
LAYER MAP 430 DATATYPE 145 5118 //  Cut metal0b
LAYER DCM0B          5119 
LAYER MAP 530 DATATYPE 145 5119 //  Cut metal0b
LAYER SRAMDMY        5120 
LAYER MAP 186 DATATYPE 0 5120 //  SRM_DRC waive
LAYER PODE_GATEi     5121 
LAYER MAP 206 DATATYPE 28 5121 //  To define GATE abutting OD vertical edge for LVS recognize MOS, diode and turn-off transistor
LAYER PODE_TrGATE    5122 
LAYER MAP 206 DATATYPE 29 5122 //  To define the transistor (with S/D area) which gate abut PODE_GATE
LAYER FILLER_MOS     5123 
LAYER MAP 206 DATATYPE 30 5123 //  Special layer for transistor inside filler
LAYER LVSDMY4        5124 
LAYER MAP 208 DATATYPE 4 5124 //  Dummy layer to define NMOS devices in DNW region
LAYER MOSDMY         5125 
LAYER MAP 208 DATATYPE 5 5125 //  Dummy layer to define MPODE devices needs to compared
LAYER FB1            5126 
LAYER MAP 250 DATATYPE 1 5126 //  finboundary
LAYER FINFET_boundary9 5127 
LAYER MAP 250 DATATYPE 9 5127 //  finboundary
LAYER FINFET_boundary10 5128 
LAYER MAP 250 DATATYPE 10 5128 //  finboundary
LAYER GATED          5129 
LAYER MAP 255 DATATYPE 3 5129 //  GATED layer for define gated-diode region, it must cover whole active region
LAYER ANARRAY_HS     5130 
LAYER MAP 255 DATATYPE 23 5130 //  Dummy layer to define high-matching region for sensitive analog MOS
LAYER CAP_18V        5131 
LAYER MAP 255 DATATYPE 123 5131 // 
LAYER DC1            5132 
LAYER MAP 257 DATATYPE 11 5132 //  Dummy block layer
LAYER DC2_IO         5133 
LAYER MAP 257 DATATYPE 23 5133 //  Dummy block layer
LAYER DC2_IO_FB2     5134 
LAYER MAP 257 DATATYPE 28 5134 //  Dummy block layer
LAYER DC3            5135 
LAYER MAP 257 DATATYPE 31 5135 //  Dummy cell marker layer for cell3
LAYER DC3_NP2_4      5136 
LAYER MAP 257 DATATYPE 35 5136 //  Dummy cell vt balance
LAYER DC3_FB2        5137 
LAYER MAP 257 DATATYPE 36 5137 //  Dummy cell marker layer for cell3
LAYER DC_OTHERS      5138 5139 5140 5141 5142 5143 5144 5145 
LAYER MAP 257 DATATYPE 211 5138
LAYER MAP 257 DATATYPE 42 5139
LAYER MAP 257 DATATYPE 51 5140
LAYER MAP 257 DATATYPE 61 5141
LAYER MAP 257 DATATYPE 71 5142
LAYER MAP 257 DATATYPE 72 5143
LAYER MAP 257 DATATYPE 81 5144
LAYER MAP 257 DATATYPE 82 5145 //  Dummy cell marker layer for cell4_core
LAYER TPCi           5146 
LAYER MAP 260 DATATYPE 0 5146 //  MiM capacitor top plate for 3-plates MiM process
LAYER TPC_O          5147 
LAYER MAP 260 DATATYPE 1 5147 //  TPC opening region for 3-plates MIM use
LAYER TPCDMY         5148 
LAYER MAP 260 DATATYPE 4 5148 //  TPC Dummy for 3-plates MIM use
LAYER MPCi           5149 
LAYER MAP 261 DATATYPE 0 5149 //  MiM capacitor middle plate for 3-plates MiM process
LAYER MPC_O          5150 
LAYER MAP 261 DATATYPE 1 5150 //  MPC opening region for 3-plates MIM use
LAYER MPCDMY         5151 
LAYER MAP 261 DATATYPE 4 5151 //  MPC Dummy for 3-plates MIM use
LAYER BPCi           5152 
LAYER MAP 262 DATATYPE 0 5152 //  MiM capacitor bottom plate for 3-plates MiM process
LAYER BPC_O          5153 
LAYER MAP 262 DATATYPE 1 5153 //  BPC opening region for 3-plates MIM use
LAYER BPCDMY         5154 
LAYER MAP 262 DATATYPE 4 5154 //  BPC Dummy for 3-plates MIM use
LAYER CCP_9          5155 
LAYER MAP 98 DATATYPE 9 5155 // 
LAYER CCP_10         5156 
LAYER MAP 98 DATATYPE 10 5156 // 
LAYER BVG            5157 
LAYER MAP 178 DATATYPE 180 5157 // 
LAYER LUPVTWDMY      5158 
LAYER MAP 255 DATATYPE 93 5158 // 
LAYER OD_20          5159 
LAYER MAP 6 DATATYPE 20 5159 //  Planar OD
LAYER COD_Hi         5160 
LAYER MAP 6 DATATYPE 60 5160 //  Horizontal Cut OD (of TSMC internal)
LAYER COD_Vi         5161 
LAYER MAP 6 DATATYPE 61 5161 //  Vertical Cut OD (of TSMC internal)
LAYER COD_BLOCKi     5162 
LAYER MAP 6 DATATYPE 70 5162 //  COD_BLOCK (of TSMC internal)
LAYER DCOD_Hi        5163 
LAYER MAP 6 DATATYPE 160 5163 //  Horizontal Cut OD (of Dummy) 
LAYER DCOD_Vi        5164 
LAYER MAP 6 DATATYPE 161 5164 //  Vertical Cut OD (of Dummy)
LAYER DCOD_BLOCKi    5165 
LAYER MAP 6 DATATYPE 170 5165 //  COD_BLOCK (of Dummy)
LAYER HEADER_9       5166 
LAYER MAP 6 DATATYPE 189 5166 // 
LAYER GCOD_Hi        5167 
LAYER MAP 6 DATATYPE 260 5167 //  Horizontal Cut OD (of Utility Generation) 
LAYER SRM_45         5168 
LAYER MAP 20 DATATYPE 45 5168 //  SRAM white space marker
LAYER SRM_55         5169 
LAYER MAP 20 DATATYPE 55 5169 //  SRAM white space marker for H280
LAYER PRBOUNDARY     5170 
LAYER MAP 108 DATATYPE 0 5170 //  PR Boundary
LAYER CHIP_BOUNDARY  5171 
LAYER MAP 108 DATATYPE 250 5171 //  Chip Boundary
LAYER SEALRING_EN    5172 
LAYER MAP 162 DATATYPE 3 5172 //  SEAL Ring (real)
LAYER TCDDMY2        5173 
LAYER MAP 165 DATATYPE 2 5173 //  Dummy TCD block2
LAYER FB_VOD         5174 
LAYER MAP 252 DATATYPE 95 5174 // 
LAYER FB_10_1F       5175 
LAYER MAP 252 DATATYPE 102 5175 //  FINFET boundary10 - H280 1Fin
LAYER PADDMY         5176 
LAYER MAP 255 DATATYPE 16 5176 //  PADDMY block
LAYER IND_TEXT       5177
LAYER MAP 144 TEXTTYPE 37 5177
LAYER AP_text        5178
LAYER MAP 202 TEXTTYPE 74 5178
TEXT LAYER 5178 ATTACH 5178 AP
PORT LAYER TEXT 5178
LAYER M0_text        5179 
LAYER MAP 202 TEXTTYPE 30 5179
PORT LAYER TEXT 5179
TEXT LAYER 5179 ATTACH 5179 M0_A
TEXT LAYER 5179 ATTACH 5179 M0_B
LAYER M10_text       5180 
LAYER MAP 202 TEXTTYPE 40 5180
PORT LAYER TEXT 5180
TEXT LAYER 5180 ATTACH 5180 M10
TEXT LAYER 5180 ATTACH 5180 M10_A
TEXT LAYER 5180 ATTACH 5180 M10_B
LAYER M11_text       5181 
LAYER MAP 202 TEXTTYPE 41 5181
PORT LAYER TEXT 5181
TEXT LAYER 5181 ATTACH 5181 M11
TEXT LAYER 5181 ATTACH 5181 M11_A
TEXT LAYER 5181 ATTACH 5181 M11_B
LAYER M12_text       5182 
LAYER MAP 202 TEXTTYPE 42 5182
PORT LAYER TEXT 5182
TEXT LAYER 5182 ATTACH 5182 M12
TEXT LAYER 5182 ATTACH 5182 M12_A
TEXT LAYER 5182 ATTACH 5182 M12_B
LAYER M13_text       5183 
LAYER MAP 202 TEXTTYPE 43 5183
PORT LAYER TEXT 5183
TEXT LAYER 5183 ATTACH 5183 M13
TEXT LAYER 5183 ATTACH 5183 M13_A
TEXT LAYER 5183 ATTACH 5183 M13_B
LAYER M14_text       5184 
LAYER MAP 202 TEXTTYPE 44 5184
PORT LAYER TEXT 5184
TEXT LAYER 5184 ATTACH 5184 M14
TEXT LAYER 5184 ATTACH 5184 M14_A
TEXT LAYER 5184 ATTACH 5184 M14_B
LAYER M15_text       5185 
LAYER MAP 202 TEXTTYPE 45 5185
PORT LAYER TEXT 5185
TEXT LAYER 5185 ATTACH 5185 M15
TEXT LAYER 5185 ATTACH 5185 M15_A
TEXT LAYER 5185 ATTACH 5185 M15_B
LAYER M16_text       5186 
LAYER MAP 202 TEXTTYPE 46 5186
PORT LAYER TEXT 5186
TEXT LAYER 5186 ATTACH 5186 M16
TEXT LAYER 5186 ATTACH 5186 M16_A
TEXT LAYER 5186 ATTACH 5186 M16_B
LAYER M17_text       5187 
LAYER MAP 202 TEXTTYPE 47 5187
PORT LAYER TEXT 5187
TEXT LAYER 5187 ATTACH 5187 M17
TEXT LAYER 5187 ATTACH 5187 M17_A
TEXT LAYER 5187 ATTACH 5187 M17_B
LAYER M1_text        5188 
LAYER MAP 202 TEXTTYPE 31 5188
PORT LAYER TEXT 5188
TEXT LAYER 5188 ATTACH 5188 M1_A
TEXT LAYER 5188 ATTACH 5188 M1_B
LAYER M2_text        5189 
LAYER MAP 202 TEXTTYPE 32 5189
PORT LAYER TEXT 5189
TEXT LAYER 5189 ATTACH 5189 M2_A
TEXT LAYER 5189 ATTACH 5189 M2_B
TEXT LAYER 5189 ATTACH 5189 M2
LAYER M3_text        5190 
LAYER MAP 202 TEXTTYPE 33 5190
PORT LAYER TEXT 5190
TEXT LAYER 5190 ATTACH 5190 M3
TEXT LAYER 5190 ATTACH 5190 M3_A
TEXT LAYER 5190 ATTACH 5190 M3_B
LAYER M4_text        5191 
LAYER MAP 202 TEXTTYPE 34 5191
PORT LAYER TEXT 5191
TEXT LAYER 5191 ATTACH 5191 M4
TEXT LAYER 5191 ATTACH 5191 M4_A
TEXT LAYER 5191 ATTACH 5191 M4_B
LAYER M5_text        5192 
LAYER MAP 202 TEXTTYPE 35 5192
PORT LAYER TEXT 5192
TEXT LAYER 5192 ATTACH 5192 M5
TEXT LAYER 5192 ATTACH 5192 M5_A
TEXT LAYER 5192 ATTACH 5192 M5_B
LAYER M6_text        5193 
LAYER MAP 202 TEXTTYPE 36 5193
PORT LAYER TEXT 5193
TEXT LAYER 5193 ATTACH 5193 M6
TEXT LAYER 5193 ATTACH 5193 M6_A
TEXT LAYER 5193 ATTACH 5193 M6_B
LAYER M7_text        5194 
LAYER MAP 202 TEXTTYPE 37 5194
PORT LAYER TEXT 5194
TEXT LAYER 5194 ATTACH 5194 M7
TEXT LAYER 5194 ATTACH 5194 M7_A
TEXT LAYER 5194 ATTACH 5194 M7_B
LAYER M8_text        5195 
LAYER MAP 202 TEXTTYPE 38 5195
PORT LAYER TEXT 5195
TEXT LAYER 5195 ATTACH 5195 M8
TEXT LAYER 5195 ATTACH 5195 M8_A
TEXT LAYER 5195 ATTACH 5195 M8_B
LAYER M9_text        5196 
LAYER MAP 202 TEXTTYPE 39 5196
PORT LAYER TEXT 5196
TEXT LAYER 5196 ATTACH 5196 M9
TEXT LAYER 5196 ATTACH 5196 M9_A
TEXT LAYER 5196 ATTACH 5196 M9_B
LAYER MD_text        5197 
LAYER MAP 202 TEXTTYPE 82 5197
PORT LAYER TEXT 5197
TEXT LAYER 5197 ATTACH 5197 MD_OD_N
TEXT LAYER 5197 ATTACH 5197 MD_OD_P
TEXT LAYER 5197 ATTACH 5197 MD_STI
TEXT LAYER 5197 ATTACH 5197 MD_OD_N_SRM
TEXT LAYER 5197 ATTACH 5197 MD_OD_P_SRM
TEXT LAYER 5197 ATTACH 5197 MD_STI_SRM
TEXT LAYER 5197 ATTACH 5197 MD_OD_N_IO
TEXT LAYER 5197 ATTACH 5197 MD_OD_P_IO
TEXT LAYER 5197 ATTACH 5197 MD_STI_IO
TEXT LAYER 5197 ATTACH 5197 MD_OD_N_CPP85
TEXT LAYER 5197 ATTACH 5197 MD_OD_P_CPP85
TEXT LAYER 5197 ATTACH 5197 MD_STI_CPP85
LAYER poly_text      5198 
LAYER MAP 202 TEXTTYPE 17 5198
PORT LAYER TEXT 5198
TEXT LAYER 5198 ATTACH 5198 n_fpoly_svt
TEXT LAYER 5198 ATTACH 5198 n_fpoly_lvt
TEXT LAYER 5198 ATTACH 5198 n_fpoly_ulvt
TEXT LAYER 5198 ATTACH 5198 n_fpoly_elvt
TEXT LAYER 5198 ATTACH 5198 n_fpoly_lvtll
TEXT LAYER 5198 ATTACH 5198 n_fpoly_ulvtll
TEXT LAYER 5198 ATTACH 5198 n_fpoly_io
TEXT LAYER 5198 ATTACH 5198 n_fpoly_io_ulvt
TEXT LAYER 5198 ATTACH 5198 n_fpoly_srm
TEXT LAYER 5198 ATTACH 5198 p_fpoly_svt
TEXT LAYER 5198 ATTACH 5198 p_fpoly_lvt
TEXT LAYER 5198 ATTACH 5198 p_fpoly_ulvt
TEXT LAYER 5198 ATTACH 5198 p_fpoly_elvt
TEXT LAYER 5198 ATTACH 5198 p_fpoly_lvtll
TEXT LAYER 5198 ATTACH 5198 p_fpoly_ulvtll
TEXT LAYER 5198 ATTACH 5198 p_fpoly_io
TEXT LAYER 5198 ATTACH 5198 p_fpoly_srm
#IFDEF WELL_TEXT
LAYER nxwell_text    5199
LAYER MAP 202 TEXTTYPE 3 5199
TEXT LAYER 5199 ATTACH 5199 nxwell
PORT LAYER TEXT 5199
#ENDIF
#IFDEF WELL_TEXT
LAYER psub_text      5200
LAYER MAP 202 TEXTTYPE 2 5200
TEXT LAYER 5200 ATTACH 5200 psub
PORT LAYER TEXT 5200
#ENDIF
LAYER TAP_text       5201
LAYER MAP 127 TEXTTYPE 74 5201
TEXT LAYER 5201 ATTACH 5201 AP
LAYER TM0_text       5202 
LAYER MAP 127 TEXTTYPE 30 5202
TEXT LAYER 5202 ATTACH 5202 M0_A
TEXT LAYER 5202 ATTACH 5202 M0_B
LAYER TM10_text      5203 
LAYER MAP 127 TEXTTYPE 40 5203
TEXT LAYER 5203 ATTACH 5203 M10
TEXT LAYER 5203 ATTACH 5203 M10_A
TEXT LAYER 5203 ATTACH 5203 M10_B
LAYER TM11_text      5204 
LAYER MAP 127 TEXTTYPE 41 5204
TEXT LAYER 5204 ATTACH 5204 M11
TEXT LAYER 5204 ATTACH 5204 M11_A
TEXT LAYER 5204 ATTACH 5204 M11_B
LAYER TM12_text      5205 
LAYER MAP 127 TEXTTYPE 42 5205
TEXT LAYER 5205 ATTACH 5205 M12
TEXT LAYER 5205 ATTACH 5205 M12_A
TEXT LAYER 5205 ATTACH 5205 M12_B
LAYER TM13_text      5206 
LAYER MAP 127 TEXTTYPE 43 5206
TEXT LAYER 5206 ATTACH 5206 M13
TEXT LAYER 5206 ATTACH 5206 M13_A
TEXT LAYER 5206 ATTACH 5206 M13_B
LAYER TM14_text      5207 
LAYER MAP 127 TEXTTYPE 44 5207
TEXT LAYER 5207 ATTACH 5207 M14
TEXT LAYER 5207 ATTACH 5207 M14_A
TEXT LAYER 5207 ATTACH 5207 M14_B
LAYER TM15_text      5208 
LAYER MAP 127 TEXTTYPE 45 5208
TEXT LAYER 5208 ATTACH 5208 M15
TEXT LAYER 5208 ATTACH 5208 M15_A
TEXT LAYER 5208 ATTACH 5208 M15_B
LAYER TM16_text      5209 
LAYER MAP 127 TEXTTYPE 46 5209
TEXT LAYER 5209 ATTACH 5209 M16
TEXT LAYER 5209 ATTACH 5209 M16_A
TEXT LAYER 5209 ATTACH 5209 M16_B
LAYER TM17_text      5210 
LAYER MAP 127 TEXTTYPE 47 5210
TEXT LAYER 5210 ATTACH 5210 M17
TEXT LAYER 5210 ATTACH 5210 M17_A
TEXT LAYER 5210 ATTACH 5210 M17_B
LAYER TM1_text       5211 
LAYER MAP 127 TEXTTYPE 31 5211
TEXT LAYER 5211 ATTACH 5211 M1_A
TEXT LAYER 5211 ATTACH 5211 M1_B
LAYER TM2_text       5212 
LAYER MAP 127 TEXTTYPE 32 5212
TEXT LAYER 5212 ATTACH 5212 M2_A
TEXT LAYER 5212 ATTACH 5212 M2_B
TEXT LAYER 5212 ATTACH 5212 M2
LAYER TM3_text       5213 
LAYER MAP 127 TEXTTYPE 33 5213
TEXT LAYER 5213 ATTACH 5213 M3
TEXT LAYER 5213 ATTACH 5213 M3_A
TEXT LAYER 5213 ATTACH 5213 M3_B
LAYER TM4_text       5214 
LAYER MAP 127 TEXTTYPE 34 5214
TEXT LAYER 5214 ATTACH 5214 M4
TEXT LAYER 5214 ATTACH 5214 M4_A
TEXT LAYER 5214 ATTACH 5214 M4_B
LAYER TM5_text       5215 
LAYER MAP 127 TEXTTYPE 35 5215
TEXT LAYER 5215 ATTACH 5215 M5
TEXT LAYER 5215 ATTACH 5215 M5_A
TEXT LAYER 5215 ATTACH 5215 M5_B
LAYER TM6_text       5216 
LAYER MAP 127 TEXTTYPE 36 5216
TEXT LAYER 5216 ATTACH 5216 M6
TEXT LAYER 5216 ATTACH 5216 M6_A
TEXT LAYER 5216 ATTACH 5216 M6_B
LAYER TM7_text       5217 
LAYER MAP 127 TEXTTYPE 37 5217
TEXT LAYER 5217 ATTACH 5217 M7
TEXT LAYER 5217 ATTACH 5217 M7_A
TEXT LAYER 5217 ATTACH 5217 M7_B
LAYER TM8_text       5218 
LAYER MAP 127 TEXTTYPE 38 5218
TEXT LAYER 5218 ATTACH 5218 M8
TEXT LAYER 5218 ATTACH 5218 M8_A
TEXT LAYER 5218 ATTACH 5218 M8_B
LAYER TM9_text       5219 
LAYER MAP 127 TEXTTYPE 39 5219
TEXT LAYER 5219 ATTACH 5219 M9
TEXT LAYER 5219 ATTACH 5219 M9_A
TEXT LAYER 5219 ATTACH 5219 M9_B
LAYER TMD_text       5220 
LAYER MAP 127 TEXTTYPE 82 5220
TEXT LAYER 5220 ATTACH 5220 MD_OD_N
TEXT LAYER 5220 ATTACH 5220 MD_OD_P
TEXT LAYER 5220 ATTACH 5220 MD_STI
TEXT LAYER 5220 ATTACH 5220 MD_OD_N_IO
TEXT LAYER 5220 ATTACH 5220 MD_OD_P_IO
TEXT LAYER 5220 ATTACH 5220 MD_STI_IO
TEXT LAYER 5220 ATTACH 5220 MD_OD_N_SRM
TEXT LAYER 5220 ATTACH 5220 MD_OD_P_SRM
TEXT LAYER 5220 ATTACH 5220 MD_STI_SRM
TEXT LAYER 5220 ATTACH 5220 MD_OD_N_CPP85
TEXT LAYER 5220 ATTACH 5220 MD_OD_P_CPP85
TEXT LAYER 5220 ATTACH 5220 MD_STI_CPP85
LAYER Tpoly_text     5221 
LAYER MAP 127 TEXTTYPE 17 5221
TEXT LAYER 5221 ATTACH 5221 n_fpoly_svt
TEXT LAYER 5221 ATTACH 5221 n_fpoly_lvt
TEXT LAYER 5221 ATTACH 5221 n_fpoly_ulvt
TEXT LAYER 5221 ATTACH 5221 n_fpoly_elvt
TEXT LAYER 5221 ATTACH 5221 n_fpoly_lvtll
TEXT LAYER 5221 ATTACH 5221 n_fpoly_ulvtll
TEXT LAYER 5221 ATTACH 5221 n_fpoly_io
TEXT LAYER 5221 ATTACH 5221 n_fpoly_io_ulvt
TEXT LAYER 5221 ATTACH 5221 n_fpoly_srm
TEXT LAYER 5221 ATTACH 5221 p_fpoly_svt
TEXT LAYER 5221 ATTACH 5221 p_fpoly_lvt
TEXT LAYER 5221 ATTACH 5221 p_fpoly_ulvt
TEXT LAYER 5221 ATTACH 5221 p_fpoly_elvt
TEXT LAYER 5221 ATTACH 5221 p_fpoly_lvtll
TEXT LAYER 5221 ATTACH 5221 p_fpoly_ulvtll
TEXT LAYER 5221 ATTACH 5221 p_fpoly_io
TEXT LAYER 5221 ATTACH 5221 p_fpoly_srm
//#############################################
//# LOGIC OPERATION POOL                      #
//#############################################

//Form BULK layer
DRC:1 = EXTENT
BULK  = SIZE DRC:1 BY 0.005

//***** Define connectivity/via layer -- nch_svt_mac_gate ****

//* Define layer -- nch_svt_mac_gate
nch_svt_mac_gate_tmp01 = tngate3b AND OD
nch_svt_mac_gate_tmp02 = nch_svt_mac_gate_tmp01 NOT NW
nch_svt_mac_gate_tmp03 = nch_svt_mac_gate_tmp02 NOT NT_N
nch_svt_mac_gate_tmp04 = nch_svt_mac_gate_tmp03 NOT OD12
nch_svt_mac_gate_tmp05 = nch_svt_mac_gate_tmp04 AND PO
nch_svt_mac_gate_tmp06 = nch_svt_mac_gate_tmp05 NOT VTELN
nch_svt_mac_gate_tmp07 = nch_svt_mac_gate_tmp06 NOT VTELP
nch_svt_mac_gate_tmp08 = nch_svt_mac_gate_tmp07 NOT VTULN
nch_svt_mac_gate_tmp09 = nch_svt_mac_gate_tmp08 NOT VTULP
nch_svt_mac_gate_tmp10 = nch_svt_mac_gate_tmp09 NOT VTLN
nch_svt_mac_gate_tmp11 = nch_svt_mac_gate_tmp10 NOT VTLP
nch_svt_mac_gate_tmp12 = nch_svt_mac_gate_tmp11 AND VTSN
nch_svt_mac_gate_tmp13 = nch_svt_mac_gate_tmp12 NOT VTSP
nch_svt_mac_gate_tmp14 = nch_svt_mac_gate_tmp13 NOT VTULNLL
nch_svt_mac_gate_tmp15 = nch_svt_mac_gate_tmp14 NOT VTULPLL
nch_svt_mac_gate_tmp16 = nch_svt_mac_gate_tmp15 NOT VTLNLL
nch_svt_mac_gate_tmp17 = nch_svt_mac_gate_tmp16 NOT VTLPLL
nch_svt_mac_gate_tmp18 = nch_svt_mac_gate_tmp17 AND NPi
nch_svt_mac_gate_tmp19 = nch_svt_mac_gate_tmp18 NOT PPi
nch_svt_mac_gate_tmp20 = nch_svt_mac_gate_tmp19 NOT OD12_15
nch_svt_mac_gate_tmp21 = nch_svt_mac_gate_tmp20 NOT VAR
nch_svt_mac_gate_tmp22 = nch_svt_mac_gate_tmp21 NOT IBJTDMY
nch_svt_mac_gate_tmp23 = nch_svt_mac_gate_tmp22 NOT DIODMY
nch_svt_mac_gate_tmp24 = nch_svt_mac_gate_tmp23 NOT SR_ESD
nch_svt_mac_gate_tmp25 = nch_svt_mac_gate_tmp24 NOT HIA_DUMMY
nch_svt_mac_gate_tmp26 = nch_svt_mac_gate_tmp25 NOT SDI_2
nch_svt_mac_gate = nch_svt_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- psub ****
ppsub = BULK NOT NW 
sr_dod_s = SIZE SR_DOD BY 0.002 
psub2_ring_1 = SIZE PSUB2 BY 0.001 
psub2_ring = psub2_ring_1 NOT PSUB2 
psub2_exl = sr_dod_s INTERACT psub2_ring 
PSUB2_final = PSUB2 NOT psub2_exl 
psub2s = SIZE PSUB2_final BY 0.001 
psubband = psub2s NOT PSUB2_final 
psub = ppsub NOT psubband 

//***** Define connectivity/via layer -- nch_svt_mac_gate_dnw ****

//* Define layer -- nch_svt_mac_gate_dnw
nch_svt_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_svt_mac_gate_dnw_tmp02 = nch_svt_mac_gate_dnw_tmp01 NOT NW
nch_svt_mac_gate_dnw_tmp03 = nch_svt_mac_gate_dnw_tmp02 NOT NT_N
nch_svt_mac_gate_dnw_tmp04 = nch_svt_mac_gate_dnw_tmp03 NOT OD12
nch_svt_mac_gate_dnw_tmp05 = nch_svt_mac_gate_dnw_tmp04 AND PO
nch_svt_mac_gate_dnw_tmp06 = nch_svt_mac_gate_dnw_tmp05 NOT VTELN
nch_svt_mac_gate_dnw_tmp07 = nch_svt_mac_gate_dnw_tmp06 NOT VTELP
nch_svt_mac_gate_dnw_tmp08 = nch_svt_mac_gate_dnw_tmp07 NOT VTULN
nch_svt_mac_gate_dnw_tmp09 = nch_svt_mac_gate_dnw_tmp08 NOT VTULP
nch_svt_mac_gate_dnw_tmp10 = nch_svt_mac_gate_dnw_tmp09 NOT VTLN
nch_svt_mac_gate_dnw_tmp11 = nch_svt_mac_gate_dnw_tmp10 NOT VTLP
nch_svt_mac_gate_dnw_tmp12 = nch_svt_mac_gate_dnw_tmp11 AND VTSN
nch_svt_mac_gate_dnw_tmp13 = nch_svt_mac_gate_dnw_tmp12 NOT VTSP
nch_svt_mac_gate_dnw_tmp14 = nch_svt_mac_gate_dnw_tmp13 NOT VTULNLL
nch_svt_mac_gate_dnw_tmp15 = nch_svt_mac_gate_dnw_tmp14 NOT VTULPLL
nch_svt_mac_gate_dnw_tmp16 = nch_svt_mac_gate_dnw_tmp15 NOT VTLNLL
nch_svt_mac_gate_dnw_tmp17 = nch_svt_mac_gate_dnw_tmp16 NOT VTLPLL
nch_svt_mac_gate_dnw_tmp18 = nch_svt_mac_gate_dnw_tmp17 AND NPi
nch_svt_mac_gate_dnw_tmp19 = nch_svt_mac_gate_dnw_tmp18 NOT PPi
nch_svt_mac_gate_dnw_tmp20 = nch_svt_mac_gate_dnw_tmp19 NOT OD12_15
nch_svt_mac_gate_dnw_tmp21 = nch_svt_mac_gate_dnw_tmp20 NOT VAR
nch_svt_mac_gate_dnw_tmp22 = nch_svt_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_svt_mac_gate_dnw_tmp23 = nch_svt_mac_gate_dnw_tmp22 NOT DIODMY
nch_svt_mac_gate_dnw_tmp24 = nch_svt_mac_gate_dnw_tmp23 NOT SR_ESD
nch_svt_mac_gate_dnw_tmp25 = nch_svt_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_svt_mac_gate_dnw_tmp26 = nch_svt_mac_gate_dnw_tmp25 NOT SDI_2
nch_svt_mac_gate_dnw = nch_svt_mac_gate_dnw_tmp26 AND dnwdmy


//***** Define connectivity/via layer -- nch_lvt_mac_gate ****

//* Define layer -- nch_lvt_mac_gate
nch_lvt_mac_gate_tmp01 = tngate3b AND OD
nch_lvt_mac_gate_tmp02 = nch_lvt_mac_gate_tmp01 NOT NW
nch_lvt_mac_gate_tmp03 = nch_lvt_mac_gate_tmp02 NOT NT_N
nch_lvt_mac_gate_tmp04 = nch_lvt_mac_gate_tmp03 NOT OD12
nch_lvt_mac_gate_tmp05 = nch_lvt_mac_gate_tmp04 AND PO
nch_lvt_mac_gate_tmp06 = nch_lvt_mac_gate_tmp05 NOT VTELN
nch_lvt_mac_gate_tmp07 = nch_lvt_mac_gate_tmp06 NOT VTELP
nch_lvt_mac_gate_tmp08 = nch_lvt_mac_gate_tmp07 NOT VTULN
nch_lvt_mac_gate_tmp09 = nch_lvt_mac_gate_tmp08 NOT VTULP
nch_lvt_mac_gate_tmp10 = nch_lvt_mac_gate_tmp09 AND VTLN
nch_lvt_mac_gate_tmp11 = nch_lvt_mac_gate_tmp10 NOT VTLP
nch_lvt_mac_gate_tmp12 = nch_lvt_mac_gate_tmp11 NOT VTSN
nch_lvt_mac_gate_tmp13 = nch_lvt_mac_gate_tmp12 NOT VTSP
nch_lvt_mac_gate_tmp14 = nch_lvt_mac_gate_tmp13 NOT VTULNLL
nch_lvt_mac_gate_tmp15 = nch_lvt_mac_gate_tmp14 NOT VTULPLL
nch_lvt_mac_gate_tmp16 = nch_lvt_mac_gate_tmp15 NOT VTLNLL
nch_lvt_mac_gate_tmp17 = nch_lvt_mac_gate_tmp16 NOT VTLPLL
nch_lvt_mac_gate_tmp18 = nch_lvt_mac_gate_tmp17 AND NPi
nch_lvt_mac_gate_tmp19 = nch_lvt_mac_gate_tmp18 NOT PPi
nch_lvt_mac_gate_tmp20 = nch_lvt_mac_gate_tmp19 NOT OD12_15
nch_lvt_mac_gate_tmp21 = nch_lvt_mac_gate_tmp20 NOT VAR
nch_lvt_mac_gate_tmp22 = nch_lvt_mac_gate_tmp21 NOT IBJTDMY
nch_lvt_mac_gate_tmp23 = nch_lvt_mac_gate_tmp22 NOT DIODMY
nch_lvt_mac_gate_tmp24 = nch_lvt_mac_gate_tmp23 NOT SR_ESD
nch_lvt_mac_gate_tmp25 = nch_lvt_mac_gate_tmp24 NOT HIA_DUMMY
nch_lvt_mac_gate_tmp26 = nch_lvt_mac_gate_tmp25 NOT SDI_2
nch_lvt_mac_gate = nch_lvt_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- nch_lvtll_mac_gate ****

//* Define layer -- nch_lvtll_mac_gate
nch_lvtll_mac_gate_tmp01 = tngate3b AND OD
nch_lvtll_mac_gate_tmp02 = nch_lvtll_mac_gate_tmp01 NOT NW
nch_lvtll_mac_gate_tmp03 = nch_lvtll_mac_gate_tmp02 NOT NT_N
nch_lvtll_mac_gate_tmp04 = nch_lvtll_mac_gate_tmp03 NOT OD12
nch_lvtll_mac_gate_tmp05 = nch_lvtll_mac_gate_tmp04 AND PO
nch_lvtll_mac_gate_tmp06 = nch_lvtll_mac_gate_tmp05 NOT VTELN
nch_lvtll_mac_gate_tmp07 = nch_lvtll_mac_gate_tmp06 NOT VTELP
nch_lvtll_mac_gate_tmp08 = nch_lvtll_mac_gate_tmp07 NOT VTULN
nch_lvtll_mac_gate_tmp09 = nch_lvtll_mac_gate_tmp08 NOT VTULP
nch_lvtll_mac_gate_tmp10 = nch_lvtll_mac_gate_tmp09 NOT VTLN
nch_lvtll_mac_gate_tmp11 = nch_lvtll_mac_gate_tmp10 NOT VTLP
nch_lvtll_mac_gate_tmp12 = nch_lvtll_mac_gate_tmp11 NOT VTSN
nch_lvtll_mac_gate_tmp13 = nch_lvtll_mac_gate_tmp12 NOT VTSP
nch_lvtll_mac_gate_tmp14 = nch_lvtll_mac_gate_tmp13 NOT VTULNLL
nch_lvtll_mac_gate_tmp15 = nch_lvtll_mac_gate_tmp14 NOT VTULPLL
nch_lvtll_mac_gate_tmp16 = nch_lvtll_mac_gate_tmp15 AND VTLNLL
nch_lvtll_mac_gate_tmp17 = nch_lvtll_mac_gate_tmp16 NOT VTLPLL
nch_lvtll_mac_gate_tmp18 = nch_lvtll_mac_gate_tmp17 AND NPi
nch_lvtll_mac_gate_tmp19 = nch_lvtll_mac_gate_tmp18 NOT PPi
nch_lvtll_mac_gate_tmp20 = nch_lvtll_mac_gate_tmp19 NOT OD12_15
nch_lvtll_mac_gate_tmp21 = nch_lvtll_mac_gate_tmp20 NOT VAR
nch_lvtll_mac_gate_tmp22 = nch_lvtll_mac_gate_tmp21 NOT IBJTDMY
nch_lvtll_mac_gate_tmp23 = nch_lvtll_mac_gate_tmp22 NOT DIODMY
nch_lvtll_mac_gate_tmp24 = nch_lvtll_mac_gate_tmp23 NOT SR_ESD
nch_lvtll_mac_gate_tmp25 = nch_lvtll_mac_gate_tmp24 NOT HIA_DUMMY
nch_lvtll_mac_gate_tmp26 = nch_lvtll_mac_gate_tmp25 NOT SDI_2
nch_lvtll_mac_gate = nch_lvtll_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- nch_lvt_mac_gate_dnw ****

//* Define layer -- nch_lvt_mac_gate_dnw
nch_lvt_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_lvt_mac_gate_dnw_tmp02 = nch_lvt_mac_gate_dnw_tmp01 NOT NW
nch_lvt_mac_gate_dnw_tmp03 = nch_lvt_mac_gate_dnw_tmp02 NOT NT_N
nch_lvt_mac_gate_dnw_tmp04 = nch_lvt_mac_gate_dnw_tmp03 NOT OD12
nch_lvt_mac_gate_dnw_tmp05 = nch_lvt_mac_gate_dnw_tmp04 AND PO
nch_lvt_mac_gate_dnw_tmp06 = nch_lvt_mac_gate_dnw_tmp05 NOT VTELN
nch_lvt_mac_gate_dnw_tmp07 = nch_lvt_mac_gate_dnw_tmp06 NOT VTELP
nch_lvt_mac_gate_dnw_tmp08 = nch_lvt_mac_gate_dnw_tmp07 NOT VTULN
nch_lvt_mac_gate_dnw_tmp09 = nch_lvt_mac_gate_dnw_tmp08 NOT VTULP
nch_lvt_mac_gate_dnw_tmp10 = nch_lvt_mac_gate_dnw_tmp09 AND VTLN
nch_lvt_mac_gate_dnw_tmp11 = nch_lvt_mac_gate_dnw_tmp10 NOT VTLP
nch_lvt_mac_gate_dnw_tmp12 = nch_lvt_mac_gate_dnw_tmp11 NOT VTSN
nch_lvt_mac_gate_dnw_tmp13 = nch_lvt_mac_gate_dnw_tmp12 NOT VTSP
nch_lvt_mac_gate_dnw_tmp14 = nch_lvt_mac_gate_dnw_tmp13 NOT VTULNLL
nch_lvt_mac_gate_dnw_tmp15 = nch_lvt_mac_gate_dnw_tmp14 NOT VTULPLL
nch_lvt_mac_gate_dnw_tmp16 = nch_lvt_mac_gate_dnw_tmp15 NOT VTLNLL
nch_lvt_mac_gate_dnw_tmp17 = nch_lvt_mac_gate_dnw_tmp16 NOT VTLPLL
nch_lvt_mac_gate_dnw_tmp18 = nch_lvt_mac_gate_dnw_tmp17 AND NPi
nch_lvt_mac_gate_dnw_tmp19 = nch_lvt_mac_gate_dnw_tmp18 NOT PPi
nch_lvt_mac_gate_dnw_tmp20 = nch_lvt_mac_gate_dnw_tmp19 NOT OD12_15
nch_lvt_mac_gate_dnw_tmp21 = nch_lvt_mac_gate_dnw_tmp20 NOT VAR
nch_lvt_mac_gate_dnw_tmp22 = nch_lvt_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_lvt_mac_gate_dnw_tmp23 = nch_lvt_mac_gate_dnw_tmp22 NOT DIODMY
nch_lvt_mac_gate_dnw_tmp24 = nch_lvt_mac_gate_dnw_tmp23 NOT SR_ESD
nch_lvt_mac_gate_dnw_tmp25 = nch_lvt_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_lvt_mac_gate_dnw_tmp26 = nch_lvt_mac_gate_dnw_tmp25 NOT SDI_2
nch_lvt_mac_gate_dnw = nch_lvt_mac_gate_dnw_tmp26 AND dnwdmy


//***** Define connectivity/via layer -- nch_lvtll_mac_gate_dnw ****

//* Define layer -- nch_lvtll_mac_gate_dnw
nch_lvtll_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_lvtll_mac_gate_dnw_tmp02 = nch_lvtll_mac_gate_dnw_tmp01 NOT NW
nch_lvtll_mac_gate_dnw_tmp03 = nch_lvtll_mac_gate_dnw_tmp02 NOT NT_N
nch_lvtll_mac_gate_dnw_tmp04 = nch_lvtll_mac_gate_dnw_tmp03 NOT OD12
nch_lvtll_mac_gate_dnw_tmp05 = nch_lvtll_mac_gate_dnw_tmp04 AND PO
nch_lvtll_mac_gate_dnw_tmp06 = nch_lvtll_mac_gate_dnw_tmp05 NOT VTELN
nch_lvtll_mac_gate_dnw_tmp07 = nch_lvtll_mac_gate_dnw_tmp06 NOT VTELP
nch_lvtll_mac_gate_dnw_tmp08 = nch_lvtll_mac_gate_dnw_tmp07 NOT VTULN
nch_lvtll_mac_gate_dnw_tmp09 = nch_lvtll_mac_gate_dnw_tmp08 NOT VTULP
nch_lvtll_mac_gate_dnw_tmp10 = nch_lvtll_mac_gate_dnw_tmp09 NOT VTLN
nch_lvtll_mac_gate_dnw_tmp11 = nch_lvtll_mac_gate_dnw_tmp10 NOT VTLP
nch_lvtll_mac_gate_dnw_tmp12 = nch_lvtll_mac_gate_dnw_tmp11 NOT VTSN
nch_lvtll_mac_gate_dnw_tmp13 = nch_lvtll_mac_gate_dnw_tmp12 NOT VTSP
nch_lvtll_mac_gate_dnw_tmp14 = nch_lvtll_mac_gate_dnw_tmp13 NOT VTULNLL
nch_lvtll_mac_gate_dnw_tmp15 = nch_lvtll_mac_gate_dnw_tmp14 NOT VTULPLL
nch_lvtll_mac_gate_dnw_tmp16 = nch_lvtll_mac_gate_dnw_tmp15 AND VTLNLL
nch_lvtll_mac_gate_dnw_tmp17 = nch_lvtll_mac_gate_dnw_tmp16 NOT VTLPLL
nch_lvtll_mac_gate_dnw_tmp18 = nch_lvtll_mac_gate_dnw_tmp17 AND NPi
nch_lvtll_mac_gate_dnw_tmp19 = nch_lvtll_mac_gate_dnw_tmp18 NOT PPi
nch_lvtll_mac_gate_dnw_tmp20 = nch_lvtll_mac_gate_dnw_tmp19 NOT OD12_15
nch_lvtll_mac_gate_dnw_tmp21 = nch_lvtll_mac_gate_dnw_tmp20 NOT VAR
nch_lvtll_mac_gate_dnw_tmp22 = nch_lvtll_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_lvtll_mac_gate_dnw_tmp23 = nch_lvtll_mac_gate_dnw_tmp22 NOT DIODMY
nch_lvtll_mac_gate_dnw_tmp24 = nch_lvtll_mac_gate_dnw_tmp23 NOT SR_ESD
nch_lvtll_mac_gate_dnw_tmp25 = nch_lvtll_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_lvtll_mac_gate_dnw_tmp26 = nch_lvtll_mac_gate_dnw_tmp25 NOT SDI_2
nch_lvtll_mac_gate_dnw = nch_lvtll_mac_gate_dnw_tmp26 AND dnwdmy


//***** Define connectivity/via layer -- nch_ulvt_mac_gate ****

//* Define layer -- nch_ulvt_mac_gate
nch_ulvt_mac_gate_tmp01 = tngate3b AND OD
nch_ulvt_mac_gate_tmp02 = nch_ulvt_mac_gate_tmp01 NOT NW
nch_ulvt_mac_gate_tmp03 = nch_ulvt_mac_gate_tmp02 NOT NT_N
nch_ulvt_mac_gate_tmp04 = nch_ulvt_mac_gate_tmp03 NOT OD12
nch_ulvt_mac_gate_tmp05 = nch_ulvt_mac_gate_tmp04 AND PO
nch_ulvt_mac_gate_tmp06 = nch_ulvt_mac_gate_tmp05 NOT VTELN
nch_ulvt_mac_gate_tmp07 = nch_ulvt_mac_gate_tmp06 NOT VTELP
nch_ulvt_mac_gate_tmp08 = nch_ulvt_mac_gate_tmp07 AND VTULN
nch_ulvt_mac_gate_tmp09 = nch_ulvt_mac_gate_tmp08 NOT VTULP
nch_ulvt_mac_gate_tmp10 = nch_ulvt_mac_gate_tmp09 NOT VTLN
nch_ulvt_mac_gate_tmp11 = nch_ulvt_mac_gate_tmp10 NOT VTLP
nch_ulvt_mac_gate_tmp12 = nch_ulvt_mac_gate_tmp11 NOT VTSN
nch_ulvt_mac_gate_tmp13 = nch_ulvt_mac_gate_tmp12 NOT VTSP
nch_ulvt_mac_gate_tmp14 = nch_ulvt_mac_gate_tmp13 NOT VTULNLL
nch_ulvt_mac_gate_tmp15 = nch_ulvt_mac_gate_tmp14 NOT VTULPLL
nch_ulvt_mac_gate_tmp16 = nch_ulvt_mac_gate_tmp15 NOT VTLNLL
nch_ulvt_mac_gate_tmp17 = nch_ulvt_mac_gate_tmp16 NOT VTLPLL
nch_ulvt_mac_gate_tmp18 = nch_ulvt_mac_gate_tmp17 AND NPi
nch_ulvt_mac_gate_tmp19 = nch_ulvt_mac_gate_tmp18 NOT PPi
nch_ulvt_mac_gate_tmp20 = nch_ulvt_mac_gate_tmp19 NOT OD12_15
nch_ulvt_mac_gate_tmp21 = nch_ulvt_mac_gate_tmp20 NOT VAR
nch_ulvt_mac_gate_tmp22 = nch_ulvt_mac_gate_tmp21 NOT IBJTDMY
nch_ulvt_mac_gate_tmp23 = nch_ulvt_mac_gate_tmp22 NOT DIODMY
nch_ulvt_mac_gate_tmp24 = nch_ulvt_mac_gate_tmp23 NOT SR_ESD
nch_ulvt_mac_gate_tmp25 = nch_ulvt_mac_gate_tmp24 NOT HIA_DUMMY
nch_ulvt_mac_gate_tmp26 = nch_ulvt_mac_gate_tmp25 NOT SDI_2
nch_ulvt_mac_gate = nch_ulvt_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- nch_ulvtll_mac_gate ****

//* Define layer -- nch_ulvtll_mac_gate
nch_ulvtll_mac_gate_tmp01 = tngate3b AND OD
nch_ulvtll_mac_gate_tmp02 = nch_ulvtll_mac_gate_tmp01 NOT NW
nch_ulvtll_mac_gate_tmp03 = nch_ulvtll_mac_gate_tmp02 NOT NT_N
nch_ulvtll_mac_gate_tmp04 = nch_ulvtll_mac_gate_tmp03 NOT OD12
nch_ulvtll_mac_gate_tmp05 = nch_ulvtll_mac_gate_tmp04 AND PO
nch_ulvtll_mac_gate_tmp06 = nch_ulvtll_mac_gate_tmp05 NOT VTELN
nch_ulvtll_mac_gate_tmp07 = nch_ulvtll_mac_gate_tmp06 NOT VTELP
nch_ulvtll_mac_gate_tmp08 = nch_ulvtll_mac_gate_tmp07 NOT VTULN
nch_ulvtll_mac_gate_tmp09 = nch_ulvtll_mac_gate_tmp08 NOT VTULP
nch_ulvtll_mac_gate_tmp10 = nch_ulvtll_mac_gate_tmp09 NOT VTLN
nch_ulvtll_mac_gate_tmp11 = nch_ulvtll_mac_gate_tmp10 NOT VTLP
nch_ulvtll_mac_gate_tmp12 = nch_ulvtll_mac_gate_tmp11 NOT VTSN
nch_ulvtll_mac_gate_tmp13 = nch_ulvtll_mac_gate_tmp12 NOT VTSP
nch_ulvtll_mac_gate_tmp14 = nch_ulvtll_mac_gate_tmp13 AND VTULNLL
nch_ulvtll_mac_gate_tmp15 = nch_ulvtll_mac_gate_tmp14 NOT VTULPLL
nch_ulvtll_mac_gate_tmp16 = nch_ulvtll_mac_gate_tmp15 NOT VTLNLL
nch_ulvtll_mac_gate_tmp17 = nch_ulvtll_mac_gate_tmp16 NOT VTLPLL
nch_ulvtll_mac_gate_tmp18 = nch_ulvtll_mac_gate_tmp17 AND NPi
nch_ulvtll_mac_gate_tmp19 = nch_ulvtll_mac_gate_tmp18 NOT PPi
nch_ulvtll_mac_gate_tmp20 = nch_ulvtll_mac_gate_tmp19 NOT OD12_15
nch_ulvtll_mac_gate_tmp21 = nch_ulvtll_mac_gate_tmp20 NOT VAR
nch_ulvtll_mac_gate_tmp22 = nch_ulvtll_mac_gate_tmp21 NOT IBJTDMY
nch_ulvtll_mac_gate_tmp23 = nch_ulvtll_mac_gate_tmp22 NOT DIODMY
nch_ulvtll_mac_gate_tmp24 = nch_ulvtll_mac_gate_tmp23 NOT SR_ESD
nch_ulvtll_mac_gate_tmp25 = nch_ulvtll_mac_gate_tmp24 NOT HIA_DUMMY
nch_ulvtll_mac_gate_tmp26 = nch_ulvtll_mac_gate_tmp25 NOT SDI_2
nch_ulvtll_mac_gate = nch_ulvtll_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- nch_ulvt_mac_gate_dnw ****

//* Define layer -- nch_ulvt_mac_gate_dnw
nch_ulvt_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_ulvt_mac_gate_dnw_tmp02 = nch_ulvt_mac_gate_dnw_tmp01 NOT NW
nch_ulvt_mac_gate_dnw_tmp03 = nch_ulvt_mac_gate_dnw_tmp02 NOT NT_N
nch_ulvt_mac_gate_dnw_tmp04 = nch_ulvt_mac_gate_dnw_tmp03 NOT OD12
nch_ulvt_mac_gate_dnw_tmp05 = nch_ulvt_mac_gate_dnw_tmp04 AND PO
nch_ulvt_mac_gate_dnw_tmp06 = nch_ulvt_mac_gate_dnw_tmp05 NOT VTELN
nch_ulvt_mac_gate_dnw_tmp07 = nch_ulvt_mac_gate_dnw_tmp06 NOT VTELP
nch_ulvt_mac_gate_dnw_tmp08 = nch_ulvt_mac_gate_dnw_tmp07 AND VTULN
nch_ulvt_mac_gate_dnw_tmp09 = nch_ulvt_mac_gate_dnw_tmp08 NOT VTULP
nch_ulvt_mac_gate_dnw_tmp10 = nch_ulvt_mac_gate_dnw_tmp09 NOT VTLN
nch_ulvt_mac_gate_dnw_tmp11 = nch_ulvt_mac_gate_dnw_tmp10 NOT VTLP
nch_ulvt_mac_gate_dnw_tmp12 = nch_ulvt_mac_gate_dnw_tmp11 NOT VTSN
nch_ulvt_mac_gate_dnw_tmp13 = nch_ulvt_mac_gate_dnw_tmp12 NOT VTSP
nch_ulvt_mac_gate_dnw_tmp14 = nch_ulvt_mac_gate_dnw_tmp13 NOT VTULNLL
nch_ulvt_mac_gate_dnw_tmp15 = nch_ulvt_mac_gate_dnw_tmp14 NOT VTULPLL
nch_ulvt_mac_gate_dnw_tmp16 = nch_ulvt_mac_gate_dnw_tmp15 NOT VTLNLL
nch_ulvt_mac_gate_dnw_tmp17 = nch_ulvt_mac_gate_dnw_tmp16 NOT VTLPLL
nch_ulvt_mac_gate_dnw_tmp18 = nch_ulvt_mac_gate_dnw_tmp17 AND NPi
nch_ulvt_mac_gate_dnw_tmp19 = nch_ulvt_mac_gate_dnw_tmp18 NOT PPi
nch_ulvt_mac_gate_dnw_tmp20 = nch_ulvt_mac_gate_dnw_tmp19 NOT OD12_15
nch_ulvt_mac_gate_dnw_tmp21 = nch_ulvt_mac_gate_dnw_tmp20 NOT VAR
nch_ulvt_mac_gate_dnw_tmp22 = nch_ulvt_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_ulvt_mac_gate_dnw_tmp23 = nch_ulvt_mac_gate_dnw_tmp22 NOT DIODMY
nch_ulvt_mac_gate_dnw_tmp24 = nch_ulvt_mac_gate_dnw_tmp23 NOT SR_ESD
nch_ulvt_mac_gate_dnw_tmp25 = nch_ulvt_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_ulvt_mac_gate_dnw_tmp26 = nch_ulvt_mac_gate_dnw_tmp25 NOT SDI_2
nch_ulvt_mac_gate_dnw = nch_ulvt_mac_gate_dnw_tmp26 AND dnwdmy


//***** Define connectivity/via layer -- nch_ulvtll_mac_gate_dnw ****

//* Define layer -- nch_ulvtll_mac_gate_dnw
nch_ulvtll_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_ulvtll_mac_gate_dnw_tmp02 = nch_ulvtll_mac_gate_dnw_tmp01 NOT NW
nch_ulvtll_mac_gate_dnw_tmp03 = nch_ulvtll_mac_gate_dnw_tmp02 NOT NT_N
nch_ulvtll_mac_gate_dnw_tmp04 = nch_ulvtll_mac_gate_dnw_tmp03 NOT OD12
nch_ulvtll_mac_gate_dnw_tmp05 = nch_ulvtll_mac_gate_dnw_tmp04 AND PO
nch_ulvtll_mac_gate_dnw_tmp06 = nch_ulvtll_mac_gate_dnw_tmp05 NOT VTELN
nch_ulvtll_mac_gate_dnw_tmp07 = nch_ulvtll_mac_gate_dnw_tmp06 NOT VTELP
nch_ulvtll_mac_gate_dnw_tmp08 = nch_ulvtll_mac_gate_dnw_tmp07 NOT VTULN
nch_ulvtll_mac_gate_dnw_tmp09 = nch_ulvtll_mac_gate_dnw_tmp08 NOT VTULP
nch_ulvtll_mac_gate_dnw_tmp10 = nch_ulvtll_mac_gate_dnw_tmp09 NOT VTLN
nch_ulvtll_mac_gate_dnw_tmp11 = nch_ulvtll_mac_gate_dnw_tmp10 NOT VTLP
nch_ulvtll_mac_gate_dnw_tmp12 = nch_ulvtll_mac_gate_dnw_tmp11 NOT VTSN
nch_ulvtll_mac_gate_dnw_tmp13 = nch_ulvtll_mac_gate_dnw_tmp12 NOT VTSP
nch_ulvtll_mac_gate_dnw_tmp14 = nch_ulvtll_mac_gate_dnw_tmp13 AND VTULNLL
nch_ulvtll_mac_gate_dnw_tmp15 = nch_ulvtll_mac_gate_dnw_tmp14 NOT VTULPLL
nch_ulvtll_mac_gate_dnw_tmp16 = nch_ulvtll_mac_gate_dnw_tmp15 NOT VTLNLL
nch_ulvtll_mac_gate_dnw_tmp17 = nch_ulvtll_mac_gate_dnw_tmp16 NOT VTLPLL
nch_ulvtll_mac_gate_dnw_tmp18 = nch_ulvtll_mac_gate_dnw_tmp17 AND NPi
nch_ulvtll_mac_gate_dnw_tmp19 = nch_ulvtll_mac_gate_dnw_tmp18 NOT PPi
nch_ulvtll_mac_gate_dnw_tmp20 = nch_ulvtll_mac_gate_dnw_tmp19 NOT OD12_15
nch_ulvtll_mac_gate_dnw_tmp21 = nch_ulvtll_mac_gate_dnw_tmp20 NOT VAR
nch_ulvtll_mac_gate_dnw_tmp22 = nch_ulvtll_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_ulvtll_mac_gate_dnw_tmp23 = nch_ulvtll_mac_gate_dnw_tmp22 NOT DIODMY
nch_ulvtll_mac_gate_dnw_tmp24 = nch_ulvtll_mac_gate_dnw_tmp23 NOT SR_ESD
nch_ulvtll_mac_gate_dnw_tmp25 = nch_ulvtll_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_ulvtll_mac_gate_dnw_tmp26 = nch_ulvtll_mac_gate_dnw_tmp25 NOT SDI_2
nch_ulvtll_mac_gate_dnw = nch_ulvtll_mac_gate_dnw_tmp26 AND dnwdmy


//***** Define connectivity/via layer -- nch_elvt_mac_gate ****

//* Define layer -- nch_elvt_mac_gate
nch_elvt_mac_gate_tmp01 = tngate3b AND OD
nch_elvt_mac_gate_tmp02 = nch_elvt_mac_gate_tmp01 NOT NW
nch_elvt_mac_gate_tmp03 = nch_elvt_mac_gate_tmp02 NOT NT_N
nch_elvt_mac_gate_tmp04 = nch_elvt_mac_gate_tmp03 NOT OD12
nch_elvt_mac_gate_tmp05 = nch_elvt_mac_gate_tmp04 AND PO
nch_elvt_mac_gate_tmp06 = nch_elvt_mac_gate_tmp05 AND VTELN
nch_elvt_mac_gate_tmp07 = nch_elvt_mac_gate_tmp06 NOT VTELP
nch_elvt_mac_gate_tmp08 = nch_elvt_mac_gate_tmp07 NOT VTULN
nch_elvt_mac_gate_tmp09 = nch_elvt_mac_gate_tmp08 NOT VTULP
nch_elvt_mac_gate_tmp10 = nch_elvt_mac_gate_tmp09 NOT VTLN
nch_elvt_mac_gate_tmp11 = nch_elvt_mac_gate_tmp10 NOT VTLP
nch_elvt_mac_gate_tmp12 = nch_elvt_mac_gate_tmp11 NOT VTSN
nch_elvt_mac_gate_tmp13 = nch_elvt_mac_gate_tmp12 NOT VTSP
nch_elvt_mac_gate_tmp14 = nch_elvt_mac_gate_tmp13 NOT VTULNLL
nch_elvt_mac_gate_tmp15 = nch_elvt_mac_gate_tmp14 NOT VTULPLL
nch_elvt_mac_gate_tmp16 = nch_elvt_mac_gate_tmp15 NOT VTLNLL
nch_elvt_mac_gate_tmp17 = nch_elvt_mac_gate_tmp16 NOT VTLPLL
nch_elvt_mac_gate_tmp18 = nch_elvt_mac_gate_tmp17 AND NPi
nch_elvt_mac_gate_tmp19 = nch_elvt_mac_gate_tmp18 NOT PPi
nch_elvt_mac_gate_tmp20 = nch_elvt_mac_gate_tmp19 NOT OD12_15
nch_elvt_mac_gate_tmp21 = nch_elvt_mac_gate_tmp20 NOT VAR
nch_elvt_mac_gate_tmp22 = nch_elvt_mac_gate_tmp21 NOT IBJTDMY
nch_elvt_mac_gate_tmp23 = nch_elvt_mac_gate_tmp22 NOT DIODMY
nch_elvt_mac_gate_tmp24 = nch_elvt_mac_gate_tmp23 NOT SR_ESD
nch_elvt_mac_gate_tmp25 = nch_elvt_mac_gate_tmp24 NOT HIA_DUMMY
nch_elvt_mac_gate_tmp26 = nch_elvt_mac_gate_tmp25 NOT SDI_2
nch_elvt_mac_gate = nch_elvt_mac_gate_tmp26 NOT dnwdmy


//***** Define connectivity/via layer -- nch_elvt_mac_gate_dnw ****

//* Define layer -- nch_elvt_mac_gate_dnw
nch_elvt_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_elvt_mac_gate_dnw_tmp02 = nch_elvt_mac_gate_dnw_tmp01 NOT NW
nch_elvt_mac_gate_dnw_tmp03 = nch_elvt_mac_gate_dnw_tmp02 NOT NT_N
nch_elvt_mac_gate_dnw_tmp04 = nch_elvt_mac_gate_dnw_tmp03 NOT OD12
nch_elvt_mac_gate_dnw_tmp05 = nch_elvt_mac_gate_dnw_tmp04 AND PO
nch_elvt_mac_gate_dnw_tmp06 = nch_elvt_mac_gate_dnw_tmp05 AND VTELN
nch_elvt_mac_gate_dnw_tmp07 = nch_elvt_mac_gate_dnw_tmp06 NOT VTELP
nch_elvt_mac_gate_dnw_tmp08 = nch_elvt_mac_gate_dnw_tmp07 NOT VTULN
nch_elvt_mac_gate_dnw_tmp09 = nch_elvt_mac_gate_dnw_tmp08 NOT VTULP
nch_elvt_mac_gate_dnw_tmp10 = nch_elvt_mac_gate_dnw_tmp09 NOT VTLN
nch_elvt_mac_gate_dnw_tmp11 = nch_elvt_mac_gate_dnw_tmp10 NOT VTLP
nch_elvt_mac_gate_dnw_tmp12 = nch_elvt_mac_gate_dnw_tmp11 NOT VTSN
nch_elvt_mac_gate_dnw_tmp13 = nch_elvt_mac_gate_dnw_tmp12 NOT VTSP
nch_elvt_mac_gate_dnw_tmp14 = nch_elvt_mac_gate_dnw_tmp13 NOT VTULNLL
nch_elvt_mac_gate_dnw_tmp15 = nch_elvt_mac_gate_dnw_tmp14 NOT VTULPLL
nch_elvt_mac_gate_dnw_tmp16 = nch_elvt_mac_gate_dnw_tmp15 NOT VTLNLL
nch_elvt_mac_gate_dnw_tmp17 = nch_elvt_mac_gate_dnw_tmp16 NOT VTLPLL
nch_elvt_mac_gate_dnw_tmp18 = nch_elvt_mac_gate_dnw_tmp17 AND NPi
nch_elvt_mac_gate_dnw_tmp19 = nch_elvt_mac_gate_dnw_tmp18 NOT PPi
nch_elvt_mac_gate_dnw_tmp20 = nch_elvt_mac_gate_dnw_tmp19 NOT OD12_15
nch_elvt_mac_gate_dnw_tmp21 = nch_elvt_mac_gate_dnw_tmp20 NOT VAR
nch_elvt_mac_gate_dnw_tmp22 = nch_elvt_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_elvt_mac_gate_dnw_tmp23 = nch_elvt_mac_gate_dnw_tmp22 NOT DIODMY
nch_elvt_mac_gate_dnw_tmp24 = nch_elvt_mac_gate_dnw_tmp23 NOT SR_ESD
nch_elvt_mac_gate_dnw_tmp25 = nch_elvt_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_elvt_mac_gate_dnw_tmp26 = nch_elvt_mac_gate_dnw_tmp25 NOT SDI_2
nch_elvt_mac_gate_dnw = nch_elvt_mac_gate_dnw_tmp26 AND dnwdmy


//* Define device -- nmos nch_flrsvt_mac

//* Define layer -- nch_flrsvt_mac_gate
nch_flrsvt_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrsvt_mac_gate_tmp02 = nch_flrsvt_mac_gate_tmp01 AND OD
nch_flrsvt_mac_gate_tmp03 = nch_flrsvt_mac_gate_tmp02 NOT NW
nch_flrsvt_mac_gate_tmp04 = nch_flrsvt_mac_gate_tmp03 NOT NT_N
nch_flrsvt_mac_gate_tmp05 = nch_flrsvt_mac_gate_tmp04 NOT OD12
nch_flrsvt_mac_gate_tmp06 = nch_flrsvt_mac_gate_tmp05 AND PO
nch_flrsvt_mac_gate_tmp07 = nch_flrsvt_mac_gate_tmp06 NOT VTELN
nch_flrsvt_mac_gate_tmp08 = nch_flrsvt_mac_gate_tmp07 NOT VTELP
nch_flrsvt_mac_gate_tmp09 = nch_flrsvt_mac_gate_tmp08 NOT VTULN
nch_flrsvt_mac_gate_tmp10 = nch_flrsvt_mac_gate_tmp09 NOT VTULP
nch_flrsvt_mac_gate_tmp11 = nch_flrsvt_mac_gate_tmp10 NOT VTLN
nch_flrsvt_mac_gate_tmp12 = nch_flrsvt_mac_gate_tmp11 NOT VTLP
nch_flrsvt_mac_gate_tmp13 = nch_flrsvt_mac_gate_tmp12 AND VTSN
nch_flrsvt_mac_gate_tmp14 = nch_flrsvt_mac_gate_tmp13 NOT VTSP
nch_flrsvt_mac_gate_tmp15 = nch_flrsvt_mac_gate_tmp14 NOT VTULNLL
nch_flrsvt_mac_gate_tmp16 = nch_flrsvt_mac_gate_tmp15 NOT VTULPLL
nch_flrsvt_mac_gate_tmp17 = nch_flrsvt_mac_gate_tmp16 NOT VTLNLL
nch_flrsvt_mac_gate_tmp18 = nch_flrsvt_mac_gate_tmp17 NOT VTLPLL
nch_flrsvt_mac_gate_tmp19 = nch_flrsvt_mac_gate_tmp18 AND NPi
nch_flrsvt_mac_gate_tmp20 = nch_flrsvt_mac_gate_tmp19 NOT PPi
nch_flrsvt_mac_gate_tmp21 = nch_flrsvt_mac_gate_tmp20 NOT OD12_15
nch_flrsvt_mac_gate_tmp22 = nch_flrsvt_mac_gate_tmp21 NOT VAR
nch_flrsvt_mac_gate_tmp23 = nch_flrsvt_mac_gate_tmp22 NOT IBJTDMY
nch_flrsvt_mac_gate_tmp24 = nch_flrsvt_mac_gate_tmp23 NOT DIODMY
nch_flrsvt_mac_gate_tmp25 = nch_flrsvt_mac_gate_tmp24 NOT SR_ESD
nch_flrsvt_mac_gate_tmp26 = nch_flrsvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrsvt_mac_gate_tmp27 = nch_flrsvt_mac_gate_tmp26 NOT SDI_2
nch_flrsvt_mac_gate = nch_flrsvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- nmos nch_flrlvt_mac

//* Define layer -- nch_flrlvt_mac_gate
nch_flrlvt_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrlvt_mac_gate_tmp02 = nch_flrlvt_mac_gate_tmp01 AND OD
nch_flrlvt_mac_gate_tmp03 = nch_flrlvt_mac_gate_tmp02 NOT NW
nch_flrlvt_mac_gate_tmp04 = nch_flrlvt_mac_gate_tmp03 NOT NT_N
nch_flrlvt_mac_gate_tmp05 = nch_flrlvt_mac_gate_tmp04 NOT OD12
nch_flrlvt_mac_gate_tmp06 = nch_flrlvt_mac_gate_tmp05 AND PO
nch_flrlvt_mac_gate_tmp07 = nch_flrlvt_mac_gate_tmp06 NOT VTELN
nch_flrlvt_mac_gate_tmp08 = nch_flrlvt_mac_gate_tmp07 NOT VTELP
nch_flrlvt_mac_gate_tmp09 = nch_flrlvt_mac_gate_tmp08 NOT VTULN
nch_flrlvt_mac_gate_tmp10 = nch_flrlvt_mac_gate_tmp09 NOT VTULP
nch_flrlvt_mac_gate_tmp11 = nch_flrlvt_mac_gate_tmp10 AND VTLN
nch_flrlvt_mac_gate_tmp12 = nch_flrlvt_mac_gate_tmp11 NOT VTLP
nch_flrlvt_mac_gate_tmp13 = nch_flrlvt_mac_gate_tmp12 NOT VTSN
nch_flrlvt_mac_gate_tmp14 = nch_flrlvt_mac_gate_tmp13 NOT VTSP
nch_flrlvt_mac_gate_tmp15 = nch_flrlvt_mac_gate_tmp14 NOT VTULNLL
nch_flrlvt_mac_gate_tmp16 = nch_flrlvt_mac_gate_tmp15 NOT VTULPLL
nch_flrlvt_mac_gate_tmp17 = nch_flrlvt_mac_gate_tmp16 NOT VTLNLL
nch_flrlvt_mac_gate_tmp18 = nch_flrlvt_mac_gate_tmp17 NOT VTLPLL
nch_flrlvt_mac_gate_tmp19 = nch_flrlvt_mac_gate_tmp18 AND NPi
nch_flrlvt_mac_gate_tmp20 = nch_flrlvt_mac_gate_tmp19 NOT PPi
nch_flrlvt_mac_gate_tmp21 = nch_flrlvt_mac_gate_tmp20 NOT OD12_15
nch_flrlvt_mac_gate_tmp22 = nch_flrlvt_mac_gate_tmp21 NOT VAR
nch_flrlvt_mac_gate_tmp23 = nch_flrlvt_mac_gate_tmp22 NOT IBJTDMY
nch_flrlvt_mac_gate_tmp24 = nch_flrlvt_mac_gate_tmp23 NOT DIODMY
nch_flrlvt_mac_gate_tmp25 = nch_flrlvt_mac_gate_tmp24 NOT SR_ESD
nch_flrlvt_mac_gate_tmp26 = nch_flrlvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrlvt_mac_gate_tmp27 = nch_flrlvt_mac_gate_tmp26 NOT SDI_2
nch_flrlvt_mac_gate = nch_flrlvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- nmos nch_flrlvtll_mac

//* Define layer -- nch_flrlvtll_mac_gate
nch_flrlvtll_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrlvtll_mac_gate_tmp02 = nch_flrlvtll_mac_gate_tmp01 AND OD
nch_flrlvtll_mac_gate_tmp03 = nch_flrlvtll_mac_gate_tmp02 NOT NW
nch_flrlvtll_mac_gate_tmp04 = nch_flrlvtll_mac_gate_tmp03 NOT NT_N
nch_flrlvtll_mac_gate_tmp05 = nch_flrlvtll_mac_gate_tmp04 NOT OD12
nch_flrlvtll_mac_gate_tmp06 = nch_flrlvtll_mac_gate_tmp05 AND PO
nch_flrlvtll_mac_gate_tmp07 = nch_flrlvtll_mac_gate_tmp06 NOT VTELN
nch_flrlvtll_mac_gate_tmp08 = nch_flrlvtll_mac_gate_tmp07 NOT VTELP
nch_flrlvtll_mac_gate_tmp09 = nch_flrlvtll_mac_gate_tmp08 NOT VTULN
nch_flrlvtll_mac_gate_tmp10 = nch_flrlvtll_mac_gate_tmp09 NOT VTULP
nch_flrlvtll_mac_gate_tmp11 = nch_flrlvtll_mac_gate_tmp10 NOT VTLN
nch_flrlvtll_mac_gate_tmp12 = nch_flrlvtll_mac_gate_tmp11 NOT VTLP
nch_flrlvtll_mac_gate_tmp13 = nch_flrlvtll_mac_gate_tmp12 NOT VTSN
nch_flrlvtll_mac_gate_tmp14 = nch_flrlvtll_mac_gate_tmp13 NOT VTSP
nch_flrlvtll_mac_gate_tmp15 = nch_flrlvtll_mac_gate_tmp14 NOT VTULNLL
nch_flrlvtll_mac_gate_tmp16 = nch_flrlvtll_mac_gate_tmp15 NOT VTULPLL
nch_flrlvtll_mac_gate_tmp17 = nch_flrlvtll_mac_gate_tmp16 AND VTLNLL
nch_flrlvtll_mac_gate_tmp18 = nch_flrlvtll_mac_gate_tmp17 NOT VTLPLL
nch_flrlvtll_mac_gate_tmp19 = nch_flrlvtll_mac_gate_tmp18 AND NPi
nch_flrlvtll_mac_gate_tmp20 = nch_flrlvtll_mac_gate_tmp19 NOT PPi
nch_flrlvtll_mac_gate_tmp21 = nch_flrlvtll_mac_gate_tmp20 NOT OD12_15
nch_flrlvtll_mac_gate_tmp22 = nch_flrlvtll_mac_gate_tmp21 NOT VAR
nch_flrlvtll_mac_gate_tmp23 = nch_flrlvtll_mac_gate_tmp22 NOT IBJTDMY
nch_flrlvtll_mac_gate_tmp24 = nch_flrlvtll_mac_gate_tmp23 NOT DIODMY
nch_flrlvtll_mac_gate_tmp25 = nch_flrlvtll_mac_gate_tmp24 NOT SR_ESD
nch_flrlvtll_mac_gate_tmp26 = nch_flrlvtll_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrlvtll_mac_gate_tmp27 = nch_flrlvtll_mac_gate_tmp26 NOT SDI_2
nch_flrlvtll_mac_gate = nch_flrlvtll_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- nmos nch_flrulvt_mac

//* Define layer -- nch_flrulvt_mac_gate
nch_flrulvt_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrulvt_mac_gate_tmp02 = nch_flrulvt_mac_gate_tmp01 AND OD
nch_flrulvt_mac_gate_tmp03 = nch_flrulvt_mac_gate_tmp02 NOT NW
nch_flrulvt_mac_gate_tmp04 = nch_flrulvt_mac_gate_tmp03 NOT NT_N
nch_flrulvt_mac_gate_tmp05 = nch_flrulvt_mac_gate_tmp04 NOT OD12
nch_flrulvt_mac_gate_tmp06 = nch_flrulvt_mac_gate_tmp05 AND PO
nch_flrulvt_mac_gate_tmp07 = nch_flrulvt_mac_gate_tmp06 NOT VTELN
nch_flrulvt_mac_gate_tmp08 = nch_flrulvt_mac_gate_tmp07 NOT VTELP
nch_flrulvt_mac_gate_tmp09 = nch_flrulvt_mac_gate_tmp08 AND VTULN
nch_flrulvt_mac_gate_tmp10 = nch_flrulvt_mac_gate_tmp09 NOT VTULP
nch_flrulvt_mac_gate_tmp11 = nch_flrulvt_mac_gate_tmp10 NOT VTLN
nch_flrulvt_mac_gate_tmp12 = nch_flrulvt_mac_gate_tmp11 NOT VTLP
nch_flrulvt_mac_gate_tmp13 = nch_flrulvt_mac_gate_tmp12 NOT VTSN
nch_flrulvt_mac_gate_tmp14 = nch_flrulvt_mac_gate_tmp13 NOT VTSP
nch_flrulvt_mac_gate_tmp15 = nch_flrulvt_mac_gate_tmp14 NOT VTULNLL
nch_flrulvt_mac_gate_tmp16 = nch_flrulvt_mac_gate_tmp15 NOT VTULPLL
nch_flrulvt_mac_gate_tmp17 = nch_flrulvt_mac_gate_tmp16 NOT VTLNLL
nch_flrulvt_mac_gate_tmp18 = nch_flrulvt_mac_gate_tmp17 NOT VTLPLL
nch_flrulvt_mac_gate_tmp19 = nch_flrulvt_mac_gate_tmp18 AND NPi
nch_flrulvt_mac_gate_tmp20 = nch_flrulvt_mac_gate_tmp19 NOT PPi
nch_flrulvt_mac_gate_tmp21 = nch_flrulvt_mac_gate_tmp20 NOT OD12_15
nch_flrulvt_mac_gate_tmp22 = nch_flrulvt_mac_gate_tmp21 NOT VAR
nch_flrulvt_mac_gate_tmp23 = nch_flrulvt_mac_gate_tmp22 NOT IBJTDMY
nch_flrulvt_mac_gate_tmp24 = nch_flrulvt_mac_gate_tmp23 NOT DIODMY
nch_flrulvt_mac_gate_tmp25 = nch_flrulvt_mac_gate_tmp24 NOT SR_ESD
nch_flrulvt_mac_gate_tmp26 = nch_flrulvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrulvt_mac_gate_tmp27 = nch_flrulvt_mac_gate_tmp26 NOT SDI_2
nch_flrulvt_mac_gate = nch_flrulvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- nmos nch_flrulvtll_mac

//* Define layer -- nch_flrulvtll_mac_gate
nch_flrulvtll_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrulvtll_mac_gate_tmp02 = nch_flrulvtll_mac_gate_tmp01 AND OD
nch_flrulvtll_mac_gate_tmp03 = nch_flrulvtll_mac_gate_tmp02 NOT NW
nch_flrulvtll_mac_gate_tmp04 = nch_flrulvtll_mac_gate_tmp03 NOT NT_N
nch_flrulvtll_mac_gate_tmp05 = nch_flrulvtll_mac_gate_tmp04 NOT OD12
nch_flrulvtll_mac_gate_tmp06 = nch_flrulvtll_mac_gate_tmp05 AND PO
nch_flrulvtll_mac_gate_tmp07 = nch_flrulvtll_mac_gate_tmp06 NOT VTELN
nch_flrulvtll_mac_gate_tmp08 = nch_flrulvtll_mac_gate_tmp07 NOT VTELP
nch_flrulvtll_mac_gate_tmp09 = nch_flrulvtll_mac_gate_tmp08 NOT VTULN
nch_flrulvtll_mac_gate_tmp10 = nch_flrulvtll_mac_gate_tmp09 NOT VTULP
nch_flrulvtll_mac_gate_tmp11 = nch_flrulvtll_mac_gate_tmp10 NOT VTLN
nch_flrulvtll_mac_gate_tmp12 = nch_flrulvtll_mac_gate_tmp11 NOT VTLP
nch_flrulvtll_mac_gate_tmp13 = nch_flrulvtll_mac_gate_tmp12 NOT VTSN
nch_flrulvtll_mac_gate_tmp14 = nch_flrulvtll_mac_gate_tmp13 NOT VTSP
nch_flrulvtll_mac_gate_tmp15 = nch_flrulvtll_mac_gate_tmp14 AND VTULNLL
nch_flrulvtll_mac_gate_tmp16 = nch_flrulvtll_mac_gate_tmp15 NOT VTULPLL
nch_flrulvtll_mac_gate_tmp17 = nch_flrulvtll_mac_gate_tmp16 NOT VTLNLL
nch_flrulvtll_mac_gate_tmp18 = nch_flrulvtll_mac_gate_tmp17 NOT VTLPLL
nch_flrulvtll_mac_gate_tmp19 = nch_flrulvtll_mac_gate_tmp18 AND NPi
nch_flrulvtll_mac_gate_tmp20 = nch_flrulvtll_mac_gate_tmp19 NOT PPi
nch_flrulvtll_mac_gate_tmp21 = nch_flrulvtll_mac_gate_tmp20 NOT OD12_15
nch_flrulvtll_mac_gate_tmp22 = nch_flrulvtll_mac_gate_tmp21 NOT VAR
nch_flrulvtll_mac_gate_tmp23 = nch_flrulvtll_mac_gate_tmp22 NOT IBJTDMY
nch_flrulvtll_mac_gate_tmp24 = nch_flrulvtll_mac_gate_tmp23 NOT DIODMY
nch_flrulvtll_mac_gate_tmp25 = nch_flrulvtll_mac_gate_tmp24 NOT SR_ESD
nch_flrulvtll_mac_gate_tmp26 = nch_flrulvtll_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrulvtll_mac_gate_tmp27 = nch_flrulvtll_mac_gate_tmp26 NOT SDI_2
nch_flrulvtll_mac_gate = nch_flrulvtll_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- nmos nch_flrelvt_mac

//* Define layer -- nch_flrelvt_mac_gate
nch_flrelvt_mac_gate_tmp01 = tngate3a NOT FB1
nch_flrelvt_mac_gate_tmp02 = nch_flrelvt_mac_gate_tmp01 AND OD
nch_flrelvt_mac_gate_tmp03 = nch_flrelvt_mac_gate_tmp02 NOT NW
nch_flrelvt_mac_gate_tmp04 = nch_flrelvt_mac_gate_tmp03 NOT NT_N
nch_flrelvt_mac_gate_tmp05 = nch_flrelvt_mac_gate_tmp04 NOT OD12
nch_flrelvt_mac_gate_tmp06 = nch_flrelvt_mac_gate_tmp05 AND PO
nch_flrelvt_mac_gate_tmp07 = nch_flrelvt_mac_gate_tmp06 AND VTELN
nch_flrelvt_mac_gate_tmp08 = nch_flrelvt_mac_gate_tmp07 NOT VTELP
nch_flrelvt_mac_gate_tmp09 = nch_flrelvt_mac_gate_tmp08 NOT VTULN
nch_flrelvt_mac_gate_tmp10 = nch_flrelvt_mac_gate_tmp09 NOT VTULP
nch_flrelvt_mac_gate_tmp11 = nch_flrelvt_mac_gate_tmp10 NOT VTLN
nch_flrelvt_mac_gate_tmp12 = nch_flrelvt_mac_gate_tmp11 NOT VTLP
nch_flrelvt_mac_gate_tmp13 = nch_flrelvt_mac_gate_tmp12 NOT VTSN
nch_flrelvt_mac_gate_tmp14 = nch_flrelvt_mac_gate_tmp13 NOT VTSP
nch_flrelvt_mac_gate_tmp15 = nch_flrelvt_mac_gate_tmp14 NOT VTULNLL
nch_flrelvt_mac_gate_tmp16 = nch_flrelvt_mac_gate_tmp15 NOT VTULPLL
nch_flrelvt_mac_gate_tmp17 = nch_flrelvt_mac_gate_tmp16 NOT VTLNLL
nch_flrelvt_mac_gate_tmp18 = nch_flrelvt_mac_gate_tmp17 NOT VTLPLL
nch_flrelvt_mac_gate_tmp19 = nch_flrelvt_mac_gate_tmp18 AND NPi
nch_flrelvt_mac_gate_tmp20 = nch_flrelvt_mac_gate_tmp19 NOT PPi
nch_flrelvt_mac_gate_tmp21 = nch_flrelvt_mac_gate_tmp20 NOT OD12_15
nch_flrelvt_mac_gate_tmp22 = nch_flrelvt_mac_gate_tmp21 NOT VAR
nch_flrelvt_mac_gate_tmp23 = nch_flrelvt_mac_gate_tmp22 NOT IBJTDMY
nch_flrelvt_mac_gate_tmp24 = nch_flrelvt_mac_gate_tmp23 NOT DIODMY
nch_flrelvt_mac_gate_tmp25 = nch_flrelvt_mac_gate_tmp24 NOT SR_ESD
nch_flrelvt_mac_gate_tmp26 = nch_flrelvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_flrelvt_mac_gate_tmp27 = nch_flrelvt_mac_gate_tmp26 NOT SDI_2
nch_flrelvt_mac_gate = nch_flrelvt_mac_gate_tmp27 AND FILLER_MOS


//***** Define connectivity/via layer -- nch_12_mac_gate ****

//* Define layer -- nch_12_mac_gate
nch_12_mac_gate_tmp01 = tngate3b AND OD
nch_12_mac_gate_tmp02 = nch_12_mac_gate_tmp01 NOT NW
nch_12_mac_gate_tmp03 = nch_12_mac_gate_tmp02 NOT NT_N
nch_12_mac_gate_tmp04 = nch_12_mac_gate_tmp03 AND OD12
nch_12_mac_gate_tmp05 = nch_12_mac_gate_tmp04 AND PO
nch_12_mac_gate_tmp06 = nch_12_mac_gate_tmp05 NOT VTELN
nch_12_mac_gate_tmp07 = nch_12_mac_gate_tmp06 NOT VTELP
nch_12_mac_gate_tmp08 = nch_12_mac_gate_tmp07 NOT VTULN
nch_12_mac_gate_tmp09 = nch_12_mac_gate_tmp08 NOT VTULP
nch_12_mac_gate_tmp10 = nch_12_mac_gate_tmp09 NOT VTLN
nch_12_mac_gate_tmp11 = nch_12_mac_gate_tmp10 NOT VTLP
nch_12_mac_gate_tmp12 = nch_12_mac_gate_tmp11 NOT VTSN
nch_12_mac_gate_tmp13 = nch_12_mac_gate_tmp12 NOT VTSP
nch_12_mac_gate_tmp14 = nch_12_mac_gate_tmp13 NOT VTULNLL
nch_12_mac_gate_tmp15 = nch_12_mac_gate_tmp14 NOT VTULPLL
nch_12_mac_gate_tmp16 = nch_12_mac_gate_tmp15 NOT VTLNLL
nch_12_mac_gate_tmp17 = nch_12_mac_gate_tmp16 NOT VTLPLL
nch_12_mac_gate_tmp18 = nch_12_mac_gate_tmp17 AND NPi
nch_12_mac_gate_tmp19 = nch_12_mac_gate_tmp18 NOT PPi
nch_12_mac_gate_tmp20 = nch_12_mac_gate_tmp19 NOT OD12_15
nch_12_mac_gate_tmp21 = nch_12_mac_gate_tmp20 NOT VAR
nch_12_mac_gate_tmp22 = nch_12_mac_gate_tmp21 NOT IBJTDMY
nch_12_mac_gate_tmp23 = nch_12_mac_gate_tmp22 NOT DIODMY
nch_12_mac_gate_tmp24 = nch_12_mac_gate_tmp23 NOT HIA_DUMMY
nch_12_mac_gate_tmp25 = nch_12_mac_gate_tmp24 NOT SDI_2
nch_12_mac_gate = nch_12_mac_gate_tmp25 NOT dnwdmy


//***** Define connectivity/via layer -- nch_12_mac_gate_dnw ****

//* Define layer -- nch_12_mac_gate_dnw
nch_12_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_12_mac_gate_dnw_tmp02 = nch_12_mac_gate_dnw_tmp01 NOT NW
nch_12_mac_gate_dnw_tmp03 = nch_12_mac_gate_dnw_tmp02 NOT NT_N
nch_12_mac_gate_dnw_tmp04 = nch_12_mac_gate_dnw_tmp03 AND OD12
nch_12_mac_gate_dnw_tmp05 = nch_12_mac_gate_dnw_tmp04 AND PO
nch_12_mac_gate_dnw_tmp06 = nch_12_mac_gate_dnw_tmp05 NOT VTELN
nch_12_mac_gate_dnw_tmp07 = nch_12_mac_gate_dnw_tmp06 NOT VTELP
nch_12_mac_gate_dnw_tmp08 = nch_12_mac_gate_dnw_tmp07 NOT VTULN
nch_12_mac_gate_dnw_tmp09 = nch_12_mac_gate_dnw_tmp08 NOT VTULP
nch_12_mac_gate_dnw_tmp10 = nch_12_mac_gate_dnw_tmp09 NOT VTLN
nch_12_mac_gate_dnw_tmp11 = nch_12_mac_gate_dnw_tmp10 NOT VTLP
nch_12_mac_gate_dnw_tmp12 = nch_12_mac_gate_dnw_tmp11 NOT VTSN
nch_12_mac_gate_dnw_tmp13 = nch_12_mac_gate_dnw_tmp12 NOT VTSP
nch_12_mac_gate_dnw_tmp14 = nch_12_mac_gate_dnw_tmp13 NOT VTULNLL
nch_12_mac_gate_dnw_tmp15 = nch_12_mac_gate_dnw_tmp14 NOT VTULPLL
nch_12_mac_gate_dnw_tmp16 = nch_12_mac_gate_dnw_tmp15 NOT VTLNLL
nch_12_mac_gate_dnw_tmp17 = nch_12_mac_gate_dnw_tmp16 NOT VTLPLL
nch_12_mac_gate_dnw_tmp18 = nch_12_mac_gate_dnw_tmp17 AND NPi
nch_12_mac_gate_dnw_tmp19 = nch_12_mac_gate_dnw_tmp18 NOT PPi
nch_12_mac_gate_dnw_tmp20 = nch_12_mac_gate_dnw_tmp19 NOT OD12_15
nch_12_mac_gate_dnw_tmp21 = nch_12_mac_gate_dnw_tmp20 NOT VAR
nch_12_mac_gate_dnw_tmp22 = nch_12_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_12_mac_gate_dnw_tmp23 = nch_12_mac_gate_dnw_tmp22 NOT DIODMY
nch_12_mac_gate_dnw_tmp24 = nch_12_mac_gate_dnw_tmp23 NOT HIA_DUMMY
nch_12_mac_gate_dnw_tmp25 = nch_12_mac_gate_dnw_tmp24 NOT SDI_2
nch_12_mac_gate_dnw = nch_12_mac_gate_dnw_tmp25 AND dnwdmy


//* Define device -- nmos nch_12od15_mac

//* Define layer -- nch_12od15_mac_gate
nch_12od15_mac_gate_tmp01 = tngate3b AND OD
nch_12od15_mac_gate_tmp02 = nch_12od15_mac_gate_tmp01 NOT NW
nch_12od15_mac_gate_tmp03 = nch_12od15_mac_gate_tmp02 NOT NT_N
nch_12od15_mac_gate_tmp04 = nch_12od15_mac_gate_tmp03 AND OD12
nch_12od15_mac_gate_tmp05 = nch_12od15_mac_gate_tmp04 AND PO
nch_12od15_mac_gate_tmp06 = nch_12od15_mac_gate_tmp05 NOT VTELN
nch_12od15_mac_gate_tmp07 = nch_12od15_mac_gate_tmp06 NOT VTELP
nch_12od15_mac_gate_tmp08 = nch_12od15_mac_gate_tmp07 NOT VTULN
nch_12od15_mac_gate_tmp09 = nch_12od15_mac_gate_tmp08 NOT VTULP
nch_12od15_mac_gate_tmp10 = nch_12od15_mac_gate_tmp09 NOT VTLN
nch_12od15_mac_gate_tmp11 = nch_12od15_mac_gate_tmp10 NOT VTLP
nch_12od15_mac_gate_tmp12 = nch_12od15_mac_gate_tmp11 NOT VTSN
nch_12od15_mac_gate_tmp13 = nch_12od15_mac_gate_tmp12 NOT VTSP
nch_12od15_mac_gate_tmp14 = nch_12od15_mac_gate_tmp13 NOT VTULNLL
nch_12od15_mac_gate_tmp15 = nch_12od15_mac_gate_tmp14 NOT VTULPLL
nch_12od15_mac_gate_tmp16 = nch_12od15_mac_gate_tmp15 NOT VTLNLL
nch_12od15_mac_gate_tmp17 = nch_12od15_mac_gate_tmp16 NOT VTLPLL
nch_12od15_mac_gate_tmp18 = nch_12od15_mac_gate_tmp17 AND NPi
nch_12od15_mac_gate_tmp19 = nch_12od15_mac_gate_tmp18 NOT PPi
nch_12od15_mac_gate_tmp20 = nch_12od15_mac_gate_tmp19 AND OD12_15
nch_12od15_mac_gate_tmp21 = nch_12od15_mac_gate_tmp20 NOT VAR
nch_12od15_mac_gate_tmp22 = nch_12od15_mac_gate_tmp21 NOT IBJTDMY
nch_12od15_mac_gate_tmp23 = nch_12od15_mac_gate_tmp22 NOT DIODMY
nch_12od15_mac_gate_tmp24 = nch_12od15_mac_gate_tmp23 NOT HIA_DUMMY
nch_12od15_mac_gate_tmp25 = nch_12od15_mac_gate_tmp24 NOT SDI_2
nch_12od15_mac_gate = nch_12od15_mac_gate_tmp25 NOT dnwdmy


//* Define device -- nmos nch_12od15_dnw_mac

//* Define layer -- nch_12od15_mac_gate_dnw
nch_12od15_mac_gate_dnw_tmp01 = tngate3b AND OD
nch_12od15_mac_gate_dnw_tmp02 = nch_12od15_mac_gate_dnw_tmp01 NOT NW
nch_12od15_mac_gate_dnw_tmp03 = nch_12od15_mac_gate_dnw_tmp02 NOT NT_N
nch_12od15_mac_gate_dnw_tmp04 = nch_12od15_mac_gate_dnw_tmp03 AND OD12
nch_12od15_mac_gate_dnw_tmp05 = nch_12od15_mac_gate_dnw_tmp04 AND PO
nch_12od15_mac_gate_dnw_tmp06 = nch_12od15_mac_gate_dnw_tmp05 NOT VTELN
nch_12od15_mac_gate_dnw_tmp07 = nch_12od15_mac_gate_dnw_tmp06 NOT VTELP
nch_12od15_mac_gate_dnw_tmp08 = nch_12od15_mac_gate_dnw_tmp07 NOT VTULN
nch_12od15_mac_gate_dnw_tmp09 = nch_12od15_mac_gate_dnw_tmp08 NOT VTULP
nch_12od15_mac_gate_dnw_tmp10 = nch_12od15_mac_gate_dnw_tmp09 NOT VTLN
nch_12od15_mac_gate_dnw_tmp11 = nch_12od15_mac_gate_dnw_tmp10 NOT VTLP
nch_12od15_mac_gate_dnw_tmp12 = nch_12od15_mac_gate_dnw_tmp11 NOT VTSN
nch_12od15_mac_gate_dnw_tmp13 = nch_12od15_mac_gate_dnw_tmp12 NOT VTSP
nch_12od15_mac_gate_dnw_tmp14 = nch_12od15_mac_gate_dnw_tmp13 NOT VTULNLL
nch_12od15_mac_gate_dnw_tmp15 = nch_12od15_mac_gate_dnw_tmp14 NOT VTULPLL
nch_12od15_mac_gate_dnw_tmp16 = nch_12od15_mac_gate_dnw_tmp15 NOT VTLNLL
nch_12od15_mac_gate_dnw_tmp17 = nch_12od15_mac_gate_dnw_tmp16 NOT VTLPLL
nch_12od15_mac_gate_dnw_tmp18 = nch_12od15_mac_gate_dnw_tmp17 AND NPi
nch_12od15_mac_gate_dnw_tmp19 = nch_12od15_mac_gate_dnw_tmp18 NOT PPi
nch_12od15_mac_gate_dnw_tmp20 = nch_12od15_mac_gate_dnw_tmp19 AND OD12_15
nch_12od15_mac_gate_dnw_tmp21 = nch_12od15_mac_gate_dnw_tmp20 NOT VAR
nch_12od15_mac_gate_dnw_tmp22 = nch_12od15_mac_gate_dnw_tmp21 NOT IBJTDMY
nch_12od15_mac_gate_dnw_tmp23 = nch_12od15_mac_gate_dnw_tmp22 NOT DIODMY
nch_12od15_mac_gate_dnw_tmp24 = nch_12od15_mac_gate_dnw_tmp23 NOT HIA_DUMMY
nch_12od15_mac_gate_dnw_tmp25 = nch_12od15_mac_gate_dnw_tmp24 NOT SDI_2
nch_12od15_mac_gate_dnw = nch_12od15_mac_gate_dnw_tmp25 AND dnwdmy


//* Define device -- lddn nch_hia12_mac

//* Define layer -- ngate_hia12_mac
ngate_hia12_mac_tmp01 = ngate_hia_reg NOT DNW
ngate_hia12_mac_tmp02 = ngate_hia12_mac_tmp01 AND OD
ngate_hia12_mac_tmp03 = ngate_hia12_mac_tmp02 NOT NW
ngate_hia12_mac_tmp04 = ngate_hia12_mac_tmp03 NOT NT_N
ngate_hia12_mac_tmp05 = ngate_hia12_mac_tmp04 AND OD12
ngate_hia12_mac_tmp06 = ngate_hia12_mac_tmp05 AND PO
ngate_hia12_mac_tmp07 = ngate_hia12_mac_tmp06 NOT VTEL_Ni
ngate_hia12_mac_tmp08 = ngate_hia12_mac_tmp07 NOT VTEL_Pi
ngate_hia12_mac_tmp09 = ngate_hia12_mac_tmp08 NOT VTUL_Ni
ngate_hia12_mac_tmp10 = ngate_hia12_mac_tmp09 NOT VTUL_Pi
ngate_hia12_mac_tmp11 = ngate_hia12_mac_tmp10 NOT VTL_Ni
ngate_hia12_mac_tmp12 = ngate_hia12_mac_tmp11 NOT VTL_Pi
ngate_hia12_mac_tmp13 = ngate_hia12_mac_tmp12 NOT VTS_Ni
ngate_hia12_mac_tmp14 = ngate_hia12_mac_tmp13 NOT VTS_Pi
ngate_hia12_mac_tmp15 = ngate_hia12_mac_tmp14 NOT VTULN_LL
ngate_hia12_mac_tmp16 = ngate_hia12_mac_tmp15 NOT VTULP_LL
ngate_hia12_mac_tmp17 = ngate_hia12_mac_tmp16 NOT VTLN_LL
ngate_hia12_mac_tmp18 = ngate_hia12_mac_tmp17 NOT VTLP_LL
ngate_hia12_mac_tmp19 = ngate_hia12_mac_tmp18 AND NPi
ngate_hia12_mac_tmp20 = ngate_hia12_mac_tmp19 NOT PPi
ngate_hia12_mac_tmp21 = ngate_hia12_mac_tmp20 NOT VAR
ngate_hia12_mac_tmp22 = ngate_hia12_mac_tmp21 NOT IBJTDMY
ngate_hia12_mac_tmp23 = ngate_hia12_mac_tmp22 NOT DIODMY
ngate_hia12_mac_tmp24 = ngate_hia12_mac_tmp23 AND SR_ESD
ngate_hia12_mac_tmp25 = ngate_hia12_mac_tmp24 AND SDI
ngate_hia12_mac = ngate_hia12_mac_tmp25 NOT HIA_DUMMY


//***** Define connectivity/via layer -- pch_svt_mac_gate ****

//* Define layer -- pch_svt_mac_gate
pch_svt_mac_gate_tmp01 = tpgate3a AND OD
pch_svt_mac_gate_tmp02 = pch_svt_mac_gate_tmp01 AND NW
pch_svt_mac_gate_tmp03 = pch_svt_mac_gate_tmp02 NOT NT_N
pch_svt_mac_gate_tmp04 = pch_svt_mac_gate_tmp03 NOT OD12
pch_svt_mac_gate_tmp05 = pch_svt_mac_gate_tmp04 AND PO
pch_svt_mac_gate_tmp06 = pch_svt_mac_gate_tmp05 NOT VTELN
pch_svt_mac_gate_tmp07 = pch_svt_mac_gate_tmp06 NOT VTELP
pch_svt_mac_gate_tmp08 = pch_svt_mac_gate_tmp07 NOT VTULN
pch_svt_mac_gate_tmp09 = pch_svt_mac_gate_tmp08 NOT VTULP
pch_svt_mac_gate_tmp10 = pch_svt_mac_gate_tmp09 NOT VTLN
pch_svt_mac_gate_tmp11 = pch_svt_mac_gate_tmp10 NOT VTLP
pch_svt_mac_gate_tmp12 = pch_svt_mac_gate_tmp11 NOT VTSN
pch_svt_mac_gate_tmp13 = pch_svt_mac_gate_tmp12 AND VTSP
pch_svt_mac_gate_tmp14 = pch_svt_mac_gate_tmp13 NOT VTULNLL
pch_svt_mac_gate_tmp15 = pch_svt_mac_gate_tmp14 NOT VTULPLL
pch_svt_mac_gate_tmp16 = pch_svt_mac_gate_tmp15 NOT VTLNLL
pch_svt_mac_gate_tmp17 = pch_svt_mac_gate_tmp16 NOT VTLPLL
pch_svt_mac_gate_tmp18 = pch_svt_mac_gate_tmp17 NOT NPi
pch_svt_mac_gate_tmp19 = pch_svt_mac_gate_tmp18 AND PPi
pch_svt_mac_gate_tmp20 = pch_svt_mac_gate_tmp19 NOT OD12_15
pch_svt_mac_gate_tmp21 = pch_svt_mac_gate_tmp20 NOT VAR
pch_svt_mac_gate_tmp22 = pch_svt_mac_gate_tmp21 NOT IBJTDMY
pch_svt_mac_gate_tmp23 = pch_svt_mac_gate_tmp22 NOT DIODMY
pch_svt_mac_gate_tmp24 = pch_svt_mac_gate_tmp23 NOT SR_ESD
pch_svt_mac_gate_tmp25 = pch_svt_mac_gate_tmp24 NOT HIA_DUMMY
pch_svt_mac_gate = pch_svt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- nxwell ****
NWDMY = NWDMYi OR NWDMY1 
nxwell = NW NOT NWDMY 

//***** Define connectivity/via layer -- pch_lvt_mac_gate ****

//* Define layer -- pch_lvt_mac_gate
pch_lvt_mac_gate_tmp01 = tpgate3a AND OD
pch_lvt_mac_gate_tmp02 = pch_lvt_mac_gate_tmp01 AND NW
pch_lvt_mac_gate_tmp03 = pch_lvt_mac_gate_tmp02 NOT NT_N
pch_lvt_mac_gate_tmp04 = pch_lvt_mac_gate_tmp03 NOT OD12
pch_lvt_mac_gate_tmp05 = pch_lvt_mac_gate_tmp04 AND PO
pch_lvt_mac_gate_tmp06 = pch_lvt_mac_gate_tmp05 NOT VTELN
pch_lvt_mac_gate_tmp07 = pch_lvt_mac_gate_tmp06 NOT VTELP
pch_lvt_mac_gate_tmp08 = pch_lvt_mac_gate_tmp07 NOT VTULN
pch_lvt_mac_gate_tmp09 = pch_lvt_mac_gate_tmp08 NOT VTULP
pch_lvt_mac_gate_tmp10 = pch_lvt_mac_gate_tmp09 NOT VTLN
pch_lvt_mac_gate_tmp11 = pch_lvt_mac_gate_tmp10 AND VTLP
pch_lvt_mac_gate_tmp12 = pch_lvt_mac_gate_tmp11 NOT VTSN
pch_lvt_mac_gate_tmp13 = pch_lvt_mac_gate_tmp12 NOT VTSP
pch_lvt_mac_gate_tmp14 = pch_lvt_mac_gate_tmp13 NOT VTULNLL
pch_lvt_mac_gate_tmp15 = pch_lvt_mac_gate_tmp14 NOT VTULPLL
pch_lvt_mac_gate_tmp16 = pch_lvt_mac_gate_tmp15 NOT VTLNLL
pch_lvt_mac_gate_tmp17 = pch_lvt_mac_gate_tmp16 NOT VTLPLL
pch_lvt_mac_gate_tmp18 = pch_lvt_mac_gate_tmp17 NOT NPi
pch_lvt_mac_gate_tmp19 = pch_lvt_mac_gate_tmp18 AND PPi
pch_lvt_mac_gate_tmp20 = pch_lvt_mac_gate_tmp19 NOT OD12_15
pch_lvt_mac_gate_tmp21 = pch_lvt_mac_gate_tmp20 NOT VAR
pch_lvt_mac_gate_tmp22 = pch_lvt_mac_gate_tmp21 NOT IBJTDMY
pch_lvt_mac_gate_tmp23 = pch_lvt_mac_gate_tmp22 NOT DIODMY
pch_lvt_mac_gate_tmp24 = pch_lvt_mac_gate_tmp23 NOT SR_ESD
pch_lvt_mac_gate_tmp25 = pch_lvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_lvt_mac_gate = pch_lvt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_lvtll_mac_gate ****

//* Define layer -- pch_lvtll_mac_gate
pch_lvtll_mac_gate_tmp01 = tpgate3a AND OD
pch_lvtll_mac_gate_tmp02 = pch_lvtll_mac_gate_tmp01 AND NW
pch_lvtll_mac_gate_tmp03 = pch_lvtll_mac_gate_tmp02 NOT NT_N
pch_lvtll_mac_gate_tmp04 = pch_lvtll_mac_gate_tmp03 NOT OD12
pch_lvtll_mac_gate_tmp05 = pch_lvtll_mac_gate_tmp04 AND PO
pch_lvtll_mac_gate_tmp06 = pch_lvtll_mac_gate_tmp05 NOT VTELN
pch_lvtll_mac_gate_tmp07 = pch_lvtll_mac_gate_tmp06 NOT VTELP
pch_lvtll_mac_gate_tmp08 = pch_lvtll_mac_gate_tmp07 NOT VTULN
pch_lvtll_mac_gate_tmp09 = pch_lvtll_mac_gate_tmp08 NOT VTULP
pch_lvtll_mac_gate_tmp10 = pch_lvtll_mac_gate_tmp09 NOT VTLN
pch_lvtll_mac_gate_tmp11 = pch_lvtll_mac_gate_tmp10 NOT VTLP
pch_lvtll_mac_gate_tmp12 = pch_lvtll_mac_gate_tmp11 NOT VTSN
pch_lvtll_mac_gate_tmp13 = pch_lvtll_mac_gate_tmp12 NOT VTSP
pch_lvtll_mac_gate_tmp14 = pch_lvtll_mac_gate_tmp13 NOT VTULNLL
pch_lvtll_mac_gate_tmp15 = pch_lvtll_mac_gate_tmp14 NOT VTULPLL
pch_lvtll_mac_gate_tmp16 = pch_lvtll_mac_gate_tmp15 NOT VTLNLL
pch_lvtll_mac_gate_tmp17 = pch_lvtll_mac_gate_tmp16 AND VTLPLL
pch_lvtll_mac_gate_tmp18 = pch_lvtll_mac_gate_tmp17 NOT NPi
pch_lvtll_mac_gate_tmp19 = pch_lvtll_mac_gate_tmp18 AND PPi
pch_lvtll_mac_gate_tmp20 = pch_lvtll_mac_gate_tmp19 NOT OD12_15
pch_lvtll_mac_gate_tmp21 = pch_lvtll_mac_gate_tmp20 NOT VAR
pch_lvtll_mac_gate_tmp22 = pch_lvtll_mac_gate_tmp21 NOT IBJTDMY
pch_lvtll_mac_gate_tmp23 = pch_lvtll_mac_gate_tmp22 NOT DIODMY
pch_lvtll_mac_gate_tmp24 = pch_lvtll_mac_gate_tmp23 NOT SR_ESD
pch_lvtll_mac_gate_tmp25 = pch_lvtll_mac_gate_tmp24 NOT HIA_DUMMY
pch_lvtll_mac_gate = pch_lvtll_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_ulvt_mac_gate ****

//* Define layer -- pch_ulvt_mac_gate
pch_ulvt_mac_gate_tmp01 = tpgate3a AND OD
pch_ulvt_mac_gate_tmp02 = pch_ulvt_mac_gate_tmp01 AND NW
pch_ulvt_mac_gate_tmp03 = pch_ulvt_mac_gate_tmp02 NOT NT_N
pch_ulvt_mac_gate_tmp04 = pch_ulvt_mac_gate_tmp03 NOT OD12
pch_ulvt_mac_gate_tmp05 = pch_ulvt_mac_gate_tmp04 AND PO
pch_ulvt_mac_gate_tmp06 = pch_ulvt_mac_gate_tmp05 NOT VTELN
pch_ulvt_mac_gate_tmp07 = pch_ulvt_mac_gate_tmp06 NOT VTELP
pch_ulvt_mac_gate_tmp08 = pch_ulvt_mac_gate_tmp07 NOT VTULN
pch_ulvt_mac_gate_tmp09 = pch_ulvt_mac_gate_tmp08 AND VTULP
pch_ulvt_mac_gate_tmp10 = pch_ulvt_mac_gate_tmp09 NOT VTLN
pch_ulvt_mac_gate_tmp11 = pch_ulvt_mac_gate_tmp10 NOT VTLP
pch_ulvt_mac_gate_tmp12 = pch_ulvt_mac_gate_tmp11 NOT VTSN
pch_ulvt_mac_gate_tmp13 = pch_ulvt_mac_gate_tmp12 NOT VTSP
pch_ulvt_mac_gate_tmp14 = pch_ulvt_mac_gate_tmp13 NOT VTULNLL
pch_ulvt_mac_gate_tmp15 = pch_ulvt_mac_gate_tmp14 NOT VTULPLL
pch_ulvt_mac_gate_tmp16 = pch_ulvt_mac_gate_tmp15 NOT VTLNLL
pch_ulvt_mac_gate_tmp17 = pch_ulvt_mac_gate_tmp16 NOT VTLPLL
pch_ulvt_mac_gate_tmp18 = pch_ulvt_mac_gate_tmp17 NOT NPi
pch_ulvt_mac_gate_tmp19 = pch_ulvt_mac_gate_tmp18 AND PPi
pch_ulvt_mac_gate_tmp20 = pch_ulvt_mac_gate_tmp19 NOT OD12_15
pch_ulvt_mac_gate_tmp21 = pch_ulvt_mac_gate_tmp20 NOT VAR
pch_ulvt_mac_gate_tmp22 = pch_ulvt_mac_gate_tmp21 NOT IBJTDMY
pch_ulvt_mac_gate_tmp23 = pch_ulvt_mac_gate_tmp22 NOT DIODMY
pch_ulvt_mac_gate_tmp24 = pch_ulvt_mac_gate_tmp23 NOT SR_ESD
pch_ulvt_mac_gate_tmp25 = pch_ulvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_ulvt_mac_gate = pch_ulvt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_ulvtll_mac_gate ****

//* Define layer -- pch_ulvtll_mac_gate
pch_ulvtll_mac_gate_tmp01 = tpgate3a AND OD
pch_ulvtll_mac_gate_tmp02 = pch_ulvtll_mac_gate_tmp01 AND NW
pch_ulvtll_mac_gate_tmp03 = pch_ulvtll_mac_gate_tmp02 NOT NT_N
pch_ulvtll_mac_gate_tmp04 = pch_ulvtll_mac_gate_tmp03 NOT OD12
pch_ulvtll_mac_gate_tmp05 = pch_ulvtll_mac_gate_tmp04 AND PO
pch_ulvtll_mac_gate_tmp06 = pch_ulvtll_mac_gate_tmp05 NOT VTELN
pch_ulvtll_mac_gate_tmp07 = pch_ulvtll_mac_gate_tmp06 NOT VTELP
pch_ulvtll_mac_gate_tmp08 = pch_ulvtll_mac_gate_tmp07 NOT VTULN
pch_ulvtll_mac_gate_tmp09 = pch_ulvtll_mac_gate_tmp08 NOT VTULP
pch_ulvtll_mac_gate_tmp10 = pch_ulvtll_mac_gate_tmp09 NOT VTLN
pch_ulvtll_mac_gate_tmp11 = pch_ulvtll_mac_gate_tmp10 NOT VTLP
pch_ulvtll_mac_gate_tmp12 = pch_ulvtll_mac_gate_tmp11 NOT VTSN
pch_ulvtll_mac_gate_tmp13 = pch_ulvtll_mac_gate_tmp12 NOT VTSP
pch_ulvtll_mac_gate_tmp14 = pch_ulvtll_mac_gate_tmp13 NOT VTULNLL
pch_ulvtll_mac_gate_tmp15 = pch_ulvtll_mac_gate_tmp14 AND VTULPLL
pch_ulvtll_mac_gate_tmp16 = pch_ulvtll_mac_gate_tmp15 NOT VTLNLL
pch_ulvtll_mac_gate_tmp17 = pch_ulvtll_mac_gate_tmp16 NOT VTLPLL
pch_ulvtll_mac_gate_tmp18 = pch_ulvtll_mac_gate_tmp17 NOT NPi
pch_ulvtll_mac_gate_tmp19 = pch_ulvtll_mac_gate_tmp18 AND PPi
pch_ulvtll_mac_gate_tmp20 = pch_ulvtll_mac_gate_tmp19 NOT OD12_15
pch_ulvtll_mac_gate_tmp21 = pch_ulvtll_mac_gate_tmp20 NOT VAR
pch_ulvtll_mac_gate_tmp22 = pch_ulvtll_mac_gate_tmp21 NOT IBJTDMY
pch_ulvtll_mac_gate_tmp23 = pch_ulvtll_mac_gate_tmp22 NOT DIODMY
pch_ulvtll_mac_gate_tmp24 = pch_ulvtll_mac_gate_tmp23 NOT SR_ESD
pch_ulvtll_mac_gate_tmp25 = pch_ulvtll_mac_gate_tmp24 NOT HIA_DUMMY
pch_ulvtll_mac_gate = pch_ulvtll_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_elvt_mac_gate ****

//* Define layer -- pch_elvt_mac_gate
pch_elvt_mac_gate_tmp01 = tpgate3a AND OD
pch_elvt_mac_gate_tmp02 = pch_elvt_mac_gate_tmp01 AND NW
pch_elvt_mac_gate_tmp03 = pch_elvt_mac_gate_tmp02 NOT NT_N
pch_elvt_mac_gate_tmp04 = pch_elvt_mac_gate_tmp03 NOT OD12
pch_elvt_mac_gate_tmp05 = pch_elvt_mac_gate_tmp04 AND PO
pch_elvt_mac_gate_tmp06 = pch_elvt_mac_gate_tmp05 NOT VTELN
pch_elvt_mac_gate_tmp07 = pch_elvt_mac_gate_tmp06 AND VTELP
pch_elvt_mac_gate_tmp08 = pch_elvt_mac_gate_tmp07 NOT VTULN
pch_elvt_mac_gate_tmp09 = pch_elvt_mac_gate_tmp08 NOT VTULP
pch_elvt_mac_gate_tmp10 = pch_elvt_mac_gate_tmp09 NOT VTLN
pch_elvt_mac_gate_tmp11 = pch_elvt_mac_gate_tmp10 NOT VTLP
pch_elvt_mac_gate_tmp12 = pch_elvt_mac_gate_tmp11 NOT VTSN
pch_elvt_mac_gate_tmp13 = pch_elvt_mac_gate_tmp12 NOT VTSP
pch_elvt_mac_gate_tmp14 = pch_elvt_mac_gate_tmp13 NOT VTULNLL
pch_elvt_mac_gate_tmp15 = pch_elvt_mac_gate_tmp14 NOT VTULPLL
pch_elvt_mac_gate_tmp16 = pch_elvt_mac_gate_tmp15 NOT VTLNLL
pch_elvt_mac_gate_tmp17 = pch_elvt_mac_gate_tmp16 NOT VTLPLL
pch_elvt_mac_gate_tmp18 = pch_elvt_mac_gate_tmp17 NOT NPi
pch_elvt_mac_gate_tmp19 = pch_elvt_mac_gate_tmp18 AND PPi
pch_elvt_mac_gate_tmp20 = pch_elvt_mac_gate_tmp19 NOT OD12_15
pch_elvt_mac_gate_tmp21 = pch_elvt_mac_gate_tmp20 NOT VAR
pch_elvt_mac_gate_tmp22 = pch_elvt_mac_gate_tmp21 NOT IBJTDMY
pch_elvt_mac_gate_tmp23 = pch_elvt_mac_gate_tmp22 NOT DIODMY
pch_elvt_mac_gate_tmp24 = pch_elvt_mac_gate_tmp23 NOT SR_ESD
pch_elvt_mac_gate_tmp25 = pch_elvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_elvt_mac_gate = pch_elvt_mac_gate_tmp25 NOT SDI_2


//* Define device -- pmos pch_flrsvt_mac

//* Define layer -- pch_flrsvt_mac_gate
pch_flrsvt_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrsvt_mac_gate_tmp02 = pch_flrsvt_mac_gate_tmp01 AND OD
pch_flrsvt_mac_gate_tmp03 = pch_flrsvt_mac_gate_tmp02 AND NW
pch_flrsvt_mac_gate_tmp04 = pch_flrsvt_mac_gate_tmp03 NOT NT_N
pch_flrsvt_mac_gate_tmp05 = pch_flrsvt_mac_gate_tmp04 NOT OD12
pch_flrsvt_mac_gate_tmp06 = pch_flrsvt_mac_gate_tmp05 AND PO
pch_flrsvt_mac_gate_tmp07 = pch_flrsvt_mac_gate_tmp06 NOT VTELN
pch_flrsvt_mac_gate_tmp08 = pch_flrsvt_mac_gate_tmp07 NOT VTELP
pch_flrsvt_mac_gate_tmp09 = pch_flrsvt_mac_gate_tmp08 NOT VTULN
pch_flrsvt_mac_gate_tmp10 = pch_flrsvt_mac_gate_tmp09 NOT VTULP
pch_flrsvt_mac_gate_tmp11 = pch_flrsvt_mac_gate_tmp10 NOT VTLN
pch_flrsvt_mac_gate_tmp12 = pch_flrsvt_mac_gate_tmp11 NOT VTLP
pch_flrsvt_mac_gate_tmp13 = pch_flrsvt_mac_gate_tmp12 NOT VTSN
pch_flrsvt_mac_gate_tmp14 = pch_flrsvt_mac_gate_tmp13 AND VTSP
pch_flrsvt_mac_gate_tmp15 = pch_flrsvt_mac_gate_tmp14 NOT VTULNLL
pch_flrsvt_mac_gate_tmp16 = pch_flrsvt_mac_gate_tmp15 NOT VTULPLL
pch_flrsvt_mac_gate_tmp17 = pch_flrsvt_mac_gate_tmp16 NOT VTLNLL
pch_flrsvt_mac_gate_tmp18 = pch_flrsvt_mac_gate_tmp17 NOT VTLPLL
pch_flrsvt_mac_gate_tmp19 = pch_flrsvt_mac_gate_tmp18 NOT NPi
pch_flrsvt_mac_gate_tmp20 = pch_flrsvt_mac_gate_tmp19 AND PPi
pch_flrsvt_mac_gate_tmp21 = pch_flrsvt_mac_gate_tmp20 NOT OD12_15
pch_flrsvt_mac_gate_tmp22 = pch_flrsvt_mac_gate_tmp21 NOT VAR
pch_flrsvt_mac_gate_tmp23 = pch_flrsvt_mac_gate_tmp22 NOT IBJTDMY
pch_flrsvt_mac_gate_tmp24 = pch_flrsvt_mac_gate_tmp23 NOT DIODMY
pch_flrsvt_mac_gate_tmp25 = pch_flrsvt_mac_gate_tmp24 NOT SR_ESD
pch_flrsvt_mac_gate_tmp26 = pch_flrsvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrsvt_mac_gate_tmp27 = pch_flrsvt_mac_gate_tmp26 NOT SDI_2
pch_flrsvt_mac_gate = pch_flrsvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- pmos pch_flrlvt_mac

//* Define layer -- pch_flrlvt_mac_gate
pch_flrlvt_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrlvt_mac_gate_tmp02 = pch_flrlvt_mac_gate_tmp01 AND OD
pch_flrlvt_mac_gate_tmp03 = pch_flrlvt_mac_gate_tmp02 AND NW
pch_flrlvt_mac_gate_tmp04 = pch_flrlvt_mac_gate_tmp03 NOT NT_N
pch_flrlvt_mac_gate_tmp05 = pch_flrlvt_mac_gate_tmp04 NOT OD12
pch_flrlvt_mac_gate_tmp06 = pch_flrlvt_mac_gate_tmp05 AND PO
pch_flrlvt_mac_gate_tmp07 = pch_flrlvt_mac_gate_tmp06 NOT VTELN
pch_flrlvt_mac_gate_tmp08 = pch_flrlvt_mac_gate_tmp07 NOT VTELP
pch_flrlvt_mac_gate_tmp09 = pch_flrlvt_mac_gate_tmp08 NOT VTULN
pch_flrlvt_mac_gate_tmp10 = pch_flrlvt_mac_gate_tmp09 NOT VTULP
pch_flrlvt_mac_gate_tmp11 = pch_flrlvt_mac_gate_tmp10 NOT VTLN
pch_flrlvt_mac_gate_tmp12 = pch_flrlvt_mac_gate_tmp11 AND VTLP
pch_flrlvt_mac_gate_tmp13 = pch_flrlvt_mac_gate_tmp12 NOT VTSN
pch_flrlvt_mac_gate_tmp14 = pch_flrlvt_mac_gate_tmp13 NOT VTSP
pch_flrlvt_mac_gate_tmp15 = pch_flrlvt_mac_gate_tmp14 NOT VTULNLL
pch_flrlvt_mac_gate_tmp16 = pch_flrlvt_mac_gate_tmp15 NOT VTULPLL
pch_flrlvt_mac_gate_tmp17 = pch_flrlvt_mac_gate_tmp16 NOT VTLNLL
pch_flrlvt_mac_gate_tmp18 = pch_flrlvt_mac_gate_tmp17 NOT VTLPLL
pch_flrlvt_mac_gate_tmp19 = pch_flrlvt_mac_gate_tmp18 NOT NPi
pch_flrlvt_mac_gate_tmp20 = pch_flrlvt_mac_gate_tmp19 AND PPi
pch_flrlvt_mac_gate_tmp21 = pch_flrlvt_mac_gate_tmp20 NOT OD12_15
pch_flrlvt_mac_gate_tmp22 = pch_flrlvt_mac_gate_tmp21 NOT VAR
pch_flrlvt_mac_gate_tmp23 = pch_flrlvt_mac_gate_tmp22 NOT IBJTDMY
pch_flrlvt_mac_gate_tmp24 = pch_flrlvt_mac_gate_tmp23 NOT DIODMY
pch_flrlvt_mac_gate_tmp25 = pch_flrlvt_mac_gate_tmp24 NOT SR_ESD
pch_flrlvt_mac_gate_tmp26 = pch_flrlvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrlvt_mac_gate_tmp27 = pch_flrlvt_mac_gate_tmp26 NOT SDI_2
pch_flrlvt_mac_gate = pch_flrlvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- pmos pch_flrlvtll_mac

//* Define layer -- pch_flrlvtll_mac_gate
pch_flrlvtll_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrlvtll_mac_gate_tmp02 = pch_flrlvtll_mac_gate_tmp01 AND OD
pch_flrlvtll_mac_gate_tmp03 = pch_flrlvtll_mac_gate_tmp02 AND NW
pch_flrlvtll_mac_gate_tmp04 = pch_flrlvtll_mac_gate_tmp03 NOT NT_N
pch_flrlvtll_mac_gate_tmp05 = pch_flrlvtll_mac_gate_tmp04 NOT OD12
pch_flrlvtll_mac_gate_tmp06 = pch_flrlvtll_mac_gate_tmp05 AND PO
pch_flrlvtll_mac_gate_tmp07 = pch_flrlvtll_mac_gate_tmp06 NOT VTELN
pch_flrlvtll_mac_gate_tmp08 = pch_flrlvtll_mac_gate_tmp07 NOT VTELP
pch_flrlvtll_mac_gate_tmp09 = pch_flrlvtll_mac_gate_tmp08 NOT VTULN
pch_flrlvtll_mac_gate_tmp10 = pch_flrlvtll_mac_gate_tmp09 NOT VTULP
pch_flrlvtll_mac_gate_tmp11 = pch_flrlvtll_mac_gate_tmp10 NOT VTLN
pch_flrlvtll_mac_gate_tmp12 = pch_flrlvtll_mac_gate_tmp11 NOT VTLP
pch_flrlvtll_mac_gate_tmp13 = pch_flrlvtll_mac_gate_tmp12 NOT VTSN
pch_flrlvtll_mac_gate_tmp14 = pch_flrlvtll_mac_gate_tmp13 NOT VTSP
pch_flrlvtll_mac_gate_tmp15 = pch_flrlvtll_mac_gate_tmp14 NOT VTULNLL
pch_flrlvtll_mac_gate_tmp16 = pch_flrlvtll_mac_gate_tmp15 NOT VTULPLL
pch_flrlvtll_mac_gate_tmp17 = pch_flrlvtll_mac_gate_tmp16 NOT VTLNLL
pch_flrlvtll_mac_gate_tmp18 = pch_flrlvtll_mac_gate_tmp17 AND VTLPLL
pch_flrlvtll_mac_gate_tmp19 = pch_flrlvtll_mac_gate_tmp18 NOT NPi
pch_flrlvtll_mac_gate_tmp20 = pch_flrlvtll_mac_gate_tmp19 AND PPi
pch_flrlvtll_mac_gate_tmp21 = pch_flrlvtll_mac_gate_tmp20 NOT OD12_15
pch_flrlvtll_mac_gate_tmp22 = pch_flrlvtll_mac_gate_tmp21 NOT VAR
pch_flrlvtll_mac_gate_tmp23 = pch_flrlvtll_mac_gate_tmp22 NOT IBJTDMY
pch_flrlvtll_mac_gate_tmp24 = pch_flrlvtll_mac_gate_tmp23 NOT DIODMY
pch_flrlvtll_mac_gate_tmp25 = pch_flrlvtll_mac_gate_tmp24 NOT SR_ESD
pch_flrlvtll_mac_gate_tmp26 = pch_flrlvtll_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrlvtll_mac_gate_tmp27 = pch_flrlvtll_mac_gate_tmp26 NOT SDI_2
pch_flrlvtll_mac_gate = pch_flrlvtll_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- pmos pch_flrulvt_mac

//* Define layer -- pch_flrulvt_mac_gate
pch_flrulvt_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrulvt_mac_gate_tmp02 = pch_flrulvt_mac_gate_tmp01 AND OD
pch_flrulvt_mac_gate_tmp03 = pch_flrulvt_mac_gate_tmp02 AND NW
pch_flrulvt_mac_gate_tmp04 = pch_flrulvt_mac_gate_tmp03 NOT NT_N
pch_flrulvt_mac_gate_tmp05 = pch_flrulvt_mac_gate_tmp04 NOT OD12
pch_flrulvt_mac_gate_tmp06 = pch_flrulvt_mac_gate_tmp05 AND PO
pch_flrulvt_mac_gate_tmp07 = pch_flrulvt_mac_gate_tmp06 NOT VTELN
pch_flrulvt_mac_gate_tmp08 = pch_flrulvt_mac_gate_tmp07 NOT VTELP
pch_flrulvt_mac_gate_tmp09 = pch_flrulvt_mac_gate_tmp08 NOT VTULN
pch_flrulvt_mac_gate_tmp10 = pch_flrulvt_mac_gate_tmp09 AND VTULP
pch_flrulvt_mac_gate_tmp11 = pch_flrulvt_mac_gate_tmp10 NOT VTLN
pch_flrulvt_mac_gate_tmp12 = pch_flrulvt_mac_gate_tmp11 NOT VTLP
pch_flrulvt_mac_gate_tmp13 = pch_flrulvt_mac_gate_tmp12 NOT VTSN
pch_flrulvt_mac_gate_tmp14 = pch_flrulvt_mac_gate_tmp13 NOT VTSP
pch_flrulvt_mac_gate_tmp15 = pch_flrulvt_mac_gate_tmp14 NOT VTULNLL
pch_flrulvt_mac_gate_tmp16 = pch_flrulvt_mac_gate_tmp15 NOT VTULPLL
pch_flrulvt_mac_gate_tmp17 = pch_flrulvt_mac_gate_tmp16 NOT VTLNLL
pch_flrulvt_mac_gate_tmp18 = pch_flrulvt_mac_gate_tmp17 NOT VTLPLL
pch_flrulvt_mac_gate_tmp19 = pch_flrulvt_mac_gate_tmp18 NOT NPi
pch_flrulvt_mac_gate_tmp20 = pch_flrulvt_mac_gate_tmp19 AND PPi
pch_flrulvt_mac_gate_tmp21 = pch_flrulvt_mac_gate_tmp20 NOT OD12_15
pch_flrulvt_mac_gate_tmp22 = pch_flrulvt_mac_gate_tmp21 NOT VAR
pch_flrulvt_mac_gate_tmp23 = pch_flrulvt_mac_gate_tmp22 NOT IBJTDMY
pch_flrulvt_mac_gate_tmp24 = pch_flrulvt_mac_gate_tmp23 NOT DIODMY
pch_flrulvt_mac_gate_tmp25 = pch_flrulvt_mac_gate_tmp24 NOT SR_ESD
pch_flrulvt_mac_gate_tmp26 = pch_flrulvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrulvt_mac_gate_tmp27 = pch_flrulvt_mac_gate_tmp26 NOT SDI_2
pch_flrulvt_mac_gate = pch_flrulvt_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- pmos pch_flrulvtll_mac

//* Define layer -- pch_flrulvtll_mac_gate
pch_flrulvtll_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrulvtll_mac_gate_tmp02 = pch_flrulvtll_mac_gate_tmp01 AND OD
pch_flrulvtll_mac_gate_tmp03 = pch_flrulvtll_mac_gate_tmp02 AND NW
pch_flrulvtll_mac_gate_tmp04 = pch_flrulvtll_mac_gate_tmp03 NOT NT_N
pch_flrulvtll_mac_gate_tmp05 = pch_flrulvtll_mac_gate_tmp04 NOT OD12
pch_flrulvtll_mac_gate_tmp06 = pch_flrulvtll_mac_gate_tmp05 AND PO
pch_flrulvtll_mac_gate_tmp07 = pch_flrulvtll_mac_gate_tmp06 NOT VTELN
pch_flrulvtll_mac_gate_tmp08 = pch_flrulvtll_mac_gate_tmp07 NOT VTELP
pch_flrulvtll_mac_gate_tmp09 = pch_flrulvtll_mac_gate_tmp08 NOT VTULN
pch_flrulvtll_mac_gate_tmp10 = pch_flrulvtll_mac_gate_tmp09 NOT VTULP
pch_flrulvtll_mac_gate_tmp11 = pch_flrulvtll_mac_gate_tmp10 NOT VTLN
pch_flrulvtll_mac_gate_tmp12 = pch_flrulvtll_mac_gate_tmp11 NOT VTLP
pch_flrulvtll_mac_gate_tmp13 = pch_flrulvtll_mac_gate_tmp12 NOT VTSN
pch_flrulvtll_mac_gate_tmp14 = pch_flrulvtll_mac_gate_tmp13 NOT VTSP
pch_flrulvtll_mac_gate_tmp15 = pch_flrulvtll_mac_gate_tmp14 NOT VTULNLL
pch_flrulvtll_mac_gate_tmp16 = pch_flrulvtll_mac_gate_tmp15 AND VTULPLL
pch_flrulvtll_mac_gate_tmp17 = pch_flrulvtll_mac_gate_tmp16 NOT VTLNLL
pch_flrulvtll_mac_gate_tmp18 = pch_flrulvtll_mac_gate_tmp17 NOT VTLPLL
pch_flrulvtll_mac_gate_tmp19 = pch_flrulvtll_mac_gate_tmp18 NOT NPi
pch_flrulvtll_mac_gate_tmp20 = pch_flrulvtll_mac_gate_tmp19 AND PPi
pch_flrulvtll_mac_gate_tmp21 = pch_flrulvtll_mac_gate_tmp20 NOT OD12_15
pch_flrulvtll_mac_gate_tmp22 = pch_flrulvtll_mac_gate_tmp21 NOT VAR
pch_flrulvtll_mac_gate_tmp23 = pch_flrulvtll_mac_gate_tmp22 NOT IBJTDMY
pch_flrulvtll_mac_gate_tmp24 = pch_flrulvtll_mac_gate_tmp23 NOT DIODMY
pch_flrulvtll_mac_gate_tmp25 = pch_flrulvtll_mac_gate_tmp24 NOT SR_ESD
pch_flrulvtll_mac_gate_tmp26 = pch_flrulvtll_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrulvtll_mac_gate_tmp27 = pch_flrulvtll_mac_gate_tmp26 NOT SDI_2
pch_flrulvtll_mac_gate = pch_flrulvtll_mac_gate_tmp27 AND FILLER_MOS


//* Define device -- pmos pch_flrelvt_mac

//* Define layer -- pch_flrelvt_mac_gate
pch_flrelvt_mac_gate_tmp01 = tpgate2 NOT FB1
pch_flrelvt_mac_gate_tmp02 = pch_flrelvt_mac_gate_tmp01 AND OD
pch_flrelvt_mac_gate_tmp03 = pch_flrelvt_mac_gate_tmp02 AND NW
pch_flrelvt_mac_gate_tmp04 = pch_flrelvt_mac_gate_tmp03 NOT NT_N
pch_flrelvt_mac_gate_tmp05 = pch_flrelvt_mac_gate_tmp04 NOT OD12
pch_flrelvt_mac_gate_tmp06 = pch_flrelvt_mac_gate_tmp05 AND PO
pch_flrelvt_mac_gate_tmp07 = pch_flrelvt_mac_gate_tmp06 NOT VTELN
pch_flrelvt_mac_gate_tmp08 = pch_flrelvt_mac_gate_tmp07 AND VTELP
pch_flrelvt_mac_gate_tmp09 = pch_flrelvt_mac_gate_tmp08 NOT VTULN
pch_flrelvt_mac_gate_tmp10 = pch_flrelvt_mac_gate_tmp09 NOT VTULP
pch_flrelvt_mac_gate_tmp11 = pch_flrelvt_mac_gate_tmp10 NOT VTLN
pch_flrelvt_mac_gate_tmp12 = pch_flrelvt_mac_gate_tmp11 NOT VTLP
pch_flrelvt_mac_gate_tmp13 = pch_flrelvt_mac_gate_tmp12 NOT VTSN
pch_flrelvt_mac_gate_tmp14 = pch_flrelvt_mac_gate_tmp13 NOT VTSP
pch_flrelvt_mac_gate_tmp15 = pch_flrelvt_mac_gate_tmp14 NOT VTULNLL
pch_flrelvt_mac_gate_tmp16 = pch_flrelvt_mac_gate_tmp15 NOT VTULPLL
pch_flrelvt_mac_gate_tmp17 = pch_flrelvt_mac_gate_tmp16 NOT VTLNLL
pch_flrelvt_mac_gate_tmp18 = pch_flrelvt_mac_gate_tmp17 NOT VTLPLL
pch_flrelvt_mac_gate_tmp19 = pch_flrelvt_mac_gate_tmp18 NOT NPi
pch_flrelvt_mac_gate_tmp20 = pch_flrelvt_mac_gate_tmp19 AND PPi
pch_flrelvt_mac_gate_tmp21 = pch_flrelvt_mac_gate_tmp20 NOT OD12_15
pch_flrelvt_mac_gate_tmp22 = pch_flrelvt_mac_gate_tmp21 NOT VAR
pch_flrelvt_mac_gate_tmp23 = pch_flrelvt_mac_gate_tmp22 NOT IBJTDMY
pch_flrelvt_mac_gate_tmp24 = pch_flrelvt_mac_gate_tmp23 NOT DIODMY
pch_flrelvt_mac_gate_tmp25 = pch_flrelvt_mac_gate_tmp24 NOT SR_ESD
pch_flrelvt_mac_gate_tmp26 = pch_flrelvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_flrelvt_mac_gate_tmp27 = pch_flrelvt_mac_gate_tmp26 NOT SDI_2
pch_flrelvt_mac_gate = pch_flrelvt_mac_gate_tmp27 AND FILLER_MOS


//***** Define connectivity/via layer -- pch_12_mac_gate ****

//* Define layer -- pch_12_mac_gate
pch_12_mac_gate_tmp01 = tpgate3a AND OD
pch_12_mac_gate_tmp02 = pch_12_mac_gate_tmp01 AND NW
pch_12_mac_gate_tmp03 = pch_12_mac_gate_tmp02 NOT NT_N
pch_12_mac_gate_tmp04 = pch_12_mac_gate_tmp03 AND OD12
pch_12_mac_gate_tmp05 = pch_12_mac_gate_tmp04 AND PO
pch_12_mac_gate_tmp06 = pch_12_mac_gate_tmp05 NOT VTELN
pch_12_mac_gate_tmp07 = pch_12_mac_gate_tmp06 NOT VTELP
pch_12_mac_gate_tmp08 = pch_12_mac_gate_tmp07 NOT VTULN
pch_12_mac_gate_tmp09 = pch_12_mac_gate_tmp08 NOT VTULP
pch_12_mac_gate_tmp10 = pch_12_mac_gate_tmp09 NOT VTLN
pch_12_mac_gate_tmp11 = pch_12_mac_gate_tmp10 NOT VTLP
pch_12_mac_gate_tmp12 = pch_12_mac_gate_tmp11 NOT VTSN
pch_12_mac_gate_tmp13 = pch_12_mac_gate_tmp12 NOT VTSP
pch_12_mac_gate_tmp14 = pch_12_mac_gate_tmp13 NOT VTULNLL
pch_12_mac_gate_tmp15 = pch_12_mac_gate_tmp14 NOT VTULPLL
pch_12_mac_gate_tmp16 = pch_12_mac_gate_tmp15 NOT VTLNLL
pch_12_mac_gate_tmp17 = pch_12_mac_gate_tmp16 NOT VTLPLL
pch_12_mac_gate_tmp18 = pch_12_mac_gate_tmp17 NOT NPi
pch_12_mac_gate_tmp19 = pch_12_mac_gate_tmp18 AND PPi
pch_12_mac_gate_tmp20 = pch_12_mac_gate_tmp19 NOT OD12_15
pch_12_mac_gate_tmp21 = pch_12_mac_gate_tmp20 NOT VAR
pch_12_mac_gate_tmp22 = pch_12_mac_gate_tmp21 NOT IBJTDMY
pch_12_mac_gate_tmp23 = pch_12_mac_gate_tmp22 NOT DIODMY
pch_12_mac_gate_tmp24 = pch_12_mac_gate_tmp23 NOT SR_ESD
pch_12_mac_gate_tmp25 = pch_12_mac_gate_tmp24 NOT HIA_DUMMY
pch_12_mac_gate = pch_12_mac_gate_tmp25 NOT SDI_2


//* Define device -- pmos pch_12od15_mac

//* Define layer -- pch_12od15_mac_gate
pch_12od15_mac_gate_tmp01 = tpgate3a AND OD
pch_12od15_mac_gate_tmp02 = pch_12od15_mac_gate_tmp01 AND NW
pch_12od15_mac_gate_tmp03 = pch_12od15_mac_gate_tmp02 NOT NT_N
pch_12od15_mac_gate_tmp04 = pch_12od15_mac_gate_tmp03 AND OD12
pch_12od15_mac_gate_tmp05 = pch_12od15_mac_gate_tmp04 AND PO
pch_12od15_mac_gate_tmp06 = pch_12od15_mac_gate_tmp05 NOT VTELN
pch_12od15_mac_gate_tmp07 = pch_12od15_mac_gate_tmp06 NOT VTELP
pch_12od15_mac_gate_tmp08 = pch_12od15_mac_gate_tmp07 NOT VTULN
pch_12od15_mac_gate_tmp09 = pch_12od15_mac_gate_tmp08 NOT VTULP
pch_12od15_mac_gate_tmp10 = pch_12od15_mac_gate_tmp09 NOT VTLN
pch_12od15_mac_gate_tmp11 = pch_12od15_mac_gate_tmp10 NOT VTLP
pch_12od15_mac_gate_tmp12 = pch_12od15_mac_gate_tmp11 NOT VTSN
pch_12od15_mac_gate_tmp13 = pch_12od15_mac_gate_tmp12 NOT VTSP
pch_12od15_mac_gate_tmp14 = pch_12od15_mac_gate_tmp13 NOT VTULNLL
pch_12od15_mac_gate_tmp15 = pch_12od15_mac_gate_tmp14 NOT VTULPLL
pch_12od15_mac_gate_tmp16 = pch_12od15_mac_gate_tmp15 NOT VTLNLL
pch_12od15_mac_gate_tmp17 = pch_12od15_mac_gate_tmp16 NOT VTLPLL
pch_12od15_mac_gate_tmp18 = pch_12od15_mac_gate_tmp17 NOT NPi
pch_12od15_mac_gate_tmp19 = pch_12od15_mac_gate_tmp18 AND PPi
pch_12od15_mac_gate_tmp20 = pch_12od15_mac_gate_tmp19 AND OD12_15
pch_12od15_mac_gate_tmp21 = pch_12od15_mac_gate_tmp20 NOT VAR
pch_12od15_mac_gate_tmp22 = pch_12od15_mac_gate_tmp21 NOT IBJTDMY
pch_12od15_mac_gate_tmp23 = pch_12od15_mac_gate_tmp22 NOT DIODMY
pch_12od15_mac_gate_tmp24 = pch_12od15_mac_gate_tmp23 NOT SR_ESD
pch_12od15_mac_gate_tmp25 = pch_12od15_mac_gate_tmp24 NOT HIA_DUMMY
pch_12od15_mac_gate = pch_12od15_mac_gate_tmp25 NOT SDI_2


//* Define device -- nmos nchpg_ulhdsr_mac

//* Define layer -- ngate_pg_ulhdsr_mac
ngate_pg_ulhdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulhdsr_mac_tmp02 = ngate_pg_ulhdsr_mac_tmp01 AND SRM
ngate_pg_ulhdsr_mac_tmp03 = ngate_pg_ulhdsr_mac_tmp02 AND SRM2010
ngate_pg_ulhdsr_mac_tmp04 = ngate_pg_ulhdsr_mac_tmp03 AND SRM2012
ngate_pg_ulhdsr_mac_tmp05 = ngate_pg_ulhdsr_mac_tmp04 NOT SRM2013
ngate_pg_ulhdsr_mac_tmp06 = ngate_pg_ulhdsr_mac_tmp05 AND SRM2014
ngate_pg_ulhdsr_mac_tmp07 = ngate_pg_ulhdsr_mac_tmp06 NOT SRM2015
ngate_pg_ulhdsr_mac_tmp08 = ngate_pg_ulhdsr_mac_tmp07 NOT SRM2017
ngate_pg_ulhdsr_mac_tmp09 = ngate_pg_ulhdsr_mac_tmp08 NOT SRM2018
ngate_pg_ulhdsr_mac_tmp10 = ngate_pg_ulhdsr_mac_tmp09 NOT SRM2019
ngate_pg_ulhdsr_mac_tmp11 = ngate_pg_ulhdsr_mac_tmp10 NOT SRM2020
ngate_pg_ulhdsr_mac_tmp12 = ngate_pg_ulhdsr_mac_tmp11 NOT SRM2021
ngate_pg_ulhdsr_mac_tmp13 = ngate_pg_ulhdsr_mac_tmp12 NOT SRM2022
ngate_pg_ulhdsr_mac_tmp14 = ngate_pg_ulhdsr_mac_tmp13 NOT SRM2025
ngate_pg_ulhdsr_mac_tmp15 = ngate_pg_ulhdsr_mac_tmp14 NOT SRM2026
ngate_pg_ulhdsr_mac_tmp16 = ngate_pg_ulhdsr_mac_tmp15 NOT SRM2030
ngate_pg_ulhdsr_mac = ngate_pg_ulhdsr_mac_tmp16 NOT SRM2044


//* Define device -- nmos nchpd_ulhdsr_mac

//* Define layer -- ngate_pd_ulhdsr_mac
ngate_pd_ulhdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulhdsr_mac_tmp02 = ngate_pd_ulhdsr_mac_tmp01 AND SRM
ngate_pd_ulhdsr_mac_tmp03 = ngate_pd_ulhdsr_mac_tmp02 NOT SRM2010
ngate_pd_ulhdsr_mac_tmp04 = ngate_pd_ulhdsr_mac_tmp03 AND SRM2012
ngate_pd_ulhdsr_mac_tmp05 = ngate_pd_ulhdsr_mac_tmp04 NOT SRM2013
ngate_pd_ulhdsr_mac_tmp06 = ngate_pd_ulhdsr_mac_tmp05 AND SRM2014
ngate_pd_ulhdsr_mac_tmp07 = ngate_pd_ulhdsr_mac_tmp06 NOT SRM2015
ngate_pd_ulhdsr_mac_tmp08 = ngate_pd_ulhdsr_mac_tmp07 NOT SRM2017
ngate_pd_ulhdsr_mac_tmp09 = ngate_pd_ulhdsr_mac_tmp08 NOT SRM2018
ngate_pd_ulhdsr_mac_tmp10 = ngate_pd_ulhdsr_mac_tmp09 NOT SRM2019
ngate_pd_ulhdsr_mac_tmp11 = ngate_pd_ulhdsr_mac_tmp10 NOT SRM2020
ngate_pd_ulhdsr_mac_tmp12 = ngate_pd_ulhdsr_mac_tmp11 NOT SRM2021
ngate_pd_ulhdsr_mac_tmp13 = ngate_pd_ulhdsr_mac_tmp12 NOT SRM2022
ngate_pd_ulhdsr_mac_tmp14 = ngate_pd_ulhdsr_mac_tmp13 NOT SRM2025
ngate_pd_ulhdsr_mac_tmp15 = ngate_pd_ulhdsr_mac_tmp14 NOT SRM2026
ngate_pd_ulhdsr_mac_tmp16 = ngate_pd_ulhdsr_mac_tmp15 NOT SRM2030
ngate_pd_ulhdsr_mac = ngate_pd_ulhdsr_mac_tmp16 NOT SRM2044


//* Define device -- pmos pchpu_ulhdsr_mac

//* Define layer -- pgate_pu_ulhdsr_mac
pgate_pu_ulhdsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_ulhdsr_mac_tmp02 = pgate_pu_ulhdsr_mac_tmp01 AND SRM
pgate_pu_ulhdsr_mac_tmp03 = pgate_pu_ulhdsr_mac_tmp02 NOT SRM2010
pgate_pu_ulhdsr_mac_tmp04 = pgate_pu_ulhdsr_mac_tmp03 AND SRM2012
pgate_pu_ulhdsr_mac_tmp05 = pgate_pu_ulhdsr_mac_tmp04 NOT SRM2013
pgate_pu_ulhdsr_mac_tmp06 = pgate_pu_ulhdsr_mac_tmp05 AND SRM2014
pgate_pu_ulhdsr_mac_tmp07 = pgate_pu_ulhdsr_mac_tmp06 NOT SRM2015
pgate_pu_ulhdsr_mac_tmp08 = pgate_pu_ulhdsr_mac_tmp07 NOT SRM2017
pgate_pu_ulhdsr_mac_tmp09 = pgate_pu_ulhdsr_mac_tmp08 NOT SRM2018
pgate_pu_ulhdsr_mac_tmp10 = pgate_pu_ulhdsr_mac_tmp09 NOT SRM2019
pgate_pu_ulhdsr_mac_tmp11 = pgate_pu_ulhdsr_mac_tmp10 NOT SRM2020
pgate_pu_ulhdsr_mac_tmp12 = pgate_pu_ulhdsr_mac_tmp11 NOT SRM2021
pgate_pu_ulhdsr_mac_tmp13 = pgate_pu_ulhdsr_mac_tmp12 NOT SRM2022
pgate_pu_ulhdsr_mac_tmp14 = pgate_pu_ulhdsr_mac_tmp13 NOT SRM2025
pgate_pu_ulhdsr_mac_tmp15 = pgate_pu_ulhdsr_mac_tmp14 NOT SRM2026
pgate_pu_ulhdsr_mac_tmp16 = pgate_pu_ulhdsr_mac_tmp15 NOT SRM2030
pgate_pu_ulhdsr_mac = pgate_pu_ulhdsr_mac_tmp16 NOT SRM2044


//* Define device -- nmos nchpg_hdsr_mac

//* Define layer -- ngate_pg_hdsr_mac
ngate_pg_hdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hdsr_mac_tmp02 = ngate_pg_hdsr_mac_tmp01 AND SRM
ngate_pg_hdsr_mac_tmp03 = ngate_pg_hdsr_mac_tmp02 AND SRM2010
ngate_pg_hdsr_mac_tmp04 = ngate_pg_hdsr_mac_tmp03 NOT SRM2012
ngate_pg_hdsr_mac_tmp05 = ngate_pg_hdsr_mac_tmp04 NOT SRM2013
ngate_pg_hdsr_mac_tmp06 = ngate_pg_hdsr_mac_tmp05 AND SRM2014
ngate_pg_hdsr_mac_tmp07 = ngate_pg_hdsr_mac_tmp06 NOT SRM2015
ngate_pg_hdsr_mac_tmp08 = ngate_pg_hdsr_mac_tmp07 NOT SRM2017
ngate_pg_hdsr_mac_tmp09 = ngate_pg_hdsr_mac_tmp08 NOT SRM2018
ngate_pg_hdsr_mac_tmp10 = ngate_pg_hdsr_mac_tmp09 NOT SRM2019
ngate_pg_hdsr_mac_tmp11 = ngate_pg_hdsr_mac_tmp10 NOT SRM2020
ngate_pg_hdsr_mac_tmp12 = ngate_pg_hdsr_mac_tmp11 NOT SRM2021
ngate_pg_hdsr_mac_tmp13 = ngate_pg_hdsr_mac_tmp12 NOT SRM2022
ngate_pg_hdsr_mac_tmp14 = ngate_pg_hdsr_mac_tmp13 NOT SRM2025
ngate_pg_hdsr_mac_tmp15 = ngate_pg_hdsr_mac_tmp14 NOT SRM2026
ngate_pg_hdsr_mac_tmp16 = ngate_pg_hdsr_mac_tmp15 NOT SRM2030
ngate_pg_hdsr_mac_tmp17 = ngate_pg_hdsr_mac_tmp16 NOT SRM2032
ngate_pg_hdsr_mac = ngate_pg_hdsr_mac_tmp17 NOT SRM2044


//* Define device -- nmos nchpd_hdsr_mac

//* Define layer -- ngate_pd_hdsr_mac
ngate_pd_hdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hdsr_mac_tmp02 = ngate_pd_hdsr_mac_tmp01 AND SRM
ngate_pd_hdsr_mac_tmp03 = ngate_pd_hdsr_mac_tmp02 NOT SRM2010
ngate_pd_hdsr_mac_tmp04 = ngate_pd_hdsr_mac_tmp03 NOT SRM2012
ngate_pd_hdsr_mac_tmp05 = ngate_pd_hdsr_mac_tmp04 NOT SRM2013
ngate_pd_hdsr_mac_tmp06 = ngate_pd_hdsr_mac_tmp05 AND SRM2014
ngate_pd_hdsr_mac_tmp07 = ngate_pd_hdsr_mac_tmp06 NOT SRM2015
ngate_pd_hdsr_mac_tmp08 = ngate_pd_hdsr_mac_tmp07 NOT SRM2017
ngate_pd_hdsr_mac_tmp09 = ngate_pd_hdsr_mac_tmp08 NOT SRM2018
ngate_pd_hdsr_mac_tmp10 = ngate_pd_hdsr_mac_tmp09 NOT SRM2019
ngate_pd_hdsr_mac_tmp11 = ngate_pd_hdsr_mac_tmp10 NOT SRM2020
ngate_pd_hdsr_mac_tmp12 = ngate_pd_hdsr_mac_tmp11 NOT SRM2021
ngate_pd_hdsr_mac_tmp13 = ngate_pd_hdsr_mac_tmp12 NOT SRM2022
ngate_pd_hdsr_mac_tmp14 = ngate_pd_hdsr_mac_tmp13 NOT SRM2025
ngate_pd_hdsr_mac_tmp15 = ngate_pd_hdsr_mac_tmp14 NOT SRM2026
ngate_pd_hdsr_mac_tmp16 = ngate_pd_hdsr_mac_tmp15 NOT SRM2030
ngate_pd_hdsr_mac_tmp17 = ngate_pd_hdsr_mac_tmp16 NOT SRM2032
ngate_pd_hdsr_mac = ngate_pd_hdsr_mac_tmp17 NOT SRM2044


//* Define device -- pmos pchpu_hdsr_mac

//* Define layer -- pgate_pu_hdsr_mac
pgate_pu_hdsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hdsr_mac_tmp02 = pgate_pu_hdsr_mac_tmp01 AND SRM
pgate_pu_hdsr_mac_tmp03 = pgate_pu_hdsr_mac_tmp02 NOT SRM2010
pgate_pu_hdsr_mac_tmp04 = pgate_pu_hdsr_mac_tmp03 NOT SRM2012
pgate_pu_hdsr_mac_tmp05 = pgate_pu_hdsr_mac_tmp04 NOT SRM2013
pgate_pu_hdsr_mac_tmp06 = pgate_pu_hdsr_mac_tmp05 AND SRM2014
pgate_pu_hdsr_mac_tmp07 = pgate_pu_hdsr_mac_tmp06 NOT SRM2015
pgate_pu_hdsr_mac_tmp08 = pgate_pu_hdsr_mac_tmp07 NOT SRM2017
pgate_pu_hdsr_mac_tmp09 = pgate_pu_hdsr_mac_tmp08 NOT SRM2018
pgate_pu_hdsr_mac_tmp10 = pgate_pu_hdsr_mac_tmp09 NOT SRM2019
pgate_pu_hdsr_mac_tmp11 = pgate_pu_hdsr_mac_tmp10 NOT SRM2020
pgate_pu_hdsr_mac_tmp12 = pgate_pu_hdsr_mac_tmp11 NOT SRM2021
pgate_pu_hdsr_mac_tmp13 = pgate_pu_hdsr_mac_tmp12 NOT SRM2022
pgate_pu_hdsr_mac_tmp14 = pgate_pu_hdsr_mac_tmp13 NOT SRM2025
pgate_pu_hdsr_mac_tmp15 = pgate_pu_hdsr_mac_tmp14 NOT SRM2026
pgate_pu_hdsr_mac_tmp16 = pgate_pu_hdsr_mac_tmp15 NOT SRM2030
pgate_pu_hdsr_mac_tmp17 = pgate_pu_hdsr_mac_tmp16 NOT SRM2032
pgate_pu_hdsr_mac = pgate_pu_hdsr_mac_tmp17 NOT SRM2044


//* Define device -- nmos nchpg_hcsr_mac

//* Define layer -- ngate_pg_hcsr_mac
ngate_pg_hcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hcsr_mac_tmp02 = ngate_pg_hcsr_mac_tmp01 AND SRM
ngate_pg_hcsr_mac_tmp03 = ngate_pg_hcsr_mac_tmp02 AND SRM2010
ngate_pg_hcsr_mac_tmp04 = ngate_pg_hcsr_mac_tmp03 NOT SRM2012
ngate_pg_hcsr_mac_tmp05 = ngate_pg_hcsr_mac_tmp04 AND SRM2013
ngate_pg_hcsr_mac_tmp06 = ngate_pg_hcsr_mac_tmp05 NOT SRM2014
ngate_pg_hcsr_mac_tmp07 = ngate_pg_hcsr_mac_tmp06 NOT SRM2015
ngate_pg_hcsr_mac_tmp08 = ngate_pg_hcsr_mac_tmp07 NOT SRM2017
ngate_pg_hcsr_mac_tmp09 = ngate_pg_hcsr_mac_tmp08 NOT SRM2018
ngate_pg_hcsr_mac_tmp10 = ngate_pg_hcsr_mac_tmp09 NOT SRM2019
ngate_pg_hcsr_mac_tmp11 = ngate_pg_hcsr_mac_tmp10 NOT SRM2020
ngate_pg_hcsr_mac_tmp12 = ngate_pg_hcsr_mac_tmp11 NOT SRM2021
ngate_pg_hcsr_mac_tmp13 = ngate_pg_hcsr_mac_tmp12 NOT SRM2022
ngate_pg_hcsr_mac_tmp14 = ngate_pg_hcsr_mac_tmp13 NOT SRM2025
ngate_pg_hcsr_mac_tmp15 = ngate_pg_hcsr_mac_tmp14 NOT SRM2026
ngate_pg_hcsr_mac_tmp16 = ngate_pg_hcsr_mac_tmp15 NOT SRM2030
ngate_pg_hcsr_mac_tmp17 = ngate_pg_hcsr_mac_tmp16 NOT SRM2033
ngate_pg_hcsr_mac = ngate_pg_hcsr_mac_tmp17 NOT SRM2044


//* Define device -- nmos nchpd_hcsr_mac

//* Define layer -- ngate_pd_hcsr_mac
ngate_pd_hcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hcsr_mac_tmp02 = ngate_pd_hcsr_mac_tmp01 AND SRM
ngate_pd_hcsr_mac_tmp03 = ngate_pd_hcsr_mac_tmp02 NOT SRM2010
ngate_pd_hcsr_mac_tmp04 = ngate_pd_hcsr_mac_tmp03 NOT SRM2012
ngate_pd_hcsr_mac_tmp05 = ngate_pd_hcsr_mac_tmp04 AND SRM2013
ngate_pd_hcsr_mac_tmp06 = ngate_pd_hcsr_mac_tmp05 NOT SRM2014
ngate_pd_hcsr_mac_tmp07 = ngate_pd_hcsr_mac_tmp06 NOT SRM2015
ngate_pd_hcsr_mac_tmp08 = ngate_pd_hcsr_mac_tmp07 NOT SRM2017
ngate_pd_hcsr_mac_tmp09 = ngate_pd_hcsr_mac_tmp08 NOT SRM2018
ngate_pd_hcsr_mac_tmp10 = ngate_pd_hcsr_mac_tmp09 NOT SRM2019
ngate_pd_hcsr_mac_tmp11 = ngate_pd_hcsr_mac_tmp10 NOT SRM2020
ngate_pd_hcsr_mac_tmp12 = ngate_pd_hcsr_mac_tmp11 NOT SRM2021
ngate_pd_hcsr_mac_tmp13 = ngate_pd_hcsr_mac_tmp12 NOT SRM2022
ngate_pd_hcsr_mac_tmp14 = ngate_pd_hcsr_mac_tmp13 NOT SRM2025
ngate_pd_hcsr_mac_tmp15 = ngate_pd_hcsr_mac_tmp14 NOT SRM2026
ngate_pd_hcsr_mac_tmp16 = ngate_pd_hcsr_mac_tmp15 NOT SRM2030
ngate_pd_hcsr_mac_tmp17 = ngate_pd_hcsr_mac_tmp16 NOT SRM2033
ngate_pd_hcsr_mac = ngate_pd_hcsr_mac_tmp17 NOT SRM2044


//* Define device -- pmos pchpu_hcsr_mac

//* Define layer -- pgate_pu_hcsr_mac
pgate_pu_hcsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hcsr_mac_tmp02 = pgate_pu_hcsr_mac_tmp01 AND SRM
pgate_pu_hcsr_mac_tmp03 = pgate_pu_hcsr_mac_tmp02 NOT SRM2010
pgate_pu_hcsr_mac_tmp04 = pgate_pu_hcsr_mac_tmp03 NOT SRM2012
pgate_pu_hcsr_mac_tmp05 = pgate_pu_hcsr_mac_tmp04 AND SRM2013
pgate_pu_hcsr_mac_tmp06 = pgate_pu_hcsr_mac_tmp05 NOT SRM2014
pgate_pu_hcsr_mac_tmp07 = pgate_pu_hcsr_mac_tmp06 NOT SRM2015
pgate_pu_hcsr_mac_tmp08 = pgate_pu_hcsr_mac_tmp07 NOT SRM2017
pgate_pu_hcsr_mac_tmp09 = pgate_pu_hcsr_mac_tmp08 NOT SRM2018
pgate_pu_hcsr_mac_tmp10 = pgate_pu_hcsr_mac_tmp09 NOT SRM2019
pgate_pu_hcsr_mac_tmp11 = pgate_pu_hcsr_mac_tmp10 NOT SRM2020
pgate_pu_hcsr_mac_tmp12 = pgate_pu_hcsr_mac_tmp11 NOT SRM2021
pgate_pu_hcsr_mac_tmp13 = pgate_pu_hcsr_mac_tmp12 NOT SRM2022
pgate_pu_hcsr_mac_tmp14 = pgate_pu_hcsr_mac_tmp13 NOT SRM2025
pgate_pu_hcsr_mac_tmp15 = pgate_pu_hcsr_mac_tmp14 NOT SRM2026
pgate_pu_hcsr_mac_tmp16 = pgate_pu_hcsr_mac_tmp15 NOT SRM2030
pgate_pu_hcsr_mac_tmp17 = pgate_pu_hcsr_mac_tmp16 NOT SRM2033
pgate_pu_hcsr_mac = pgate_pu_hcsr_mac_tmp17 NOT SRM2044


//* Define device -- nmos nchpg_hc8tsr_mac

//* Define layer -- ngate_pg_hc8tsr_mac
ngate_pg_hc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hc8tsr_mac_tmp02 = ngate_pg_hc8tsr_mac_tmp01 AND SRM
ngate_pg_hc8tsr_mac_tmp03 = ngate_pg_hc8tsr_mac_tmp02 AND SRM2010
ngate_pg_hc8tsr_mac_tmp04 = ngate_pg_hc8tsr_mac_tmp03 NOT SRM2012
ngate_pg_hc8tsr_mac_tmp05 = ngate_pg_hc8tsr_mac_tmp04 NOT SRM2013
ngate_pg_hc8tsr_mac_tmp06 = ngate_pg_hc8tsr_mac_tmp05 NOT SRM2014
ngate_pg_hc8tsr_mac_tmp07 = ngate_pg_hc8tsr_mac_tmp06 NOT SRM2015
ngate_pg_hc8tsr_mac_tmp08 = ngate_pg_hc8tsr_mac_tmp07 NOT SRM2017
ngate_pg_hc8tsr_mac_tmp09 = ngate_pg_hc8tsr_mac_tmp08 NOT SRM2018
ngate_pg_hc8tsr_mac_tmp10 = ngate_pg_hc8tsr_mac_tmp09 AND SRM2019
ngate_pg_hc8tsr_mac_tmp11 = ngate_pg_hc8tsr_mac_tmp10 AND SRM2020
ngate_pg_hc8tsr_mac_tmp12 = ngate_pg_hc8tsr_mac_tmp11 NOT SRM2021
ngate_pg_hc8tsr_mac_tmp13 = ngate_pg_hc8tsr_mac_tmp12 NOT SRM2022
ngate_pg_hc8tsr_mac_tmp14 = ngate_pg_hc8tsr_mac_tmp13 NOT SRM2025
ngate_pg_hc8tsr_mac_tmp15 = ngate_pg_hc8tsr_mac_tmp14 NOT SRM2026
ngate_pg_hc8tsr_mac_tmp16 = ngate_pg_hc8tsr_mac_tmp15 NOT SRM2030
ngate_pg_hc8tsr_mac_tmp17 = ngate_pg_hc8tsr_mac_tmp16 NOT SRM2031
ngate_pg_hc8tsr_mac_tmp18 = ngate_pg_hc8tsr_mac_tmp17 NOT SRM2032
ngate_pg_hc8tsr_mac_tmp19 = ngate_pg_hc8tsr_mac_tmp18 NOT SRM2033
ngate_pg_hc8tsr_mac_tmp20 = ngate_pg_hc8tsr_mac_tmp19 NOT SRM2034
ngate_pg_hc8tsr_mac_tmp21 = ngate_pg_hc8tsr_mac_tmp20 NOT SRM2035
ngate_pg_hc8tsr_mac_tmp22 = ngate_pg_hc8tsr_mac_tmp21 NOT SRM2037
ngate_pg_hc8tsr_mac_tmp23 = ngate_pg_hc8tsr_mac_tmp22 NOT SRM2038
ngate_pg_hc8tsr_mac_tmp24 = ngate_pg_hc8tsr_mac_tmp23 NOT SRM2044
ngate_pg_hc8tsr_mac = ngate_pg_hc8tsr_mac_tmp24 NOT SRM2054


//* Define device -- nmos nchpd_hc8tsr_mac

//* Define layer -- ngate_pd_hc8tsr_mac
ngate_pd_hc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hc8tsr_mac_tmp02 = ngate_pd_hc8tsr_mac_tmp01 AND SRM
ngate_pd_hc8tsr_mac_tmp03 = ngate_pd_hc8tsr_mac_tmp02 NOT SRM2010
ngate_pd_hc8tsr_mac_tmp04 = ngate_pd_hc8tsr_mac_tmp03 NOT SRM2012
ngate_pd_hc8tsr_mac_tmp05 = ngate_pd_hc8tsr_mac_tmp04 NOT SRM2013
ngate_pd_hc8tsr_mac_tmp06 = ngate_pd_hc8tsr_mac_tmp05 NOT SRM2014
ngate_pd_hc8tsr_mac_tmp07 = ngate_pd_hc8tsr_mac_tmp06 NOT SRM2015
ngate_pd_hc8tsr_mac_tmp08 = ngate_pd_hc8tsr_mac_tmp07 NOT SRM2017
ngate_pd_hc8tsr_mac_tmp09 = ngate_pd_hc8tsr_mac_tmp08 NOT SRM2018
ngate_pd_hc8tsr_mac_tmp10 = ngate_pd_hc8tsr_mac_tmp09 AND SRM2019
ngate_pd_hc8tsr_mac_tmp11 = ngate_pd_hc8tsr_mac_tmp10 AND SRM2020
ngate_pd_hc8tsr_mac_tmp12 = ngate_pd_hc8tsr_mac_tmp11 NOT SRM2021
ngate_pd_hc8tsr_mac_tmp13 = ngate_pd_hc8tsr_mac_tmp12 NOT SRM2022
ngate_pd_hc8tsr_mac_tmp14 = ngate_pd_hc8tsr_mac_tmp13 NOT SRM2025
ngate_pd_hc8tsr_mac_tmp15 = ngate_pd_hc8tsr_mac_tmp14 NOT SRM2026
ngate_pd_hc8tsr_mac_tmp16 = ngate_pd_hc8tsr_mac_tmp15 NOT SRM2030
ngate_pd_hc8tsr_mac_tmp17 = ngate_pd_hc8tsr_mac_tmp16 NOT SRM2031
ngate_pd_hc8tsr_mac_tmp18 = ngate_pd_hc8tsr_mac_tmp17 NOT SRM2032
ngate_pd_hc8tsr_mac_tmp19 = ngate_pd_hc8tsr_mac_tmp18 NOT SRM2033
ngate_pd_hc8tsr_mac_tmp20 = ngate_pd_hc8tsr_mac_tmp19 NOT SRM2034
ngate_pd_hc8tsr_mac_tmp21 = ngate_pd_hc8tsr_mac_tmp20 NOT SRM2035
ngate_pd_hc8tsr_mac_tmp22 = ngate_pd_hc8tsr_mac_tmp21 NOT SRM2037
ngate_pd_hc8tsr_mac_tmp23 = ngate_pd_hc8tsr_mac_tmp22 NOT SRM2038
ngate_pd_hc8tsr_mac_tmp24 = ngate_pd_hc8tsr_mac_tmp23 NOT SRM2044
ngate_pd_hc8tsr_mac = ngate_pd_hc8tsr_mac_tmp24 NOT SRM2054


//* Define device -- pmos pchpu_hc8tsr_mac

//* Define layer -- pgate_pu_hc8tsr_mac
pgate_pu_hc8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hc8tsr_mac_tmp02 = pgate_pu_hc8tsr_mac_tmp01 AND SRM
pgate_pu_hc8tsr_mac_tmp03 = pgate_pu_hc8tsr_mac_tmp02 NOT SRM2010
pgate_pu_hc8tsr_mac_tmp04 = pgate_pu_hc8tsr_mac_tmp03 NOT SRM2012
pgate_pu_hc8tsr_mac_tmp05 = pgate_pu_hc8tsr_mac_tmp04 NOT SRM2013
pgate_pu_hc8tsr_mac_tmp06 = pgate_pu_hc8tsr_mac_tmp05 NOT SRM2014
pgate_pu_hc8tsr_mac_tmp07 = pgate_pu_hc8tsr_mac_tmp06 NOT SRM2015
pgate_pu_hc8tsr_mac_tmp08 = pgate_pu_hc8tsr_mac_tmp07 NOT SRM2017
pgate_pu_hc8tsr_mac_tmp09 = pgate_pu_hc8tsr_mac_tmp08 NOT SRM2018
pgate_pu_hc8tsr_mac_tmp10 = pgate_pu_hc8tsr_mac_tmp09 AND SRM2019
pgate_pu_hc8tsr_mac_tmp11 = pgate_pu_hc8tsr_mac_tmp10 AND SRM2020
pgate_pu_hc8tsr_mac_tmp12 = pgate_pu_hc8tsr_mac_tmp11 NOT SRM2021
pgate_pu_hc8tsr_mac_tmp13 = pgate_pu_hc8tsr_mac_tmp12 NOT SRM2022
pgate_pu_hc8tsr_mac_tmp14 = pgate_pu_hc8tsr_mac_tmp13 NOT SRM2025
pgate_pu_hc8tsr_mac_tmp15 = pgate_pu_hc8tsr_mac_tmp14 NOT SRM2026
pgate_pu_hc8tsr_mac_tmp16 = pgate_pu_hc8tsr_mac_tmp15 NOT SRM2030
pgate_pu_hc8tsr_mac_tmp17 = pgate_pu_hc8tsr_mac_tmp16 NOT SRM2031
pgate_pu_hc8tsr_mac_tmp18 = pgate_pu_hc8tsr_mac_tmp17 NOT SRM2032
pgate_pu_hc8tsr_mac_tmp19 = pgate_pu_hc8tsr_mac_tmp18 NOT SRM2033
pgate_pu_hc8tsr_mac_tmp20 = pgate_pu_hc8tsr_mac_tmp19 NOT SRM2034
pgate_pu_hc8tsr_mac_tmp21 = pgate_pu_hc8tsr_mac_tmp20 NOT SRM2035
pgate_pu_hc8tsr_mac_tmp22 = pgate_pu_hc8tsr_mac_tmp21 NOT SRM2037
pgate_pu_hc8tsr_mac_tmp23 = pgate_pu_hc8tsr_mac_tmp22 NOT SRM2038
pgate_pu_hc8tsr_mac_tmp24 = pgate_pu_hc8tsr_mac_tmp23 NOT SRM2044
pgate_pu_hc8tsr_mac = pgate_pu_hc8tsr_mac_tmp24 NOT SRM2054


//* Define device -- nmos nchpg_hc8trpsr_mac

//* Define layer -- ngate_pg_hc8trpsr_mac
ngate_pg_hc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hc8trpsr_mac_tmp02 = ngate_pg_hc8trpsr_mac_tmp01 AND SRM
ngate_pg_hc8trpsr_mac_tmp03 = ngate_pg_hc8trpsr_mac_tmp02 AND SRM2010
ngate_pg_hc8trpsr_mac_tmp04 = ngate_pg_hc8trpsr_mac_tmp03 NOT SRM2012
ngate_pg_hc8trpsr_mac_tmp05 = ngate_pg_hc8trpsr_mac_tmp04 NOT SRM2013
ngate_pg_hc8trpsr_mac_tmp06 = ngate_pg_hc8trpsr_mac_tmp05 NOT SRM2014
ngate_pg_hc8trpsr_mac_tmp07 = ngate_pg_hc8trpsr_mac_tmp06 NOT SRM2015
ngate_pg_hc8trpsr_mac_tmp08 = ngate_pg_hc8trpsr_mac_tmp07 NOT SRM2017
ngate_pg_hc8trpsr_mac_tmp09 = ngate_pg_hc8trpsr_mac_tmp08 NOT SRM2018
ngate_pg_hc8trpsr_mac_tmp10 = ngate_pg_hc8trpsr_mac_tmp09 NOT SRM2019
ngate_pg_hc8trpsr_mac_tmp11 = ngate_pg_hc8trpsr_mac_tmp10 AND SRM2020
ngate_pg_hc8trpsr_mac_tmp12 = ngate_pg_hc8trpsr_mac_tmp11 NOT SRM2021
ngate_pg_hc8trpsr_mac_tmp13 = ngate_pg_hc8trpsr_mac_tmp12 NOT SRM2022
ngate_pg_hc8trpsr_mac_tmp14 = ngate_pg_hc8trpsr_mac_tmp13 NOT SRM2025
ngate_pg_hc8trpsr_mac_tmp15 = ngate_pg_hc8trpsr_mac_tmp14 NOT SRM2026
ngate_pg_hc8trpsr_mac_tmp16 = ngate_pg_hc8trpsr_mac_tmp15 NOT SRM2030
ngate_pg_hc8trpsr_mac_tmp17 = ngate_pg_hc8trpsr_mac_tmp16 NOT SRM2031
ngate_pg_hc8trpsr_mac_tmp18 = ngate_pg_hc8trpsr_mac_tmp17 NOT SRM2032
ngate_pg_hc8trpsr_mac_tmp19 = ngate_pg_hc8trpsr_mac_tmp18 NOT SRM2033
ngate_pg_hc8trpsr_mac_tmp20 = ngate_pg_hc8trpsr_mac_tmp19 NOT SRM2034
ngate_pg_hc8trpsr_mac_tmp21 = ngate_pg_hc8trpsr_mac_tmp20 NOT SRM2035
ngate_pg_hc8trpsr_mac_tmp22 = ngate_pg_hc8trpsr_mac_tmp21 NOT SRM2037
ngate_pg_hc8trpsr_mac_tmp23 = ngate_pg_hc8trpsr_mac_tmp22 NOT SRM2038
ngate_pg_hc8trpsr_mac_tmp24 = ngate_pg_hc8trpsr_mac_tmp23 NOT SRM2044
ngate_pg_hc8trpsr_mac = ngate_pg_hc8trpsr_mac_tmp24 NOT SRM2054


//* Define device -- nmos nchpd_hc8trpsr_mac

//* Define layer -- ngate_pd_hc8trpsr_mac
ngate_pd_hc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hc8trpsr_mac_tmp02 = ngate_pd_hc8trpsr_mac_tmp01 AND SRM
ngate_pd_hc8trpsr_mac_tmp03 = ngate_pd_hc8trpsr_mac_tmp02 NOT SRM2010
ngate_pd_hc8trpsr_mac_tmp04 = ngate_pd_hc8trpsr_mac_tmp03 NOT SRM2012
ngate_pd_hc8trpsr_mac_tmp05 = ngate_pd_hc8trpsr_mac_tmp04 NOT SRM2013
ngate_pd_hc8trpsr_mac_tmp06 = ngate_pd_hc8trpsr_mac_tmp05 NOT SRM2014
ngate_pd_hc8trpsr_mac_tmp07 = ngate_pd_hc8trpsr_mac_tmp06 NOT SRM2015
ngate_pd_hc8trpsr_mac_tmp08 = ngate_pd_hc8trpsr_mac_tmp07 NOT SRM2017
ngate_pd_hc8trpsr_mac_tmp09 = ngate_pd_hc8trpsr_mac_tmp08 NOT SRM2018
ngate_pd_hc8trpsr_mac_tmp10 = ngate_pd_hc8trpsr_mac_tmp09 NOT SRM2019
ngate_pd_hc8trpsr_mac_tmp11 = ngate_pd_hc8trpsr_mac_tmp10 AND SRM2020
ngate_pd_hc8trpsr_mac_tmp12 = ngate_pd_hc8trpsr_mac_tmp11 NOT SRM2021
ngate_pd_hc8trpsr_mac_tmp13 = ngate_pd_hc8trpsr_mac_tmp12 NOT SRM2022
ngate_pd_hc8trpsr_mac_tmp14 = ngate_pd_hc8trpsr_mac_tmp13 NOT SRM2025
ngate_pd_hc8trpsr_mac_tmp15 = ngate_pd_hc8trpsr_mac_tmp14 NOT SRM2026
ngate_pd_hc8trpsr_mac_tmp16 = ngate_pd_hc8trpsr_mac_tmp15 NOT SRM2030
ngate_pd_hc8trpsr_mac_tmp17 = ngate_pd_hc8trpsr_mac_tmp16 NOT SRM2031
ngate_pd_hc8trpsr_mac_tmp18 = ngate_pd_hc8trpsr_mac_tmp17 NOT SRM2032
ngate_pd_hc8trpsr_mac_tmp19 = ngate_pd_hc8trpsr_mac_tmp18 NOT SRM2033
ngate_pd_hc8trpsr_mac_tmp20 = ngate_pd_hc8trpsr_mac_tmp19 NOT SRM2034
ngate_pd_hc8trpsr_mac_tmp21 = ngate_pd_hc8trpsr_mac_tmp20 NOT SRM2035
ngate_pd_hc8trpsr_mac_tmp22 = ngate_pd_hc8trpsr_mac_tmp21 NOT SRM2037
ngate_pd_hc8trpsr_mac_tmp23 = ngate_pd_hc8trpsr_mac_tmp22 NOT SRM2038
ngate_pd_hc8trpsr_mac_tmp24 = ngate_pd_hc8trpsr_mac_tmp23 NOT SRM2044
ngate_pd_hc8trpsr_mac = ngate_pd_hc8trpsr_mac_tmp24 NOT SRM2054


//* Define device -- nmos nchpg_hssr_mac

//* Define layer -- ngate_pg_hssr_mac
ngate_pg_hssr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hssr_mac_tmp02 = ngate_pg_hssr_mac_tmp01 AND SRM
ngate_pg_hssr_mac_tmp03 = ngate_pg_hssr_mac_tmp02 AND SRM2010
ngate_pg_hssr_mac_tmp04 = ngate_pg_hssr_mac_tmp03 NOT SRM2012
ngate_pg_hssr_mac_tmp05 = ngate_pg_hssr_mac_tmp04 AND SRM2013
ngate_pg_hssr_mac_tmp06 = ngate_pg_hssr_mac_tmp05 NOT SRM2014
ngate_pg_hssr_mac_tmp07 = ngate_pg_hssr_mac_tmp06 NOT SRM2015
ngate_pg_hssr_mac_tmp08 = ngate_pg_hssr_mac_tmp07 NOT SRM2017
ngate_pg_hssr_mac_tmp09 = ngate_pg_hssr_mac_tmp08 NOT SRM2018
ngate_pg_hssr_mac_tmp10 = ngate_pg_hssr_mac_tmp09 NOT SRM2019
ngate_pg_hssr_mac_tmp11 = ngate_pg_hssr_mac_tmp10 NOT SRM2020
ngate_pg_hssr_mac_tmp12 = ngate_pg_hssr_mac_tmp11 NOT SRM2021
ngate_pg_hssr_mac_tmp13 = ngate_pg_hssr_mac_tmp12 NOT SRM2022
ngate_pg_hssr_mac_tmp14 = ngate_pg_hssr_mac_tmp13 NOT SRM2025
ngate_pg_hssr_mac_tmp15 = ngate_pg_hssr_mac_tmp14 NOT SRM2026
ngate_pg_hssr_mac_tmp16 = ngate_pg_hssr_mac_tmp15 NOT SRM2030
ngate_pg_hssr_mac_tmp17 = ngate_pg_hssr_mac_tmp16 NOT SRM2031
ngate_pg_hssr_mac_tmp18 = ngate_pg_hssr_mac_tmp17 NOT SRM2032
ngate_pg_hssr_mac_tmp19 = ngate_pg_hssr_mac_tmp18 AND SRM2033
ngate_pg_hssr_mac_tmp20 = ngate_pg_hssr_mac_tmp19 NOT SRM2034
ngate_pg_hssr_mac_tmp21 = ngate_pg_hssr_mac_tmp20 NOT SRM2035
ngate_pg_hssr_mac_tmp22 = ngate_pg_hssr_mac_tmp21 NOT SRM2037
ngate_pg_hssr_mac_tmp23 = ngate_pg_hssr_mac_tmp22 NOT SRM2038
ngate_pg_hssr_mac = ngate_pg_hssr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_hssr_mac

//* Define layer -- ngate_pd_hssr_mac
ngate_pd_hssr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hssr_mac_tmp02 = ngate_pd_hssr_mac_tmp01 AND SRM
ngate_pd_hssr_mac_tmp03 = ngate_pd_hssr_mac_tmp02 NOT SRM2010
ngate_pd_hssr_mac_tmp04 = ngate_pd_hssr_mac_tmp03 NOT SRM2012
ngate_pd_hssr_mac_tmp05 = ngate_pd_hssr_mac_tmp04 AND SRM2013
ngate_pd_hssr_mac_tmp06 = ngate_pd_hssr_mac_tmp05 NOT SRM2014
ngate_pd_hssr_mac_tmp07 = ngate_pd_hssr_mac_tmp06 NOT SRM2015
ngate_pd_hssr_mac_tmp08 = ngate_pd_hssr_mac_tmp07 NOT SRM2017
ngate_pd_hssr_mac_tmp09 = ngate_pd_hssr_mac_tmp08 NOT SRM2018
ngate_pd_hssr_mac_tmp10 = ngate_pd_hssr_mac_tmp09 NOT SRM2019
ngate_pd_hssr_mac_tmp11 = ngate_pd_hssr_mac_tmp10 NOT SRM2020
ngate_pd_hssr_mac_tmp12 = ngate_pd_hssr_mac_tmp11 NOT SRM2021
ngate_pd_hssr_mac_tmp13 = ngate_pd_hssr_mac_tmp12 NOT SRM2022
ngate_pd_hssr_mac_tmp14 = ngate_pd_hssr_mac_tmp13 NOT SRM2025
ngate_pd_hssr_mac_tmp15 = ngate_pd_hssr_mac_tmp14 NOT SRM2026
ngate_pd_hssr_mac_tmp16 = ngate_pd_hssr_mac_tmp15 NOT SRM2030
ngate_pd_hssr_mac_tmp17 = ngate_pd_hssr_mac_tmp16 NOT SRM2031
ngate_pd_hssr_mac_tmp18 = ngate_pd_hssr_mac_tmp17 NOT SRM2032
ngate_pd_hssr_mac_tmp19 = ngate_pd_hssr_mac_tmp18 AND SRM2033
ngate_pd_hssr_mac_tmp20 = ngate_pd_hssr_mac_tmp19 NOT SRM2034
ngate_pd_hssr_mac_tmp21 = ngate_pd_hssr_mac_tmp20 NOT SRM2035
ngate_pd_hssr_mac_tmp22 = ngate_pd_hssr_mac_tmp21 NOT SRM2037
ngate_pd_hssr_mac_tmp23 = ngate_pd_hssr_mac_tmp22 NOT SRM2038
ngate_pd_hssr_mac = ngate_pd_hssr_mac_tmp23 NOT SRM2044


//* Define device -- pmos pchpu_hssr_mac

//* Define layer -- pgate_pu_hssr_mac
pgate_pu_hssr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hssr_mac_tmp02 = pgate_pu_hssr_mac_tmp01 AND SRM
pgate_pu_hssr_mac_tmp03 = pgate_pu_hssr_mac_tmp02 NOT SRM2010
pgate_pu_hssr_mac_tmp04 = pgate_pu_hssr_mac_tmp03 NOT SRM2012
pgate_pu_hssr_mac_tmp05 = pgate_pu_hssr_mac_tmp04 AND SRM2013
pgate_pu_hssr_mac_tmp06 = pgate_pu_hssr_mac_tmp05 NOT SRM2014
pgate_pu_hssr_mac_tmp07 = pgate_pu_hssr_mac_tmp06 NOT SRM2015
pgate_pu_hssr_mac_tmp08 = pgate_pu_hssr_mac_tmp07 NOT SRM2017
pgate_pu_hssr_mac_tmp09 = pgate_pu_hssr_mac_tmp08 NOT SRM2018
pgate_pu_hssr_mac_tmp10 = pgate_pu_hssr_mac_tmp09 NOT SRM2019
pgate_pu_hssr_mac_tmp11 = pgate_pu_hssr_mac_tmp10 NOT SRM2020
pgate_pu_hssr_mac_tmp12 = pgate_pu_hssr_mac_tmp11 NOT SRM2021
pgate_pu_hssr_mac_tmp13 = pgate_pu_hssr_mac_tmp12 NOT SRM2022
pgate_pu_hssr_mac_tmp14 = pgate_pu_hssr_mac_tmp13 NOT SRM2025
pgate_pu_hssr_mac_tmp15 = pgate_pu_hssr_mac_tmp14 NOT SRM2026
pgate_pu_hssr_mac_tmp16 = pgate_pu_hssr_mac_tmp15 NOT SRM2030
pgate_pu_hssr_mac_tmp17 = pgate_pu_hssr_mac_tmp16 NOT SRM2031
pgate_pu_hssr_mac_tmp18 = pgate_pu_hssr_mac_tmp17 NOT SRM2032
pgate_pu_hssr_mac_tmp19 = pgate_pu_hssr_mac_tmp18 AND SRM2033
pgate_pu_hssr_mac_tmp20 = pgate_pu_hssr_mac_tmp19 NOT SRM2034
pgate_pu_hssr_mac_tmp21 = pgate_pu_hssr_mac_tmp20 NOT SRM2035
pgate_pu_hssr_mac_tmp22 = pgate_pu_hssr_mac_tmp21 NOT SRM2037
pgate_pu_hssr_mac_tmp23 = pgate_pu_hssr_mac_tmp22 NOT SRM2038
pgate_pu_hssr_mac = pgate_pu_hssr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_8tsr_mac

//* Define layer -- ngate_pg_8tsr_mac
ngate_pg_8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_8tsr_mac_tmp02 = ngate_pg_8tsr_mac_tmp01 AND SRM
ngate_pg_8tsr_mac_tmp03 = ngate_pg_8tsr_mac_tmp02 AND SRM2010
ngate_pg_8tsr_mac_tmp04 = ngate_pg_8tsr_mac_tmp03 NOT SRM2012
ngate_pg_8tsr_mac_tmp05 = ngate_pg_8tsr_mac_tmp04 NOT SRM2013
ngate_pg_8tsr_mac_tmp06 = ngate_pg_8tsr_mac_tmp05 NOT SRM2014
ngate_pg_8tsr_mac_tmp07 = ngate_pg_8tsr_mac_tmp06 NOT SRM2015
ngate_pg_8tsr_mac_tmp08 = ngate_pg_8tsr_mac_tmp07 AND SRM2017
ngate_pg_8tsr_mac_tmp09 = ngate_pg_8tsr_mac_tmp08 AND SRM2018
ngate_pg_8tsr_mac_tmp10 = ngate_pg_8tsr_mac_tmp09 NOT SRM2019
ngate_pg_8tsr_mac_tmp11 = ngate_pg_8tsr_mac_tmp10 NOT SRM2020
ngate_pg_8tsr_mac_tmp12 = ngate_pg_8tsr_mac_tmp11 NOT SRM2021
ngate_pg_8tsr_mac_tmp13 = ngate_pg_8tsr_mac_tmp12 NOT SRM2022
ngate_pg_8tsr_mac_tmp14 = ngate_pg_8tsr_mac_tmp13 NOT SRM2025
ngate_pg_8tsr_mac_tmp15 = ngate_pg_8tsr_mac_tmp14 NOT SRM2026
ngate_pg_8tsr_mac_tmp16 = ngate_pg_8tsr_mac_tmp15 NOT SRM2030
ngate_pg_8tsr_mac_tmp17 = ngate_pg_8tsr_mac_tmp16 NOT SRM2031
ngate_pg_8tsr_mac_tmp18 = ngate_pg_8tsr_mac_tmp17 NOT SRM2032
ngate_pg_8tsr_mac_tmp19 = ngate_pg_8tsr_mac_tmp18 NOT SRM2033
ngate_pg_8tsr_mac_tmp20 = ngate_pg_8tsr_mac_tmp19 NOT SRM2034
ngate_pg_8tsr_mac_tmp21 = ngate_pg_8tsr_mac_tmp20 NOT SRM2035
ngate_pg_8tsr_mac_tmp22 = ngate_pg_8tsr_mac_tmp21 NOT SRM2037
ngate_pg_8tsr_mac_tmp23 = ngate_pg_8tsr_mac_tmp22 NOT SRM2038
ngate_pg_8tsr_mac = ngate_pg_8tsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_8tsr_mac

//* Define layer -- ngate_pd_8tsr_mac
ngate_pd_8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_8tsr_mac_tmp02 = ngate_pd_8tsr_mac_tmp01 AND SRM
ngate_pd_8tsr_mac_tmp03 = ngate_pd_8tsr_mac_tmp02 NOT SRM2010
ngate_pd_8tsr_mac_tmp04 = ngate_pd_8tsr_mac_tmp03 NOT SRM2012
ngate_pd_8tsr_mac_tmp05 = ngate_pd_8tsr_mac_tmp04 NOT SRM2013
ngate_pd_8tsr_mac_tmp06 = ngate_pd_8tsr_mac_tmp05 NOT SRM2014
ngate_pd_8tsr_mac_tmp07 = ngate_pd_8tsr_mac_tmp06 NOT SRM2015
ngate_pd_8tsr_mac_tmp08 = ngate_pd_8tsr_mac_tmp07 AND SRM2017
ngate_pd_8tsr_mac_tmp09 = ngate_pd_8tsr_mac_tmp08 AND SRM2018
ngate_pd_8tsr_mac_tmp10 = ngate_pd_8tsr_mac_tmp09 NOT SRM2019
ngate_pd_8tsr_mac_tmp11 = ngate_pd_8tsr_mac_tmp10 NOT SRM2020
ngate_pd_8tsr_mac_tmp12 = ngate_pd_8tsr_mac_tmp11 NOT SRM2021
ngate_pd_8tsr_mac_tmp13 = ngate_pd_8tsr_mac_tmp12 NOT SRM2022
ngate_pd_8tsr_mac_tmp14 = ngate_pd_8tsr_mac_tmp13 NOT SRM2025
ngate_pd_8tsr_mac_tmp15 = ngate_pd_8tsr_mac_tmp14 NOT SRM2026
ngate_pd_8tsr_mac_tmp16 = ngate_pd_8tsr_mac_tmp15 NOT SRM2030
ngate_pd_8tsr_mac_tmp17 = ngate_pd_8tsr_mac_tmp16 NOT SRM2031
ngate_pd_8tsr_mac_tmp18 = ngate_pd_8tsr_mac_tmp17 NOT SRM2032
ngate_pd_8tsr_mac_tmp19 = ngate_pd_8tsr_mac_tmp18 NOT SRM2033
ngate_pd_8tsr_mac_tmp20 = ngate_pd_8tsr_mac_tmp19 NOT SRM2034
ngate_pd_8tsr_mac_tmp21 = ngate_pd_8tsr_mac_tmp20 NOT SRM2035
ngate_pd_8tsr_mac_tmp22 = ngate_pd_8tsr_mac_tmp21 NOT SRM2037
ngate_pd_8tsr_mac_tmp23 = ngate_pd_8tsr_mac_tmp22 NOT SRM2038
ngate_pd_8tsr_mac = ngate_pd_8tsr_mac_tmp23 NOT SRM2044


//* Define device -- pmos pchpu_8tsr_mac

//* Define layer -- pgate_pu_8tsr_mac
pgate_pu_8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_8tsr_mac_tmp02 = pgate_pu_8tsr_mac_tmp01 AND SRM
pgate_pu_8tsr_mac_tmp03 = pgate_pu_8tsr_mac_tmp02 NOT SRM2010
pgate_pu_8tsr_mac_tmp04 = pgate_pu_8tsr_mac_tmp03 NOT SRM2012
pgate_pu_8tsr_mac_tmp05 = pgate_pu_8tsr_mac_tmp04 NOT SRM2013
pgate_pu_8tsr_mac_tmp06 = pgate_pu_8tsr_mac_tmp05 NOT SRM2014
pgate_pu_8tsr_mac_tmp07 = pgate_pu_8tsr_mac_tmp06 NOT SRM2015
pgate_pu_8tsr_mac_tmp08 = pgate_pu_8tsr_mac_tmp07 AND SRM2017
pgate_pu_8tsr_mac_tmp09 = pgate_pu_8tsr_mac_tmp08 AND SRM2018
pgate_pu_8tsr_mac_tmp10 = pgate_pu_8tsr_mac_tmp09 NOT SRM2019
pgate_pu_8tsr_mac_tmp11 = pgate_pu_8tsr_mac_tmp10 NOT SRM2020
pgate_pu_8tsr_mac_tmp12 = pgate_pu_8tsr_mac_tmp11 NOT SRM2021
pgate_pu_8tsr_mac_tmp13 = pgate_pu_8tsr_mac_tmp12 NOT SRM2022
pgate_pu_8tsr_mac_tmp14 = pgate_pu_8tsr_mac_tmp13 NOT SRM2025
pgate_pu_8tsr_mac_tmp15 = pgate_pu_8tsr_mac_tmp14 NOT SRM2026
pgate_pu_8tsr_mac_tmp16 = pgate_pu_8tsr_mac_tmp15 NOT SRM2030
pgate_pu_8tsr_mac_tmp17 = pgate_pu_8tsr_mac_tmp16 NOT SRM2031
pgate_pu_8tsr_mac_tmp18 = pgate_pu_8tsr_mac_tmp17 NOT SRM2032
pgate_pu_8tsr_mac_tmp19 = pgate_pu_8tsr_mac_tmp18 NOT SRM2033
pgate_pu_8tsr_mac_tmp20 = pgate_pu_8tsr_mac_tmp19 NOT SRM2034
pgate_pu_8tsr_mac_tmp21 = pgate_pu_8tsr_mac_tmp20 NOT SRM2035
pgate_pu_8tsr_mac_tmp22 = pgate_pu_8tsr_mac_tmp21 NOT SRM2037
pgate_pu_8tsr_mac_tmp23 = pgate_pu_8tsr_mac_tmp22 NOT SRM2038
pgate_pu_8tsr_mac = pgate_pu_8tsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_8trpsr_mac

//* Define layer -- ngate_pg_8trpsr_mac
ngate_pg_8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_8trpsr_mac_tmp02 = ngate_pg_8trpsr_mac_tmp01 AND SRM
ngate_pg_8trpsr_mac_tmp03 = ngate_pg_8trpsr_mac_tmp02 AND SRM2010
ngate_pg_8trpsr_mac_tmp04 = ngate_pg_8trpsr_mac_tmp03 NOT SRM2012
ngate_pg_8trpsr_mac_tmp05 = ngate_pg_8trpsr_mac_tmp04 NOT SRM2013
ngate_pg_8trpsr_mac_tmp06 = ngate_pg_8trpsr_mac_tmp05 NOT SRM2014
ngate_pg_8trpsr_mac_tmp07 = ngate_pg_8trpsr_mac_tmp06 NOT SRM2015
ngate_pg_8trpsr_mac_tmp08 = ngate_pg_8trpsr_mac_tmp07 NOT SRM2017
ngate_pg_8trpsr_mac_tmp09 = ngate_pg_8trpsr_mac_tmp08 AND SRM2018
ngate_pg_8trpsr_mac_tmp10 = ngate_pg_8trpsr_mac_tmp09 NOT SRM2019
ngate_pg_8trpsr_mac_tmp11 = ngate_pg_8trpsr_mac_tmp10 NOT SRM2020
ngate_pg_8trpsr_mac_tmp12 = ngate_pg_8trpsr_mac_tmp11 NOT SRM2021
ngate_pg_8trpsr_mac_tmp13 = ngate_pg_8trpsr_mac_tmp12 NOT SRM2022
ngate_pg_8trpsr_mac_tmp14 = ngate_pg_8trpsr_mac_tmp13 NOT SRM2025
ngate_pg_8trpsr_mac_tmp15 = ngate_pg_8trpsr_mac_tmp14 NOT SRM2026
ngate_pg_8trpsr_mac_tmp16 = ngate_pg_8trpsr_mac_tmp15 NOT SRM2030
ngate_pg_8trpsr_mac_tmp17 = ngate_pg_8trpsr_mac_tmp16 NOT SRM2031
ngate_pg_8trpsr_mac_tmp18 = ngate_pg_8trpsr_mac_tmp17 NOT SRM2032
ngate_pg_8trpsr_mac_tmp19 = ngate_pg_8trpsr_mac_tmp18 NOT SRM2033
ngate_pg_8trpsr_mac_tmp20 = ngate_pg_8trpsr_mac_tmp19 NOT SRM2034
ngate_pg_8trpsr_mac_tmp21 = ngate_pg_8trpsr_mac_tmp20 NOT SRM2035
ngate_pg_8trpsr_mac_tmp22 = ngate_pg_8trpsr_mac_tmp21 NOT SRM2037
ngate_pg_8trpsr_mac_tmp23 = ngate_pg_8trpsr_mac_tmp22 NOT SRM2038
ngate_pg_8trpsr_mac = ngate_pg_8trpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_8trpsr_mac

//* Define layer -- ngate_pd_8trpsr_mac
ngate_pd_8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_8trpsr_mac_tmp02 = ngate_pd_8trpsr_mac_tmp01 AND SRM
ngate_pd_8trpsr_mac_tmp03 = ngate_pd_8trpsr_mac_tmp02 NOT SRM2010
ngate_pd_8trpsr_mac_tmp04 = ngate_pd_8trpsr_mac_tmp03 NOT SRM2012
ngate_pd_8trpsr_mac_tmp05 = ngate_pd_8trpsr_mac_tmp04 NOT SRM2013
ngate_pd_8trpsr_mac_tmp06 = ngate_pd_8trpsr_mac_tmp05 NOT SRM2014
ngate_pd_8trpsr_mac_tmp07 = ngate_pd_8trpsr_mac_tmp06 NOT SRM2015
ngate_pd_8trpsr_mac_tmp08 = ngate_pd_8trpsr_mac_tmp07 NOT SRM2017
ngate_pd_8trpsr_mac_tmp09 = ngate_pd_8trpsr_mac_tmp08 AND SRM2018
ngate_pd_8trpsr_mac_tmp10 = ngate_pd_8trpsr_mac_tmp09 NOT SRM2019
ngate_pd_8trpsr_mac_tmp11 = ngate_pd_8trpsr_mac_tmp10 NOT SRM2020
ngate_pd_8trpsr_mac_tmp12 = ngate_pd_8trpsr_mac_tmp11 NOT SRM2021
ngate_pd_8trpsr_mac_tmp13 = ngate_pd_8trpsr_mac_tmp12 NOT SRM2022
ngate_pd_8trpsr_mac_tmp14 = ngate_pd_8trpsr_mac_tmp13 NOT SRM2025
ngate_pd_8trpsr_mac_tmp15 = ngate_pd_8trpsr_mac_tmp14 NOT SRM2026
ngate_pd_8trpsr_mac_tmp16 = ngate_pd_8trpsr_mac_tmp15 NOT SRM2030
ngate_pd_8trpsr_mac_tmp17 = ngate_pd_8trpsr_mac_tmp16 NOT SRM2031
ngate_pd_8trpsr_mac_tmp18 = ngate_pd_8trpsr_mac_tmp17 NOT SRM2032
ngate_pd_8trpsr_mac_tmp19 = ngate_pd_8trpsr_mac_tmp18 NOT SRM2033
ngate_pd_8trpsr_mac_tmp20 = ngate_pd_8trpsr_mac_tmp19 NOT SRM2034
ngate_pd_8trpsr_mac_tmp21 = ngate_pd_8trpsr_mac_tmp20 NOT SRM2035
ngate_pd_8trpsr_mac_tmp22 = ngate_pd_8trpsr_mac_tmp21 NOT SRM2037
ngate_pd_8trpsr_mac_tmp23 = ngate_pd_8trpsr_mac_tmp22 NOT SRM2038
ngate_pd_8trpsr_mac = ngate_pd_8trpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_tpsr_mac

//* Define layer -- ngate_pg_tpsr_mac
ngate_pg_tpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_tpsr_mac_tmp02 = ngate_pg_tpsr_mac_tmp01 AND SRM
ngate_pg_tpsr_mac_tmp03 = ngate_pg_tpsr_mac_tmp02 AND SRM2010
ngate_pg_tpsr_mac_tmp04 = ngate_pg_tpsr_mac_tmp03 NOT SRM2012
ngate_pg_tpsr_mac_tmp05 = ngate_pg_tpsr_mac_tmp04 NOT SRM2013
ngate_pg_tpsr_mac_tmp06 = ngate_pg_tpsr_mac_tmp05 NOT SRM2014
ngate_pg_tpsr_mac_tmp07 = ngate_pg_tpsr_mac_tmp06 NOT SRM2015
ngate_pg_tpsr_mac_tmp08 = ngate_pg_tpsr_mac_tmp07 NOT SRM2017
ngate_pg_tpsr_mac_tmp09 = ngate_pg_tpsr_mac_tmp08 NOT SRM2018
ngate_pg_tpsr_mac_tmp10 = ngate_pg_tpsr_mac_tmp09 NOT SRM2019
ngate_pg_tpsr_mac_tmp11 = ngate_pg_tpsr_mac_tmp10 NOT SRM2020
ngate_pg_tpsr_mac_tmp12 = ngate_pg_tpsr_mac_tmp11 AND SRM2021
ngate_pg_tpsr_mac_tmp13 = ngate_pg_tpsr_mac_tmp12 AND SRM2022
ngate_pg_tpsr_mac_tmp14 = ngate_pg_tpsr_mac_tmp13 NOT SRM2025
ngate_pg_tpsr_mac_tmp15 = ngate_pg_tpsr_mac_tmp14 NOT SRM2026
ngate_pg_tpsr_mac_tmp16 = ngate_pg_tpsr_mac_tmp15 NOT SRM2030
ngate_pg_tpsr_mac_tmp17 = ngate_pg_tpsr_mac_tmp16 NOT SRM2031
ngate_pg_tpsr_mac_tmp18 = ngate_pg_tpsr_mac_tmp17 NOT SRM2032
ngate_pg_tpsr_mac_tmp19 = ngate_pg_tpsr_mac_tmp18 NOT SRM2033
ngate_pg_tpsr_mac_tmp20 = ngate_pg_tpsr_mac_tmp19 NOT SRM2034
ngate_pg_tpsr_mac_tmp21 = ngate_pg_tpsr_mac_tmp20 NOT SRM2035
ngate_pg_tpsr_mac_tmp22 = ngate_pg_tpsr_mac_tmp21 NOT SRM2037
ngate_pg_tpsr_mac_tmp23 = ngate_pg_tpsr_mac_tmp22 NOT SRM2038
ngate_pg_tpsr_mac = ngate_pg_tpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_tpsr_mac

//* Define layer -- ngate_pd_tpsr_mac
ngate_pd_tpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_tpsr_mac_tmp02 = ngate_pd_tpsr_mac_tmp01 AND SRM
ngate_pd_tpsr_mac_tmp03 = ngate_pd_tpsr_mac_tmp02 NOT SRM2010
ngate_pd_tpsr_mac_tmp04 = ngate_pd_tpsr_mac_tmp03 NOT SRM2012
ngate_pd_tpsr_mac_tmp05 = ngate_pd_tpsr_mac_tmp04 NOT SRM2013
ngate_pd_tpsr_mac_tmp06 = ngate_pd_tpsr_mac_tmp05 NOT SRM2014
ngate_pd_tpsr_mac_tmp07 = ngate_pd_tpsr_mac_tmp06 NOT SRM2015
ngate_pd_tpsr_mac_tmp08 = ngate_pd_tpsr_mac_tmp07 NOT SRM2017
ngate_pd_tpsr_mac_tmp09 = ngate_pd_tpsr_mac_tmp08 NOT SRM2018
ngate_pd_tpsr_mac_tmp10 = ngate_pd_tpsr_mac_tmp09 NOT SRM2019
ngate_pd_tpsr_mac_tmp11 = ngate_pd_tpsr_mac_tmp10 NOT SRM2020
ngate_pd_tpsr_mac_tmp12 = ngate_pd_tpsr_mac_tmp11 AND SRM2021
ngate_pd_tpsr_mac_tmp13 = ngate_pd_tpsr_mac_tmp12 AND SRM2022
ngate_pd_tpsr_mac_tmp14 = ngate_pd_tpsr_mac_tmp13 NOT SRM2025
ngate_pd_tpsr_mac_tmp15 = ngate_pd_tpsr_mac_tmp14 NOT SRM2026
ngate_pd_tpsr_mac_tmp16 = ngate_pd_tpsr_mac_tmp15 NOT SRM2030
ngate_pd_tpsr_mac_tmp17 = ngate_pd_tpsr_mac_tmp16 NOT SRM2031
ngate_pd_tpsr_mac_tmp18 = ngate_pd_tpsr_mac_tmp17 NOT SRM2032
ngate_pd_tpsr_mac_tmp19 = ngate_pd_tpsr_mac_tmp18 NOT SRM2033
ngate_pd_tpsr_mac_tmp20 = ngate_pd_tpsr_mac_tmp19 NOT SRM2034
ngate_pd_tpsr_mac_tmp21 = ngate_pd_tpsr_mac_tmp20 NOT SRM2035
ngate_pd_tpsr_mac_tmp22 = ngate_pd_tpsr_mac_tmp21 NOT SRM2037
ngate_pd_tpsr_mac_tmp23 = ngate_pd_tpsr_mac_tmp22 NOT SRM2038
ngate_pd_tpsr_mac = ngate_pd_tpsr_mac_tmp23 NOT SRM2044


//* Define device -- pmos pchpu_tpsr_mac

//* Define layer -- pgate_pu_tpsr_mac
pgate_pu_tpsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_tpsr_mac_tmp02 = pgate_pu_tpsr_mac_tmp01 AND SRM
pgate_pu_tpsr_mac_tmp03 = pgate_pu_tpsr_mac_tmp02 NOT SRM2010
pgate_pu_tpsr_mac_tmp04 = pgate_pu_tpsr_mac_tmp03 NOT SRM2012
pgate_pu_tpsr_mac_tmp05 = pgate_pu_tpsr_mac_tmp04 NOT SRM2013
pgate_pu_tpsr_mac_tmp06 = pgate_pu_tpsr_mac_tmp05 NOT SRM2014
pgate_pu_tpsr_mac_tmp07 = pgate_pu_tpsr_mac_tmp06 NOT SRM2015
pgate_pu_tpsr_mac_tmp08 = pgate_pu_tpsr_mac_tmp07 NOT SRM2017
pgate_pu_tpsr_mac_tmp09 = pgate_pu_tpsr_mac_tmp08 NOT SRM2018
pgate_pu_tpsr_mac_tmp10 = pgate_pu_tpsr_mac_tmp09 NOT SRM2019
pgate_pu_tpsr_mac_tmp11 = pgate_pu_tpsr_mac_tmp10 NOT SRM2020
pgate_pu_tpsr_mac_tmp12 = pgate_pu_tpsr_mac_tmp11 AND SRM2021
pgate_pu_tpsr_mac_tmp13 = pgate_pu_tpsr_mac_tmp12 AND SRM2022
pgate_pu_tpsr_mac_tmp14 = pgate_pu_tpsr_mac_tmp13 NOT SRM2025
pgate_pu_tpsr_mac_tmp15 = pgate_pu_tpsr_mac_tmp14 NOT SRM2026
pgate_pu_tpsr_mac_tmp16 = pgate_pu_tpsr_mac_tmp15 NOT SRM2030
pgate_pu_tpsr_mac_tmp17 = pgate_pu_tpsr_mac_tmp16 NOT SRM2031
pgate_pu_tpsr_mac_tmp18 = pgate_pu_tpsr_mac_tmp17 NOT SRM2032
pgate_pu_tpsr_mac_tmp19 = pgate_pu_tpsr_mac_tmp18 NOT SRM2033
pgate_pu_tpsr_mac_tmp20 = pgate_pu_tpsr_mac_tmp19 NOT SRM2034
pgate_pu_tpsr_mac_tmp21 = pgate_pu_tpsr_mac_tmp20 NOT SRM2035
pgate_pu_tpsr_mac_tmp22 = pgate_pu_tpsr_mac_tmp21 NOT SRM2037
pgate_pu_tpsr_mac_tmp23 = pgate_pu_tpsr_mac_tmp22 NOT SRM2038
pgate_pu_tpsr_mac = pgate_pu_tpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_tprpsr_mac

//* Define layer -- ngate_pg_tprpsr_mac
ngate_pg_tprpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_tprpsr_mac_tmp02 = ngate_pg_tprpsr_mac_tmp01 AND SRM
ngate_pg_tprpsr_mac_tmp03 = ngate_pg_tprpsr_mac_tmp02 AND SRM2010
ngate_pg_tprpsr_mac_tmp04 = ngate_pg_tprpsr_mac_tmp03 NOT SRM2012
ngate_pg_tprpsr_mac_tmp05 = ngate_pg_tprpsr_mac_tmp04 NOT SRM2013
ngate_pg_tprpsr_mac_tmp06 = ngate_pg_tprpsr_mac_tmp05 NOT SRM2014
ngate_pg_tprpsr_mac_tmp07 = ngate_pg_tprpsr_mac_tmp06 NOT SRM2015
ngate_pg_tprpsr_mac_tmp08 = ngate_pg_tprpsr_mac_tmp07 NOT SRM2017
ngate_pg_tprpsr_mac_tmp09 = ngate_pg_tprpsr_mac_tmp08 NOT SRM2018
ngate_pg_tprpsr_mac_tmp10 = ngate_pg_tprpsr_mac_tmp09 NOT SRM2019
ngate_pg_tprpsr_mac_tmp11 = ngate_pg_tprpsr_mac_tmp10 NOT SRM2020
ngate_pg_tprpsr_mac_tmp12 = ngate_pg_tprpsr_mac_tmp11 NOT SRM2021
ngate_pg_tprpsr_mac_tmp13 = ngate_pg_tprpsr_mac_tmp12 AND SRM2022
ngate_pg_tprpsr_mac_tmp14 = ngate_pg_tprpsr_mac_tmp13 NOT SRM2025
ngate_pg_tprpsr_mac_tmp15 = ngate_pg_tprpsr_mac_tmp14 NOT SRM2026
ngate_pg_tprpsr_mac_tmp16 = ngate_pg_tprpsr_mac_tmp15 NOT SRM2030
ngate_pg_tprpsr_mac_tmp17 = ngate_pg_tprpsr_mac_tmp16 NOT SRM2031
ngate_pg_tprpsr_mac_tmp18 = ngate_pg_tprpsr_mac_tmp17 NOT SRM2032
ngate_pg_tprpsr_mac_tmp19 = ngate_pg_tprpsr_mac_tmp18 NOT SRM2033
ngate_pg_tprpsr_mac_tmp20 = ngate_pg_tprpsr_mac_tmp19 NOT SRM2034
ngate_pg_tprpsr_mac_tmp21 = ngate_pg_tprpsr_mac_tmp20 NOT SRM2035
ngate_pg_tprpsr_mac_tmp22 = ngate_pg_tprpsr_mac_tmp21 NOT SRM2037
ngate_pg_tprpsr_mac_tmp23 = ngate_pg_tprpsr_mac_tmp22 NOT SRM2038
ngate_pg_tprpsr_mac = ngate_pg_tprpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_tprpsr_mac

//* Define layer -- ngate_pd_tprpsr_mac
ngate_pd_tprpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_tprpsr_mac_tmp02 = ngate_pd_tprpsr_mac_tmp01 AND SRM
ngate_pd_tprpsr_mac_tmp03 = ngate_pd_tprpsr_mac_tmp02 NOT SRM2010
ngate_pd_tprpsr_mac_tmp04 = ngate_pd_tprpsr_mac_tmp03 NOT SRM2012
ngate_pd_tprpsr_mac_tmp05 = ngate_pd_tprpsr_mac_tmp04 NOT SRM2013
ngate_pd_tprpsr_mac_tmp06 = ngate_pd_tprpsr_mac_tmp05 NOT SRM2014
ngate_pd_tprpsr_mac_tmp07 = ngate_pd_tprpsr_mac_tmp06 NOT SRM2015
ngate_pd_tprpsr_mac_tmp08 = ngate_pd_tprpsr_mac_tmp07 NOT SRM2017
ngate_pd_tprpsr_mac_tmp09 = ngate_pd_tprpsr_mac_tmp08 NOT SRM2018
ngate_pd_tprpsr_mac_tmp10 = ngate_pd_tprpsr_mac_tmp09 NOT SRM2019
ngate_pd_tprpsr_mac_tmp11 = ngate_pd_tprpsr_mac_tmp10 NOT SRM2020
ngate_pd_tprpsr_mac_tmp12 = ngate_pd_tprpsr_mac_tmp11 NOT SRM2021
ngate_pd_tprpsr_mac_tmp13 = ngate_pd_tprpsr_mac_tmp12 AND SRM2022
ngate_pd_tprpsr_mac_tmp14 = ngate_pd_tprpsr_mac_tmp13 NOT SRM2025
ngate_pd_tprpsr_mac_tmp15 = ngate_pd_tprpsr_mac_tmp14 NOT SRM2026
ngate_pd_tprpsr_mac_tmp16 = ngate_pd_tprpsr_mac_tmp15 NOT SRM2030
ngate_pd_tprpsr_mac_tmp17 = ngate_pd_tprpsr_mac_tmp16 NOT SRM2031
ngate_pd_tprpsr_mac_tmp18 = ngate_pd_tprpsr_mac_tmp17 NOT SRM2032
ngate_pd_tprpsr_mac_tmp19 = ngate_pd_tprpsr_mac_tmp18 NOT SRM2033
ngate_pd_tprpsr_mac_tmp20 = ngate_pd_tprpsr_mac_tmp19 NOT SRM2034
ngate_pd_tprpsr_mac_tmp21 = ngate_pd_tprpsr_mac_tmp20 NOT SRM2035
ngate_pd_tprpsr_mac_tmp22 = ngate_pd_tprpsr_mac_tmp21 NOT SRM2037
ngate_pd_tprpsr_mac_tmp23 = ngate_pd_tprpsr_mac_tmp22 NOT SRM2038
ngate_pd_tprpsr_mac = ngate_pd_tprpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_dpfsr_mac

//* Define layer -- ngate_pg_dpfsr_mac
ngate_pg_dpfsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_dpfsr_mac_tmp02 = ngate_pg_dpfsr_mac_tmp01 AND SRM
ngate_pg_dpfsr_mac_tmp03 = ngate_pg_dpfsr_mac_tmp02 AND SRM2010
ngate_pg_dpfsr_mac_tmp04 = ngate_pg_dpfsr_mac_tmp03 NOT SRM2012
ngate_pg_dpfsr_mac_tmp05 = ngate_pg_dpfsr_mac_tmp04 NOT SRM2013
ngate_pg_dpfsr_mac_tmp06 = ngate_pg_dpfsr_mac_tmp05 NOT SRM2014
ngate_pg_dpfsr_mac_tmp07 = ngate_pg_dpfsr_mac_tmp06 NOT SRM2015
ngate_pg_dpfsr_mac_tmp08 = ngate_pg_dpfsr_mac_tmp07 NOT SRM2017
ngate_pg_dpfsr_mac_tmp09 = ngate_pg_dpfsr_mac_tmp08 NOT SRM2018
ngate_pg_dpfsr_mac_tmp10 = ngate_pg_dpfsr_mac_tmp09 NOT SRM2019
ngate_pg_dpfsr_mac_tmp11 = ngate_pg_dpfsr_mac_tmp10 NOT SRM2020
ngate_pg_dpfsr_mac_tmp12 = ngate_pg_dpfsr_mac_tmp11 NOT SRM2021
ngate_pg_dpfsr_mac_tmp13 = ngate_pg_dpfsr_mac_tmp12 NOT SRM2022
ngate_pg_dpfsr_mac_tmp14 = ngate_pg_dpfsr_mac_tmp13 NOT SRM2025
ngate_pg_dpfsr_mac_tmp15 = ngate_pg_dpfsr_mac_tmp14 NOT SRM2026
ngate_pg_dpfsr_mac_tmp16 = ngate_pg_dpfsr_mac_tmp15 AND SRM2030
ngate_pg_dpfsr_mac = ngate_pg_dpfsr_mac_tmp16 NOT SRM2044


//* Define device -- nmos nchpd_dpfsr_mac

//* Define layer -- ngate_pd_dpfsr_mac
ngate_pd_dpfsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_dpfsr_mac_tmp02 = ngate_pd_dpfsr_mac_tmp01 AND SRM
ngate_pd_dpfsr_mac_tmp03 = ngate_pd_dpfsr_mac_tmp02 NOT SRM2010
ngate_pd_dpfsr_mac_tmp04 = ngate_pd_dpfsr_mac_tmp03 NOT SRM2012
ngate_pd_dpfsr_mac_tmp05 = ngate_pd_dpfsr_mac_tmp04 NOT SRM2013
ngate_pd_dpfsr_mac_tmp06 = ngate_pd_dpfsr_mac_tmp05 NOT SRM2014
ngate_pd_dpfsr_mac_tmp07 = ngate_pd_dpfsr_mac_tmp06 NOT SRM2015
ngate_pd_dpfsr_mac_tmp08 = ngate_pd_dpfsr_mac_tmp07 NOT SRM2017
ngate_pd_dpfsr_mac_tmp09 = ngate_pd_dpfsr_mac_tmp08 NOT SRM2018
ngate_pd_dpfsr_mac_tmp10 = ngate_pd_dpfsr_mac_tmp09 NOT SRM2019
ngate_pd_dpfsr_mac_tmp11 = ngate_pd_dpfsr_mac_tmp10 NOT SRM2020
ngate_pd_dpfsr_mac_tmp12 = ngate_pd_dpfsr_mac_tmp11 NOT SRM2021
ngate_pd_dpfsr_mac_tmp13 = ngate_pd_dpfsr_mac_tmp12 NOT SRM2022
ngate_pd_dpfsr_mac_tmp14 = ngate_pd_dpfsr_mac_tmp13 NOT SRM2025
ngate_pd_dpfsr_mac_tmp15 = ngate_pd_dpfsr_mac_tmp14 NOT SRM2026
ngate_pd_dpfsr_mac_tmp16 = ngate_pd_dpfsr_mac_tmp15 AND SRM2030
ngate_pd_dpfsr_mac = ngate_pd_dpfsr_mac_tmp16 NOT SRM2044


//* Define device -- pmos pchpu_dpfsr_mac

//* Define layer -- pgate_pu_dpfsr_mac
pgate_pu_dpfsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_dpfsr_mac_tmp02 = pgate_pu_dpfsr_mac_tmp01 AND SRM
pgate_pu_dpfsr_mac_tmp03 = pgate_pu_dpfsr_mac_tmp02 NOT SRM2010
pgate_pu_dpfsr_mac_tmp04 = pgate_pu_dpfsr_mac_tmp03 NOT SRM2012
pgate_pu_dpfsr_mac_tmp05 = pgate_pu_dpfsr_mac_tmp04 NOT SRM2013
pgate_pu_dpfsr_mac_tmp06 = pgate_pu_dpfsr_mac_tmp05 NOT SRM2014
pgate_pu_dpfsr_mac_tmp07 = pgate_pu_dpfsr_mac_tmp06 NOT SRM2015
pgate_pu_dpfsr_mac_tmp08 = pgate_pu_dpfsr_mac_tmp07 NOT SRM2017
pgate_pu_dpfsr_mac_tmp09 = pgate_pu_dpfsr_mac_tmp08 NOT SRM2018
pgate_pu_dpfsr_mac_tmp10 = pgate_pu_dpfsr_mac_tmp09 NOT SRM2019
pgate_pu_dpfsr_mac_tmp11 = pgate_pu_dpfsr_mac_tmp10 NOT SRM2020
pgate_pu_dpfsr_mac_tmp12 = pgate_pu_dpfsr_mac_tmp11 NOT SRM2021
pgate_pu_dpfsr_mac_tmp13 = pgate_pu_dpfsr_mac_tmp12 NOT SRM2022
pgate_pu_dpfsr_mac_tmp14 = pgate_pu_dpfsr_mac_tmp13 NOT SRM2025
pgate_pu_dpfsr_mac_tmp15 = pgate_pu_dpfsr_mac_tmp14 NOT SRM2026
pgate_pu_dpfsr_mac_tmp16 = pgate_pu_dpfsr_mac_tmp15 AND SRM2030
pgate_pu_dpfsr_mac = pgate_pu_dpfsr_mac_tmp16 NOT SRM2044


//* Define device -- nmos nchpg_camsr_mac

//* Define layer -- ngate_pg_camsr_mac
ngate_pg_camsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_camsr_mac_tmp02 = ngate_pg_camsr_mac_tmp01 AND SRM
ngate_pg_camsr_mac_tmp03 = ngate_pg_camsr_mac_tmp02 AND SRM2010
ngate_pg_camsr_mac_tmp04 = ngate_pg_camsr_mac_tmp03 NOT SRM2012
ngate_pg_camsr_mac_tmp05 = ngate_pg_camsr_mac_tmp04 NOT SRM2013
ngate_pg_camsr_mac_tmp06 = ngate_pg_camsr_mac_tmp05 NOT SRM2014
ngate_pg_camsr_mac_tmp07 = ngate_pg_camsr_mac_tmp06 NOT SRM2015
ngate_pg_camsr_mac_tmp08 = ngate_pg_camsr_mac_tmp07 NOT SRM2017
ngate_pg_camsr_mac_tmp09 = ngate_pg_camsr_mac_tmp08 NOT SRM2018
ngate_pg_camsr_mac_tmp10 = ngate_pg_camsr_mac_tmp09 NOT SRM2019
ngate_pg_camsr_mac_tmp11 = ngate_pg_camsr_mac_tmp10 NOT SRM2020
ngate_pg_camsr_mac_tmp12 = ngate_pg_camsr_mac_tmp11 NOT SRM2021
ngate_pg_camsr_mac_tmp13 = ngate_pg_camsr_mac_tmp12 NOT SRM2022
ngate_pg_camsr_mac_tmp14 = ngate_pg_camsr_mac_tmp13 AND SRM2025
ngate_pg_camsr_mac_tmp15 = ngate_pg_camsr_mac_tmp14 AND SRM2026
ngate_pg_camsr_mac_tmp16 = ngate_pg_camsr_mac_tmp15 NOT SRM2030
ngate_pg_camsr_mac_tmp17 = ngate_pg_camsr_mac_tmp16 NOT SRM2031
ngate_pg_camsr_mac_tmp18 = ngate_pg_camsr_mac_tmp17 NOT SRM2032
ngate_pg_camsr_mac_tmp19 = ngate_pg_camsr_mac_tmp18 NOT SRM2033
ngate_pg_camsr_mac_tmp20 = ngate_pg_camsr_mac_tmp19 NOT SRM2034
ngate_pg_camsr_mac_tmp21 = ngate_pg_camsr_mac_tmp20 NOT SRM2035
ngate_pg_camsr_mac_tmp22 = ngate_pg_camsr_mac_tmp21 NOT SRM2037
ngate_pg_camsr_mac_tmp23 = ngate_pg_camsr_mac_tmp22 NOT SRM2038
ngate_pg_camsr_mac = ngate_pg_camsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_camsr_mac

//* Define layer -- ngate_pd_camsr_mac
ngate_pd_camsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_camsr_mac_tmp02 = ngate_pd_camsr_mac_tmp01 AND SRM
ngate_pd_camsr_mac_tmp03 = ngate_pd_camsr_mac_tmp02 NOT SRM2010
ngate_pd_camsr_mac_tmp04 = ngate_pd_camsr_mac_tmp03 NOT SRM2012
ngate_pd_camsr_mac_tmp05 = ngate_pd_camsr_mac_tmp04 NOT SRM2013
ngate_pd_camsr_mac_tmp06 = ngate_pd_camsr_mac_tmp05 NOT SRM2014
ngate_pd_camsr_mac_tmp07 = ngate_pd_camsr_mac_tmp06 NOT SRM2015
ngate_pd_camsr_mac_tmp08 = ngate_pd_camsr_mac_tmp07 NOT SRM2017
ngate_pd_camsr_mac_tmp09 = ngate_pd_camsr_mac_tmp08 NOT SRM2018
ngate_pd_camsr_mac_tmp10 = ngate_pd_camsr_mac_tmp09 NOT SRM2019
ngate_pd_camsr_mac_tmp11 = ngate_pd_camsr_mac_tmp10 NOT SRM2020
ngate_pd_camsr_mac_tmp12 = ngate_pd_camsr_mac_tmp11 NOT SRM2021
ngate_pd_camsr_mac_tmp13 = ngate_pd_camsr_mac_tmp12 NOT SRM2022
ngate_pd_camsr_mac_tmp14 = ngate_pd_camsr_mac_tmp13 AND SRM2025
ngate_pd_camsr_mac_tmp15 = ngate_pd_camsr_mac_tmp14 AND SRM2026
ngate_pd_camsr_mac_tmp16 = ngate_pd_camsr_mac_tmp15 NOT SRM2030
ngate_pd_camsr_mac_tmp17 = ngate_pd_camsr_mac_tmp16 NOT SRM2031
ngate_pd_camsr_mac_tmp18 = ngate_pd_camsr_mac_tmp17 NOT SRM2032
ngate_pd_camsr_mac_tmp19 = ngate_pd_camsr_mac_tmp18 NOT SRM2033
ngate_pd_camsr_mac_tmp20 = ngate_pd_camsr_mac_tmp19 NOT SRM2034
ngate_pd_camsr_mac_tmp21 = ngate_pd_camsr_mac_tmp20 NOT SRM2035
ngate_pd_camsr_mac_tmp22 = ngate_pd_camsr_mac_tmp21 NOT SRM2037
ngate_pd_camsr_mac_tmp23 = ngate_pd_camsr_mac_tmp22 NOT SRM2038
ngate_pd_camsr_mac = ngate_pd_camsr_mac_tmp23 NOT SRM2044


//* Define device -- pmos pchpu_camsr_mac

//* Define layer -- pgate_pu_camsr_mac
pgate_pu_camsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_camsr_mac_tmp02 = pgate_pu_camsr_mac_tmp01 AND SRM
pgate_pu_camsr_mac_tmp03 = pgate_pu_camsr_mac_tmp02 NOT SRM2010
pgate_pu_camsr_mac_tmp04 = pgate_pu_camsr_mac_tmp03 NOT SRM2012
pgate_pu_camsr_mac_tmp05 = pgate_pu_camsr_mac_tmp04 NOT SRM2013
pgate_pu_camsr_mac_tmp06 = pgate_pu_camsr_mac_tmp05 NOT SRM2014
pgate_pu_camsr_mac_tmp07 = pgate_pu_camsr_mac_tmp06 NOT SRM2015
pgate_pu_camsr_mac_tmp08 = pgate_pu_camsr_mac_tmp07 NOT SRM2017
pgate_pu_camsr_mac_tmp09 = pgate_pu_camsr_mac_tmp08 NOT SRM2018
pgate_pu_camsr_mac_tmp10 = pgate_pu_camsr_mac_tmp09 NOT SRM2019
pgate_pu_camsr_mac_tmp11 = pgate_pu_camsr_mac_tmp10 NOT SRM2020
pgate_pu_camsr_mac_tmp12 = pgate_pu_camsr_mac_tmp11 NOT SRM2021
pgate_pu_camsr_mac_tmp13 = pgate_pu_camsr_mac_tmp12 NOT SRM2022
pgate_pu_camsr_mac_tmp14 = pgate_pu_camsr_mac_tmp13 AND SRM2025
pgate_pu_camsr_mac_tmp15 = pgate_pu_camsr_mac_tmp14 AND SRM2026
pgate_pu_camsr_mac_tmp16 = pgate_pu_camsr_mac_tmp15 NOT SRM2030
pgate_pu_camsr_mac_tmp17 = pgate_pu_camsr_mac_tmp16 NOT SRM2031
pgate_pu_camsr_mac_tmp18 = pgate_pu_camsr_mac_tmp17 NOT SRM2032
pgate_pu_camsr_mac_tmp19 = pgate_pu_camsr_mac_tmp18 NOT SRM2033
pgate_pu_camsr_mac_tmp20 = pgate_pu_camsr_mac_tmp19 NOT SRM2034
pgate_pu_camsr_mac_tmp21 = pgate_pu_camsr_mac_tmp20 NOT SRM2035
pgate_pu_camsr_mac_tmp22 = pgate_pu_camsr_mac_tmp21 NOT SRM2037
pgate_pu_camsr_mac_tmp23 = pgate_pu_camsr_mac_tmp22 NOT SRM2038
pgate_pu_camsr_mac = pgate_pu_camsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_camcpsr_mac

//* Define layer -- ngate_pg_camcpsr_mac
ngate_pg_camcpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_camcpsr_mac_tmp02 = ngate_pg_camcpsr_mac_tmp01 AND SRM
ngate_pg_camcpsr_mac_tmp03 = ngate_pg_camcpsr_mac_tmp02 AND SRM2010
ngate_pg_camcpsr_mac_tmp04 = ngate_pg_camcpsr_mac_tmp03 NOT SRM2012
ngate_pg_camcpsr_mac_tmp05 = ngate_pg_camcpsr_mac_tmp04 NOT SRM2013
ngate_pg_camcpsr_mac_tmp06 = ngate_pg_camcpsr_mac_tmp05 NOT SRM2014
ngate_pg_camcpsr_mac_tmp07 = ngate_pg_camcpsr_mac_tmp06 NOT SRM2015
ngate_pg_camcpsr_mac_tmp08 = ngate_pg_camcpsr_mac_tmp07 NOT SRM2017
ngate_pg_camcpsr_mac_tmp09 = ngate_pg_camcpsr_mac_tmp08 NOT SRM2018
ngate_pg_camcpsr_mac_tmp10 = ngate_pg_camcpsr_mac_tmp09 NOT SRM2019
ngate_pg_camcpsr_mac_tmp11 = ngate_pg_camcpsr_mac_tmp10 NOT SRM2020
ngate_pg_camcpsr_mac_tmp12 = ngate_pg_camcpsr_mac_tmp11 NOT SRM2021
ngate_pg_camcpsr_mac_tmp13 = ngate_pg_camcpsr_mac_tmp12 NOT SRM2022
ngate_pg_camcpsr_mac_tmp14 = ngate_pg_camcpsr_mac_tmp13 NOT SRM2025
ngate_pg_camcpsr_mac_tmp15 = ngate_pg_camcpsr_mac_tmp14 AND SRM2026
ngate_pg_camcpsr_mac_tmp16 = ngate_pg_camcpsr_mac_tmp15 NOT SRM2030
ngate_pg_camcpsr_mac_tmp17 = ngate_pg_camcpsr_mac_tmp16 NOT SRM2031
ngate_pg_camcpsr_mac_tmp18 = ngate_pg_camcpsr_mac_tmp17 NOT SRM2032
ngate_pg_camcpsr_mac_tmp19 = ngate_pg_camcpsr_mac_tmp18 NOT SRM2033
ngate_pg_camcpsr_mac_tmp20 = ngate_pg_camcpsr_mac_tmp19 NOT SRM2034
ngate_pg_camcpsr_mac_tmp21 = ngate_pg_camcpsr_mac_tmp20 NOT SRM2035
ngate_pg_camcpsr_mac_tmp22 = ngate_pg_camcpsr_mac_tmp21 NOT SRM2037
ngate_pg_camcpsr_mac_tmp23 = ngate_pg_camcpsr_mac_tmp22 NOT SRM2038
ngate_pg_camcpsr_mac = ngate_pg_camcpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_camcpsr_mac

//* Define layer -- ngate_pd_camcpsr_mac
ngate_pd_camcpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_camcpsr_mac_tmp02 = ngate_pd_camcpsr_mac_tmp01 AND SRM
ngate_pd_camcpsr_mac_tmp03 = ngate_pd_camcpsr_mac_tmp02 NOT SRM2010
ngate_pd_camcpsr_mac_tmp04 = ngate_pd_camcpsr_mac_tmp03 NOT SRM2012
ngate_pd_camcpsr_mac_tmp05 = ngate_pd_camcpsr_mac_tmp04 NOT SRM2013
ngate_pd_camcpsr_mac_tmp06 = ngate_pd_camcpsr_mac_tmp05 NOT SRM2014
ngate_pd_camcpsr_mac_tmp07 = ngate_pd_camcpsr_mac_tmp06 NOT SRM2015
ngate_pd_camcpsr_mac_tmp08 = ngate_pd_camcpsr_mac_tmp07 NOT SRM2017
ngate_pd_camcpsr_mac_tmp09 = ngate_pd_camcpsr_mac_tmp08 NOT SRM2018
ngate_pd_camcpsr_mac_tmp10 = ngate_pd_camcpsr_mac_tmp09 NOT SRM2019
ngate_pd_camcpsr_mac_tmp11 = ngate_pd_camcpsr_mac_tmp10 NOT SRM2020
ngate_pd_camcpsr_mac_tmp12 = ngate_pd_camcpsr_mac_tmp11 NOT SRM2021
ngate_pd_camcpsr_mac_tmp13 = ngate_pd_camcpsr_mac_tmp12 NOT SRM2022
ngate_pd_camcpsr_mac_tmp14 = ngate_pd_camcpsr_mac_tmp13 NOT SRM2025
ngate_pd_camcpsr_mac_tmp15 = ngate_pd_camcpsr_mac_tmp14 AND SRM2026
ngate_pd_camcpsr_mac_tmp16 = ngate_pd_camcpsr_mac_tmp15 NOT SRM2030
ngate_pd_camcpsr_mac_tmp17 = ngate_pd_camcpsr_mac_tmp16 NOT SRM2031
ngate_pd_camcpsr_mac_tmp18 = ngate_pd_camcpsr_mac_tmp17 NOT SRM2032
ngate_pd_camcpsr_mac_tmp19 = ngate_pd_camcpsr_mac_tmp18 NOT SRM2033
ngate_pd_camcpsr_mac_tmp20 = ngate_pd_camcpsr_mac_tmp19 NOT SRM2034
ngate_pd_camcpsr_mac_tmp21 = ngate_pd_camcpsr_mac_tmp20 NOT SRM2035
ngate_pd_camcpsr_mac_tmp22 = ngate_pd_camcpsr_mac_tmp21 NOT SRM2037
ngate_pd_camcpsr_mac_tmp23 = ngate_pd_camcpsr_mac_tmp22 NOT SRM2038
ngate_pd_camcpsr_mac = ngate_pd_camcpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_hdcamsr_mac

//* Define layer -- ngate_pg_hdcamsr_mac
ngate_pg_hdcamsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hdcamsr_mac_tmp02 = ngate_pg_hdcamsr_mac_tmp01 AND SRM
ngate_pg_hdcamsr_mac_tmp03 = ngate_pg_hdcamsr_mac_tmp02 AND SRM2010
ngate_pg_hdcamsr_mac_tmp04 = ngate_pg_hdcamsr_mac_tmp03 NOT SRM2012
ngate_pg_hdcamsr_mac_tmp05 = ngate_pg_hdcamsr_mac_tmp04 NOT SRM2013
ngate_pg_hdcamsr_mac_tmp06 = ngate_pg_hdcamsr_mac_tmp05 NOT SRM2014
ngate_pg_hdcamsr_mac_tmp07 = ngate_pg_hdcamsr_mac_tmp06 NOT SRM2015
ngate_pg_hdcamsr_mac_tmp08 = ngate_pg_hdcamsr_mac_tmp07 NOT SRM2017
ngate_pg_hdcamsr_mac_tmp09 = ngate_pg_hdcamsr_mac_tmp08 NOT SRM2018
ngate_pg_hdcamsr_mac_tmp10 = ngate_pg_hdcamsr_mac_tmp09 NOT SRM2019
ngate_pg_hdcamsr_mac_tmp11 = ngate_pg_hdcamsr_mac_tmp10 NOT SRM2020
ngate_pg_hdcamsr_mac_tmp12 = ngate_pg_hdcamsr_mac_tmp11 NOT SRM2021
ngate_pg_hdcamsr_mac_tmp13 = ngate_pg_hdcamsr_mac_tmp12 NOT SRM2022
ngate_pg_hdcamsr_mac_tmp14 = ngate_pg_hdcamsr_mac_tmp13 AND SRM2025
ngate_pg_hdcamsr_mac_tmp15 = ngate_pg_hdcamsr_mac_tmp14 AND SRM2026
ngate_pg_hdcamsr_mac_tmp16 = ngate_pg_hdcamsr_mac_tmp15 NOT SRM2030
ngate_pg_hdcamsr_mac_tmp17 = ngate_pg_hdcamsr_mac_tmp16 AND SRM2031
ngate_pg_hdcamsr_mac_tmp18 = ngate_pg_hdcamsr_mac_tmp17 NOT SRM2032
ngate_pg_hdcamsr_mac_tmp19 = ngate_pg_hdcamsr_mac_tmp18 NOT SRM2033
ngate_pg_hdcamsr_mac_tmp20 = ngate_pg_hdcamsr_mac_tmp19 NOT SRM2034
ngate_pg_hdcamsr_mac_tmp21 = ngate_pg_hdcamsr_mac_tmp20 NOT SRM2035
ngate_pg_hdcamsr_mac_tmp22 = ngate_pg_hdcamsr_mac_tmp21 NOT SRM2037
ngate_pg_hdcamsr_mac_tmp23 = ngate_pg_hdcamsr_mac_tmp22 NOT SRM2038
ngate_pg_hdcamsr_mac = ngate_pg_hdcamsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_hdcamsr_mac

//* Define layer -- ngate_pd_hdcamsr_mac
ngate_pd_hdcamsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hdcamsr_mac_tmp02 = ngate_pd_hdcamsr_mac_tmp01 AND SRM
ngate_pd_hdcamsr_mac_tmp03 = ngate_pd_hdcamsr_mac_tmp02 NOT SRM2010
ngate_pd_hdcamsr_mac_tmp04 = ngate_pd_hdcamsr_mac_tmp03 NOT SRM2012
ngate_pd_hdcamsr_mac_tmp05 = ngate_pd_hdcamsr_mac_tmp04 NOT SRM2013
ngate_pd_hdcamsr_mac_tmp06 = ngate_pd_hdcamsr_mac_tmp05 NOT SRM2014
ngate_pd_hdcamsr_mac_tmp07 = ngate_pd_hdcamsr_mac_tmp06 NOT SRM2015
ngate_pd_hdcamsr_mac_tmp08 = ngate_pd_hdcamsr_mac_tmp07 NOT SRM2017
ngate_pd_hdcamsr_mac_tmp09 = ngate_pd_hdcamsr_mac_tmp08 NOT SRM2018
ngate_pd_hdcamsr_mac_tmp10 = ngate_pd_hdcamsr_mac_tmp09 NOT SRM2019
ngate_pd_hdcamsr_mac_tmp11 = ngate_pd_hdcamsr_mac_tmp10 NOT SRM2020
ngate_pd_hdcamsr_mac_tmp12 = ngate_pd_hdcamsr_mac_tmp11 NOT SRM2021
ngate_pd_hdcamsr_mac_tmp13 = ngate_pd_hdcamsr_mac_tmp12 NOT SRM2022
ngate_pd_hdcamsr_mac_tmp14 = ngate_pd_hdcamsr_mac_tmp13 AND SRM2025
ngate_pd_hdcamsr_mac_tmp15 = ngate_pd_hdcamsr_mac_tmp14 AND SRM2026
ngate_pd_hdcamsr_mac_tmp16 = ngate_pd_hdcamsr_mac_tmp15 NOT SRM2030
ngate_pd_hdcamsr_mac_tmp17 = ngate_pd_hdcamsr_mac_tmp16 AND SRM2031
ngate_pd_hdcamsr_mac_tmp18 = ngate_pd_hdcamsr_mac_tmp17 NOT SRM2032
ngate_pd_hdcamsr_mac_tmp19 = ngate_pd_hdcamsr_mac_tmp18 NOT SRM2033
ngate_pd_hdcamsr_mac_tmp20 = ngate_pd_hdcamsr_mac_tmp19 NOT SRM2034
ngate_pd_hdcamsr_mac_tmp21 = ngate_pd_hdcamsr_mac_tmp20 NOT SRM2035
ngate_pd_hdcamsr_mac_tmp22 = ngate_pd_hdcamsr_mac_tmp21 NOT SRM2037
ngate_pd_hdcamsr_mac_tmp23 = ngate_pd_hdcamsr_mac_tmp22 NOT SRM2038
ngate_pd_hdcamsr_mac = ngate_pd_hdcamsr_mac_tmp23 NOT SRM2044


//* Define device -- pmos pchpu_hdcamsr_mac

//* Define layer -- pgate_pu_hdcamsr_mac
pgate_pu_hdcamsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hdcamsr_mac_tmp02 = pgate_pu_hdcamsr_mac_tmp01 AND SRM
pgate_pu_hdcamsr_mac_tmp03 = pgate_pu_hdcamsr_mac_tmp02 NOT SRM2010
pgate_pu_hdcamsr_mac_tmp04 = pgate_pu_hdcamsr_mac_tmp03 NOT SRM2012
pgate_pu_hdcamsr_mac_tmp05 = pgate_pu_hdcamsr_mac_tmp04 NOT SRM2013
pgate_pu_hdcamsr_mac_tmp06 = pgate_pu_hdcamsr_mac_tmp05 NOT SRM2014
pgate_pu_hdcamsr_mac_tmp07 = pgate_pu_hdcamsr_mac_tmp06 NOT SRM2015
pgate_pu_hdcamsr_mac_tmp08 = pgate_pu_hdcamsr_mac_tmp07 NOT SRM2017
pgate_pu_hdcamsr_mac_tmp09 = pgate_pu_hdcamsr_mac_tmp08 NOT SRM2018
pgate_pu_hdcamsr_mac_tmp10 = pgate_pu_hdcamsr_mac_tmp09 NOT SRM2019
pgate_pu_hdcamsr_mac_tmp11 = pgate_pu_hdcamsr_mac_tmp10 NOT SRM2020
pgate_pu_hdcamsr_mac_tmp12 = pgate_pu_hdcamsr_mac_tmp11 NOT SRM2021
pgate_pu_hdcamsr_mac_tmp13 = pgate_pu_hdcamsr_mac_tmp12 NOT SRM2022
pgate_pu_hdcamsr_mac_tmp14 = pgate_pu_hdcamsr_mac_tmp13 AND SRM2025
pgate_pu_hdcamsr_mac_tmp15 = pgate_pu_hdcamsr_mac_tmp14 AND SRM2026
pgate_pu_hdcamsr_mac_tmp16 = pgate_pu_hdcamsr_mac_tmp15 NOT SRM2030
pgate_pu_hdcamsr_mac_tmp17 = pgate_pu_hdcamsr_mac_tmp16 AND SRM2031
pgate_pu_hdcamsr_mac_tmp18 = pgate_pu_hdcamsr_mac_tmp17 NOT SRM2032
pgate_pu_hdcamsr_mac_tmp19 = pgate_pu_hdcamsr_mac_tmp18 NOT SRM2033
pgate_pu_hdcamsr_mac_tmp20 = pgate_pu_hdcamsr_mac_tmp19 NOT SRM2034
pgate_pu_hdcamsr_mac_tmp21 = pgate_pu_hdcamsr_mac_tmp20 NOT SRM2035
pgate_pu_hdcamsr_mac_tmp22 = pgate_pu_hdcamsr_mac_tmp21 NOT SRM2037
pgate_pu_hdcamsr_mac_tmp23 = pgate_pu_hdcamsr_mac_tmp22 NOT SRM2038
pgate_pu_hdcamsr_mac = pgate_pu_hdcamsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpg_hdcamcpsr_mac

//* Define layer -- ngate_pg_hdcamcpsr_mac
ngate_pg_hdcamcpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hdcamcpsr_mac_tmp02 = ngate_pg_hdcamcpsr_mac_tmp01 AND SRM
ngate_pg_hdcamcpsr_mac_tmp03 = ngate_pg_hdcamcpsr_mac_tmp02 AND SRM2010
ngate_pg_hdcamcpsr_mac_tmp04 = ngate_pg_hdcamcpsr_mac_tmp03 NOT SRM2012
ngate_pg_hdcamcpsr_mac_tmp05 = ngate_pg_hdcamcpsr_mac_tmp04 NOT SRM2013
ngate_pg_hdcamcpsr_mac_tmp06 = ngate_pg_hdcamcpsr_mac_tmp05 NOT SRM2014
ngate_pg_hdcamcpsr_mac_tmp07 = ngate_pg_hdcamcpsr_mac_tmp06 NOT SRM2015
ngate_pg_hdcamcpsr_mac_tmp08 = ngate_pg_hdcamcpsr_mac_tmp07 NOT SRM2017
ngate_pg_hdcamcpsr_mac_tmp09 = ngate_pg_hdcamcpsr_mac_tmp08 NOT SRM2018
ngate_pg_hdcamcpsr_mac_tmp10 = ngate_pg_hdcamcpsr_mac_tmp09 NOT SRM2019
ngate_pg_hdcamcpsr_mac_tmp11 = ngate_pg_hdcamcpsr_mac_tmp10 NOT SRM2020
ngate_pg_hdcamcpsr_mac_tmp12 = ngate_pg_hdcamcpsr_mac_tmp11 NOT SRM2021
ngate_pg_hdcamcpsr_mac_tmp13 = ngate_pg_hdcamcpsr_mac_tmp12 NOT SRM2022
ngate_pg_hdcamcpsr_mac_tmp14 = ngate_pg_hdcamcpsr_mac_tmp13 NOT SRM2025
ngate_pg_hdcamcpsr_mac_tmp15 = ngate_pg_hdcamcpsr_mac_tmp14 AND SRM2026
ngate_pg_hdcamcpsr_mac_tmp16 = ngate_pg_hdcamcpsr_mac_tmp15 NOT SRM2030
ngate_pg_hdcamcpsr_mac_tmp17 = ngate_pg_hdcamcpsr_mac_tmp16 AND SRM2031
ngate_pg_hdcamcpsr_mac_tmp18 = ngate_pg_hdcamcpsr_mac_tmp17 NOT SRM2032
ngate_pg_hdcamcpsr_mac_tmp19 = ngate_pg_hdcamcpsr_mac_tmp18 NOT SRM2033
ngate_pg_hdcamcpsr_mac_tmp20 = ngate_pg_hdcamcpsr_mac_tmp19 NOT SRM2034
ngate_pg_hdcamcpsr_mac_tmp21 = ngate_pg_hdcamcpsr_mac_tmp20 NOT SRM2035
ngate_pg_hdcamcpsr_mac_tmp22 = ngate_pg_hdcamcpsr_mac_tmp21 NOT SRM2037
ngate_pg_hdcamcpsr_mac_tmp23 = ngate_pg_hdcamcpsr_mac_tmp22 NOT SRM2038
ngate_pg_hdcamcpsr_mac = ngate_pg_hdcamcpsr_mac_tmp23 NOT SRM2044


//* Define device -- nmos nchpd_hdcamcpsr_mac

//* Define layer -- ngate_pd_hdcamcpsr_mac
ngate_pd_hdcamcpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hdcamcpsr_mac_tmp02 = ngate_pd_hdcamcpsr_mac_tmp01 AND SRM
ngate_pd_hdcamcpsr_mac_tmp03 = ngate_pd_hdcamcpsr_mac_tmp02 NOT SRM2010
ngate_pd_hdcamcpsr_mac_tmp04 = ngate_pd_hdcamcpsr_mac_tmp03 NOT SRM2012
ngate_pd_hdcamcpsr_mac_tmp05 = ngate_pd_hdcamcpsr_mac_tmp04 NOT SRM2013
ngate_pd_hdcamcpsr_mac_tmp06 = ngate_pd_hdcamcpsr_mac_tmp05 NOT SRM2014
ngate_pd_hdcamcpsr_mac_tmp07 = ngate_pd_hdcamcpsr_mac_tmp06 NOT SRM2015
ngate_pd_hdcamcpsr_mac_tmp08 = ngate_pd_hdcamcpsr_mac_tmp07 NOT SRM2017
ngate_pd_hdcamcpsr_mac_tmp09 = ngate_pd_hdcamcpsr_mac_tmp08 NOT SRM2018
ngate_pd_hdcamcpsr_mac_tmp10 = ngate_pd_hdcamcpsr_mac_tmp09 NOT SRM2019
ngate_pd_hdcamcpsr_mac_tmp11 = ngate_pd_hdcamcpsr_mac_tmp10 NOT SRM2020
ngate_pd_hdcamcpsr_mac_tmp12 = ngate_pd_hdcamcpsr_mac_tmp11 NOT SRM2021
ngate_pd_hdcamcpsr_mac_tmp13 = ngate_pd_hdcamcpsr_mac_tmp12 NOT SRM2022
ngate_pd_hdcamcpsr_mac_tmp14 = ngate_pd_hdcamcpsr_mac_tmp13 NOT SRM2025
ngate_pd_hdcamcpsr_mac_tmp15 = ngate_pd_hdcamcpsr_mac_tmp14 AND SRM2026
ngate_pd_hdcamcpsr_mac_tmp16 = ngate_pd_hdcamcpsr_mac_tmp15 NOT SRM2030
ngate_pd_hdcamcpsr_mac_tmp17 = ngate_pd_hdcamcpsr_mac_tmp16 AND SRM2031
ngate_pd_hdcamcpsr_mac_tmp18 = ngate_pd_hdcamcpsr_mac_tmp17 NOT SRM2032
ngate_pd_hdcamcpsr_mac_tmp19 = ngate_pd_hdcamcpsr_mac_tmp18 NOT SRM2033
ngate_pd_hdcamcpsr_mac_tmp20 = ngate_pd_hdcamcpsr_mac_tmp19 NOT SRM2034
ngate_pd_hdcamcpsr_mac_tmp21 = ngate_pd_hdcamcpsr_mac_tmp20 NOT SRM2035
ngate_pd_hdcamcpsr_mac_tmp22 = ngate_pd_hdcamcpsr_mac_tmp21 NOT SRM2037
ngate_pd_hdcamcpsr_mac_tmp23 = ngate_pd_hdcamcpsr_mac_tmp22 NOT SRM2038
ngate_pd_hdcamcpsr_mac = ngate_pd_hdcamcpsr_mac_tmp23 NOT SRM2044


//***** Define connectivity/via layer -- nch_mpodesvt_mac_gate ****
PO2 = POi OR SR_DPO 
TCDOVL = TCDDMY OR ICOVL 
PO3 = PO2 NOT TCDOVL  //  Under TCDDMY not support devices
CPO = CPOi OR DCPO  //  poly cut layer
poly_cut = COPY CPO 
POx = PO3 NOT poly_cut  //  Real physical poly
poly_org = COPY POx 
realpo = poly_org NOT SR_DPO  //  poly for device formation
ODz = ODi OR SR_DOD 
SRM_all = SRM OR SRAMDMY 
SRMDEV = SRMDEVi AND SRM_all 
ODy = ODz OR SRMDEV  //  SRMDEV could used to calculate length of bent sram
ODv = ODy NOT TCDOVL  //  Under TCDDMY not support devices
ODx = COPY ODv 
RODMY_srm = RODMY AND SRM_all 
OD = ODx NOT RODMY_srm 
diffa2 = OD NOT RODMY_srm 
MDz = MDi OR DMD 
CMD = CMDi OR DCMD  //  MD cut layer
MDx = MDz NOT CMD 
diff1 = diffa2 INTERACT MDx 
diff_MD = diff1 OR MDx 
MD_valid2 = MDx INTERACT VDi 
MD_valid4 = MDx WITH TEXT "?" MD_text
MD_valid_all1 = MD_valid2 OR MD_valid4 
VG_VDR = VGi INTERACT VDRi 
VDR = VDRi OR VG_VDR 
MD_valid5 = MDx INTERACT VDR 
MD_valid = MD_valid_all1 OR MD_valid5 
diff_valid = diff_MD INTERACT MD_valid 
diffa = diffa2 AND diff_valid 
diff = diffa INTERACT MDx 
dumpo1 = poly_org INSIDE diff 
dumpo2 = dumpo1 NOT INTERACT VGi 
gate1a = realpo NOT dumpo2 
mdiff1 = COPY diff 
diff_float = diffa2 NOT mdiff1 
valid_PO2 = POx WITH TEXT "?" poly_text
valid_PO3 = POx INTERACT VGi 
valid_PO = valid_PO2 OR valid_PO3 
mdiff2 = diff_float INTERACT valid_PO  //  OD float connect to valid poly
mdiff_all1 = mdiff1 OR mdiff2 
mdiff_all2 = diffa2 NOT mdiff_all1 
mdiff = diffa2 NOT mdiff_all2 
gate1 = gate1a AND mdiff 
gate_a = gate1 NOT SRM_all 
gate = gate_a NOT RFDMY 
gatennw = gate NOT nxwell  //  gate not inside nwell ( nmos gate )
dc3_np = DC3 AND NPi 
dc2_io_fb2_np = DC2_IO_FB2 AND NPi 
final_dc_np = dc3_np OR dc2_io_fb2_np 
dc3_pp = DC3 AND PPi 
dc1_pp1 = dc3_np OR dc3_pp 
dc1_pp = DC1 NOT dc1_pp1 
final_dc_pp1 = dc3_pp OR dc1_pp 
dc2_io_fb2_pp = DC2_IO_FB2 AND PPi 
final_dc_pp2 = final_dc_pp1 OR dc2_io_fb2_pp 
dc2_io_pp1 = dc2_io_fb2_np OR dc2_io_fb2_pp 
dc2_io_pp = DC2_IO NOT dc2_io_pp1 
final_dc_pp3 = final_dc_pp2 OR dc2_io_pp 
final_dc_pp = final_dc_pp3 OR DC_OTHERS 
dc_implant = final_dc_np OR final_dc_pp 
NP1 = NPi NOT dc_implant 
NP = NP1 OR final_dc_np 
tngate0 = gatennw AND NP 
VAR = VARi NOT SR_DOD 
BJTDMY1 = BJTDMYi OR IBJTDMY 
BJTDMY = BJTDMY1 NOT SR_DOD 
mos_exclude_layer1 = VAR OR BJTDMY 
DIODMY = DIODMYi NOT SR_DOD 
mos_exclude_layer2 = mos_exclude_layer1 OR DIODMY 
mos_exclude_layer3 = mos_exclude_layer2 OR GATED 
mos_exclude_layer4 = mos_exclude_layer3 OR NWDMY 
mos_exclude_layer = mos_exclude_layer4 OR HIA_DUMMY 
tngate1 = tngate0 NOT mos_exclude_layer 
PODE_GATE = PODE_GATEi AND POx 
Small_Poly3 = POx AND OD 
Small_Poly2 = Small_Poly3 AND PODE_GATE 
EXT_OD_CORN = EXT OD < MINGRID_RECT1 ABUT == 90 REGION INTERSECTING ONLY
Small_Poly = Small_Poly2 INTERACT EXT_OD_CORN 
Small_gate_edge1 = Small_Poly INSIDE EDGE OD 
PO = POx NOT SR_DPO  //  For device formation
Small_gate_edge = Small_gate_edge1 TOUCH EDGE PO
Pre_Small_gate1 = INT Small_gate_edge < L_SHAPE_OD_GATE_LEN OPPOSITE PARALLEL ONLY REGION
INT_OD_CORN = INT OD < MINGRID_RECT1 ABUT == 90 REGION INTERSECTING ONLY
Mpode_gate1 = Small_Poly2 NOT INTERACT INT_OD_CORN 
Mpode_gate = Mpode_gate1 NOT INTERACT EXT_OD_CORN 
Pre_Small_gate = Pre_Small_gate1 OR Mpode_gate 
PODE_4T = PODE_GATE AND Pre_Small_gate 
nch_mpode_mac_gate1 = tngate1 AND PODE_4T 
OD2 = COPY OD12 
nch_mpode_mac_gate2 = nch_mpode_mac_gate1 NOT OD2 
dc3_nelvt = COPY dc3_np 
final_dc_nelvt = COPY dc3_nelvt 
dc2_nsvt = COPY dc2_io_fb2_np 
final_dc_nsvt = COPY dc2_nsvt 
dc_vt_all1 = final_dc_nelvt OR final_dc_nsvt 
dc2_pelvt1 = DC2_IO NOT dc2_io_pp1 
dc2_pelvt = dc2_pelvt1 OR dc2_io_fb2_pp 
final_dc_pelvt1 = DC1 NOT DC3 
final_dc_pelvt2 = dc2_pelvt OR final_dc_pelvt1 
dc3_pelvt = COPY dc3_pp 
final_dc_pelvt3 = final_dc_pelvt2 OR dc3_pelvt 
final_dc_pelvt = final_dc_pelvt3 OR DC_OTHERS 
dc_vt_all = dc_vt_all1 OR final_dc_pelvt 
VTS_N1 = VTS_Ni NOT dc_vt_all 
VTS_N = VTS_N1 OR final_dc_nsvt 
nch_mpodesvt_mac_gate = nch_mpode_mac_gate2 INTERACT VTS_N 

//***** Define connectivity/via layer -- nch_mpodelvt_mac_gate ****
VTL_N = VTL_Ni NOT dc_vt_all 
nch_mpodelvt_mac_gate1 = nch_mpode_mac_gate2 INTERACT VTL_N 
nch_mpodelvt_mac_gate3 = nch_mpodelvt_mac_gate1 NOT INTERACT VTS_N 
VTL_NLL = VTLN_LL NOT dc_vt_all 
nch_mpodelvt_mac_gate = nch_mpodelvt_mac_gate3 NOT INTERACT VTL_NLL 

//***** Define connectivity/via layer -- nch_mpodeulvt_mac_gate ****
VTUL_N = VTUL_Ni NOT dc_vt_all 
nch_mpodeulvt_mac_gate1 = nch_mpode_mac_gate2 INTERACT VTUL_N 
nch_mpodeulvt_mac_gate3 = nch_mpodeulvt_mac_gate1 NOT INTERACT VTS_N 
nch_mpodeulvt_mac_gate4 = nch_mpodeulvt_mac_gate3 NOT INTERACT VTL_NLL 
nch_mpodeulvt_mac_gate5 = nch_mpodeulvt_mac_gate4 NOT INTERACT VTL_N 
VTUL_NLL = VTULN_LL NOT dc_vt_all 
nch_mpodeulvt_mac_gate = nch_mpodeulvt_mac_gate5 NOT INTERACT VTUL_NLL 

//***** Define connectivity/via layer -- nch_mpodeelvt_mac_gate ****
VTEL_N1 = VTEL_Ni NOT dc_vt_all 
VTEL_N = VTEL_N1 OR final_dc_nelvt 
nch_mpodeelvt_mac_gate1 = nch_mpode_mac_gate2 INTERACT VTEL_N 
nch_mpodeelvt_mac_gate3 = nch_mpodeelvt_mac_gate1 NOT INTERACT VTS_N 
nch_mpodeelvt_mac_gate4 = nch_mpodeelvt_mac_gate3 NOT INTERACT VTL_NLL 
nch_mpodeelvt_mac_gate5 = nch_mpodeelvt_mac_gate4 NOT INTERACT VTL_N 
nch_mpodeelvt_mac_gate6 = nch_mpodeelvt_mac_gate5 NOT INTERACT VTUL_NLL 
nch_mpodeelvt_mac_gate = nch_mpodeelvt_mac_gate6 NOT INTERACT VTUL_N 

//***** Define connectivity/via layer -- nch_mpodelvtll_mac_gate ****
nch_mpodelvtll_mac_gate1 = nch_mpode_mac_gate2 INTERACT VTL_NLL 
nch_mpodelvtll_mac_gate = nch_mpodelvtll_mac_gate1 NOT INTERACT VTS_N 

//***** Define connectivity/via layer -- nch_mpodeulvtll_mac_gate ****
nch_mpodeulvtll_mac_gate1 = nch_mpode_mac_gate2 INTERACT VTUL_NLL 
nch_mpodeulvtll_mac_gate3 = nch_mpodeulvtll_mac_gate1 NOT INTERACT VTS_N 
nch_mpodeulvtll_mac_gate4 = nch_mpodeulvtll_mac_gate3 NOT INTERACT VTL_NLL 
nch_mpodeulvtll_mac_gate = nch_mpodeulvtll_mac_gate4 NOT INTERACT VTL_N 

//***** Define connectivity/via layer -- nch_mpode12_mac_gate ****
nch_mpode12_mac_gate1 = nch_mpode_mac_gate1 AND OD12 
nch_mpode12_mac_gate = nch_mpode12_mac_gate1 NOT OD12_15 

//* Define device -- nmos nch_mpode12od15_mac
nch_mpode12od15_mac_gate = nch_mpode12_mac_gate1 AND OD12_15 

//***** Define connectivity/via layer -- pch_mpodesvt_mac_gate ****
gatenw = gate AND nxwell  //  gate inside nwell ( pmos gate )
PP1 = PPi NOT dc_implant 
PP = PP1 OR final_dc_pp 
tpgate0 = gatenw AND PP 
tpgate1 = tpgate0 NOT mos_exclude_layer 
pch_mpode_mac_gate1 = tpgate1 AND PODE_4T 
pch_mpode_mac_gate2 = pch_mpode_mac_gate1 NOT OD2 
VTS_P = VTS_Pi NOT dc_vt_all 
pch_mpodesvt_mac_gate = pch_mpode_mac_gate2 INTERACT VTS_P 

//***** Define connectivity/via layer -- pch_mpodelvt_mac_gate ****
VTL_P = VTL_Pi NOT dc_vt_all 
pch_mpodelvt_mac_gate1 = pch_mpode_mac_gate2 INTERACT VTL_P 
pch_mpodelvt_mac_gate3 = pch_mpodelvt_mac_gate1 NOT INTERACT VTS_P 
VTL_PLL = VTLP_LL NOT dc_vt_all 
pch_mpodelvt_mac_gate = pch_mpodelvt_mac_gate3 NOT INTERACT VTL_PLL 

//***** Define connectivity/via layer -- pch_mpodeulvt_mac_gate ****
VTUL_P = VTUL_Pi NOT dc_vt_all 
pch_mpodeulvt_mac_gate1 = pch_mpode_mac_gate2 INTERACT VTUL_P 
pch_mpodeulvt_mac_gate3 = pch_mpodeulvt_mac_gate1 NOT INTERACT VTS_P 
pch_mpodeulvt_mac_gate4 = pch_mpodeulvt_mac_gate3 NOT INTERACT VTL_PLL 
pch_mpodeulvt_mac_gate5 = pch_mpodeulvt_mac_gate4 NOT INTERACT VTL_P 
VTUL_PLL = VTULP_LL NOT dc_vt_all 
pch_mpodeulvt_mac_gate = pch_mpodeulvt_mac_gate5 NOT INTERACT VTUL_PLL 

//***** Define connectivity/via layer -- pch_mpodeelvt_mac_gate ****
VTEL_P1 = VTEL_Pi NOT dc_vt_all 
VTEL_P = VTEL_P1 OR final_dc_pelvt 
pch_mpodeelvt_mac_gate1 = pch_mpode_mac_gate2 INTERACT VTEL_P 
pch_mpodeelvt_mac_gate3 = pch_mpodeelvt_mac_gate1 NOT INTERACT VTS_P 
pch_mpodeelvt_mac_gate4 = pch_mpodeelvt_mac_gate3 NOT INTERACT VTL_PLL 
pch_mpodeelvt_mac_gate5 = pch_mpodeelvt_mac_gate4 NOT INTERACT VTL_P 
pch_mpodeelvt_mac_gate6 = pch_mpodeelvt_mac_gate5 NOT INTERACT VTUL_PLL 
pch_mpodeelvt_mac_gate = pch_mpodeelvt_mac_gate6 NOT INTERACT VTUL_P 

//***** Define connectivity/via layer -- pch_mpodelvtll_mac_gate ****
pch_mpodelvtll_mac_gate1 = pch_mpode_mac_gate2 INTERACT VTL_PLL 
pch_mpodelvtll_mac_gate = pch_mpodelvtll_mac_gate1 NOT INTERACT VTS_P 

//***** Define connectivity/via layer -- pch_mpodeulvtll_mac_gate ****
pch_mpodeulvtll_mac_gate1 = pch_mpode_mac_gate2 INTERACT VTUL_PLL 
pch_mpodeulvtll_mac_gate3 = pch_mpodeulvtll_mac_gate1 NOT INTERACT VTS_P 
pch_mpodeulvtll_mac_gate4 = pch_mpodeulvtll_mac_gate3 NOT INTERACT VTL_PLL 
pch_mpodeulvtll_mac_gate = pch_mpodeulvtll_mac_gate4 NOT INTERACT VTL_P 

//***** Define connectivity/via layer -- pch_mpode12_mac_gate ****
pch_mpode12_mac_gate1 = pch_mpode_mac_gate1 AND OD12 
pch_mpode12_mac_gate = pch_mpode12_mac_gate1 NOT OD12_15 

//* Define device -- pmos pch_mpode12od15_mac
pch_mpode12od15_mac_gate = pch_mpode12_mac_gate1 AND OD12_15 

//* Define device -- xdev npode_svt_mac
nthin1 = mdiff AND NP 
nthin = nthin1 NOT SR_DPO 
diffb = diffa NOT diff 
ndiffb = diffb AND NP 
tndiff_ori1 = nthin OR ndiffb 
diffc = diffa2 NOT diffa 
ndiffrc = diffc AND NP 
tndiff_ori2 = tndiff_ori1 OR ndiffrc 
tndiff_ori = tndiff_ori2 NOT POx 
PODE_3T_1 = PODE_GATE NOT Pre_Small_gate 
PODE_3T = PODE_3T_1 AND OD 
npode_edge1 = PODE_3T TOUCH EDGE tndiff_ori
npode_edge2 = EXPAND EDGE npode_edge1 OUTSIDE BY 0.001
npode_edge3 = tndiff_ori NOT npode_edge2 
npode_edge = tndiff_ori NOT npode_edge3 
npode_mac_gate1 = tngate1 AND PODE_3T 
npode_mac_gate2 = npode_mac_gate1 NOT OD2 
npode_svt_mac_gate = npode_mac_gate2 INTERACT VTS_N 
npode_svt_mac_gate_edge = npode_edge INTERACT npode_svt_mac_gate 

//* Define device -- xdev npode_lvt_mac
npode_lvt_mac_gate1 = npode_mac_gate2 INTERACT VTL_N 
npode_lvt_mac_gate3 = npode_lvt_mac_gate1 NOT INTERACT VTS_N 
npode_lvt_mac_gate = npode_lvt_mac_gate3 NOT INTERACT VTL_NLL 
npode_lvt_mac_gate_edge = npode_edge INTERACT npode_lvt_mac_gate 

//* Define device -- xdev npode_ulvt_mac
npode_ulvt_mac_gate1 = npode_mac_gate2 INTERACT VTUL_N 
npode_ulvt_mac_gate3 = npode_ulvt_mac_gate1 NOT INTERACT VTS_N 
npode_ulvt_mac_gate4 = npode_ulvt_mac_gate3 NOT INTERACT VTL_NLL 
npode_ulvt_mac_gate5 = npode_ulvt_mac_gate4 NOT INTERACT VTL_N 
npode_ulvt_mac_gate = npode_ulvt_mac_gate5 NOT INTERACT VTUL_NLL 
npode_ulvt_mac_gate_edge = npode_edge INTERACT npode_ulvt_mac_gate 

//* Define device -- xdev npode_elvt_mac
npode_elvt_mac_gate1 = npode_mac_gate2 INTERACT VTEL_N 
npode_elvt_mac_gate3 = npode_elvt_mac_gate1 NOT INTERACT VTS_N 
npode_elvt_mac_gate4 = npode_elvt_mac_gate3 NOT INTERACT VTL_NLL 
npode_elvt_mac_gate5 = npode_elvt_mac_gate4 NOT INTERACT VTL_N 
npode_elvt_mac_gate6 = npode_elvt_mac_gate5 NOT INTERACT VTUL_NLL 
npode_elvt_mac_gate = npode_elvt_mac_gate6 NOT INTERACT VTUL_N 
npode_elvt_mac_gate_edge = npode_edge INTERACT npode_elvt_mac_gate 

//* Define device -- xdev npode_lvtll_mac
npode_lvtll_mac_gate1 = npode_mac_gate2 INTERACT VTL_NLL 
npode_lvtll_mac_gate = npode_lvtll_mac_gate1 NOT INTERACT VTS_N 
npode_lvtll_mac_gate_edge = npode_edge INTERACT npode_lvtll_mac_gate 

//* Define device -- xdev npode_ulvtll_mac
npode_ulvtll_mac_gate1 = npode_mac_gate2 INTERACT VTUL_NLL 
npode_ulvtll_mac_gate3 = npode_ulvtll_mac_gate1 NOT INTERACT VTS_N 
npode_ulvtll_mac_gate4 = npode_ulvtll_mac_gate3 NOT INTERACT VTL_NLL 
npode_ulvtll_mac_gate = npode_ulvtll_mac_gate4 NOT INTERACT VTL_N 
npode_ulvtll_mac_gate_edge = npode_edge INTERACT npode_ulvtll_mac_gate 

//* Define device -- xdev npode_12_mac
npode_12_mac_gate1 = npode_mac_gate1 AND OD12 
npode_12_mac_gate = npode_12_mac_gate1 NOT OD12_15 
npode_12_mac_gate_edge = npode_edge INTERACT npode_12_mac_gate 

//* Define device -- xdev npode_12od15_mac
npode_12od15_mac_gate = npode_12_mac_gate1 AND OD12_15 
npode_12od15_mac_gate_edge = npode_edge INTERACT npode_12od15_mac_gate 

//* Define device -- xdev ppode_svt_mac
pthin1 = mdiff AND PP 
pthin = pthin1 NOT SR_DPO 
pdiffb = diffb NOT ndiffb 
tpdiff_ori1 = pthin OR pdiffb 
pdiffrc = diffc NOT ndiffrc 
tpdiff_ori2 = tpdiff_ori1 OR pdiffrc 
tpdiff_ori = tpdiff_ori2 NOT POx 
ppode_edge1 = PODE_3T TOUCH EDGE tpdiff_ori
ppode_edge2 = EXPAND EDGE ppode_edge1 OUTSIDE BY 0.001
ppode_edge3 = tpdiff_ori NOT ppode_edge2 
ppode_edge = tpdiff_ori NOT ppode_edge3 
ppode_mac_gate1 = tpgate1 AND PODE_3T 
ppode_mac_gate2 = ppode_mac_gate1 NOT OD2 
ppode_svt_mac_gate = ppode_mac_gate2 INTERACT VTS_P 
ppode_svt_mac_gate_edge = ppode_edge INTERACT ppode_svt_mac_gate 

//* Define device -- xdev ppode_lvt_mac
ppode_lvt_mac_gate1 = ppode_mac_gate2 INTERACT VTL_P 
ppode_lvt_mac_gate3 = ppode_lvt_mac_gate1 NOT INTERACT VTS_P 
ppode_lvt_mac_gate = ppode_lvt_mac_gate3 NOT INTERACT VTL_PLL 
ppode_lvt_mac_gate_edge = ppode_edge INTERACT ppode_lvt_mac_gate 

//* Define device -- xdev ppode_ulvt_mac
ppode_ulvt_mac_gate1 = ppode_mac_gate2 INTERACT VTUL_P 
ppode_ulvt_mac_gate3 = ppode_ulvt_mac_gate1 NOT INTERACT VTS_P 
ppode_ulvt_mac_gate4 = ppode_ulvt_mac_gate3 NOT INTERACT VTL_PLL 
ppode_ulvt_mac_gate5 = ppode_ulvt_mac_gate4 NOT INTERACT VTL_P 
ppode_ulvt_mac_gate = ppode_ulvt_mac_gate5 NOT INTERACT VTUL_PLL 
ppode_ulvt_mac_gate_edge = ppode_edge INTERACT ppode_ulvt_mac_gate 

//* Define device -- xdev ppode_elvt_mac
ppode_elvt_mac_gate1 = ppode_mac_gate2 INTERACT VTEL_P 
ppode_elvt_mac_gate3 = ppode_elvt_mac_gate1 NOT INTERACT VTS_P 
ppode_elvt_mac_gate4 = ppode_elvt_mac_gate3 NOT INTERACT VTL_PLL 
ppode_elvt_mac_gate5 = ppode_elvt_mac_gate4 NOT INTERACT VTL_P 
ppode_elvt_mac_gate6 = ppode_elvt_mac_gate5 NOT INTERACT VTUL_PLL 
ppode_elvt_mac_gate = ppode_elvt_mac_gate6 NOT INTERACT VTUL_P 
ppode_elvt_mac_gate_edge = ppode_edge INTERACT ppode_elvt_mac_gate 

//* Define device -- xdev ppode_lvtll_mac
ppode_lvtll_mac_gate1 = ppode_mac_gate2 INTERACT VTL_PLL 
ppode_lvtll_mac_gate = ppode_lvtll_mac_gate1 NOT INTERACT VTS_P 
ppode_lvtll_mac_gate_edge = ppode_edge INTERACT ppode_lvtll_mac_gate 

//* Define device -- xdev ppode_ulvtll_mac
ppode_ulvtll_mac_gate1 = ppode_mac_gate2 INTERACT VTUL_PLL 
ppode_ulvtll_mac_gate3 = ppode_ulvtll_mac_gate1 NOT INTERACT VTS_P 
ppode_ulvtll_mac_gate4 = ppode_ulvtll_mac_gate3 NOT INTERACT VTL_PLL 
ppode_ulvtll_mac_gate = ppode_ulvtll_mac_gate4 NOT INTERACT VTL_P 
ppode_ulvtll_mac_gate_edge = ppode_edge INTERACT ppode_ulvtll_mac_gate 

//* Define device -- xdev ppode_12_mac
ppode_12_mac_gate1 = ppode_mac_gate1 AND OD12 
ppode_12_mac_gate = ppode_12_mac_gate1 NOT OD12_15 
ppode_12_mac_gate_edge = ppode_edge INTERACT ppode_12_mac_gate 

//* Define device -- xdev ppode_12od15_mac
ppode_12od15_mac_gate = ppode_12_mac_gate1 AND OD12_15 
ppode_12od15_mac_gate_edge = ppode_edge INTERACT ppode_12od15_mac_gate 

//* Define device -- diode nwdio

//* Define layer -- nwdio_r
nwdio_r_tmp01 = DIONW NOT DNW
nwdio_r_tmp02 = nwdio_r_tmp01 AND NW
nwdio_r_tmp03 = nwdio_r_tmp02 NOT NT_N
nwdio_r_tmp04 = nwdio_r_tmp03 NOT OD12
nwdio_r_tmp05 = nwdio_r_tmp04 NOT VTEL_Ni
nwdio_r_tmp06 = nwdio_r_tmp05 NOT VTEL_Pi
nwdio_r_tmp07 = nwdio_r_tmp06 NOT VTUL_Pi
nwdio_r_tmp08 = nwdio_r_tmp07 NOT VTL_Ni
nwdio_r_tmp09 = nwdio_r_tmp08 NOT VTL_Pi
nwdio_r_tmp10 = nwdio_r_tmp09 NOT VTS_Ni
nwdio_r_tmp11 = nwdio_r_tmp10 NOT VTS_Pi
nwdio_r_tmp12 = nwdio_r_tmp11 NOT VTULN_LL
nwdio_r_tmp13 = nwdio_r_tmp12 NOT VTULP_LL
nwdio_r_tmp14 = nwdio_r_tmp13 NOT VTLN_LL
nwdio_r_tmp15 = nwdio_r_tmp14 NOT VTLP_LL
nwdio_r_tmp16 = nwdio_r_tmp15 NOT PPi
nwdio_r_tmp17 = nwdio_r_tmp16 NOT VAR
nwdio_r_tmp18 = nwdio_r_tmp17 NOT IBJTDMY
nwdio_r_tmp19 = nwdio_r_tmp18 NOT SR_ESD
nwdio_r_tmp20 = nwdio_r_tmp19 NOT SDI
nwdio_r_tmp21 = nwdio_r_tmp20 NOT HIA_DUMMY
nwdio_r = nwdio_r_tmp21 NOT SDI_2


//* Define device -- bjt pnp_i1_mac

//* Define layer -- cemit_io_reg
cemit_io_reg_tmp01 = emit_reg NOT DNW
cemit_io_reg_tmp02 = cemit_io_reg_tmp01 AND OD
cemit_io_reg_tmp03 = cemit_io_reg_tmp02 AND NW
cemit_io_reg_tmp04 = cemit_io_reg_tmp03 NOT NT_N
cemit_io_reg_tmp05 = cemit_io_reg_tmp04 AND OD12
cemit_io_reg_tmp06 = cemit_io_reg_tmp05 NOT VTEL_Ni
cemit_io_reg_tmp07 = cemit_io_reg_tmp06 NOT VTEL_Pi
cemit_io_reg_tmp08 = cemit_io_reg_tmp07 NOT VTUL_Ni
cemit_io_reg_tmp09 = cemit_io_reg_tmp08 NOT VTUL_Pi
cemit_io_reg_tmp10 = cemit_io_reg_tmp09 NOT VTL_Ni
cemit_io_reg_tmp11 = cemit_io_reg_tmp10 NOT VTL_Pi
cemit_io_reg_tmp12 = cemit_io_reg_tmp11 NOT VTS_Ni
cemit_io_reg_tmp13 = cemit_io_reg_tmp12 NOT VTS_Pi
cemit_io_reg_tmp14 = cemit_io_reg_tmp13 NOT VTULN_LL
cemit_io_reg_tmp15 = cemit_io_reg_tmp14 NOT VTULP_LL
cemit_io_reg_tmp16 = cemit_io_reg_tmp15 NOT VTLN_LL
cemit_io_reg_tmp17 = cemit_io_reg_tmp16 NOT VTLP_LL
cemit_io_reg_tmp18 = cemit_io_reg_tmp17 NOT NPi
cemit_io_reg_tmp19 = cemit_io_reg_tmp18 AND PPi
cemit_io_reg_tmp20 = cemit_io_reg_tmp19 NOT VAR
cemit_io_reg_tmp21 = cemit_io_reg_tmp20 AND IBJTDMY
cemit_io_reg_tmp22 = cemit_io_reg_tmp21 NOT DIODMY
cemit_io_reg_tmp23 = cemit_io_reg_tmp22 NOT SR_ESD
cemit_io_reg_tmp24 = cemit_io_reg_tmp23 NOT SDI
cemit_io_reg_tmp25 = cemit_io_reg_tmp24 NOT HIA_DUMMY
cemit_io_reg = cemit_io_reg_tmp25 NOT SDI_2

cemit_io_mac = BJTEDMY INTERACT cemit_io_reg 
cemit_io_i1_mac = AREA cemit_io_mac  > 1.449515  < 1.449517 

//***** Define connectivity/via layer -- coll1 ****
nbase1k = nxwell NOT INTERACT DNW 
nbase1l = nbase1k AND BJTDMY 
nbase1 = nbase1k INTERACT nbase1l 
collsur = psub TOUCH nbase1 
coll1a = collsur OR nbase1  //  define both BJTs collector
npnrg = DNW AND BJTDMY  //  define NPN region
nndiff = tndiff_ori AND npnrg 
pbase1 = psub AND npnrg 
cpbase1 = COPY pbase1 
cnemit1 = nndiff AND cpbase1 
collsura = collsur TOUCH cnemit1 
coll1b = coll1a NOT collsura 
emit = BJTEDMY INTERACT mdiff 
emit_reg = emit INTERACT POi 
coll1 = coll1b NOT emit_reg  //   define pnp collector

//***** Define connectivity/via layer -- cnbase1 ****
cnbase1 = COPY nbase1  //  define PNP base terminal

//***** Define connectivity/via layer -- tpdiff_bjt ****
tpdiff_bjt = tpdiff_ori INTERACT BJTDMY 

//* Define device -- bjt pnp_i2_mac
cemit_io_i2_mac = AREA cemit_io_mac  > 4.712747  < 4.712749 

//* Define device -- bjt pnp_p1_mac

//* Define layer -- cemit_io_p_reg
cemit_io_p_reg_tmp01 = emit_p_reg AND DNW
cemit_io_p_reg_tmp02 = cemit_io_p_reg_tmp01 AND OD
cemit_io_p_reg_tmp03 = cemit_io_p_reg_tmp02 NOT NT_N
cemit_io_p_reg_tmp04 = cemit_io_p_reg_tmp03 AND OD12
cemit_io_p_reg_tmp05 = cemit_io_p_reg_tmp04 NOT VTEL_Ni
cemit_io_p_reg_tmp06 = cemit_io_p_reg_tmp05 NOT VTEL_Pi
cemit_io_p_reg_tmp07 = cemit_io_p_reg_tmp06 NOT VTUL_Ni
cemit_io_p_reg_tmp08 = cemit_io_p_reg_tmp07 NOT VTUL_Pi
cemit_io_p_reg_tmp09 = cemit_io_p_reg_tmp08 NOT VTL_Ni
cemit_io_p_reg_tmp10 = cemit_io_p_reg_tmp09 NOT VTL_Pi
cemit_io_p_reg_tmp11 = cemit_io_p_reg_tmp10 NOT VTS_Ni
cemit_io_p_reg_tmp12 = cemit_io_p_reg_tmp11 NOT VTS_Pi
cemit_io_p_reg_tmp13 = cemit_io_p_reg_tmp12 NOT VTULN_LL
cemit_io_p_reg_tmp14 = cemit_io_p_reg_tmp13 NOT VTULP_LL
cemit_io_p_reg_tmp15 = cemit_io_p_reg_tmp14 NOT VTLN_LL
cemit_io_p_reg_tmp16 = cemit_io_p_reg_tmp15 NOT VTLP_LL
cemit_io_p_reg_tmp17 = cemit_io_p_reg_tmp16 NOT NPi
cemit_io_p_reg_tmp18 = cemit_io_p_reg_tmp17 AND PPi
cemit_io_p_reg_tmp19 = cemit_io_p_reg_tmp18 NOT VAR
cemit_io_p_reg_tmp20 = cemit_io_p_reg_tmp19 AND IBJTDMY
cemit_io_p_reg_tmp21 = cemit_io_p_reg_tmp20 NOT DIODMY
cemit_io_p_reg_tmp22 = cemit_io_p_reg_tmp21 NOT SR_ESD
cemit_io_p_reg_tmp23 = cemit_io_p_reg_tmp22 NOT SDI
cemit_io_p_reg_tmp24 = cemit_io_p_reg_tmp23 NOT HIA_DUMMY
cemit_io_p_reg = cemit_io_p_reg_tmp24 NOT SDI_2

cemit_io_p_mac = BJTEDMY INTERACT cemit_io_p_reg 
cemit_io_p1_mac = AREA cemit_io_p_mac  > 2.495791  < 2.495793 

//***** Define connectivity/via layer -- psub_term ****
psub_term_d = DNW NOT INTERACT nxwell 
psub_term_a1 = nxwell INTERACT DNW 
psub_term_a = EXTENTS psub_term_a1
psub_term_b = psub_term_a INTERACT DNW 
psub_term_c = psub_term_b NOT psubband  //  For avoid special condition from PSUB2 usage
psub_term_e = SIZE psub_term_c BY 0.001 
psub_term = psub_term_d OR psub_term_e 

//* Define device -- xdev ndio_mac

//* Define layer -- ndio_r1
ndio_r1_tmp01 = dio0 AND OD
ndio_r1_tmp02 = ndio_r1_tmp01 NOT NW
ndio_r1_tmp03 = ndio_r1_tmp02 NOT NT_N
ndio_r1_tmp04 = ndio_r1_tmp03 NOT OD12
ndio_r1_tmp05 = ndio_r1_tmp04 NOT VTEL_Ni
ndio_r1_tmp06 = ndio_r1_tmp05 NOT VTEL_Pi
ndio_r1_tmp07 = ndio_r1_tmp06 NOT VTUL_Pi
ndio_r1_tmp08 = ndio_r1_tmp07 NOT VTL_Ni
ndio_r1_tmp09 = ndio_r1_tmp08 NOT VTL_Pi
ndio_r1_tmp10 = ndio_r1_tmp09 NOT VTS_Ni
ndio_r1_tmp11 = ndio_r1_tmp10 NOT VTS_Pi
ndio_r1_tmp12 = ndio_r1_tmp11 NOT VTULN_LL
ndio_r1_tmp13 = ndio_r1_tmp12 NOT VTULP_LL
ndio_r1_tmp14 = ndio_r1_tmp13 NOT VTLN_LL
ndio_r1_tmp15 = ndio_r1_tmp14 NOT VTLP_LL
ndio_r1_tmp16 = ndio_r1_tmp15 AND NPi
ndio_r1_tmp17 = ndio_r1_tmp16 NOT PPi
ndio_r1_tmp18 = ndio_r1_tmp17 NOT OD12_15
ndio_r1_tmp19 = ndio_r1_tmp18 NOT VAR
ndio_r1_tmp20 = ndio_r1_tmp19 NOT IBJTDMY
ndio_r1_tmp21 = ndio_r1_tmp20 AND DIODMY
ndio_r1_tmp22 = ndio_r1_tmp21 NOT SR_ESD
ndio_r1_tmp23 = ndio_r1_tmp22 NOT SDI
ndio_r1_tmp24 = ndio_r1_tmp23 NOT HIA_DUMMY
ndio_r1 = ndio_r1_tmp24 NOT SDI_2

ndio_r = ndio_r1 INTERACT VTUL_Ni 

//***** Define connectivity/via layer -- tndiff_dio ****

//* Define layer -- ndio_12_r
ndio_12_r_tmp01 = dio0 AND OD
ndio_12_r_tmp02 = ndio_12_r_tmp01 NOT NW
ndio_12_r_tmp03 = ndio_12_r_tmp02 NOT NT_N
ndio_12_r_tmp04 = ndio_12_r_tmp03 AND OD12
ndio_12_r_tmp05 = ndio_12_r_tmp04 NOT VTEL_Ni
ndio_12_r_tmp06 = ndio_12_r_tmp05 NOT VTEL_Pi
ndio_12_r_tmp07 = ndio_12_r_tmp06 NOT VTUL_Ni
ndio_12_r_tmp08 = ndio_12_r_tmp07 NOT VTUL_Pi
ndio_12_r_tmp09 = ndio_12_r_tmp08 NOT VTL_Ni
ndio_12_r_tmp10 = ndio_12_r_tmp09 NOT VTL_Pi
ndio_12_r_tmp11 = ndio_12_r_tmp10 NOT VTS_Ni
ndio_12_r_tmp12 = ndio_12_r_tmp11 NOT VTS_Pi
ndio_12_r_tmp13 = ndio_12_r_tmp12 NOT VTULN_LL
ndio_12_r_tmp14 = ndio_12_r_tmp13 NOT VTULP_LL
ndio_12_r_tmp15 = ndio_12_r_tmp14 NOT VTLN_LL
ndio_12_r_tmp16 = ndio_12_r_tmp15 NOT VTLP_LL
ndio_12_r_tmp17 = ndio_12_r_tmp16 AND NPi
ndio_12_r_tmp18 = ndio_12_r_tmp17 NOT PPi
ndio_12_r_tmp19 = ndio_12_r_tmp18 NOT VAR
ndio_12_r_tmp20 = ndio_12_r_tmp19 NOT IBJTDMY
ndio_12_r_tmp21 = ndio_12_r_tmp20 AND DIODMY
ndio_12_r_tmp22 = ndio_12_r_tmp21 NOT SR_ESD
ndio_12_r_tmp23 = ndio_12_r_tmp22 NOT SDI
ndio_12_r_tmp24 = ndio_12_r_tmp23 NOT HIA_DUMMY
ndio_12_r = ndio_12_r_tmp24 NOT SDI_2

all_ndio_rec1 = ndio_r OR ndio_12_r  //  ndio_mac / ndio_12_mac

//* Define layer -- ndio_12_ntn_r
ndio_12_ntn_r_tmp01 = dio0 NOT DNW
ndio_12_ntn_r_tmp02 = ndio_12_ntn_r_tmp01 AND OD
ndio_12_ntn_r_tmp03 = ndio_12_ntn_r_tmp02 NOT NW
ndio_12_ntn_r_tmp04 = ndio_12_ntn_r_tmp03 AND NT_N
ndio_12_ntn_r_tmp05 = ndio_12_ntn_r_tmp04 AND OD12
ndio_12_ntn_r_tmp06 = ndio_12_ntn_r_tmp05 NOT VTEL_Ni
ndio_12_ntn_r_tmp07 = ndio_12_ntn_r_tmp06 NOT VTEL_Pi
ndio_12_ntn_r_tmp08 = ndio_12_ntn_r_tmp07 NOT VTUL_Ni
ndio_12_ntn_r_tmp09 = ndio_12_ntn_r_tmp08 NOT VTUL_Pi
ndio_12_ntn_r_tmp10 = ndio_12_ntn_r_tmp09 NOT VTL_Ni
ndio_12_ntn_r_tmp11 = ndio_12_ntn_r_tmp10 NOT VTL_Pi
ndio_12_ntn_r_tmp12 = ndio_12_ntn_r_tmp11 NOT VTS_Ni
ndio_12_ntn_r_tmp13 = ndio_12_ntn_r_tmp12 NOT VTS_Pi
ndio_12_ntn_r_tmp14 = ndio_12_ntn_r_tmp13 NOT VTULN_LL
ndio_12_ntn_r_tmp15 = ndio_12_ntn_r_tmp14 NOT VTULP_LL
ndio_12_ntn_r_tmp16 = ndio_12_ntn_r_tmp15 NOT VTLN_LL
ndio_12_ntn_r_tmp17 = ndio_12_ntn_r_tmp16 NOT VTLP_LL
ndio_12_ntn_r_tmp18 = ndio_12_ntn_r_tmp17 AND NPi
ndio_12_ntn_r_tmp19 = ndio_12_ntn_r_tmp18 NOT PPi
ndio_12_ntn_r_tmp20 = ndio_12_ntn_r_tmp19 NOT VAR
ndio_12_ntn_r_tmp21 = ndio_12_ntn_r_tmp20 NOT IBJTDMY
ndio_12_ntn_r_tmp22 = ndio_12_ntn_r_tmp21 AND DIODMY
ndio_12_ntn_r_tmp23 = ndio_12_ntn_r_tmp22 NOT SR_ESD
ndio_12_ntn_r_tmp24 = ndio_12_ntn_r_tmp23 NOT SDI
ndio_12_ntn_r_tmp25 = ndio_12_ntn_r_tmp24 NOT HIA_DUMMY
ndio_12_ntn_r = ndio_12_ntn_r_tmp25 NOT SDI_2

all_ndio_rec2 = all_ndio_rec1 OR ndio_12_ntn_r  //  ndio_12_ntn_mac
hia12_ndio_r1 = HIA_DUMMY INTERACT POi 
hia_ndio0 = tndiff_ori INTERACT diff 
hia_ndio1 = hia_ndio0 INTERACT ODi 

//* Define layer -- hia12_ndio1
hia12_ndio1_tmp01 = OD12 NOT NW
hia12_ndio1_tmp02 = hia12_ndio1_tmp01 NOT NT_N
hia12_ndio1_tmp03 = hia12_ndio1_tmp02 NOT VTEL_Ni
hia12_ndio1_tmp04 = hia12_ndio1_tmp03 NOT VTEL_Pi
hia12_ndio1_tmp05 = hia12_ndio1_tmp04 NOT VTUL_Ni
hia12_ndio1_tmp06 = hia12_ndio1_tmp05 NOT VTUL_Pi
hia12_ndio1_tmp07 = hia12_ndio1_tmp06 NOT VTL_Ni
hia12_ndio1_tmp08 = hia12_ndio1_tmp07 NOT VTL_Pi
hia12_ndio1_tmp09 = hia12_ndio1_tmp08 NOT VTS_Ni
hia12_ndio1_tmp10 = hia12_ndio1_tmp09 NOT VTS_Pi
hia12_ndio1_tmp11 = hia12_ndio1_tmp10 NOT VTULN_LL
hia12_ndio1_tmp12 = hia12_ndio1_tmp11 NOT VTULP_LL
hia12_ndio1_tmp13 = hia12_ndio1_tmp12 NOT VTLN_LL
hia12_ndio1_tmp14 = hia12_ndio1_tmp13 NOT VTLP_LL
hia12_ndio1_tmp15 = hia12_ndio1_tmp14 NOT PPi
hia12_ndio1_tmp16 = hia12_ndio1_tmp15 NOT VAR
hia12_ndio1_tmp17 = hia12_ndio1_tmp16 NOT IBJTDMY
hia12_ndio1_tmp18 = hia12_ndio1_tmp17 NOT DIODMY
hia12_ndio1_tmp19 = hia12_ndio1_tmp18 NOT SR_ESD
hia12_ndio1_tmp20 = hia12_ndio1_tmp19 NOT SDI
hia12_ndio1_tmp21 = hia12_ndio1_tmp20 AND HIA_DUMMY
hia12_ndio1 = hia12_ndio1_tmp21 NOT SDI_2

hia12_ndio = hia_ndio1 AND hia12_ndio1 
hia12_ndio_r = hia12_ndio_r1 INTERACT hia12_ndio  //   CORE N+/PW ESD DIODE
all_ndio_rec3 = all_ndio_rec2 OR hia12_ndio_r  //  ndio_hia12_mac

//* Define layer -- hia12_ndio_ntn1
hia12_ndio_ntn1_tmp01 = OD12 NOT DNW
hia12_ndio_ntn1_tmp02 = hia12_ndio_ntn1_tmp01 NOT NW
hia12_ndio_ntn1_tmp03 = hia12_ndio_ntn1_tmp02 AND NT_N
hia12_ndio_ntn1_tmp04 = hia12_ndio_ntn1_tmp03 NOT VTEL_Ni
hia12_ndio_ntn1_tmp05 = hia12_ndio_ntn1_tmp04 NOT VTEL_Pi
hia12_ndio_ntn1_tmp06 = hia12_ndio_ntn1_tmp05 NOT VTUL_Ni
hia12_ndio_ntn1_tmp07 = hia12_ndio_ntn1_tmp06 NOT VTUL_Pi
hia12_ndio_ntn1_tmp08 = hia12_ndio_ntn1_tmp07 NOT VTL_Ni
hia12_ndio_ntn1_tmp09 = hia12_ndio_ntn1_tmp08 NOT VTL_Pi
hia12_ndio_ntn1_tmp10 = hia12_ndio_ntn1_tmp09 NOT VTS_Ni
hia12_ndio_ntn1_tmp11 = hia12_ndio_ntn1_tmp10 NOT VTS_Pi
hia12_ndio_ntn1_tmp12 = hia12_ndio_ntn1_tmp11 NOT VTULN_LL
hia12_ndio_ntn1_tmp13 = hia12_ndio_ntn1_tmp12 NOT VTULP_LL
hia12_ndio_ntn1_tmp14 = hia12_ndio_ntn1_tmp13 NOT VTLN_LL
hia12_ndio_ntn1_tmp15 = hia12_ndio_ntn1_tmp14 NOT VTLP_LL
hia12_ndio_ntn1_tmp16 = hia12_ndio_ntn1_tmp15 NOT PPi
hia12_ndio_ntn1_tmp17 = hia12_ndio_ntn1_tmp16 NOT VAR
hia12_ndio_ntn1_tmp18 = hia12_ndio_ntn1_tmp17 NOT IBJTDMY
hia12_ndio_ntn1_tmp19 = hia12_ndio_ntn1_tmp18 NOT DIODMY
hia12_ndio_ntn1_tmp20 = hia12_ndio_ntn1_tmp19 NOT SR_ESD
hia12_ndio_ntn1_tmp21 = hia12_ndio_ntn1_tmp20 NOT SDI
hia12_ndio_ntn1_tmp22 = hia12_ndio_ntn1_tmp21 AND HIA_DUMMY
hia12_ndio_ntn1 = hia12_ndio_ntn1_tmp22 NOT SDI_2

hia12_ndio_ntn = hia_ndio1 AND hia12_ndio_ntn1 
hia12_ndio_ntn_r = hia12_ndio_r1 INTERACT hia12_ndio_ntn  //    CORE N+/PW ESD DIODE
all_ndio_rec = all_ndio_rec3 OR hia12_ndio_ntn_r  //  ndio_hia12_ntn_mac

//* Define layer -- pdio_r1
pdio_r1_tmp01 = dio0 AND OD
pdio_r1_tmp02 = pdio_r1_tmp01 AND NW
pdio_r1_tmp03 = pdio_r1_tmp02 NOT NT_N
pdio_r1_tmp04 = pdio_r1_tmp03 NOT OD12
pdio_r1_tmp05 = pdio_r1_tmp04 NOT VTEL_Ni
pdio_r1_tmp06 = pdio_r1_tmp05 NOT VTEL_Pi
pdio_r1_tmp07 = pdio_r1_tmp06 NOT VTUL_Ni
pdio_r1_tmp08 = pdio_r1_tmp07 NOT VTL_Ni
pdio_r1_tmp09 = pdio_r1_tmp08 NOT VTL_Pi
pdio_r1_tmp10 = pdio_r1_tmp09 NOT VTS_Ni
pdio_r1_tmp11 = pdio_r1_tmp10 NOT VTS_Pi
pdio_r1_tmp12 = pdio_r1_tmp11 NOT VTULN_LL
pdio_r1_tmp13 = pdio_r1_tmp12 NOT VTULP_LL
pdio_r1_tmp14 = pdio_r1_tmp13 NOT VTLN_LL
pdio_r1_tmp15 = pdio_r1_tmp14 NOT VTLP_LL
pdio_r1_tmp16 = pdio_r1_tmp15 NOT NPi
pdio_r1_tmp17 = pdio_r1_tmp16 AND PPi
pdio_r1_tmp18 = pdio_r1_tmp17 NOT OD12_15
pdio_r1_tmp19 = pdio_r1_tmp18 NOT VAR
pdio_r1_tmp20 = pdio_r1_tmp19 NOT IBJTDMY
pdio_r1_tmp21 = pdio_r1_tmp20 AND DIODMY
pdio_r1_tmp22 = pdio_r1_tmp21 NOT SR_ESD
pdio_r1_tmp23 = pdio_r1_tmp22 NOT SDI
pdio_r1_tmp24 = pdio_r1_tmp23 NOT HIA_DUMMY
pdio_r1 = pdio_r1_tmp24 NOT SDI_2

pdio_r = pdio_r1 INTERACT VTUL_Pi 

//* Define layer -- pdio_12_r
pdio_12_r_tmp01 = dio0 AND OD
pdio_12_r_tmp02 = pdio_12_r_tmp01 AND NW
pdio_12_r_tmp03 = pdio_12_r_tmp02 NOT NT_N
pdio_12_r_tmp04 = pdio_12_r_tmp03 AND OD12
pdio_12_r_tmp05 = pdio_12_r_tmp04 NOT VTEL_Ni
pdio_12_r_tmp06 = pdio_12_r_tmp05 NOT VTEL_Pi
pdio_12_r_tmp07 = pdio_12_r_tmp06 NOT VTUL_Ni
pdio_12_r_tmp08 = pdio_12_r_tmp07 NOT VTUL_Pi
pdio_12_r_tmp09 = pdio_12_r_tmp08 NOT VTL_Ni
pdio_12_r_tmp10 = pdio_12_r_tmp09 NOT VTL_Pi
pdio_12_r_tmp11 = pdio_12_r_tmp10 NOT VTS_Ni
pdio_12_r_tmp12 = pdio_12_r_tmp11 NOT VTS_Pi
pdio_12_r_tmp13 = pdio_12_r_tmp12 NOT VTULN_LL
pdio_12_r_tmp14 = pdio_12_r_tmp13 NOT VTULP_LL
pdio_12_r_tmp15 = pdio_12_r_tmp14 NOT VTLN_LL
pdio_12_r_tmp16 = pdio_12_r_tmp15 NOT VTLP_LL
pdio_12_r_tmp17 = pdio_12_r_tmp16 NOT NPi
pdio_12_r_tmp18 = pdio_12_r_tmp17 AND PPi
pdio_12_r_tmp19 = pdio_12_r_tmp18 NOT VAR
pdio_12_r_tmp20 = pdio_12_r_tmp19 NOT IBJTDMY
pdio_12_r_tmp21 = pdio_12_r_tmp20 AND DIODMY
pdio_12_r_tmp22 = pdio_12_r_tmp21 NOT SR_ESD
pdio_12_r_tmp23 = pdio_12_r_tmp22 NOT SDI
pdio_12_r_tmp24 = pdio_12_r_tmp23 NOT HIA_DUMMY
pdio_12_r = pdio_12_r_tmp24 NOT SDI_2

all_pdio_rec1 = pdio_r OR pdio_12_r  //  pdio_mac / pdio_12_mac
hia12_pdio_r1 = HIA_DUMMY INTERACT POi 
hia_pdio0 = tpdiff_ori INTERACT diff 
hia_pdio1 = hia_pdio0 INTERACT ODi 

//* Define layer -- hia12_pdio1
hia12_pdio1_tmp01 = OD12 AND NW
hia12_pdio1_tmp02 = hia12_pdio1_tmp01 NOT NT_N
hia12_pdio1_tmp03 = hia12_pdio1_tmp02 NOT VTEL_Ni
hia12_pdio1_tmp04 = hia12_pdio1_tmp03 NOT VTEL_Pi
hia12_pdio1_tmp05 = hia12_pdio1_tmp04 NOT VTUL_Ni
hia12_pdio1_tmp06 = hia12_pdio1_tmp05 NOT VTUL_Pi
hia12_pdio1_tmp07 = hia12_pdio1_tmp06 NOT VTL_Ni
hia12_pdio1_tmp08 = hia12_pdio1_tmp07 NOT VTL_Pi
hia12_pdio1_tmp09 = hia12_pdio1_tmp08 NOT VTS_Ni
hia12_pdio1_tmp10 = hia12_pdio1_tmp09 NOT VTS_Pi
hia12_pdio1_tmp11 = hia12_pdio1_tmp10 NOT VTULN_LL
hia12_pdio1_tmp12 = hia12_pdio1_tmp11 NOT VTULP_LL
hia12_pdio1_tmp13 = hia12_pdio1_tmp12 NOT VTLN_LL
hia12_pdio1_tmp14 = hia12_pdio1_tmp13 NOT VTLP_LL
hia12_pdio1_tmp15 = hia12_pdio1_tmp14 NOT NPi
hia12_pdio1_tmp16 = hia12_pdio1_tmp15 NOT VAR
hia12_pdio1_tmp17 = hia12_pdio1_tmp16 NOT IBJTDMY
hia12_pdio1_tmp18 = hia12_pdio1_tmp17 NOT DIODMY
hia12_pdio1_tmp19 = hia12_pdio1_tmp18 NOT SR_ESD
hia12_pdio1_tmp20 = hia12_pdio1_tmp19 NOT SDI
hia12_pdio1_tmp21 = hia12_pdio1_tmp20 AND HIA_DUMMY
hia12_pdio1 = hia12_pdio1_tmp21 NOT SDI_2

hia12_pdio = hia_pdio1 AND hia12_pdio1 
hia12_pdio_r = hia12_pdio_r1 INTERACT hia12_pdio  //   CORE P+/NW ESD DIODE
all_pdio_rec = all_pdio_rec1 OR hia12_pdio_r  //  pdio_hia_mac
all_diode_rec = all_ndio_rec OR all_pdio_rec 
tndiff_dio1 = tndiff_ori INTERACT all_diode_rec 
tndiff_dio = tndiff_dio1 AND diff 

//***** Define connectivity/via layer -- tpdiff_dio ****
tpdiff_dio1 = tpdiff_ori INTERACT all_diode_rec 
tpdiff_dio = tpdiff_dio1 AND diff 

//* Define device -- xdev ndio_hia12_ntn_mac
hia_dio_ngate = tngate0 AND HIA_DUMMY 

//* Define device -- xdev ndio_hia12_mac
mdiff_hdio = mdiff AND HIA_DUMMY 
ndiff_hdio = mdiff_hdio INTERACT hia12_ndio 
ndiff_hdio_ntn = mdiff_hdio INTERACT hia12_ndio_ntn 

//* Define device -- xdev pdio_hia12_mac
hia_dio_pgate = tpgate0 AND HIA_DUMMY 
pdiff_hdio = mdiff_hdio INTERACT hia12_pdio 

//* Define device -- xdev dnwpsub

//* Define layer -- dnwdio2
dnwdio2_tmp01 = DNW NOT NT_N
dnwdio2_tmp02 = dnwdio2_tmp01 NOT SR_ESD
dnwdio2 = dnwdio2_tmp02 NOT SDI_2

dnwdio_bjt1 = dnwdio2 AND IBJTDMY 
dnwdio_bjt = dnwdio2 INTERACT dnwdio_bjt1 
dnwdio1 = dnwdio2 NOT dnwdio_bjt 
dnwdio_rf_var1 = dnwdio1 AND RFDMY 
dnwdio_rf_var = dnwdio_rf_var1 INTERACT VAR 
dnwdio = dnwdio1 NOT dnwdio_rf_var 

//* Define device -- xdev pwdnw

//* Define layer -- rwdio2
rwdio2_tmp01 = rwdio1 NOT NT_N
rwdio2_tmp02 = rwdio2_tmp01 NOT SR_ESD
rwdio2 = rwdio2_tmp02 NOT SDI_2

rwdio_bjt1 = rwdio2 AND IBJTDMY 
rwdio_bjt = rwdio2 INTERACT rwdio_bjt1 
rwdio3 = rwdio2 NOT rwdio_bjt 
rwdio_rf_var1 = rwdio3 AND RFDMY 
rwdio_rf_var = rwdio_rf_var1 INTERACT VAR 
rwdio = rwdio3 NOT rwdio_rf_var 
rwdio_wo_nxwell = rwdio NOT INTERACT nxwell 
rwdio_wi_nxwell = rwdio INTERACT nxwell 

//* Define device -- xdev pnwdio
pnwdio1 = nxwell OUTSIDE nwdio_r 
pnwdio2a = pnwdio1 NOT DNW 
pnwdio2b = pnwdio2a NOT cnbase1 
pnwdio_rf_var1 = pnwdio2b AND RFDMY 
pnwdio_rf_var = pnwdio_rf_var1 INTERACT VAR 
pnwdio2 = pnwdio2b NOT pnwdio_rf_var 
pnwdio_r_wo_dnw = pnwdio2 NOT INTERACT DNW 
pnwdio_r_wi_dnw = pnwdio2 INTERACT DNW 

//* Define device -- xdev nmoscap

//* Define layer -- vargt
vargt_tmp01 = vargt2 AND OD
vargt_tmp02 = vargt_tmp01 AND NW
vargt_tmp03 = vargt_tmp02 NOT NT_N
vargt_tmp04 = vargt_tmp03 NOT OD12
vargt_tmp05 = vargt_tmp04 AND PO
vargt_tmp06 = vargt_tmp05 NOT VTEL_Ni
vargt_tmp07 = vargt_tmp06 NOT VTEL_Pi
vargt_tmp08 = vargt_tmp07 AND VTUL_Ni
vargt_tmp09 = vargt_tmp08 NOT VTUL_Pi
vargt_tmp10 = vargt_tmp09 NOT VTL_Ni
vargt_tmp11 = vargt_tmp10 NOT VTL_Pi
vargt_tmp12 = vargt_tmp11 NOT VTS_Ni
vargt_tmp13 = vargt_tmp12 NOT VTS_Pi
vargt_tmp14 = vargt_tmp13 NOT VTULN_LL
vargt_tmp15 = vargt_tmp14 NOT VTULP_LL
vargt_tmp16 = vargt_tmp15 NOT VTLN_LL
vargt_tmp17 = vargt_tmp16 NOT VTLP_LL
vargt_tmp18 = vargt_tmp17 AND NPi
vargt_tmp19 = vargt_tmp18 NOT PPi
vargt_tmp20 = vargt_tmp19 NOT OD12_15
vargt_tmp21 = vargt_tmp20 AND VAR
vargt_tmp22 = vargt_tmp21 NOT IBJTDMY
vargt_tmp23 = vargt_tmp22 NOT DIODMY
vargt_tmp24 = vargt_tmp23 NOT SR_ESD
vargt_tmp25 = vargt_tmp24 NOT SDI
vargt_tmp26 = vargt_tmp25 NOT HIA_DUMMY
vargt = vargt_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- n_fpoly_ulvt ****
N_ul_shift_edge1 = VTUL_N COINCIDENT EDGE VTEL_N
N_ul_shift_edge2 = N_ul_shift_edge1 INSIDE EDGE Small_Poly3 
N_ul_shift_edge = N_ul_shift_edge1 TOUCH EDGE N_ul_shift_edge2
VTULN_exp = EXPAND EDGE N_ul_shift_edge OUTSIDE BY EXPAND_VT_EDGE
VTULN_1 = VTUL_N OR VTULN_exp 
vt_abut_n1 = VTEL_N OR VTUL_N 
vt_abut_n2 = vt_abut_n1 OR VTUL_NLL 
vt_abut_n3 = vt_abut_n2 OR VTL_N 
vt_abut_n4 = vt_abut_n3 OR VTL_NLL 
N_s_shift_edge1 = VTS_N COINCIDENT EDGE vt_abut_n4
N_s_shift_edge2 = N_s_shift_edge1 INSIDE EDGE Small_Poly3 
N_s_shift_edge = N_s_shift_edge1 TOUCH EDGE N_s_shift_edge2
VTSN_exp = EXPAND EDGE N_s_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_n1 = COPY VTSN_exp 
N_lll_shift_edge1 = VTL_NLL COINCIDENT EDGE vt_abut_n3
N_lll_shift_edge2 = N_lll_shift_edge1 INSIDE EDGE Small_Poly3 
N_lll_shift_edge = N_lll_shift_edge1 TOUCH EDGE N_lll_shift_edge2
VTLNLL_exp = EXPAND EDGE N_lll_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_n2 = vt_abut_exl_n1 OR VTLNLL_exp 
N_l_shift_edge1 = VTL_N COINCIDENT EDGE vt_abut_n2
N_l_shift_edge2 = N_l_shift_edge1 INSIDE EDGE Small_Poly3 
N_l_shift_edge = N_l_shift_edge1 TOUCH EDGE N_l_shift_edge2
VTLN_exp = EXPAND EDGE N_l_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_n3 = vt_abut_exl_n2 OR VTLN_exp 
N_ulll_shift_edge1 = VTUL_NLL COINCIDENT EDGE vt_abut_n1
N_ulll_shift_edge2 = N_ulll_shift_edge1 INSIDE EDGE Small_Poly3 
N_ulll_shift_edge = N_ulll_shift_edge1 TOUCH EDGE N_ulll_shift_edge2
VTULNLL_exp = EXPAND EDGE N_ulll_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_n4 = vt_abut_exl_n3 OR VTULNLL_exp 
VTULN = VTULN_1 NOT vt_abut_exl_n4 
sram_n = SRM_all AND NP 
sram_p = SRM_all AND PP 
sram_np = sram_n OR sram_p 
npoly_co_ul1 = VTULN NOT sram_np 
poly_od2 = COPY OD2 
npoly_co_ul2 = npoly_co_ul1 NOT poly_od2 
npoly_co_ula = poly_org AND npoly_co_ul2  //  ULVT npoly
n_fpoly_ulvt = npoly_co_ula NOT OD 

//* Define device -- xdev nmoscap_12

//* Define layer -- vargt_12
vargt_12_tmp01 = vargt2 AND OD
vargt_12_tmp02 = vargt_12_tmp01 AND NW
vargt_12_tmp03 = vargt_12_tmp02 NOT NT_N
vargt_12_tmp04 = vargt_12_tmp03 AND OD12
vargt_12_tmp05 = vargt_12_tmp04 AND PO
vargt_12_tmp06 = vargt_12_tmp05 NOT VTEL_Ni
vargt_12_tmp07 = vargt_12_tmp06 NOT VTEL_Pi
vargt_12_tmp08 = vargt_12_tmp07 AND VTUL_Ni
vargt_12_tmp09 = vargt_12_tmp08 NOT VTUL_Pi
vargt_12_tmp10 = vargt_12_tmp09 NOT VTL_Ni
vargt_12_tmp11 = vargt_12_tmp10 NOT VTL_Pi
vargt_12_tmp12 = vargt_12_tmp11 NOT VTS_Ni
vargt_12_tmp13 = vargt_12_tmp12 NOT VTS_Pi
vargt_12_tmp14 = vargt_12_tmp13 NOT VTULN_LL
vargt_12_tmp15 = vargt_12_tmp14 NOT VTULP_LL
vargt_12_tmp16 = vargt_12_tmp15 NOT VTLN_LL
vargt_12_tmp17 = vargt_12_tmp16 NOT VTLP_LL
vargt_12_tmp18 = vargt_12_tmp17 AND NPi
vargt_12_tmp19 = vargt_12_tmp18 NOT PPi
vargt_12_tmp20 = vargt_12_tmp19 NOT OD12_15
vargt_12_tmp21 = vargt_12_tmp20 AND VAR
vargt_12_tmp22 = vargt_12_tmp21 NOT IBJTDMY
vargt_12_tmp23 = vargt_12_tmp22 NOT DIODMY
vargt_12_tmp24 = vargt_12_tmp23 NOT SR_ESD
vargt_12_tmp25 = vargt_12_tmp24 NOT SDI
vargt_12_tmp26 = vargt_12_tmp25 NOT HIA_DUMMY
vargt_12 = vargt_12_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- n_fpoly_io_ulvt ****
poly_io1 = poly_org AND poly_od2 
poly_io = poly_io1 NOT sram_np 
npoly_ioa = poly_io AND NP  //  IO npoly
var_ioa = VAR AND VTUL_Ni 
var_io = var_ioa AND poly_io 
npoly_ioa_ulvt = npoly_ioa AND var_io 
n_fpoly_io_ulvt = npoly_ioa_ulvt NOT OD 

//* Define device -- xdev nmoscap_12od15

//* Define layer -- vargt_12od15
vargt_12od15_tmp01 = vargt2 AND OD
vargt_12od15_tmp02 = vargt_12od15_tmp01 AND NW
vargt_12od15_tmp03 = vargt_12od15_tmp02 NOT NT_N
vargt_12od15_tmp04 = vargt_12od15_tmp03 AND OD12
vargt_12od15_tmp05 = vargt_12od15_tmp04 AND PO
vargt_12od15_tmp06 = vargt_12od15_tmp05 NOT VTEL_Ni
vargt_12od15_tmp07 = vargt_12od15_tmp06 NOT VTEL_Pi
vargt_12od15_tmp08 = vargt_12od15_tmp07 AND VTUL_Ni
vargt_12od15_tmp09 = vargt_12od15_tmp08 NOT VTUL_Pi
vargt_12od15_tmp10 = vargt_12od15_tmp09 NOT VTL_Ni
vargt_12od15_tmp11 = vargt_12od15_tmp10 NOT VTL_Pi
vargt_12od15_tmp12 = vargt_12od15_tmp11 NOT VTS_Ni
vargt_12od15_tmp13 = vargt_12od15_tmp12 NOT VTS_Pi
vargt_12od15_tmp14 = vargt_12od15_tmp13 NOT VTULN_LL
vargt_12od15_tmp15 = vargt_12od15_tmp14 NOT VTULP_LL
vargt_12od15_tmp16 = vargt_12od15_tmp15 NOT VTLN_LL
vargt_12od15_tmp17 = vargt_12od15_tmp16 NOT VTLP_LL
vargt_12od15_tmp18 = vargt_12od15_tmp17 AND NPi
vargt_12od15_tmp19 = vargt_12od15_tmp18 NOT PPi
vargt_12od15_tmp20 = vargt_12od15_tmp19 AND OD12_15
vargt_12od15_tmp21 = vargt_12od15_tmp20 AND VAR
vargt_12od15_tmp22 = vargt_12od15_tmp21 NOT IBJTDMY
vargt_12od15_tmp23 = vargt_12od15_tmp22 NOT DIODMY
vargt_12od15_tmp24 = vargt_12od15_tmp23 NOT SR_ESD
vargt_12od15_tmp25 = vargt_12od15_tmp24 NOT SDI
vargt_12od15_tmp26 = vargt_12od15_tmp25 NOT HIA_DUMMY
vargt_12od15 = vargt_12od15_tmp26 NOT SDI_2


//* Define device -- xdev rhim

//* Define layer -- rhim_r3a
rhim_r3a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r3a = rhim_r3a_tmp01 AND RHDMY3i

rhim_r3_body_and_via_up = rhim_r3a AND VIA2i 
rhim_r3 = rhim_r3a NOT INTERACT rhim_r3_body_and_via_up 

//***** Define connectivity/via layer -- RH_TN_3 ****
RH_TN_all = RH_TNi OR SR_DTN 
RH_TN_3 = RH_TN_all NOT rhim_r3 

//* Define device -- xdev rm0w
CM0A = CM0Ai OR DCM0A 
M0_Ai2 = M0_Ai NOT CM0A 
metal0_Aj = M0_Ai2 OR DUM0_Ai 
metal0_Ai = metal0_Aj NOT CM0A  //  M0A + DM0A - CM0A
CM0B = CM0Bi OR DCM0B 
M0_Bi2 = M0_Bi NOT CM0B 
metal0_Bj = M0_Bi2 OR DUM0_Bi 
metal0_Bi = metal0_Bj NOT CM0B  //  M0B + DM0B - CM0B
metal0i = metal0_Ai OR metal0_Bi 
mt0res1 = metal0i AND RMDMY0 
mt0res_body_via_up = mt0res1 AND VIA0i 
mt0res1a = mt0res1 NOT INTERACT mt0res_body_via_up 
mt0res_body_via_down1 = mt0res1 AND VDi 
mt0res1b = mt0res1a NOT INTERACT mt0res_body_via_down1 
mt0res_body_via_down2 = mt0res1 AND VGi 
mt0res1c = mt0res1b NOT INTERACT mt0res_body_via_down2 
mt0res_body_via_down3 = mt0res1 AND VDRi 
mt0res1d = mt0res1c NOT INTERACT mt0res_body_via_down3 
mt0res1e = COPY mt0res1d 
M0_ALL = M0_Ai2 OR M0_Bi2 
mt0res = mt0res1e INTERACT M0_ALL 
mt0res_a = mt0res1e INTERACT M0_Ai2 
mt0res_b = mt0res1e INTERACT M0_Bi2 

//***** Define connectivity/via layer -- M0_A ****
M0_AY = metal0_Ai NOT INDDMY 
M0_A1 = M0_AY NOT mt0res 
m0efuse1 = M0_AY AND MFUSE 
m0efuse1a = m0efuse1 NOT INTERACT RMDMY0 
m0efuse_body_via_up = m0efuse1 AND VIA0i 
m0efuse1b = m0efuse1a NOT INTERACT m0efuse_body_via_up 
m0efuse_body_via_down1 = m0efuse1 AND VDi 
m0efuse1c = m0efuse1b NOT INTERACT m0efuse_body_via_down1 
m0efuse_body_via_down2 = m0efuse1 AND VGi 
m0efuse1d = m0efuse1c NOT INTERACT m0efuse_body_via_down2 
m0efuse_body_via_down3 = m0efuse1 AND VDRi 
m0efuse1e = m0efuse1d NOT INTERACT m0efuse_body_via_down3 
m0efuse = m0efuse1e INTERACT M0_Ai2  //  M0 efuse (only for color-A)
M0_A = M0_A1 NOT m0efuse 

//***** Define connectivity/via layer -- M0_B ****
M0_BY = metal0_Bi NOT INDDMY 
M0_B = M0_BY NOT mt0res 

//* Define device -- xdev rm1w
metal1_Ai = M1_Ai OR DUM1_Ai 
metal1_Bi = M1_Bi OR DUM1_Bi 
metal1i = metal1_Ai OR metal1_Bi 
mt1res1 = metal1i AND RMDMY1 
mt1res_body_via_up = mt1res1 AND VIA1i 
mt1res1a = mt1res1 NOT INTERACT mt1res_body_via_up 
mt1res_body_via_down = mt1res1 AND VIA0i 
mt1res1b = mt1res1a NOT INTERACT mt1res_body_via_down 
mt1res1c = COPY mt1res1b  //  M1 resistor
M1_ALL = M1_Ai OR M1_Bi 
mt1res = mt1res1c INTERACT M1_ALL 
mt1res_a = mt1res1c INTERACT M1_Ai 
mt1res_b = mt1res1c INTERACT M1_Bi 

//***** Define connectivity/via layer -- M1_A ****
M1_AY = metal1_Ai NOT INDDMY 
M1_A1 = M1_AY NOT mt1res 
m1efuse1 = M1_AY AND MFUSE 
m1efuse1a = m1efuse1 NOT INTERACT RMDMY1 
m1efuse_body_via_up = m1efuse1 AND VIA1i 
m1efuse1b = m1efuse1a NOT INTERACT m1efuse_body_via_up 
m1efuse_body_via_down = m1efuse1 AND VIA0i 
m1efuse1c = m1efuse1b NOT INTERACT m1efuse_body_via_down 
m1efuse = m1efuse1c INTERACT M1_Ai  //  M1 efuse (only for color-A)
M1_A = M1_A1 NOT m1efuse  //  M1A interconnecte

//***** Define connectivity/via layer -- M1_B ****
M1_BY = metal1_Bi NOT INDDMY 
M1_B = M1_BY NOT mt1res  //  M1B interconnect

//* Define device -- xdev rm2w
M2_Ai = M2_Ai1 OR M2_Ai_X 
metal2_Ai = M2_Ai OR DUM2_Ai 
metal2_Bi = M2_Bi OR DUM2_Bi 
metal2i1 = metal2_Ai OR metal2_Bi 
metal2_noABi = M2i OR DUM2i 
metal2i = metal2i1 OR metal2_noABi 
mt2res1 = metal2i AND RMDMY2 
mt2res_body_via_up = mt2res1 AND VIA2i 
mt2res1a = mt2res1 NOT INTERACT mt2res_body_via_up 
mt2res_body_via_down = mt2res1 AND VIA1i 
mt2res1b = mt2res1a NOT INTERACT mt2res_body_via_down 
mt2res1c = COPY mt2res1b  //  M2 resistor
M2_ALL2 = M2_Ai OR M2_Bi 
M2_ALL = M2i OR M2_ALL2 
mt2res = mt2res1c INTERACT M2_ALL 
mt2res_a = mt2res1c INTERACT M2_Ai 
mt2res_b = mt2res1c INTERACT M2_Bi 
mt2res_noab = mt2res1c INTERACT M2i 

//***** Define connectivity/via layer -- M2 ****
M2Y = metal2_noABi NOT INDDMY 
M2 = M2Y NOT mt2res  //  M2 interconnect

//***** Define connectivity/via layer -- M2_A ****
M2_AY = metal2_Ai NOT INDDMY 
M2_A1 = M2_AY NOT mt2res 
m2efuse1 = M2_AY AND MFUSE 
m2efuse1a = m2efuse1 NOT INTERACT RMDMY2 
m2efuse_body_via_up = m2efuse1 AND VIA2i 
m2efuse1b = m2efuse1a NOT INTERACT m2efuse_body_via_up 
m2efuse_body_via_down = m2efuse1 AND VIA1i 
m2efuse1c = m2efuse1b NOT INTERACT m2efuse_body_via_down 
m2efuse = m2efuse1c INTERACT M2_Ai_X  //  M2 efuse (only for color-A)
M2_A = M2_A1 NOT m2efuse  //  M2A interconnect

//***** Define connectivity/via layer -- M2_B ****
M2_BY = metal2_Bi NOT INDDMY 
M2_B = M2_BY NOT mt2res  //  M2B interconnect

//* Define device -- xdev rm3w
metal3_Ai = M3_Ai OR DUM3_Ai 
metal3_Bi = M3_Bi OR DUM3_Bi 
metal3i1 = metal3_Ai OR metal3_Bi 
metal3_noABi = M3i OR DUM3i 
metal3i = metal3i1 OR metal3_noABi 
mt3res1 = metal3i AND RMDMY3 
mt3res_body_via_up = mt3res1 AND VIA3i 
mt3res1a = mt3res1 NOT INTERACT mt3res_body_via_up 
mt3res_body_via_down = mt3res1 AND VIA2i 
mt3res1b = mt3res1a NOT INTERACT mt3res_body_via_down  //  M3 resistor
M3_ALL2 = M3_Ai OR M3_Bi 
M3_ALL = M3_ALL2 OR M3i 
mt3res = mt3res1b INTERACT M3_ALL 
mt3res_a = mt3res1b INTERACT M3_Ai 
mt3res_b = mt3res1b INTERACT M3_Bi 
mt3res_noab = mt3res1b INTERACT M3i 

//***** Define connectivity/via layer -- M3 ****
M3Y = metal3_noABi NOT INDDMY 
M3 = M3Y NOT mt3res  //  M3 interconnect

//***** Define connectivity/via layer -- M3_A ****
M3_AY = metal3_Ai NOT INDDMY 
M3_A = M3_AY NOT mt3res  //  M3A interconnect

//***** Define connectivity/via layer -- M3_B ****
M3_BY = metal3_Bi NOT INDDMY 
M3_B = M3_BY NOT mt3res  //  M3B interconnect

//* Define device -- xdev rm4w
M4_Ai = M4_Ai1 OR M4_Ai_Xe 
metal4_Ai = M4_Ai OR DUM4_Ai 
metal4_Bi = M4_Bi OR DUM4_Bi 
metal4i1 = metal4_Ai OR metal4_Bi 
metal4_noABi = M4i OR DUM4i 
metal4i = metal4i1 OR metal4_noABi 
mt4res1 = metal4i AND RMDMY4 
mt4res_body_via_up = mt4res1 AND VIA4i 
mt4res1a = mt4res1 NOT INTERACT mt4res_body_via_up 
mt4res_body_via_down = mt4res1 AND VIA3i 
mt4res1b = mt4res1a NOT INTERACT mt4res_body_via_down  //  M4 resistor
M4_ALL2 = M4_Ai OR M4_Bi 
M4_ALL = M4_ALL2 OR M4i 
mt4res = mt4res1b INTERACT M4_ALL 
mt4res_a = mt4res1b INTERACT M4_Ai 
mt4res_b = mt4res1b INTERACT M4_Bi 
mt4res_noab = mt4res1b INTERACT M4i 

//***** Define connectivity/via layer -- M4 ****
M4Y = metal4_noABi NOT INDDMY 
M4 = M4Y NOT mt4res  //  M4 interconnect

//***** Define connectivity/via layer -- M4_A ****
M4_AY = metal4_Ai NOT INDDMY 
M4_A1 = M4_AY NOT mt4res  //  M4A interconnect
m4efuse1 = M4_AY AND MFUSE 
m4efuse1a = m4efuse1 NOT INTERACT RMDMY4 
m4efuse_body_via_up = m4efuse1 AND VIA4i 
m4efuse1b = m4efuse1a NOT INTERACT m4efuse_body_via_up 
m4efuse_body_via_down = m4efuse1 AND VIA3i 
m4efuse1c = m4efuse1b NOT INTERACT m4efuse_body_via_down 
m4efuse = m4efuse1c INTERACT M4_Ai_Xe  //  M4 efuse (only for color-A)
M4_A = M4_A1 NOT m4efuse  //  M4A interconnect

//***** Define connectivity/via layer -- M4_B ****
M4_BY = metal4_Bi NOT INDDMY 
M4_B = M4_BY NOT mt4res  //  M4B interconnect

//* Define device -- xdev rm5w
metal5_Ai = M5_Ai OR DUM5_Ai 
metal5_Bi = M5_Bi OR DUM5_Bi 
metal5i1 = metal5_Ai OR metal5_Bi 
metal5_noABi = M5i OR DUM5i 
metal5i = metal5i1 OR metal5_noABi 
mt5res1 = metal5i AND RMDMY5 
mt5res_body_via_up = mt5res1 AND VIA5i 
mt5res1a = mt5res1 NOT INTERACT mt5res_body_via_up 
mt5res_body_via_down = mt5res1 AND VIA4i 
mt5res1b = mt5res1a NOT INTERACT mt5res_body_via_down  //  M5 resistor
M5_ALL2 = M5_Ai OR M5_Bi 
M5_ALL = M5_ALL2 OR M5i 
mt5res = mt5res1b INTERACT M5_ALL 
mt5res_a = mt5res1b INTERACT M5_Ai 
mt5res_b = mt5res1b INTERACT M5_Bi 
mt5res_noab = mt5res1b INTERACT M5i 

//***** Define connectivity/via layer -- M5 ****
M5Y = metal5_noABi NOT INDDMY 
M5 = M5Y NOT mt5res  //  M5 interconnect

//***** Define connectivity/via layer -- M5_A ****
M5_AY = metal5_Ai NOT INDDMY 
M5_A = M5_AY NOT mt5res  //  M5A interconnect

//***** Define connectivity/via layer -- M5_B ****
M5_BY = metal5_Bi NOT INDDMY 
M5_B = M5_BY NOT mt5res  //  M5B interconnect

//* Define device -- xdev rm6w
metal6_Ai = M6_Ai OR DUM6_Ai 
metal6_Bi = M6_Bi OR DUM6_Bi 
metal6i1 = metal6_Ai OR metal6_Bi 
metal6_noABi = M6i OR DUM6i 
metal6i = metal6i1 OR metal6_noABi 
mt6res1 = metal6i AND RMDMY6 
mt6res_body_via_up = mt6res1 AND VIA6i 
mt6res1a = mt6res1 NOT INTERACT mt6res_body_via_up 
mt6res_body_via_down = mt6res1 AND VIA5i 
mt6res1b = mt6res1a NOT INTERACT mt6res_body_via_down  //  M6 resistor
M6_ALL2 = M6_Ai OR M6_Bi 
M6_ALL = M6_ALL2 OR M6i 
mt6res = mt6res1b INTERACT M6_ALL 
mt6res_a = mt6res1b INTERACT M6_Ai 
mt6res_b = mt6res1b INTERACT M6_Bi 
mt6res_noab = mt6res1b INTERACT M6i 

//***** Define connectivity/via layer -- M6 ****
M6Y = metal6_noABi NOT INDDMY 
M6 = M6Y NOT mt6res  //  M6 interconnect

//***** Define connectivity/via layer -- M6_A ****
M6_AY = metal6_Ai NOT INDDMY 
M6_A = M6_AY NOT mt6res  //  M6A interconnect

//***** Define connectivity/via layer -- M6_B ****
M6_BY = metal6_Bi NOT INDDMY 
M6_B = M6_BY NOT mt6res  //  M6B interconnect

//* Define device -- xdev rm7w
metal7_Ai = M7_Ai OR DUM7_Ai 
metal7_Bi = M7_Bi OR DUM7_Bi 
metal7i1 = metal7_Ai OR metal7_Bi 
metal7_noABi = M7i OR DUM7i 
metal7i = metal7i1 OR metal7_noABi 
mt7res1 = metal7i AND RMDMY7 
mt7res_body_via_up = mt7res1 AND VIA7i 
mt7res1a = mt7res1 NOT INTERACT mt7res_body_via_up 
mt7res_body_via_down = mt7res1 AND VIA6i 
mt7res1b = mt7res1a NOT INTERACT mt7res_body_via_down  //  M7 resistor
M7_ALL2 = M7_Ai OR M7_Bi 
M7_ALL = M7_ALL2 OR M7i 
mt7res = mt7res1b INTERACT M7_ALL 
mt7res_a = mt7res1b INTERACT M7_Ai 
mt7res_b = mt7res1b INTERACT M7_Bi 
mt7res_noab = mt7res1b INTERACT M7i 

//***** Define connectivity/via layer -- M7 ****
M7Y = metal7_noABi NOT INDDMY 
M7 = M7Y NOT mt7res  //  M7 interconnect

//***** Define connectivity/via layer -- M7_A ****
M7_AY = metal7_Ai NOT INDDMY 
M7_A = M7_AY NOT mt7res  //  M7A interconnect

//***** Define connectivity/via layer -- M7_B ****
M7_BY = metal7_Bi NOT INDDMY 
M7_B = M7_BY NOT mt7res  //  M7B interconnect

//* Define device -- xdev rm8w
metal8_Ai = M8_Ai OR DUM8_Ai 
metal8_Bi = M8_Bi OR DUM8_Bi 
metal8i1 = metal8_Ai OR metal8_Bi 
metal8_noABi = M8i OR DUM8i 
metal8i = metal8i1 OR metal8_noABi 
mt8res1 = metal8i AND RMDMY8 
mt8res_body_via_up = mt8res1 AND VIA8i 
mt8res1a = mt8res1 NOT INTERACT mt8res_body_via_up 
mt8res_body_via_down = mt8res1 AND VIA7i 
mt8res1b = mt8res1a NOT INTERACT mt8res_body_via_down  //  M8 resistor
M8_ALL2 = M8_Ai OR M8_Bi 
M8_ALL = M8_ALL2 OR M8i 
mt8res = mt8res1b INTERACT M8_ALL 
mt8res_a = mt8res1b INTERACT M8_Ai 
mt8res_b = mt8res1b INTERACT M8_Bi 
mt8res_noab = mt8res1b INTERACT M8i 

//***** Define connectivity/via layer -- M8 ****
M8Y = metal8_noABi NOT INDDMY 
M8 = M8Y NOT mt8res  //  M8 interconnect

//***** Define connectivity/via layer -- M8_A ****
M8_AY = metal8_Ai NOT INDDMY 
M8_A = M8_AY NOT mt8res  //  M8A interconnect

//***** Define connectivity/via layer -- M8_B ****
M8_BY = metal8_Bi NOT INDDMY 
M8_B = M8_BY NOT mt8res  //  M8B interconnect

//* Define device -- xdev rm9w
metal9_Ai = M9_Ai OR DUM9_Ai 
metal9_Bi = M9_Bi OR DUM9_Bi 
metal9i1 = metal9_Ai OR metal9_Bi 
metal9_noABi = M9i OR DUM9i 
metal9i = metal9i1 OR metal9_noABi 
mt9res1 = metal9i AND RMDMY9 
mt9res_body_via_up = mt9res1 AND VIA9i 
mt9res1a = mt9res1 NOT INTERACT mt9res_body_via_up 
mt9res_body_via_down = mt9res1 AND VIA8i 
mt9res1b = mt9res1a NOT INTERACT mt9res_body_via_down  //  M9 resistor
M9_ALL2 = M9_Ai OR M9_Bi 
M9_ALL = M9_ALL2 OR M9i 
mt9res = mt9res1b INTERACT M9_ALL 
mt9res_a = mt9res1b INTERACT M9_Ai 
mt9res_b = mt9res1b INTERACT M9_Bi 
mt9res_noab = mt9res1b INTERACT M9i 

//***** Define connectivity/via layer -- M9 ****
M9Y = metal9_noABi NOT INDDMY 
M9 = M9Y NOT mt9res  //  M9 interconnect

//***** Define connectivity/via layer -- M9_A ****
M9_AY = metal9_Ai NOT INDDMY 
M9_A = M9_AY NOT mt9res  //  M9A interconnect

//***** Define connectivity/via layer -- M9_B ****
M9_BY = metal9_Bi NOT INDDMY 
M9_B = M9_BY NOT mt9res  //  M9B interconnect

//* Define device -- xdev rm10w
metal10_Ai = M10_Ai OR DUM10_Ai 
metal10_Bi = M10_Bi OR DUM10_Bi 
metal10i1 = metal10_Ai OR metal10_Bi 
metal10_noABi = M10i OR DUM10i 
metal10i = metal10i1 OR metal10_noABi 
mt10res1 = metal10i AND RMDMY10 
mt10res_body_via_up = mt10res1 AND VIA10i 
mt10res1a = mt10res1 NOT INTERACT mt10res_body_via_up 
mt10res_body_via_down = mt10res1 AND VIA9i 
mt10res1b = mt10res1a NOT INTERACT mt10res_body_via_down  //  M10 resistor
M10_ALL2 = M10_Ai OR M10_Bi 
M10_ALL = M10_ALL2 OR M10i 
mt10res = mt10res1b INTERACT M10_ALL 
mt10res_a = mt10res1b INTERACT M10_Ai 
mt10res_b = mt10res1b INTERACT M10_Bi 
mt10res_noab = mt10res1b INTERACT M10i 

//***** Define connectivity/via layer -- M10 ****
M10Y = metal10_noABi NOT INDDMY 
M10 = M10Y NOT mt10res  //  M10 interconnect

//***** Define connectivity/via layer -- M10_A ****
M10_AY = metal10_Ai NOT INDDMY 
M10_A = M10_AY NOT mt10res  //  M10A interconnect

//***** Define connectivity/via layer -- M10_B ****
M10_BY = metal10_Bi NOT INDDMY 
M10_B = M10_BY NOT mt10res  //  M10B interconnect

//* Define device -- xdev rm11w
metal11_Ai = M11_Ai OR DUM11_Ai 
metal11_Bi = M11_Bi OR DUM11_Bi 
metal11i1 = metal11_Ai OR metal11_Bi 
metal11_noABi = M11i OR DUM11i 
metal11i = metal11i1 OR metal11_noABi 
mt11res1 = metal11i AND RMDMY11 
mt11res_body_via_up = mt11res1 AND VIA11i 
mt11res1a = mt11res1 NOT INTERACT mt11res_body_via_up 
mt11res_body_via_down = mt11res1 AND VIA10i 
mt11res1b = mt11res1a NOT INTERACT mt11res_body_via_down  //  M11 resistor
M11_ALL2 = M11_Ai OR M11_Bi 
M11_ALL = M11_ALL2 OR M11i 
mt11res = mt11res1b INTERACT M11_ALL 
mt11res_a = mt11res1b INTERACT M11_Ai 
mt11res_b = mt11res1b INTERACT M11_Bi 
mt11res_noab = mt11res1b INTERACT M11i 

//***** Define connectivity/via layer -- M11 ****
M11Y = metal11_noABi NOT INDDMY 
M11 = M11Y NOT mt11res  //  M11 interconnect

//***** Define connectivity/via layer -- M11_A ****
M11_AY = metal11_Ai NOT INDDMY 
M11_A = M11_AY NOT mt11res  //  M11A interconnect

//***** Define connectivity/via layer -- M11_B ****
M11_BY = metal11_Bi NOT INDDMY 
M11_B = M11_BY NOT mt11res  //  M11B interconnect

//* Define device -- xdev rm12w
metal12_Ai = M12_Ai OR DUM12_Ai 
metal12_Bi = M12_Bi OR DUM12_Bi 
metal12i1 = metal12_Ai OR metal12_Bi 
metal12_noABi = M12i OR DUM12i 
metal12i = metal12i1 OR metal12_noABi 
mt12res1 = metal12i AND RMDMY12 
mt12res_body_via_up = mt12res1 AND VIA12i 
mt12res1a = mt12res1 NOT INTERACT mt12res_body_via_up 
mt12res_body_via_down = mt12res1 AND VIA11i 
mt12res1b = mt12res1a NOT INTERACT mt12res_body_via_down  //  M12 resistor
M12_ALL2 = M12_Ai OR M12_Bi 
M12_ALL = M12_ALL2 OR M12i 
mt12res = mt12res1b INTERACT M12_ALL 
mt12res_a = mt12res1b INTERACT M12_Ai 
mt12res_b = mt12res1b INTERACT M12_Bi 
mt12res_noab = mt12res1b INTERACT M12i 

//***** Define connectivity/via layer -- M12 ****
M12Y = metal12_noABi NOT INDDMY 
M12 = M12Y NOT mt12res  //  M12 interconnect

//***** Define connectivity/via layer -- M12_A ****
M12_AY = metal12_Ai NOT INDDMY 
M12_A = M12_AY NOT mt12res  //  M12A interconnect

//***** Define connectivity/via layer -- M12_B ****
M12_BY = metal12_Bi NOT INDDMY 
M12_B = M12_BY NOT mt12res  //  M12B interconnect

//* Define device -- xdev rm13w
metal13_Ai = M13_Ai OR DUM13_Ai 
metal13_Bi = M13_Bi OR DUM13_Bi 
metal13i1 = metal13_Ai OR metal13_Bi 
metal13_noABi = M13i OR DUM13i 
metal13i = metal13i1 OR metal13_noABi 
mt13res1 = metal13i AND RMDMY13 
mt13res_body_via_up = mt13res1 AND VIA13i 
mt13res1a = mt13res1 NOT INTERACT mt13res_body_via_up 
mt13res_body_via_down = mt13res1 AND VIA12i 
mt13res1b = mt13res1a NOT INTERACT mt13res_body_via_down  //  M13 resistor
M13_ALL2 = M13_Ai OR M13_Bi 
M13_ALL = M13_ALL2 OR M13i 
mt13res = mt13res1b INTERACT M13_ALL 
mt13res_a = mt13res1b INTERACT M13_Ai 
mt13res_b = mt13res1b INTERACT M13_Bi 
mt13res_noab = mt13res1b INTERACT M13i 

//***** Define connectivity/via layer -- M13 ****
M13Y = metal13_noABi NOT INDDMY 
M13 = M13Y NOT mt13res  //  M13 interconnect

//***** Define connectivity/via layer -- M13_A ****
M13_AY = metal13_Ai NOT INDDMY 
M13_A = M13_AY NOT mt13res  //  M13A interconnect

//***** Define connectivity/via layer -- M13_B ****
M13_BY = metal13_Bi NOT INDDMY 
M13_B = M13_BY NOT mt13res  //  M13B interconnect

//* Define device -- xdev rm14w
metal14_Ai = M14_Ai OR DUM14_Ai 
metal14_Bi = M14_Bi OR DUM14_Bi 
metal14i1 = metal14_Ai OR metal14_Bi 
metal14_noABi = M14i OR DUM14i 
metal14i = metal14i1 OR metal14_noABi 
mt14res1 = metal14i AND RMDMY14 
mt14res_body_via_up = mt14res1 AND VIA14i 
mt14res1a = mt14res1 NOT INTERACT mt14res_body_via_up 
mt14res_body_via_down = mt14res1 AND VIA13i 
mt14res1b = mt14res1a NOT INTERACT mt14res_body_via_down  //  M14 resistor
M14_ALL2 = M14_Ai OR M14_Bi 
M14_ALL = M14_ALL2 OR M14i 
mt14res = mt14res1b INTERACT M14_ALL 
mt14res_a = mt14res1b INTERACT M14_Ai 
mt14res_b = mt14res1b INTERACT M14_Bi 
mt14res_noab = mt14res1b INTERACT M14i 

//***** Define connectivity/via layer -- M14 ****
M14Y = metal14_noABi NOT INDDMY 
M14 = M14Y NOT mt14res  //  M14 interconnect

//***** Define connectivity/via layer -- M14_A ****
M14_AY = metal14_Ai NOT INDDMY 
M14_A = M14_AY NOT mt14res  //  M14A interconnect

//***** Define connectivity/via layer -- M14_B ****
M14_BY = metal14_Bi NOT INDDMY 
M14_B = M14_BY NOT mt14res  //  M14B interconnect

//* Define device -- xdev rm15w
metal15_Ai = M15_Ai OR DUM15_Ai 
metal15_Bi = M15_Bi OR DUM15_Bi 
metal15i1 = metal15_Ai OR metal15_Bi 
metal15_noABi = M15i OR DUM15i 
metal15i = metal15i1 OR metal15_noABi 
mt15res1 = metal15i AND RMDMY15 
mt15res_body_via_up = mt15res1 AND VIA15i 
mt15res1a = mt15res1 NOT INTERACT mt15res_body_via_up 
mt15res_body_via_down = mt15res1 AND VIA14i 
mt15res1b = mt15res1a NOT INTERACT mt15res_body_via_down  //  M15 resistor
M15_ALL2 = M15_Ai OR M15_Bi 
M15_ALL = M15_ALL2 OR M15i 
mt15res = mt15res1b INTERACT M15_ALL 
mt15res_a = mt15res1b INTERACT M15_Ai 
mt15res_b = mt15res1b INTERACT M15_Bi 
mt15res_noab = mt15res1b INTERACT M15i 

//***** Define connectivity/via layer -- M15 ****
M15Y = metal15_noABi NOT INDDMY 
M15 = M15Y NOT mt15res  //  M15 interconnect

//***** Define connectivity/via layer -- M15_A ****
M15_AY = metal15_Ai NOT INDDMY 
M15_A = M15_AY NOT mt15res  //  M15A interconnect

//***** Define connectivity/via layer -- M15_B ****
M15_BY = metal15_Bi NOT INDDMY 
M15_B = M15_BY NOT mt15res  //  M15B interconnect

//* Define device -- xdev rm16w
metal16_Ai = M16_Ai OR DUM16_Ai 
metal16_Bi = M16_Bi OR DUM16_Bi 
metal16i1 = metal16_Ai OR metal16_Bi 
metal16_noABi = M16i OR DUM16i 
metal16i = metal16i1 OR metal16_noABi 
mt16res1 = metal16i AND RMDMY16 
mt16res_body_via_up = mt16res1 AND VIA16i 
mt16res1a = mt16res1 NOT INTERACT mt16res_body_via_up 
mt16res_body_via_down = mt16res1 AND VIA15i 
mt16res1b = mt16res1a NOT INTERACT mt16res_body_via_down  //  M16 resistor
M16_ALL2 = M16_Ai OR M16_Bi 
M16_ALL = M16_ALL2 OR M16i 
mt16res = mt16res1b INTERACT M16_ALL 
mt16res_a = mt16res1b INTERACT M16_Ai 
mt16res_b = mt16res1b INTERACT M16_Bi 
mt16res_noab = mt16res1b INTERACT M16i 

//***** Define connectivity/via layer -- M16 ****
M16Y = metal16_noABi NOT INDDMY 
M16 = M16Y NOT mt16res  //  M16 interconnect

//***** Define connectivity/via layer -- M16_A ****
M16_AY = metal16_Ai NOT INDDMY 
M16_A = M16_AY NOT mt16res  //  M16A interconnect

//***** Define connectivity/via layer -- M16_B ****
M16_BY = metal16_Bi NOT INDDMY 
M16_B = M16_BY NOT mt16res  //  M16B interconnect

//* Define device -- xdev rm17w
metal17_Ai = M17_Ai OR DUM17_Ai 
metal17_Bi = M17_Bi OR DUM17_Bi 
metal17i1 = metal17_Ai OR metal17_Bi 
metal17_noABi = M17i OR DUM17i 
metal17i = metal17i1 OR metal17_noABi 
mt17res1 = metal17i AND RMDMY17 
mt17res_body_via_up = mt17res1 AND RVi 
mt17res1a = mt17res1 NOT INTERACT mt17res_body_via_up 
mt17res_body_via_down = mt17res1 AND VIA16i 
mt17res1b = mt17res1a NOT INTERACT mt17res_body_via_down  //  M17 resistor
M17_ALL2 = M17_Ai OR M17_Bi 
M17_ALL = M17_ALL2 OR M17i 
mt17res = mt17res1b INTERACT M17_ALL 
mt17res_a = mt17res1b INTERACT M17_Ai 
mt17res_b = mt17res1b INTERACT M17_Bi 
mt17res_noab = mt17res1b INTERACT M17i 

//***** Define connectivity/via layer -- M17 ****
M17Y = metal17_noABi NOT INDDMY 
M17 = M17Y NOT mt17res  //  M17 interconnect

//***** Define connectivity/via layer -- M17_A ****
M17_AY = metal17_Ai NOT INDDMY 
M17_A = M17_AY NOT mt17res  //  M17A interconnect

//***** Define connectivity/via layer -- M17_B ****
M17_BY = metal17_Bi NOT INDDMY 
M17_B = M17_BY NOT mt17res  //  M17B interconnect

//* Define device -- xdev rmap
APY = APi NOT INDDMY 
mtAPresa = APY AND RMDMYAP 
mtAPresb = APY NOT RMDMYAP 
mtAPresc = mtAPresa INTERACT mtAPresb == 2
mtAPres_body_via_down = mtAPresa AND RVi 
mtAPres = mtAPresc NOT INTERACT mtAPres_body_via_down  //  AP resistor

//***** Define connectivity/via layer -- AP ****
AP = APY NOT mtAPres  //  AP interconnect

//* Define device -- xdev mimcap_sin_shd_3t
shdmim_reg1 = TPCDMY_AP AND BPCi 
shdmim_reg2 = shdmim_reg1 INTERACT MPCi 
shdmim_reg3 = shdmim_reg2 INTERACT TPCi 
shdmim_reg4 = shdmim_reg3 INTERACT BPC_O 
shdmim_reg5 = shdmim_reg4 INTERACT MPC_O 
shdmim_reg6 = shdmim_reg5 INTERACT TPC_O 
shdmim_reg = shdmim_reg6 NOT INTERACT TPCDMY_AP2 

//* Define device -- xdev mimcap_sin_fhd
fhdmim_reg1 = TPCDMY_AP AND TPCDMY_AP2 
fhdmim_reg2 = fhdmim_reg1 AND BPCi 
fhdmim_reg3 = fhdmim_reg2 INTERACT MPCi 
fhdmim_reg4 = fhdmim_reg3 INTERACT BPC_O 
fhdmim_reg5 = fhdmim_reg4 INTERACT MPC_O 
fhdmim_reg6 = fhdmim_reg5 NOT INTERACT TPCi 
fhdmim_reg = fhdmim_reg6 NOT INTERACT TPC_O 

//* Define device -- xdev moscap_rf_nw
VAR_RF1 = VAR AND RFDMY 
VAR_RF2 = VAR_RF1 INTERACT gate_a 
P_ul_shift_edge1 = VTUL_P COINCIDENT EDGE VTEL_P
P_ul_shift_edge2 = P_ul_shift_edge1 INSIDE EDGE Small_Poly3 
P_ul_shift_edge = P_ul_shift_edge1 TOUCH EDGE P_ul_shift_edge2
VTULP_exp = EXPAND EDGE P_ul_shift_edge OUTSIDE BY EXPAND_VT_EDGE
VTULP_1 = VTUL_P OR VTULP_exp 
vt_abut_p1 = VTEL_P OR VTUL_P 
vt_abut_p2 = vt_abut_p1 OR VTUL_PLL 
vt_abut_p3 = vt_abut_p2 OR VTL_P 
vt_abut_p4 = vt_abut_p3 OR VTL_PLL 
P_s_shift_edge1 = VTS_P COINCIDENT EDGE vt_abut_p4
P_s_shift_edge2 = P_s_shift_edge1 INSIDE EDGE Small_Poly3 
P_s_shift_edge = P_s_shift_edge1 TOUCH EDGE P_s_shift_edge2
VTSP_exp = EXPAND EDGE P_s_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_p1 = COPY VTSP_exp 
P_lll_shift_edge1 = VTL_PLL COINCIDENT EDGE vt_abut_p3
P_lll_shift_edge2 = P_lll_shift_edge1 INSIDE EDGE Small_Poly3 
P_lll_shift_edge = P_lll_shift_edge1 TOUCH EDGE P_lll_shift_edge2
VTLPLL_exp = EXPAND EDGE P_lll_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_p2 = vt_abut_exl_p1 OR VTLPLL_exp 
P_l_shift_edge1 = VTL_P COINCIDENT EDGE vt_abut_p2
P_l_shift_edge2 = P_l_shift_edge1 INSIDE EDGE Small_Poly3 
P_l_shift_edge = P_l_shift_edge1 TOUCH EDGE P_l_shift_edge2
VTLP_exp = EXPAND EDGE P_l_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_p3 = vt_abut_exl_p2 OR VTLP_exp 
P_ulll_shift_edge1 = VTUL_PLL COINCIDENT EDGE vt_abut_p1
P_ulll_shift_edge2 = P_ulll_shift_edge1 INSIDE EDGE Small_Poly3 
P_ulll_shift_edge = P_ulll_shift_edge1 TOUCH EDGE P_ulll_shift_edge2
VTULPLL_exp = EXPAND EDGE P_ulll_shift_edge OUTSIDE BY EXPAND_VT_EDGE
vt_abut_exl_p4 = vt_abut_exl_p3 OR VTULPLL_exp 
VTULP = VTULP_1 NOT vt_abut_exl_p4 
VAR_RF3 = VAR_RF2 INTERACT VTULP 
VAR_RF4 = VAR_RF3 INTERACT VTULN 
vt_abut_exl_n5 = vt_abut_exl_n4 OR VTULN_exp 
VTELN = VTEL_N NOT vt_abut_exl_n5 
rfvar_exclude_layer1 = NT_N OR VTELN 
vt_abut_exl_p5 = vt_abut_exl_p4 OR VTULP_exp 
VTELP = VTEL_P NOT vt_abut_exl_p5 
rfvar_exclude_layer2 = rfvar_exclude_layer1 OR VTELP 
VTLN_1 = VTL_N OR VTLN_exp 
VTLN = VTLN_1 NOT vt_abut_exl_n2 
rfvar_exclude_layer3 = rfvar_exclude_layer2 OR VTLN 
VTLP_1 = VTL_P OR VTLP_exp 
VTLP = VTLP_1 NOT vt_abut_exl_p2 
rfvar_exclude_layer4 = rfvar_exclude_layer3 OR VTLP 
VTSN = VTS_N OR VTSN_exp 
rfvar_exclude_layer5 = rfvar_exclude_layer4 OR VTSN 
VTSP = VTS_P OR VTSP_exp 
rfvar_exclude_layer6 = rfvar_exclude_layer5 OR VTSP 
VTULNLL_1 = VTUL_NLL OR VTULNLL_exp 
VTULNLL = VTULNLL_1 NOT vt_abut_exl_n3 
rfvar_exclude_layer7 = rfvar_exclude_layer6 OR VTULNLL 
VTULPLL_1 = VTUL_PLL OR VTULPLL_exp 
VTULPLL = VTULPLL_1 NOT vt_abut_exl_p3 
rfvar_exclude_layer8 = rfvar_exclude_layer7 OR VTULPLL 
VTLNLL_1 = VTL_NLL OR VTLNLL_exp 
VTLNLL = VTLNLL_1 NOT vt_abut_exl_n1 
rfvar_exclude_layer9 = rfvar_exclude_layer8 OR VTLNLL 
VTLPLL_1 = VTL_PLL OR VTLPLL_exp 
VTLPLL = VTLPLL_1 NOT vt_abut_exl_p1 
rfvar_exclude_layer10 = rfvar_exclude_layer9 OR VTLPLL 
rfvar_exclude_layer13 = rfvar_exclude_layer10 OR IBJTDMY 
rfvar_exclude_layer14 = rfvar_exclude_layer13 OR DIODMY 
rfvar_exclude_layer15 = rfvar_exclude_layer14 OR SR_ESD 
rfvar_exclude_layer16 = rfvar_exclude_layer15 OR SDI 
rfvar_exclude_layer17 = rfvar_exclude_layer16 OR GATED 
rfvar_exclude_layer18 = rfvar_exclude_layer17 OR HIA_DUMMY 
rfvar_exclude_layer = rfvar_exclude_layer18 OR SDI_2 
VAR_RF = VAR_RF4 NOT INTERACT rfvar_exclude_layer 
var_nw_rf1a = VAR_RF AND nxwell 
diff_invalid = diffa2 NOT diffa 
var_nw_rf0a = diff_invalid AND VAR_RF 
var_nw_rf0b = SIZE var_nw_rf0a BY 0.005 
var_nw_rf0c = SIZE Small_Poly2 BY 0.005 
var_nw_rf0 = var_nw_rf0b OR var_nw_rf0c 
var_nw_rf1 = var_nw_rf1a NOT var_nw_rf0 
var_nw_rfa = var_nw_rf1 NOT OD2 
var_nw_rf_nw1 = var_nw_rfa NOT DNW 
var_nw_rf_nw = var_nw_rf_nw1 NOT VARi_Mxs  //  RF dmos nmoscap core 0.8v w/o DNW

//***** Define connectivity/via layer -- n_gpoly_ulvt ****
npoly_co_ul = npoly_co_ula NOT PODE_3T 
n_gpoly_ulvt_all = npoly_co_ul NOT n_fpoly_ulvt 
n_gpoly_ulvt1 = n_gpoly_ulvt_all NOT all_mos_gates 
nocg_dmy = COPY DIODMY 
n_gpoly_nocg_ulvt = n_gpoly_ulvt1 AND nocg_dmy 
n_gpoly_ulvt = n_gpoly_ulvt1 NOT n_gpoly_nocg_ulvt 

//* Define device -- xdev moscap_rf
gate_rf = gate_a AND RFDMY 
vargt_rfa = gate_rf AND VAR_RF 
vargt_rf = vargt_rfa NOT OD2 

//* Define device -- xdev moscap_rf12_nw
var_nw_rf12a1 = var_nw_rf1 AND OD12 
var_nw_rf12a = var_nw_rf12a1 NOT OD12_15 
var_nw_rf12_nw1 = var_nw_rf12a NOT DNW 
var_nw_rf12_nw = var_nw_rf12_nw1 NOT VARi_Mxs  //  RF dmos nmoscap I/O 1.2v w/o DNW

//***** Define connectivity/via layer -- n_gpoly_io_ulvt ****
npoly_io_ulvt = npoly_ioa_ulvt NOT PODE_3T 
n_gpoly_io_ulvt_all = npoly_io_ulvt NOT n_fpoly_io_ulvt 
n_gpoly_io_ulvt = n_gpoly_io_ulvt_all NOT all_mos_gates 

//* Define device -- xdev moscap_rf12
vargt_rf12a = vargt_rfa AND OD12 
vargt_rf12b = vargt_rf12a NOT OD12_15 
vargt_rf12 = vargt_rf12b AND NP  //  RF Varactor on 1.2v thick oxide

//* Define device -- xdev moscap_rf12od15_nw
var_nw_rf12od15a = var_nw_rf12a1 AND OD12_15 
var_nw_rf12od15_nw1 = var_nw_rf12od15a NOT DNW 
var_nw_rf12od15_nw = var_nw_rf12od15_nw1 NOT VARi_Mxs  //  RF dmos nmoscap I/O 1.2v overdrive 1.5v w/o DNW

//* Define device -- xdev moscap_rf12od15
vargt_rf12od15b = vargt_rf12a AND OD12_15 
vargt_rf12od15 = vargt_rf12od15b AND NP  //  RF Varactor on 1.2v over-drive 1.5v thick oxide
var_nw_rfb = var_nw_rfa AND DNW 
var_nw_rf = var_nw_rfb NOT VARi_Mxs  //  RF dmos nmoscap core 0.8v w/i DNW
var_nw_rf121 = var_nw_rf12a AND DNW 
var_nw_rf12 = var_nw_rf121 NOT VARi_Mxs  //  RF dmos nmoscap I/O 1.2v w/i DNW
var_nw_rf12od15b = var_nw_rf12od15a AND DNW 
var_nw_rf12od15 = var_nw_rf12od15b NOT VARi_Mxs  //  RF dmos nmoscap I/O 1.2v overdrive 1.5v w/i DNW

//***** Define connectivity/via layer -- mom0m2_b ****
mom0m21_b = M0_B AND MOMDMY_MXP2 
mom0m2_b = mom0m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom2m2_a ****
mom2m21_a = M2_A AND MOMDMY_MXP2 
mom2m2_a = mom2m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom5p2_a ****
mom5p21_a = M5_A AND MOMDMY_MXP2 
mom5p2_a = mom5p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_fpoly_svt ****
ppoly_co_s1 = VTSP NOT sram_np 
ppoly_co_s2 = ppoly_co_s1 NOT poly_od2 
ppoly_co_sa = poly_org AND ppoly_co_s2  //  SVT ppoly
ppoly_co_s = ppoly_co_sa NOT PODE_3T 
p_fpoly_svt = ppoly_co_s NOT OD 

//***** Define connectivity/via layer -- mom3m2_a ****
mom3m21_a = M3_A AND MOMDMY_MXP2 
mom3m2_a = mom3m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom1m1_b ****
mom1m11_b = M1_B AND MOMDMY_MXP1 
mom1m1_b = mom1m11_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- MD_OD_N_IO ****
MD_ODa = MDx AND OD  //  MD on active
MD_OD_P1 = MD_ODa AND tpdiff_ori 
MD_OD_N1 = MD_ODa NOT MD_OD_P1 
MD_OD_N2 = MD_OD_N1 NOT SRM_all 
MD_OD_N_IO = MD_OD_N2 AND OD12 

//***** Define connectivity/via layer -- p_fpoly_elvt ****
ppoly_co_el1 = VTELP NOT sram_np 
ppoly_co_el2 = ppoly_co_el1 NOT poly_od2 
ppoly_co_ela = poly_org AND ppoly_co_el2  //  ELVT ppoly
ppoly_co_el = ppoly_co_ela NOT PODE_3T 
p_fpoly_elvt = ppoly_co_el NOT OD 

//* Define ERC or other layers
odtap = MD_ODa AND OD 
p_odtap1 = odtap AND tpdiff_ori 
p_odtap2 = p_odtap1 NOT SRM_all 
p_odtap = p_odtap2 NOT tpdiff_bjt 
p_odtap_ext1 = SIZE p_odtap BY 0.013 
p_odtap_ext2 = p_odtap_ext1 AND MDx 
p_odtap_io_ext = p_odtap_ext2 AND OD12 
p_odtap_ext_all = p_odtap_ext2 NOT p_odtap_io_ext 
p_odtap_ext_o = COPY p_odtap_ext_all 

//* Define layer -- mkr_cfi_p_core_gpoly_fb9_cpp57_1
mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp01 = core_pgpoly_region AND FINFET_boundary9
mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp02 = mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp03 = mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp02 AND CPP57
mkr_cfi_p_core_gpoly_fb9_cpp57_1 = mkr_cfi_p_core_gpoly_fb9_cpp57_1_tmp03 NOT CPP85

mkr_cfi_p_core_gpoly_fb9_cpp57 = COPY mkr_cfi_p_core_gpoly_fb9_cpp57_1 

//***** Define connectivity/via layer -- RV_TPC_RDL ****
RV_TPC_RDL1 = RVi AND AP 
TPC_FINAL = TPCi NOT TPC_O 
RV_TPC_RDL = RV_TPC_RDL1 AND TPC_FINAL 
M0_OD = COPY MD_ODa 
VDR_MD_TAP = VDR AND MDx 

//* Define layer -- M0_B_SRM03_1
M0_B_SRM03_1 = SRM AND SRM2030


//* Define layer -- M0_B_SRM03_2
M0_B_SRM03_2 = SRM AND SRM2022

M0_B_SRM03_region = M0_B_SRM03_1 OR M0_B_SRM03_2 

//* Define layer -- M1_B_SRM03_1
M1_B_SRM03_1 = SRM AND SRM2015


//* Define layer -- M1_B_SRM03_2
M1_B_SRM03_2 = SRM AND SRM2018

M1_B_SRM03_region1 = M1_B_SRM03_1 OR M1_B_SRM03_2 

//* Define layer -- M1_B_SRM03_3
M1_B_SRM03_3 = SRM AND SRM2020

M1_B_SRM03_region2 = M1_B_SRM03_region1 OR M1_B_SRM03_3 

//* Define layer -- M1_B_SRM03_4
M1_B_SRM03_4 = SRM AND SRM2030

M1_B_SRM03_region3 = M1_B_SRM03_region2 OR M1_B_SRM03_4 

//* Define layer -- M1_B_SRM03_5
M1_B_SRM03_5 = SRM AND SRM2022

M1_B_SRM03_region4 = M1_B_SRM03_region3 OR M1_B_SRM03_5 

//* Define layer -- M1_B_SRM03_6
M1_B_SRM03_6 = SRM AND SRM2026

M1_B_SRM03_region = M1_B_SRM03_region4 OR M1_B_SRM03_6 

//* Define layer -- mkr_VDR_MD_TAP_FB9_o
mkr_VDR_MD_TAP_FB9_o = VDR_MD_TAP AND FINFET_boundary9

mkr_VDR_MD_TAP_1 = VDR_MD_TAP NOT INTERACT mkr_VDR_MD_TAP_FB9_o 
mkr_VDR_MD_TAP_o = COPY VDR_MD_TAP 
mkr_VDR_MD_TAP = mkr_VDR_MD_TAP_1 INTERACT mkr_VDR_MD_TAP_o 

//***** Define connectivity/via layer -- VIA14 ****
RH_TN_15a = RH_TN_all INTERACT RHDMY15i 
VTIN_14 = VIA14i AND RH_TN_15a 
VIA14 = VIA14i NOT VTIN_14 

//***** Define connectivity/via layer -- mom5m2_b ****
mom5m21_b = M5_B AND MOMDMY_MXP2 
mom5m2_b = mom5m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6minus ****
mom6minus = M6 AND MOMDMY_MINUS 
VG = VGi NOT VG_VDR 
mkr_vg_tie = VG AND TIE_VG 

//***** Define connectivity/via layer -- mom8p2 ****
mom8p21 = M8 AND MOMDMY_MXP2 
mom8p2 = mom8p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6p2_a ****
mom6p21_a = M6_A AND MOMDMY_MXP2 
mom6p2_a = mom6p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA7 ****
RH_TN_8a = RH_TN_all INTERACT RHDMY8i 
VTIN_7 = VIA7i AND RH_TN_8a 
VIA7 = VIA7i NOT VTIN_7 

//***** Define connectivity/via layer -- MD_STI ****
MD_STIa = MDx NOT MD_ODa 
MD_STIb = COPY MD_STIa 
MD_STI2 = MD_STIb NOT SRM_all 
MD_STI_IO = MD_STI2 AND OD12 
MD_STI3 = MD_STI2 NOT MD_STI_IO 
MD_STI = MD_STI3 NOT CPP85 
emit_p_reg = emit_reg INTERACT NW 

//***** Define connectivity/via layer -- mom7p2_b ****
mom7p21_b = M7_B AND MOMDMY_MXP2 
mom7p2_b = mom7p21_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- n_odtap ****
n_odtap1 = odtap NOT tpdiff_ori 
n_odtap2 = n_odtap1 NOT SRM_all 
tndiff_bjt = tndiff_ori INTERACT BJTDMY 
n_odtap = n_odtap2 NOT tndiff_bjt 

//***** Define connectivity/via layer -- mom3p1 ****
mom3p11 = M3 AND MOMDMY_MXP1 
mom3p1 = mom3p11 INTERACT MOMDMY_MXP12 

//* Define layer -- M0_A_SRM01_1
M0_A_SRM01_1 = SRM AND SRM2014

M0_A_SRM01_region = COPY M0_A_SRM01_1 
M0_A_SRM01 = M0_A AND M0_A_SRM01_region 

//***** Define connectivity/via layer -- mom1p2_a ****
mom1p21_a = M1_A AND MOMDMY_MXP2 
mom1p2_a = mom1p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom1m1_a ****
mom1m11_a = M1_A AND MOMDMY_MXP1 
mom1m1_a = mom1m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- n_fpoly_srm ****
npoly_co_srm = poly_org AND sram_n  //  SRAM npoly
n_fpoly_srm = npoly_co_srm NOT OD 

//***** Define connectivity/via layer -- mom2plus_b ****
mom2plus_b = M2_B AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- p_gpoly_srm ****
ppoly_co_srm = poly_org AND sram_p  //  SRAM ppoly
p_fpoly_srm = ppoly_co_srm NOT OD 
p_gpoly_srm_all = ppoly_co_srm NOT p_fpoly_srm 
p_gpoly_srm = p_gpoly_srm_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom7minus ****
mom7minus = M7 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom8m1 ****
mom8p11 = M8 AND MOMDMY_MXP1 
mom8m1 = mom8p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- MD_OD_N ****
MD_OD_N3 = MD_OD_N2 NOT MD_OD_N_IO 
MD_OD_N = MD_OD_N3 NOT CPP85 

//***** Define connectivity/via layer -- mom0plus_b ****
mom0plus_b = M0_B AND MOMDMY_PLUS 
n_odtap_ext1 = SIZE n_odtap BY 0.013 
n_odtap_ext2 = n_odtap_ext1 AND MDx 
n_odtap_io_ext = n_odtap_ext2 AND OD12 
n_odtap_ext_all = n_odtap_ext2 NOT n_odtap_io_ext 

//* Define layer -- n_odtap_fb9_cpp57_ext_o
n_odtap_fb9_cpp57_ext_o_tmp01 = n_odtap_ext_all AND CPP57
n_odtap_fb9_cpp57_ext_o_tmp02 = n_odtap_fb9_cpp57_ext_o_tmp01 NOT CPP85
n_odtap_fb9_cpp57_ext_o_tmp03 = n_odtap_fb9_cpp57_ext_o_tmp02 AND FINFET_boundary9
n_odtap_fb9_cpp57_ext_o = n_odtap_fb9_cpp57_ext_o_tmp03 NOT FINFET_boundary10

n_odtap_cpp85_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9_cpp57_ext_o 

//* Define layer -- n_odtap_fb10_cpp57_ext_o
n_odtap_fb10_cpp57_ext_o_tmp01 = n_odtap_ext_all AND CPP57
n_odtap_fb10_cpp57_ext_o_tmp02 = n_odtap_fb10_cpp57_ext_o_tmp01 NOT CPP85
n_odtap_fb10_cpp57_ext_o_tmp03 = n_odtap_fb10_cpp57_ext_o_tmp02 NOT FINFET_boundary9
n_odtap_fb10_cpp57_ext_o = n_odtap_fb10_cpp57_ext_o_tmp03 AND FINFET_boundary10

n_odtap_cpp85_ext_2 = n_odtap_cpp85_ext_1 NOT INTERACT n_odtap_fb10_cpp57_ext_o 

//* Define layer -- n_odtap_cpp57_ext_o
n_odtap_cpp57_ext_o_tmp01 = n_odtap_ext_all AND CPP57
n_odtap_cpp57_ext_o = n_odtap_cpp57_ext_o_tmp01 NOT CPP85

n_odtap_cpp85_ext_3 = n_odtap_cpp85_ext_2 NOT INTERACT n_odtap_cpp57_ext_o 

//* Define layer -- n_odtap_cpp85_ext_o
n_odtap_cpp85_ext_o = n_odtap_ext_all AND CPP85

n_odtap_cpp85_ext = n_odtap_cpp85_ext_3 INTERACT n_odtap_cpp85_ext_o 

//***** Define connectivity/via layer -- mom5m1_b ****
mom5m11_b = M5_B AND MOMDMY_MXP1 
mom5m1_b = mom5m11_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom3p1_a ****
mom3p11_a = M3_A AND MOMDMY_MXP1 
mom3p1_a = mom3p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom0minus_a ****
mom0minus_a = M0_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- VTIN_11 ****
RH_TN_12a = RH_TN_all INTERACT RHDMY12i 
VTIN_11 = VIA11i AND RH_TN_12a 
MOM_field12 = metal12i AND MOMDMY12 

//***** Define connectivity/via layer -- VTIN_5 ****
RH_TN_6a = RH_TN_all INTERACT RHDMY6i 
VTIN_5 = VIA5i AND RH_TN_6a 

//***** Define connectivity/via layer -- mom9p2 ****
mom9p21 = M9 AND MOMDMY_MXP2 
mom9p2 = mom9p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom0p2_a ****
mom0p21_a = M0_A AND MOMDMY_MXP2 
mom0p2_a = mom0p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- RH_TN_4 ****

//* Define layer -- rhim_r4a
rhim_r4a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r4a = rhim_r4a_tmp01 AND RHDMY4i

rhim_r4_body_and_via_up = rhim_r4a AND VIA3i 
rhim_r4 = rhim_r4a NOT INTERACT rhim_r4_body_and_via_up 
RH_TN_4 = RH_TN_all NOT rhim_r4 

//***** Define connectivity/via layer -- p_gpoly_io ****
ppoly_ioa = poly_io NOT npoly_ioa  //  IO ppoly
ppoly_io = ppoly_ioa NOT PODE_3T 
p_fpoly_io = ppoly_io NOT OD 
p_gpoly_io_all = ppoly_io NOT p_fpoly_io 
p_gpoly_io1 = p_gpoly_io_all NOT all_mos_gates 
nocg_dmy_io = HIA_DUMMY OR DIODMY 
p_gpoly_nocg_io = p_gpoly_io1 AND nocg_dmy_io 
p_gpoly_io = p_gpoly_io1 NOT p_gpoly_nocg_io 

//***** Define connectivity/via layer -- mom0m2_a ****
mom0m21_a = M0_A AND MOMDMY_MXP2 
mom0m2_a = mom0m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA8 ****
RH_TN_9a = RH_TN_all INTERACT RHDMY9i 
VTIN_8 = VIA8i AND RH_TN_9a 
VIA8 = VIA8i NOT VTIN_8 

//***** Define connectivity/via layer -- mom5p2_b ****
mom5p21_b = M5_B AND MOMDMY_MXP2 
mom5p2_b = mom5p21_b INTERACT MOMDMY_MXP12 
unrecognized_bjt_1 = cemit_io_i1_mac OR cemit_io_i2_mac 
unrecognized_bjt_3 = COPY unrecognized_bjt_1 
unrecognized_bjt_4 = unrecognized_bjt_3 OR cemit_io_p1_mac 
unrecognized_bjt_5 = BJTDMY1 INTERACT unrecognized_bjt_4 
unrecognized_bjt = BJTDMY1 NOT unrecognized_bjt_5 

//***** Define connectivity/via layer -- VIA13 ****
RH_TN_14a = RH_TN_all INTERACT RHDMY14i 
VTIN_13 = VIA13i AND RH_TN_14a 
VIA13 = VIA13i NOT VTIN_13 

//***** Define connectivity/via layer -- p_fpoly_ulvt ****
ppoly_co_ul1 = VTULP NOT sram_np 
ppoly_co_ul2 = ppoly_co_ul1 NOT poly_od2 
ppoly_co_ula = poly_org AND ppoly_co_ul2  //  ULVT ppoly
ppoly_co_ul = ppoly_co_ula NOT PODE_3T 
p_fpoly_ulvt = ppoly_co_ul NOT OD 

//***** Define connectivity/via layer -- mom9p1 ****
mom9p11 = M9 AND MOMDMY_MXP1 
mom9p1 = mom9p11 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom7p1_a ****
mom7p11_a = M7_A AND MOMDMY_MXP1 
mom7p1_a = mom7p11_a INTERACT MOMDMY_MXP12 
DIONW1 = DIODMY OUTSIDE tpdiff_ori 
DIONW3 = DIONW1 INTERACT PO 
DIONW = DIONW3 INTERACT VTUL_Ni 

//***** Define connectivity/via layer -- mom5m1 ****
mom5p11 = M5 AND MOMDMY_MXP1 
mom5m1 = mom5p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom4plus ****
mom4plus = M4 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom4p1_a ****
mom4p11_a = M4_A AND MOMDMY_MXP1 
mom4p1_a = mom4p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom3plus_b ****
mom3plus_b = M3_B AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- n_odtap_bjt ****
n_odtap_bjt = n_odtap2 AND tndiff_bjt 

//***** Define connectivity/via layer -- mom5minus ****
mom5minus = M5 AND MOMDMY_MINUS 
rhim_all1 = RHDMY0i OR RHDMY1i 
rhim_all2 = rhim_all1 OR RHDMY2i 
rhim_all3 = rhim_all2 OR RHDMY3i 
rhim_all4 = rhim_all3 OR RHDMY4i 
rhim_all5 = rhim_all4 OR RHDMY5i 
rhim_all6 = rhim_all5 OR RHDMY6i 
rhim_all7 = rhim_all6 OR RHDMY7i 
rhim_all8 = rhim_all7 OR RHDMY8i 
rhim_all9 = rhim_all8 OR RHDMY9i 
rhim_all10 = rhim_all9 OR RHDMY10i 
rhim_all11 = rhim_all10 OR RHDMY11i 
rhim_all12 = rhim_all11 OR RHDMY12i 
rhim_all13 = rhim_all12 OR RHDMY13i 
rhim_all14 = rhim_all13 OR RHDMY14i 
rhim_all15 = rhim_all14 OR RHDMY15i 
rhim_all16 = rhim_all15 OR RHDMY16i 
rhim_all17 = rhim_all16 OR RHDMY17i 
rhim_all = COPY rhim_all17 

//***** Define connectivity/via layer -- mom7p1 ****
mom7p11 = M7 AND MOMDMY_MXP1 
mom7p1 = mom7p11 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_gpoly_lvtll ****
ppoly_co_lll1 = VTLPLL NOT sram_np 
ppoly_co_lll2 = ppoly_co_lll1 NOT poly_od2 
ppoly_co_llla = poly_org AND ppoly_co_lll2  //  LVT_LL ppoly
ppoly_co_lll = ppoly_co_llla NOT PODE_3T 
p_fpoly_lvtll = ppoly_co_lll NOT OD 
p_gpoly_lvtll_all = ppoly_co_lll NOT p_fpoly_lvtll 
p_gpoly_lvtll = p_gpoly_lvtll_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom6plus_b ****
mom6plus_b = M6_B AND MOMDMY_PLUS 

//* Define layer -- M0_A_SRM02_1
M0_A_SRM02_1 = SRM AND SRM2013


//* Define layer -- M0_A_SRM02_2
M0_A_SRM02_2 = SRM AND SRM2015

M0_A_SRM02_region1 = M0_A_SRM02_1 OR M0_A_SRM02_2 

//* Define layer -- M0_A_SRM02_3
M0_A_SRM02_3 = SRM AND SRM2018

M0_A_SRM02_region2 = M0_A_SRM02_region1 OR M0_A_SRM02_3 

//* Define layer -- M0_A_SRM02_4
M0_A_SRM02_4 = SRM AND SRM2020

M0_A_SRM02_region3 = M0_A_SRM02_region2 OR M0_A_SRM02_4 

//* Define layer -- M0_A_SRM02_5
M0_A_SRM02_5 = SRM AND SRM2026

M0_A_SRM02_region = M0_A_SRM02_region3 OR M0_A_SRM02_5 
M0_A_SRM02 = M0_A AND M0_A_SRM02_region 

//***** Define connectivity/via layer -- n_fpoly_ulvtll ****
npoly_co_ulll1 = VTULNLL NOT sram_np 
npoly_co_ulll2 = npoly_co_ulll1 NOT poly_od2 
npoly_co_ullla = poly_org AND npoly_co_ulll2  //  ULVT_LL npoly
n_fpoly_ulvtll = npoly_co_ullla NOT OD 

//* Define layer -- mkr_cfi_n_core_gpoly_fb1_cpp51_1
mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp02 = mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp03 = mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp02 NOT CPP57
mkr_cfi_n_core_gpoly_fb1_cpp51_1 = mkr_cfi_n_core_gpoly_fb1_cpp51_1_tmp03 NOT CPP85

mkr_cfi_n_core_gpoly_fb1_cpp51 = COPY mkr_cfi_n_core_gpoly_fb1_cpp51_1 

//***** Define connectivity/via layer -- mom7minus_a ****
mom7minus_a = M7_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom6m1 ****
mom6p11 = M6 AND MOMDMY_MXP1 
mom6m1 = mom6p11 NOT INTERACT MOMDMY_MXP12 
n_odtap_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9_cpp57_ext_o 
n_odtap_ext_2 = n_odtap_ext_1 NOT INTERACT n_odtap_fb10_cpp57_ext_o 
n_odtap_ext_3 = n_odtap_ext_2 NOT INTERACT n_odtap_cpp57_ext_o 
n_odtap_ext_4 = n_odtap_ext_3 NOT INTERACT n_odtap_cpp85_ext_o 

//* Define layer -- n_odtap_fb9_cpp51_ext_o
n_odtap_fb9_cpp51_ext_o_tmp01 = n_odtap_ext_all NOT CPP57
n_odtap_fb9_cpp51_ext_o_tmp02 = n_odtap_fb9_cpp51_ext_o_tmp01 NOT CPP85
n_odtap_fb9_cpp51_ext_o_tmp03 = n_odtap_fb9_cpp51_ext_o_tmp02 AND FINFET_boundary9
n_odtap_fb9_cpp51_ext_o = n_odtap_fb9_cpp51_ext_o_tmp03 NOT FINFET_boundary10

n_odtap_ext_5 = n_odtap_ext_4 NOT INTERACT n_odtap_fb9_cpp51_ext_o 
n_odtap_ext_o = COPY n_odtap_ext_all 
n_odtap_ext = n_odtap_ext_5 INTERACT n_odtap_ext_o 

//***** Define connectivity/via layer -- mom5plus_b ****
mom5plus_b = M5_B AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom5m1_a ****
mom5m11_a = M5_A AND MOMDMY_MXP1 
mom5m1_a = mom5m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom8minus ****
mom8minus = M8 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom2m1_b ****
mom2m11_b = M2_B AND MOMDMY_MXP1 
mom2m1_b = mom2m11_b NOT INTERACT MOMDMY_MXP12 
n_odtap_fb10_cpp57_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9_cpp57_ext_o 
n_odtap_fb10_cpp57_ext = n_odtap_fb10_cpp57_ext_1 INTERACT n_odtap_fb10_cpp57_ext_o 

//* Define layer -- M0_B_SRM01_1
M0_B_SRM01_1 = SRM AND SRM2014

M0_B_SRM01_region = COPY M0_B_SRM01_1 
M0_B_SRM01 = M0_B AND M0_B_SRM01_region 

//***** Define connectivity/via layer -- RH_TN_16 ****

//* Define layer -- rhim_r16a
rhim_r16a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r16a = rhim_r16a_tmp01 AND RHDMY16i

rhim_r16_body_and_via_up = rhim_r16a AND VIA15i 
rhim_r16 = rhim_r16a NOT INTERACT rhim_r16_body_and_via_up 
RH_TN_16 = RH_TN_all NOT rhim_r16 

//***** Define connectivity/via layer -- mom3p1_b ****
mom3p11_b = M3_B AND MOMDMY_MXP1 
mom3p1_b = mom3p11_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom8p1_b ****
mom8p11_b = M8_B AND MOMDMY_MXP1 
mom8p1_b = mom8p11_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom9m2_a ****
mom9m21_a = M9_A AND MOMDMY_MXP2 
mom9m2_a = mom9m21_a NOT INTERACT MOMDMY_MXP12 
MOM_field11 = metal11i AND MOMDMY11 

//***** Define connectivity/via layer -- p_pode_ulvtll ****
ppoly_co_ulll1 = VTULPLL NOT sram_np 
ppoly_co_ulll2 = ppoly_co_ulll1 NOT poly_od2 
ppoly_co_ullla = poly_org AND ppoly_co_ulll2  //  ULVT_LL ppoly
ppode_co_ulll = ppoly_co_ullla AND PODE_3T 
p_pode_ulvtll = ppode_co_ulll NOT all_mos_gates 

//***** Define connectivity/via layer -- VTIN_6 ****
RH_TN_7a = RH_TN_all INTERACT RHDMY7i 
VTIN_6 = VIA6i AND RH_TN_7a 

//***** Define connectivity/via layer -- RH_TN_5 ****

//* Define layer -- rhim_r5a
rhim_r5a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r5a = rhim_r5a_tmp01 AND RHDMY5i

rhim_r5_body_and_via_up = rhim_r5a AND VIA4i 
rhim_r5 = rhim_r5a NOT INTERACT rhim_r5_body_and_via_up 
RH_TN_5 = RH_TN_all NOT rhim_r5 

//***** Define connectivity/via layer -- mom9plus ****
mom9plus = M9 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom4m1_a ****
mom4m11_a = M4_A AND MOMDMY_MXP1 
mom4m1_a = mom4m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom8m2 ****
mom8m2 = mom8p21 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA16 ****
RH_TN_17a = RH_TN_all INTERACT RHDMY17i 
VTIN_16 = VIA16i AND RH_TN_17a 
VIA16 = VIA16i NOT VTIN_16 

//***** Define connectivity/via layer -- mom4p2_b ****
mom4p21_b = M4_B AND MOMDMY_MXP2 
mom4p2_b = mom4p21_b INTERACT MOMDMY_MXP12 
M1_B_SRM03 = M1_B AND M1_B_SRM03_region 

//***** Define connectivity/via layer -- MD_OD_N_SRM ****
MD_OD_N_SRM = MD_OD_N1 AND SRM_all 

//***** Define connectivity/via layer -- RV_BPC_TPC ****
RV_BPC_TPC1 = RVi AND TPC_FINAL 
BPC_FINAL = BPCi NOT BPC_O 
RV_BPC_TPC = RV_BPC_TPC1 AND BPC_FINAL 

//***** Define connectivity/via layer -- mom2p1_a ****
mom2p11_a = M2_A AND MOMDMY_MXP1 
mom2p1_a = mom2p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- RV_MPC_RDL ****
RV_MPC_RDL1 = RVi AND AP 
MPC_FINAL = MPCi NOT MPC_O 
RV_MPC_RDL = RV_MPC_RDL1 AND MPC_FINAL 

//***** Define connectivity/via layer -- RV_MTOP_MPC ****
RV_MTOP_MPC1 = RVi AND MPC_FINAL 
RV_MTOP_MPC = RV_MTOP_MPC1 AND M17 

//***** Define connectivity/via layer -- mom7m2 ****
mom7p21 = M7 AND MOMDMY_MXP2 
mom7m2 = mom7p21 NOT INTERACT MOMDMY_MXP12 
realpo_s = realpo AND SRM_all 
ponw_s = realpo_s AND nxwell 
pponw_s = ponw_s AND PP  //  SRAM PMOS
pgate_s_normal1 = pponw_s AND SRMDEV 
pgate_s_normal3 = pgate_s_normal1 INTERACT gate1 
pgate_s_normal = pgate_s_normal3 NOT RODMY_srm 

//***** Define connectivity/via layer -- psub_term_plug ****
psub_term_plug1 = psub_term NOT psub_term_b 
psub_term_plug = psub_term_plug1 AND psub  //  Ring plug for psub_term

//***** Define connectivity/via layer -- RH_TN_13 ****

//* Define layer -- rhim_r13a
rhim_r13a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r13a = rhim_r13a_tmp01 AND RHDMY13i

rhim_r13_body_and_via_up = rhim_r13a AND VIA12i 
rhim_r13 = rhim_r13a NOT INTERACT rhim_r13_body_and_via_up 
RH_TN_13 = RH_TN_all NOT rhim_r13 

//***** Define connectivity/via layer -- mom7m1 ****
mom7m1 = mom7p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom9m1_a ****
mom9m11_a = M9_A AND MOMDMY_MXP1 
mom9m1_a = mom9m11_a NOT INTERACT MOMDMY_MXP12 

//* Define layer -- p_odtap_fb9_cpp57_ext_o
p_odtap_fb9_cpp57_ext_o_tmp01 = p_odtap_ext_all AND CPP57
p_odtap_fb9_cpp57_ext_o_tmp02 = p_odtap_fb9_cpp57_ext_o_tmp01 NOT CPP85
p_odtap_fb9_cpp57_ext_o_tmp03 = p_odtap_fb9_cpp57_ext_o_tmp02 AND FINFET_boundary9
p_odtap_fb9_cpp57_ext_o = p_odtap_fb9_cpp57_ext_o_tmp03 NOT FINFET_boundary10

p_odtap_fb9_cpp51_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9_cpp57_ext_o 

//* Define layer -- p_odtap_fb10_cpp57_ext_o
p_odtap_fb10_cpp57_ext_o_tmp01 = p_odtap_ext_all AND CPP57
p_odtap_fb10_cpp57_ext_o_tmp02 = p_odtap_fb10_cpp57_ext_o_tmp01 NOT CPP85
p_odtap_fb10_cpp57_ext_o_tmp03 = p_odtap_fb10_cpp57_ext_o_tmp02 NOT FINFET_boundary9
p_odtap_fb10_cpp57_ext_o = p_odtap_fb10_cpp57_ext_o_tmp03 AND FINFET_boundary10

p_odtap_fb9_cpp51_ext_2 = p_odtap_fb9_cpp51_ext_1 NOT INTERACT p_odtap_fb10_cpp57_ext_o 

//* Define layer -- p_odtap_cpp57_ext_o
p_odtap_cpp57_ext_o_tmp01 = p_odtap_ext_all AND CPP57
p_odtap_cpp57_ext_o = p_odtap_cpp57_ext_o_tmp01 NOT CPP85

p_odtap_fb9_cpp51_ext_3 = p_odtap_fb9_cpp51_ext_2 NOT INTERACT p_odtap_cpp57_ext_o 

//* Define layer -- p_odtap_cpp85_ext_o
p_odtap_cpp85_ext_o = p_odtap_ext_all AND CPP85

p_odtap_fb9_cpp51_ext_4 = p_odtap_fb9_cpp51_ext_3 NOT INTERACT p_odtap_cpp85_ext_o 

//* Define layer -- p_odtap_fb9_cpp51_ext_o
p_odtap_fb9_cpp51_ext_o_tmp01 = p_odtap_ext_all NOT CPP57
p_odtap_fb9_cpp51_ext_o_tmp02 = p_odtap_fb9_cpp51_ext_o_tmp01 NOT CPP85
p_odtap_fb9_cpp51_ext_o_tmp03 = p_odtap_fb9_cpp51_ext_o_tmp02 AND FINFET_boundary9
p_odtap_fb9_cpp51_ext_o = p_odtap_fb9_cpp51_ext_o_tmp03 NOT FINFET_boundary10

p_odtap_fb9_cpp51_ext = p_odtap_fb9_cpp51_ext_4 INTERACT p_odtap_fb9_cpp51_ext_o 

//***** Define connectivity/via layer -- mom2m1 ****
mom2p11 = M2 AND MOMDMY_MXP1 
mom2m1 = mom2p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom1m2_a ****
mom1m21_a = M1_A AND MOMDMY_MXP2 
mom1m2_a = mom1m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VTIN_12 ****
RH_TN_13a = RH_TN_all INTERACT RHDMY13i 
VTIN_12 = VIA12i AND RH_TN_13a 

//***** Define connectivity/via layer -- mom6m1_b ****
mom6m11_b = M6_B AND MOMDMY_MXP1 
mom6m1_b = mom6m11_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- RH_TN_6 ****

//* Define layer -- rhim_r6a
rhim_r6a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r6a = rhim_r6a_tmp01 AND RHDMY6i

rhim_r6_body_and_via_up = rhim_r6a AND VIA5i 
rhim_r6 = rhim_r6a NOT INTERACT rhim_r6_body_and_via_up 
RH_TN_6 = RH_TN_all NOT rhim_r6 

//***** Define connectivity/via layer -- VTIN_3 ****
RH_TN_4a = RH_TN_all INTERACT RHDMY4i 
VTIN_3 = VIA3i AND RH_TN_4a 

//***** Define connectivity/via layer -- mom9m2_b ****
mom9m21_b = M9_B AND MOMDMY_MXP2 
mom9m2_b = mom9m21_b NOT INTERACT MOMDMY_MXP12 

//* Define layer -- mkr_cfi_p_core_gpoly_fb1_cpp51_1
mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp02 = mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp03 = mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp02 NOT CPP57
mkr_cfi_p_core_gpoly_fb1_cpp51_1 = mkr_cfi_p_core_gpoly_fb1_cpp51_1_tmp03 NOT CPP85

mkr_cfi_p_core_gpoly_fb1_cpp51 = COPY mkr_cfi_p_core_gpoly_fb1_cpp51_1 
core_nmos_gates = tngate1 NOT OD2 

//***** Define connectivity/via layer -- mom4m2_b ****
mom4m21_b = M4_B AND MOMDMY_MXP2 
mom4m2_b = mom4m21_b NOT INTERACT MOMDMY_MXP12 

//* Define layer -- M0_B_SRM02_1
M0_B_SRM02_1 = SRM AND SRM2013


//* Define layer -- M0_B_SRM02_2
M0_B_SRM02_2 = SRM AND SRM2015

M0_B_SRM02_region1 = M0_B_SRM02_1 OR M0_B_SRM02_2 

//* Define layer -- M0_B_SRM02_3
M0_B_SRM02_3 = SRM AND SRM2018

M0_B_SRM02_region2 = M0_B_SRM02_region1 OR M0_B_SRM02_3 

//* Define layer -- M0_B_SRM02_4
M0_B_SRM02_4 = SRM AND SRM2020

M0_B_SRM02_region3 = M0_B_SRM02_region2 OR M0_B_SRM02_4 

//* Define layer -- M0_B_SRM02_5
M0_B_SRM02_5 = SRM AND SRM2026

M0_B_SRM02_region = M0_B_SRM02_region3 OR M0_B_SRM02_5 
M0_B_SRM02 = M0_B AND M0_B_SRM02_region 
ICOVL_SINGLE = COPY ICOVL 

//***** Define connectivity/via layer -- mom9p1_b ****
mom9p11_b = M9_B AND MOMDMY_MXP1 
mom9p1_b = mom9p11_b INTERACT MOMDMY_MXP12 
MOM_field10 = metal10i AND MOMDMY10 

//***** Define connectivity/via layer -- mom8m2_a ****
mom8m21_a = M8_A AND MOMDMY_MXP2 
mom8m2_a = mom8m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- n_psub ****
n_psub = BULK NOT psubband 

//***** Define connectivity/via layer -- p_odtap_srm ****
p_odtap_srm = p_odtap1 AND SRM_all 
gate_4t = gate NOT PODE_3T  //  Only support Core and IO 1.2v 
gate_core_4t = gate_4t NOT OD2 
pode_tg_4t1 = PODE_TrGATE OR PODE_4T 
pode_tg_4t = pode_tg_4t1 INTERACT PODE_3T 
gate_and_pode_tg_4t = gate_core_4t AND pode_tg_4t 
podg_aux = DFM PROPERTY gate_core_4t gate_and_pode_tg_4t OVERLAP ABUT ALSO MULTI
[podg = 1*count(gate_and_pode_tg_4t)]

//***** Define connectivity/via layer -- p_gpoly_ulvtll ****
ppoly_co_ulll = ppoly_co_ullla NOT PODE_3T 
p_fpoly_ulvtll = ppoly_co_ulll NOT OD 
p_gpoly_ulvtll_all = ppoly_co_ulll NOT p_fpoly_ulvtll 
p_gpoly_ulvtll = p_gpoly_ulvtll_all NOT all_mos_gates 

//***** Define connectivity/via layer -- p_fpoly_lvt ****
ppoly_co_l1 = VTLP NOT sram_np 
ppoly_co_l2 = ppoly_co_l1 NOT poly_od2 
ppoly_co_la = poly_org AND ppoly_co_l2  //  LVT ppoly
ppoly_co_l = ppoly_co_la NOT PODE_3T 
p_fpoly_lvt = ppoly_co_l NOT OD 
npoly_co_ulll = npoly_co_ullla NOT PODE_3T 
n_gpoly_ulvtll_all = npoly_co_ulll NOT n_fpoly_ulvtll 
n_gpoly_ulvtll = n_gpoly_ulvtll_all NOT all_mos_gates 
npoly_co_lll1 = VTLNLL NOT sram_np 
npoly_co_lll2 = npoly_co_lll1 NOT poly_od2 
npoly_co_llla = poly_org AND npoly_co_lll2  //  LVT_LL npoly
npoly_co_lll = npoly_co_llla NOT PODE_3T 
n_fpoly_lvtll = npoly_co_llla NOT OD 
n_gpoly_lvtll_all = npoly_co_lll NOT n_fpoly_lvtll 
n_gpoly_lvtll = n_gpoly_lvtll_all NOT all_mos_gates 
npoly_co_el1 = VTELN NOT sram_np 
npoly_co_el2 = npoly_co_el1 NOT poly_od2 
npoly_co_ela = poly_org AND npoly_co_el2  //  ELVT npoly
npoly_co_el = npoly_co_ela NOT PODE_3T 
n_fpoly_elvt = npoly_co_ela NOT OD 
n_gpoly_elvt_all = npoly_co_el NOT n_fpoly_elvt 
n_gpoly_elvt = n_gpoly_elvt_all NOT all_mos_gates 
npoly_co_l1 = VTLN NOT sram_np 
npoly_co_l2 = npoly_co_l1 NOT poly_od2 
npoly_co_la = poly_org AND npoly_co_l2  //  LVT npoly
npoly_co_l = npoly_co_la NOT PODE_3T 
n_fpoly_lvt = npoly_co_la NOT OD 
n_gpoly_lvt_all = npoly_co_l NOT n_fpoly_lvt 
n_gpoly_lvt = n_gpoly_lvt_all NOT all_mos_gates 
poly_set2 = npoly_co_llla OR npoly_co_la 
poly_set3 = poly_set2 OR npoly_co_ullla 
poly_set4 = poly_set3 OR npoly_co_ula 
poly_set5 = poly_set4 OR npoly_co_ela 
poly_set6 = COPY poly_set5 
poly_set8 = poly_set6 OR ppoly_co_sa 
poly_set9 = poly_set8 OR ppoly_co_llla 
poly_set10 = poly_set9 OR ppoly_co_la 
poly_set11 = poly_set10 OR ppoly_co_ula 
poly_set12 = poly_set11 OR ppoly_co_ullla 
poly_set13 = poly_set12 OR ppoly_co_ela 
poly_set14 = COPY poly_set13 
poly_set15 = poly_set14 OR npoly_ioa 
poly_set16 = poly_set15 OR ppoly_ioa 
poly_set17 = poly_set16 OR npoly_co_srm 
poly_set = poly_set17 OR ppoly_co_srm 
npoly_co_sa = poly_org NOT poly_set  //  SVT npoly
npoly_co_s = npoly_co_sa NOT PODE_3T 
n_fpoly_svt = npoly_co_sa NOT OD 
n_gpoly_svt_all = npoly_co_s NOT n_fpoly_svt 
n_gpoly_svt = n_gpoly_svt_all NOT all_mos_gates 
core_n_gpoly1 = COPY n_gpoly_svt 
core_n_gpoly2 = n_gpoly_lvt OR core_n_gpoly1 
core_n_gpoly3 = n_gpoly_ulvt OR core_n_gpoly2 
core_n_gpoly4 = n_gpoly_elvt OR core_n_gpoly3 
core_n_gpoly5 = n_gpoly_lvtll OR core_n_gpoly4 
core_n_gpoly6 = n_gpoly_ulvtll OR core_n_gpoly5 
core_nmos_gate1 = COPY nch_svt_mac_gate 
core_nmos_gate2 = nch_lvt_mac_gate OR core_nmos_gate1 
core_nmos_gate3 = nch_ulvt_mac_gate OR core_nmos_gate2 
core_nmos_gate4 = nch_elvt_mac_gate OR core_nmos_gate3 
core_nmos_gate5 = nch_lvtll_mac_gate OR core_nmos_gate4 
core_nmos_gate6 = nch_ulvtll_mac_gate OR core_nmos_gate5 
core_ngpoly_region1 = core_n_gpoly6 OR core_nmos_gate6 
core_nmos_dnw_gate1 = COPY nch_svt_mac_gate_dnw 
core_nmos_dnw_gate2 = nch_lvt_mac_gate_dnw OR core_nmos_dnw_gate1 
core_nmos_dnw_gate3 = nch_ulvt_mac_gate_dnw OR core_nmos_dnw_gate2 
core_nmos_dnw_gate4 = nch_elvt_mac_gate_dnw OR core_nmos_dnw_gate3 
core_nmos_dnw_gate5 = nch_lvtll_mac_gate_dnw OR core_nmos_dnw_gate4 
core_nmos_dnw_gate6 = nch_ulvtll_mac_gate_dnw OR core_nmos_dnw_gate5 
core_ngpoly_region2 = core_ngpoly_region1 OR core_nmos_dnw_gate6 
core_nmpode_gate1 = COPY nch_mpodesvt_mac_gate 
core_nmpode_gate2 = nch_mpodelvt_mac_gate OR core_nmpode_gate1 
core_nmpode_gate3 = nch_mpodeulvt_mac_gate OR core_nmpode_gate2 
core_nmpode_gate4 = nch_mpodeelvt_mac_gate OR core_nmpode_gate3 
core_nmpode_gate5 = nch_mpodelvtll_mac_gate OR core_nmpode_gate4 
core_nmpode_gate6 = nch_mpodeulvtll_mac_gate OR core_nmpode_gate5 
core_ngpoly_region3 = core_ngpoly_region2 OR core_nmpode_gate6 
core_nflr_gate1 = COPY nch_flrsvt_mac_gate 
core_nflr_gate2 = nch_flrlvt_mac_gate OR core_nflr_gate1 
core_nflr_gate3 = nch_flrulvt_mac_gate OR core_nflr_gate2 
core_nflr_gate4 = nch_flrelvt_mac_gate OR core_nflr_gate3 
core_nflr_gate5 = nch_flrlvtll_mac_gate OR core_nflr_gate4 
core_nflr_gate6 = nch_flrulvtll_mac_gate OR core_nflr_gate5 
core_ngpoly_region4 = core_ngpoly_region3 OR core_nflr_gate6 
core_n_pode_gate1 = COPY npode_svt_mac_gate 
core_n_pode_gate2 = npode_lvt_mac_gate OR core_n_pode_gate1 
core_n_pode_gate3 = npode_ulvt_mac_gate OR core_n_pode_gate2 
core_n_pode_gate4 = npode_elvt_mac_gate OR core_n_pode_gate3 
core_n_pode_gate5 = npode_lvtll_mac_gate OR core_n_pode_gate4 
core_n_pode_gate6 = npode_ulvtll_mac_gate OR core_n_pode_gate5 
core_ngpoly_region5 = core_ngpoly_region4 OR core_n_pode_gate6 
npode_co_ulll = npoly_co_ullla AND PODE_3T 
n_pode_ulvtll = npode_co_ulll NOT all_mos_gates 
npode_co_lll = npoly_co_llla AND PODE_3T 
n_pode_lvtll = npode_co_lll NOT all_mos_gates 
npode_co_el = npoly_co_ela AND PODE_3T 
n_pode_elvt = npode_co_el NOT all_mos_gates 
npode_co_ul = npoly_co_ula AND PODE_3T 
n_pode_ulvt = npode_co_ul NOT all_mos_gates 
npode_co_l = npoly_co_la AND PODE_3T 
n_pode_lvt = npode_co_l NOT all_mos_gates 
npode_co_s = npoly_co_sa AND PODE_3T 
n_pode_svt = npode_co_s NOT all_mos_gates 
core_n_pode1 = COPY n_pode_svt 
core_n_pode2 = n_pode_lvt OR core_n_pode1 
core_n_pode3 = n_pode_ulvt OR core_n_pode2 
core_n_pode4 = n_pode_elvt OR core_n_pode3 
core_n_pode5 = n_pode_lvtll OR core_n_pode4 
core_n_pode6 = n_pode_ulvtll OR core_n_pode5 
core_ngpoly_region6 = core_ngpoly_region5 OR core_n_pode6 
core_ngpoly_region7 = core_ngpoly_region6 OR n_gpoly_nocg_ulvt 
core_ngpoly_region = core_ngpoly_region7 OR vargt 

//***** Define connectivity/via layer -- mom1minus_a ****
mom1minus_a = M1_A AND MOMDMY_MINUS 
rhim_body1 = RH_TNi AND RHDMY_ALL 
rhim_body = rhim_body1 AND rhim_all 
rhim_and_hi_em = rhim_body AND RH_TNE 
rhim_aux = DFM PROPERTY rhim_body rhim_and_hi_em OVERLAP ABUT ALSO MULTI
[hi_em = 1*count(rhim_and_hi_em)]

//* Define layer -- mkr_cfi_p_core_gpoly_fb1_1
mkr_cfi_p_core_gpoly_fb1_1_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb1_1_tmp02 = mkr_cfi_p_core_gpoly_fb1_1_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb1_1_tmp03 = mkr_cfi_p_core_gpoly_fb1_1_tmp02 AND CPP57
mkr_cfi_p_core_gpoly_fb1_1 = mkr_cfi_p_core_gpoly_fb1_1_tmp03 AND CPP85


//* Define layer -- mkr_cfi_p_core_gpoly_fb1_2
mkr_cfi_p_core_gpoly_fb1_2_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb1_2_tmp02 = mkr_cfi_p_core_gpoly_fb1_2_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb1_2_tmp03 = mkr_cfi_p_core_gpoly_fb1_2_tmp02 AND CPP57
mkr_cfi_p_core_gpoly_fb1_2 = mkr_cfi_p_core_gpoly_fb1_2_tmp03 NOT CPP85

mkr_cfi_p_core_gpoly_fb1_region1 = mkr_cfi_p_core_gpoly_fb1_1 OR mkr_cfi_p_core_gpoly_fb1_2 

//* Define layer -- mkr_cfi_p_core_gpoly_fb1_3
mkr_cfi_p_core_gpoly_fb1_3_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb1_3_tmp02 = mkr_cfi_p_core_gpoly_fb1_3_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb1_3_tmp03 = mkr_cfi_p_core_gpoly_fb1_3_tmp02 NOT CPP57
mkr_cfi_p_core_gpoly_fb1_3 = mkr_cfi_p_core_gpoly_fb1_3_tmp03 AND CPP85

mkr_cfi_p_core_gpoly_fb1 = mkr_cfi_p_core_gpoly_fb1_region1 OR mkr_cfi_p_core_gpoly_fb1_3 
diff_to_fin1 = diffa2 NOT SRM_all 
diff_to_fin2 = SR_DOD AND SRM_all 
diff_to_fin3 = diff_to_fin2 NOT RODMY_srm 
diff_to_fin = diff_to_fin1 OR diff_to_fin3 
findiff = diff_to_fin INTERACT POx 
fingate_l = diff_to_fin INSIDE EDGE POx 
fin_E0a1 = fingate_l TOUCH EDGE EXT_OD_CORN
fin_E0a2 = fin_E0a1 TOUCH EDGE INT_OD_CORN
fin_E0a3 = fingate_l NOT TOUCH EDGE fin_E0a2
fin_E0a = findiff TOUCH EDGE fin_E0a3
fin_A0 = EXPAND EDGE fin_E0a INSIDE BY FIN_WIDTH
fin_E0_ori = fin_A0 INSIDE EDGE findiff 
fin_B1_ori = EXPAND EDGE fin_E0_ori OUTSIDE BY FIN_SPACE
fin_E0_ex1 = LENGTH fin_E0_ori == FIN_WIDTH
fin_B1_ex1 = EXPAND EDGE fin_E0_ex1 OUTSIDE BY FIN_SPACE
fin_B1a = fin_B1_ori NOT fin_B1_ex1 
fin_E0_ex2 = LENGTH fin_E0_ori == FIN_SPACE
fin_B1_ex2 = EXPAND EDGE fin_E0_ex2 OUTSIDE BY FIN_SPACE
fin_B1 = fin_B1a NOT fin_B1_ex2 
fin_lay1o = findiff NOT fin_B1 
fin_E0 = fin_B1 INSIDE EDGE findiff 
fin_A1 = EXPAND EDGE fin_E0 INSIDE BY FIN_PITCH
diffin0 = diff_to_fin NOT fin_A0 
fin_E1_ori = fin_A1 INSIDE EDGE diffin0 
fin_B2_ori = EXPAND EDGE fin_E1_ori OUTSIDE BY FIN_SPACE
fin_E1_ex1 = LENGTH fin_E1_ori == FIN_WIDTH
fin_B2_ex1 = EXPAND EDGE fin_E1_ex1 OUTSIDE BY FIN_SPACE
fin_B2a = fin_B2_ori NOT fin_B2_ex1 
fin_E1_ex2 = LENGTH fin_E1_ori == FIN_PITCH
fin_B2_ex2 = EXPAND EDGE fin_E1_ex2 OUTSIDE BY FIN_SPACE
fin_B2 = fin_B2a NOT fin_B2_ex2 
fin_lay2o = fin_lay1o NOT fin_B2 
fin_E1 = fin_B2 INSIDE EDGE diffin0 
fin_A2 = EXPAND EDGE fin_E1 INSIDE BY FIN_PITCH
diffin1 = diffin0 NOT fin_A1 
fin_E2_ori = fin_A2 INSIDE EDGE diffin1 
fin_B3_ori = EXPAND EDGE fin_E2_ori OUTSIDE BY FIN_SPACE
fin_E2_ex1 = LENGTH fin_E2_ori == FIN_WIDTH
fin_B3_ex1 = EXPAND EDGE fin_E2_ex1 OUTSIDE BY FIN_SPACE
fin_B3a = fin_B3_ori NOT fin_B3_ex1 
fin_E2_ex2 = LENGTH fin_E2_ori == FIN_PITCH
fin_B3_ex2 = EXPAND EDGE fin_E2_ex2 OUTSIDE BY FIN_SPACE
fin_B3 = fin_B3a NOT fin_B3_ex2 
fin_lay3o = fin_lay2o NOT fin_B3 
fin_E2 = fin_B3 INSIDE EDGE diffin1 
fin_A3 = EXPAND EDGE fin_E2 INSIDE BY FIN_PITCH
diffin2 = diffin1 NOT fin_A2 
fin_E3_ori = fin_A3 INSIDE EDGE diffin2 
fin_B4_ori = EXPAND EDGE fin_E3_ori OUTSIDE BY FIN_SPACE
fin_E3_ex1 = LENGTH fin_E3_ori == FIN_WIDTH
fin_B4_ex1 = EXPAND EDGE fin_E3_ex1 OUTSIDE BY FIN_SPACE
fin_B4a = fin_B4_ori NOT fin_B4_ex1 
fin_E3_ex2 = LENGTH fin_E3_ori == FIN_PITCH
fin_B4_ex2 = EXPAND EDGE fin_E3_ex2 OUTSIDE BY FIN_SPACE
fin_B4 = fin_B4a NOT fin_B4_ex2 
fin_lay4o = fin_lay3o NOT fin_B4 
fin_E3 = fin_B4 INSIDE EDGE diffin2 
fin_A4 = EXPAND EDGE fin_E3 INSIDE BY FIN_PITCH
diffin3 = diffin2 NOT fin_A3 
fin_E4_ori = fin_A4 INSIDE EDGE diffin3 
fin_B5_ori = EXPAND EDGE fin_E4_ori OUTSIDE BY FIN_SPACE
fin_E4_ex1 = LENGTH fin_E4_ori == FIN_WIDTH
fin_B5_ex1 = EXPAND EDGE fin_E4_ex1 OUTSIDE BY FIN_SPACE
fin_B5a = fin_B5_ori NOT fin_B5_ex1 
fin_E4_ex2 = LENGTH fin_E4_ori == FIN_PITCH
fin_B5_ex2 = EXPAND EDGE fin_E4_ex2 OUTSIDE BY FIN_SPACE
fin_B5 = fin_B5a NOT fin_B5_ex2 
fin_lay5o = fin_lay4o NOT fin_B5 
fin_E4 = fin_B5 INSIDE EDGE diffin3 
fin_A5 = EXPAND EDGE fin_E4 INSIDE BY FIN_PITCH
diffin4 = diffin3 NOT fin_A4 
fin_E5_ori = fin_A5 INSIDE EDGE diffin4 
fin_B6_ori = EXPAND EDGE fin_E5_ori OUTSIDE BY FIN_SPACE
fin_E5_ex1 = LENGTH fin_E5_ori == FIN_WIDTH
fin_B6_ex1 = EXPAND EDGE fin_E5_ex1 OUTSIDE BY FIN_SPACE
fin_B6a = fin_B6_ori NOT fin_B6_ex1 
fin_E5_ex2 = LENGTH fin_E5_ori == FIN_PITCH
fin_B6_ex2 = EXPAND EDGE fin_E5_ex2 OUTSIDE BY FIN_SPACE
fin_B6 = fin_B6a NOT fin_B6_ex2 
fin_lay6o = fin_lay5o NOT fin_B6 
fin_E5 = fin_B6 INSIDE EDGE diffin4 
fin_A6 = EXPAND EDGE fin_E5 INSIDE BY FIN_PITCH
diffin5 = diffin4 NOT fin_A5 
fin_E6_ori = fin_A6 INSIDE EDGE diffin5 
fin_B7_ori = EXPAND EDGE fin_E6_ori OUTSIDE BY FIN_SPACE
fin_E6_ex1 = LENGTH fin_E6_ori == FIN_WIDTH
fin_B7_ex1 = EXPAND EDGE fin_E6_ex1 OUTSIDE BY FIN_SPACE
fin_B7a = fin_B7_ori NOT fin_B7_ex1 
fin_E6_ex2 = LENGTH fin_E6_ori == FIN_PITCH
fin_B7_ex2 = EXPAND EDGE fin_E6_ex2 OUTSIDE BY FIN_SPACE
fin_B7 = fin_B7a NOT fin_B7_ex2 
fin_lay7o = fin_lay6o NOT fin_B7 
fin_E6 = fin_B7 INSIDE EDGE diffin5 
fin_A7 = EXPAND EDGE fin_E6 INSIDE BY FIN_PITCH
diffin6 = diffin5 NOT fin_A6 
fin_E7_ori = fin_A7 INSIDE EDGE diffin6 
fin_B8_ori = EXPAND EDGE fin_E7_ori OUTSIDE BY FIN_SPACE
fin_E7_ex1 = LENGTH fin_E7_ori == FIN_WIDTH
fin_B8_ex1 = EXPAND EDGE fin_E7_ex1 OUTSIDE BY FIN_SPACE
fin_B8a = fin_B8_ori NOT fin_B8_ex1 
fin_E7_ex2 = LENGTH fin_E7_ori == FIN_PITCH
fin_B8_ex2 = EXPAND EDGE fin_E7_ex2 OUTSIDE BY FIN_SPACE
fin_B8 = fin_B8a NOT fin_B8_ex2 
fin_lay8o = fin_lay7o NOT fin_B8 
fin_E7 = fin_B8 INSIDE EDGE diffin6 
fin_A8 = EXPAND EDGE fin_E7 INSIDE BY FIN_PITCH
diffin7 = diffin6 NOT fin_A7 
fin_E8_ori = fin_A8 INSIDE EDGE diffin7 
fin_B9_ori = EXPAND EDGE fin_E8_ori OUTSIDE BY FIN_SPACE
fin_E8_ex1 = LENGTH fin_E8_ori == FIN_WIDTH
fin_B9_ex1 = EXPAND EDGE fin_E8_ex1 OUTSIDE BY FIN_SPACE
fin_B9a = fin_B9_ori NOT fin_B9_ex1 
fin_E8_ex2 = LENGTH fin_E8_ori == FIN_PITCH
fin_B9_ex2 = EXPAND EDGE fin_E8_ex2 OUTSIDE BY FIN_SPACE
fin_B9 = fin_B9a NOT fin_B9_ex2 
fin_lay9o = fin_lay8o NOT fin_B9 
fin_E8 = fin_B9 INSIDE EDGE diffin7 
fin_A9 = EXPAND EDGE fin_E8 INSIDE BY FIN_PITCH
diffin8 = diffin7 NOT fin_A8 
fin_E9_ori = fin_A9 INSIDE EDGE diffin8 
fin_B10_ori = EXPAND EDGE fin_E9_ori OUTSIDE BY FIN_SPACE
fin_E9_ex1 = LENGTH fin_E9_ori == FIN_WIDTH
fin_B10_ex1 = EXPAND EDGE fin_E9_ex1 OUTSIDE BY FIN_SPACE
fin_B10a = fin_B10_ori NOT fin_B10_ex1 
fin_E9_ex2 = LENGTH fin_E9_ori == FIN_PITCH
fin_B10_ex2 = EXPAND EDGE fin_E9_ex2 OUTSIDE BY FIN_SPACE
fin_B10 = fin_B10a NOT fin_B10_ex2 
fin_lay10o = fin_lay9o NOT fin_B10 
fin_E9 = fin_B10 INSIDE EDGE diffin8 
fin_A10 = EXPAND EDGE fin_E9 INSIDE BY FIN_PITCH
diffin9 = diffin8 NOT fin_A9 
fin_E10_ori = fin_A10 INSIDE EDGE diffin9 
fin_B11_ori = EXPAND EDGE fin_E10_ori OUTSIDE BY FIN_SPACE
fin_E10_ex1 = LENGTH fin_E10_ori == FIN_WIDTH
fin_B11_ex1 = EXPAND EDGE fin_E10_ex1 OUTSIDE BY FIN_SPACE
fin_B11a = fin_B11_ori NOT fin_B11_ex1 
fin_E10_ex2 = LENGTH fin_E10_ori == FIN_PITCH
fin_B11_ex2 = EXPAND EDGE fin_E10_ex2 OUTSIDE BY FIN_SPACE
fin_B11 = fin_B11a NOT fin_B11_ex2 
fin_lay11o = fin_lay10o NOT fin_B11 
fin_E10 = fin_B11 INSIDE EDGE diffin9 
fin_A11 = EXPAND EDGE fin_E10 INSIDE BY FIN_PITCH
diffin10 = diffin9 NOT fin_A10 
fin_E11_ori = fin_A11 INSIDE EDGE diffin10 
fin_B12_ori = EXPAND EDGE fin_E11_ori OUTSIDE BY FIN_SPACE
fin_E11_ex1 = LENGTH fin_E11_ori == FIN_WIDTH
fin_B12_ex1 = EXPAND EDGE fin_E11_ex1 OUTSIDE BY FIN_SPACE
fin_B12a = fin_B12_ori NOT fin_B12_ex1 
fin_E11_ex2 = LENGTH fin_E11_ori == FIN_PITCH
fin_B12_ex2 = EXPAND EDGE fin_E11_ex2 OUTSIDE BY FIN_SPACE
fin_B12 = fin_B12a NOT fin_B12_ex2 
fin_lay12o = fin_lay11o NOT fin_B12 
fin_E11 = fin_B12 INSIDE EDGE diffin10 
fin_A12 = EXPAND EDGE fin_E11 INSIDE BY FIN_PITCH
diffin11 = diffin10 NOT fin_A11 
fin_E12_ori = fin_A12 INSIDE EDGE diffin11 
fin_B13_ori = EXPAND EDGE fin_E12_ori OUTSIDE BY FIN_SPACE
fin_E12_ex1 = LENGTH fin_E12_ori == FIN_WIDTH
fin_B13_ex1 = EXPAND EDGE fin_E12_ex1 OUTSIDE BY FIN_SPACE
fin_B13a = fin_B13_ori NOT fin_B13_ex1 
fin_E12_ex2 = LENGTH fin_E12_ori == FIN_PITCH
fin_B13_ex2 = EXPAND EDGE fin_E12_ex2 OUTSIDE BY FIN_SPACE
fin_B13 = fin_B13a NOT fin_B13_ex2 
fin_lay13o = fin_lay12o NOT fin_B13 
fin_E12 = fin_B13 INSIDE EDGE diffin11 
fin_A13 = EXPAND EDGE fin_E12 INSIDE BY FIN_PITCH
diffin12 = diffin11 NOT fin_A12 
fin_E13_ori = fin_A13 INSIDE EDGE diffin12 
fin_B14_ori = EXPAND EDGE fin_E13_ori OUTSIDE BY FIN_SPACE
fin_E13_ex1 = LENGTH fin_E13_ori == FIN_WIDTH
fin_B14_ex1 = EXPAND EDGE fin_E13_ex1 OUTSIDE BY FIN_SPACE
fin_B14a = fin_B14_ori NOT fin_B14_ex1 
fin_E13_ex2 = LENGTH fin_E13_ori == FIN_PITCH
fin_B14_ex2 = EXPAND EDGE fin_E13_ex2 OUTSIDE BY FIN_SPACE
fin_B14 = fin_B14a NOT fin_B14_ex2 
fin_lay14o = fin_lay13o NOT fin_B14 
fin_E13 = fin_B14 INSIDE EDGE diffin12 
fin_A14 = EXPAND EDGE fin_E13 INSIDE BY FIN_PITCH
diffin13 = diffin12 NOT fin_A13 
fin_E14_ori = fin_A14 INSIDE EDGE diffin13 
fin_B15_ori = EXPAND EDGE fin_E14_ori OUTSIDE BY FIN_SPACE
fin_E14_ex1 = LENGTH fin_E14_ori == FIN_WIDTH
fin_B15_ex1 = EXPAND EDGE fin_E14_ex1 OUTSIDE BY FIN_SPACE
fin_B15a = fin_B15_ori NOT fin_B15_ex1 
fin_E14_ex2 = LENGTH fin_E14_ori == FIN_PITCH
fin_B15_ex2 = EXPAND EDGE fin_E14_ex2 OUTSIDE BY FIN_SPACE
fin_B15 = fin_B15a NOT fin_B15_ex2 
fin_lay15o = fin_lay14o NOT fin_B15 
fin_E14 = fin_B15 INSIDE EDGE diffin13 
fin_A15 = EXPAND EDGE fin_E14 INSIDE BY FIN_PITCH
diffin14 = diffin13 NOT fin_A14 
fin_E15_ori = fin_A15 INSIDE EDGE diffin14 
fin_B16_ori = EXPAND EDGE fin_E15_ori OUTSIDE BY FIN_SPACE
fin_E15_ex1 = LENGTH fin_E15_ori == FIN_WIDTH
fin_B16_ex1 = EXPAND EDGE fin_E15_ex1 OUTSIDE BY FIN_SPACE
fin_B16a = fin_B16_ori NOT fin_B16_ex1 
fin_E15_ex2 = LENGTH fin_E15_ori == FIN_PITCH
fin_B16_ex2 = EXPAND EDGE fin_E15_ex2 OUTSIDE BY FIN_SPACE
fin_B16 = fin_B16a NOT fin_B16_ex2 
fin_lay16o = fin_lay15o NOT fin_B16 
fin_E15 = fin_B16 INSIDE EDGE diffin14 
fin_A16 = EXPAND EDGE fin_E15 INSIDE BY FIN_PITCH
diffin15 = diffin14 NOT fin_A15 
fin_E16_ori = fin_A16 INSIDE EDGE diffin15 
fin_B17_ori = EXPAND EDGE fin_E16_ori OUTSIDE BY FIN_SPACE
fin_E16_ex1 = LENGTH fin_E16_ori == FIN_WIDTH
fin_B17_ex1 = EXPAND EDGE fin_E16_ex1 OUTSIDE BY FIN_SPACE
fin_B17a = fin_B17_ori NOT fin_B17_ex1 
fin_E16_ex2 = LENGTH fin_E16_ori == FIN_PITCH
fin_B17_ex2 = EXPAND EDGE fin_E16_ex2 OUTSIDE BY FIN_SPACE
fin_B17 = fin_B17a NOT fin_B17_ex2 
fin_lay17o = fin_lay16o NOT fin_B17 
fin_E16 = fin_B17 INSIDE EDGE diffin15 
fin_A17 = EXPAND EDGE fin_E16 INSIDE BY FIN_PITCH
diffin16 = diffin15 NOT fin_A16 
fin_E17_ori = fin_A17 INSIDE EDGE diffin16 
fin_B18_ori = EXPAND EDGE fin_E17_ori OUTSIDE BY FIN_SPACE
fin_E17_ex1 = LENGTH fin_E17_ori == FIN_WIDTH
fin_B18_ex1 = EXPAND EDGE fin_E17_ex1 OUTSIDE BY FIN_SPACE
fin_B18a = fin_B18_ori NOT fin_B18_ex1 
fin_E17_ex2 = LENGTH fin_E17_ori == FIN_PITCH
fin_B18_ex2 = EXPAND EDGE fin_E17_ex2 OUTSIDE BY FIN_SPACE
fin_B18 = fin_B18a NOT fin_B18_ex2 
fin_lay18o = fin_lay17o NOT fin_B18 
fin_E17 = fin_B18 INSIDE EDGE diffin16 
fin_A18 = EXPAND EDGE fin_E17 INSIDE BY FIN_PITCH
diffin17 = diffin16 NOT fin_A17 
fin_E18_ori = fin_A18 INSIDE EDGE diffin17 
fin_B19_ori = EXPAND EDGE fin_E18_ori OUTSIDE BY FIN_SPACE
fin_E18_ex1 = LENGTH fin_E18_ori == FIN_WIDTH
fin_B19_ex1 = EXPAND EDGE fin_E18_ex1 OUTSIDE BY FIN_SPACE
fin_B19a = fin_B19_ori NOT fin_B19_ex1 
fin_E18_ex2 = LENGTH fin_E18_ori == FIN_PITCH
fin_B19_ex2 = EXPAND EDGE fin_E18_ex2 OUTSIDE BY FIN_SPACE
fin_B19 = fin_B19a NOT fin_B19_ex2 
fin_lay19o = fin_lay18o NOT fin_B19 
fin_E18 = fin_B19 INSIDE EDGE diffin17 
fin_A19 = EXPAND EDGE fin_E18 INSIDE BY FIN_PITCH
diffin18 = diffin17 NOT fin_A18 
fin_E19_ori = fin_A19 INSIDE EDGE diffin18 
fin_B20_ori = EXPAND EDGE fin_E19_ori OUTSIDE BY FIN_SPACE
fin_E19_ex1 = LENGTH fin_E19_ori == FIN_WIDTH
fin_B20_ex1 = EXPAND EDGE fin_E19_ex1 OUTSIDE BY FIN_SPACE
fin_B20a = fin_B20_ori NOT fin_B20_ex1 
fin_E19_ex2 = LENGTH fin_E19_ori == FIN_PITCH
fin_B20_ex2 = EXPAND EDGE fin_E19_ex2 OUTSIDE BY FIN_SPACE
fin_B20 = fin_B20a NOT fin_B20_ex2 
fin_lay20o = fin_lay19o NOT fin_B20 
fin_E19 = fin_B20 INSIDE EDGE diffin18 
fin_A20 = EXPAND EDGE fin_E19 INSIDE BY FIN_PITCH
diffin19 = diffin18 NOT fin_A19 
fin_E20_ori = fin_A20 INSIDE EDGE diffin19 
fin_B21_ori = EXPAND EDGE fin_E20_ori OUTSIDE BY FIN_SPACE
fin_E20_ex1 = LENGTH fin_E20_ori == FIN_WIDTH
fin_B21_ex1 = EXPAND EDGE fin_E20_ex1 OUTSIDE BY FIN_SPACE
fin_B21a = fin_B21_ori NOT fin_B21_ex1 
fin_E20_ex2 = LENGTH fin_E20_ori == FIN_PITCH
fin_B21_ex2 = EXPAND EDGE fin_E20_ex2 OUTSIDE BY FIN_SPACE
fin_B21 = fin_B21a NOT fin_B21_ex2 
fin_lay21o = fin_lay20o NOT fin_B21 
fin_E20 = fin_B21 INSIDE EDGE diffin19 
fin_A21 = EXPAND EDGE fin_E20 INSIDE BY FIN_PITCH
diffin20 = diffin19 NOT fin_A20 
fin_E21_ori = fin_A21 INSIDE EDGE diffin20 
fin_B22_ori = EXPAND EDGE fin_E21_ori OUTSIDE BY FIN_SPACE
fin_E21_ex1 = LENGTH fin_E21_ori == FIN_WIDTH
fin_B22_ex1 = EXPAND EDGE fin_E21_ex1 OUTSIDE BY FIN_SPACE
fin_B22a = fin_B22_ori NOT fin_B22_ex1 
fin_E21_ex2 = LENGTH fin_E21_ori == FIN_PITCH
fin_B22_ex2 = EXPAND EDGE fin_E21_ex2 OUTSIDE BY FIN_SPACE
fin_B22 = fin_B22a NOT fin_B22_ex2 
fin_lay22o = fin_lay21o NOT fin_B22 
fin_E21 = fin_B22 INSIDE EDGE diffin20 
fin_A22 = EXPAND EDGE fin_E21 INSIDE BY FIN_PITCH
diffin21 = diffin20 NOT fin_A21 
fin_E22_ori = fin_A22 INSIDE EDGE diffin21 
fin_B23_ori = EXPAND EDGE fin_E22_ori OUTSIDE BY FIN_SPACE
fin_E22_ex1 = LENGTH fin_E22_ori == FIN_WIDTH
fin_B23_ex1 = EXPAND EDGE fin_E22_ex1 OUTSIDE BY FIN_SPACE
fin_B23a = fin_B23_ori NOT fin_B23_ex1 
fin_E22_ex2 = LENGTH fin_E22_ori == FIN_PITCH
fin_B23_ex2 = EXPAND EDGE fin_E22_ex2 OUTSIDE BY FIN_SPACE
fin_B23 = fin_B23a NOT fin_B23_ex2 
fin_lay23o = fin_lay22o NOT fin_B23 
fin_E22 = fin_B23 INSIDE EDGE diffin21 
fin_A23 = EXPAND EDGE fin_E22 INSIDE BY FIN_PITCH
diffin22 = diffin21 NOT fin_A22 
fin_E23_ori = fin_A23 INSIDE EDGE diffin22 
fin_B24_ori = EXPAND EDGE fin_E23_ori OUTSIDE BY FIN_SPACE
fin_E23_ex1 = LENGTH fin_E23_ori == FIN_WIDTH
fin_B24_ex1 = EXPAND EDGE fin_E23_ex1 OUTSIDE BY FIN_SPACE
fin_B24a = fin_B24_ori NOT fin_B24_ex1 
fin_E23_ex2 = LENGTH fin_E23_ori == FIN_PITCH
fin_B24_ex2 = EXPAND EDGE fin_E23_ex2 OUTSIDE BY FIN_SPACE
fin_B24 = fin_B24a NOT fin_B24_ex2 
fin_lay24o = fin_lay23o NOT fin_B24 
fin_E23 = fin_B24 INSIDE EDGE diffin22 
fin_A24 = EXPAND EDGE fin_E23 INSIDE BY FIN_PITCH
diffin23 = diffin22 NOT fin_A23 
fin_E24_ori = fin_A24 INSIDE EDGE diffin23 
fin_B25_ori = EXPAND EDGE fin_E24_ori OUTSIDE BY FIN_SPACE
fin_E24_ex1 = LENGTH fin_E24_ori == FIN_WIDTH
fin_B25_ex1 = EXPAND EDGE fin_E24_ex1 OUTSIDE BY FIN_SPACE
fin_B25a = fin_B25_ori NOT fin_B25_ex1 
fin_E24_ex2 = LENGTH fin_E24_ori == FIN_PITCH
fin_B25_ex2 = EXPAND EDGE fin_E24_ex2 OUTSIDE BY FIN_SPACE
fin_B25 = fin_B25a NOT fin_B25_ex2 
fin_lay25o = fin_lay24o NOT fin_B25 
fin_E24 = fin_B25 INSIDE EDGE diffin23 
fin_A25 = EXPAND EDGE fin_E24 INSIDE BY FIN_PITCH
diffin24 = diffin23 NOT fin_A24 
fin_E25_ori = fin_A25 INSIDE EDGE diffin24 
fin_B26_ori = EXPAND EDGE fin_E25_ori OUTSIDE BY FIN_SPACE
fin_E25_ex1 = LENGTH fin_E25_ori == FIN_WIDTH
fin_B26_ex1 = EXPAND EDGE fin_E25_ex1 OUTSIDE BY FIN_SPACE
fin_B26a = fin_B26_ori NOT fin_B26_ex1 
fin_E25_ex2 = LENGTH fin_E25_ori == FIN_PITCH
fin_B26_ex2 = EXPAND EDGE fin_E25_ex2 OUTSIDE BY FIN_SPACE
fin_B26 = fin_B26a NOT fin_B26_ex2 
fin_lay26o = fin_lay25o NOT fin_B26 
fin_E25 = fin_B26 INSIDE EDGE diffin24 
fin_A26 = EXPAND EDGE fin_E25 INSIDE BY FIN_PITCH
diffin25 = diffin24 NOT fin_A25 
fin_E26_ori = fin_A26 INSIDE EDGE diffin25 
fin_B27_ori = EXPAND EDGE fin_E26_ori OUTSIDE BY FIN_SPACE
fin_E26_ex1 = LENGTH fin_E26_ori == FIN_WIDTH
fin_B27_ex1 = EXPAND EDGE fin_E26_ex1 OUTSIDE BY FIN_SPACE
fin_B27a = fin_B27_ori NOT fin_B27_ex1 
fin_E26_ex2 = LENGTH fin_E26_ori == FIN_PITCH
fin_B27_ex2 = EXPAND EDGE fin_E26_ex2 OUTSIDE BY FIN_SPACE
fin_B27 = fin_B27a NOT fin_B27_ex2 
fin_lay27o = fin_lay26o NOT fin_B27 
fin_E26 = fin_B27 INSIDE EDGE diffin25 
fin_A27 = EXPAND EDGE fin_E26 INSIDE BY FIN_PITCH
diffin26 = diffin25 NOT fin_A26 
fin_E27_ori = fin_A27 INSIDE EDGE diffin26 
fin_B28_ori = EXPAND EDGE fin_E27_ori OUTSIDE BY FIN_SPACE
fin_E27_ex1 = LENGTH fin_E27_ori == FIN_WIDTH
fin_B28_ex1 = EXPAND EDGE fin_E27_ex1 OUTSIDE BY FIN_SPACE
fin_B28a = fin_B28_ori NOT fin_B28_ex1 
fin_E27_ex2 = LENGTH fin_E27_ori == FIN_PITCH
fin_B28_ex2 = EXPAND EDGE fin_E27_ex2 OUTSIDE BY FIN_SPACE
fin_B28 = fin_B28a NOT fin_B28_ex2 
fin_lay28o = fin_lay27o NOT fin_B28 
fin_E27 = fin_B28 INSIDE EDGE diffin26 
fin_A28 = EXPAND EDGE fin_E27 INSIDE BY FIN_PITCH
diffin27 = diffin26 NOT fin_A27 
fin_E28_ori = fin_A28 INSIDE EDGE diffin27 
fin_B29_ori = EXPAND EDGE fin_E28_ori OUTSIDE BY FIN_SPACE
fin_E28_ex1 = LENGTH fin_E28_ori == FIN_WIDTH
fin_B29_ex1 = EXPAND EDGE fin_E28_ex1 OUTSIDE BY FIN_SPACE
fin_B29a = fin_B29_ori NOT fin_B29_ex1 
fin_E28_ex2 = LENGTH fin_E28_ori == FIN_PITCH
fin_B29_ex2 = EXPAND EDGE fin_E28_ex2 OUTSIDE BY FIN_SPACE
fin_B29 = fin_B29a NOT fin_B29_ex2 
fin_lay29o = fin_lay28o NOT fin_B29 
fin_E28 = fin_B29 INSIDE EDGE diffin27 
fin_A29 = EXPAND EDGE fin_E28 INSIDE BY FIN_PITCH
diffin28 = diffin27 NOT fin_A28 
fin_E29_ori = fin_A29 INSIDE EDGE diffin28 
fin_B30_ori = EXPAND EDGE fin_E29_ori OUTSIDE BY FIN_SPACE
fin_E29_ex1 = LENGTH fin_E29_ori == FIN_WIDTH
fin_B30_ex1 = EXPAND EDGE fin_E29_ex1 OUTSIDE BY FIN_SPACE
fin_B30a = fin_B30_ori NOT fin_B30_ex1 
fin_E29_ex2 = LENGTH fin_E29_ori == FIN_PITCH
fin_B30_ex2 = EXPAND EDGE fin_E29_ex2 OUTSIDE BY FIN_SPACE
fin_B30 = fin_B30a NOT fin_B30_ex2 
fin_lay30o = fin_lay29o NOT fin_B30 
fin_E29 = fin_B30 INSIDE EDGE diffin28 
fin_A30 = EXPAND EDGE fin_E29 INSIDE BY FIN_PITCH
diffin29 = diffin28 NOT fin_A29 
fin_E30_ori = fin_A30 INSIDE EDGE diffin29 
fin_B31_ori = EXPAND EDGE fin_E30_ori OUTSIDE BY FIN_SPACE
fin_E30_ex1 = LENGTH fin_E30_ori == FIN_WIDTH
fin_B31_ex1 = EXPAND EDGE fin_E30_ex1 OUTSIDE BY FIN_SPACE
fin_B31a = fin_B31_ori NOT fin_B31_ex1 
fin_E30_ex2 = LENGTH fin_E30_ori == FIN_PITCH
fin_B31_ex2 = EXPAND EDGE fin_E30_ex2 OUTSIDE BY FIN_SPACE
fin_B31 = fin_B31a NOT fin_B31_ex2 
fin_lay31o = fin_lay30o NOT fin_B31 
fin_E30 = fin_B31 INSIDE EDGE diffin29 
fin_A31 = EXPAND EDGE fin_E30 INSIDE BY FIN_PITCH
diffin30 = diffin29 NOT fin_A30 
fin_E31_ori = fin_A31 INSIDE EDGE diffin30 
fin_B32_ori = EXPAND EDGE fin_E31_ori OUTSIDE BY FIN_SPACE
fin_E31_ex1 = LENGTH fin_E31_ori == FIN_WIDTH
fin_B32_ex1 = EXPAND EDGE fin_E31_ex1 OUTSIDE BY FIN_SPACE
fin_B32a = fin_B32_ori NOT fin_B32_ex1 
fin_E31_ex2 = LENGTH fin_E31_ori == FIN_PITCH
fin_B32_ex2 = EXPAND EDGE fin_E31_ex2 OUTSIDE BY FIN_SPACE
fin_B32 = fin_B32a NOT fin_B32_ex2 
fin_lay32o = fin_lay31o NOT fin_B32 
fin_E31 = fin_B32 INSIDE EDGE diffin30 
fin_A32 = EXPAND EDGE fin_E31 INSIDE BY FIN_PITCH
diffin31 = diffin30 NOT fin_A31 
fin_E32_ori = fin_A32 INSIDE EDGE diffin31 
fin_B33_ori = EXPAND EDGE fin_E32_ori OUTSIDE BY FIN_SPACE
fin_E32_ex1 = LENGTH fin_E32_ori == FIN_WIDTH
fin_B33_ex1 = EXPAND EDGE fin_E32_ex1 OUTSIDE BY FIN_SPACE
fin_B33a = fin_B33_ori NOT fin_B33_ex1 
fin_E32_ex2 = LENGTH fin_E32_ori == FIN_PITCH
fin_B33_ex2 = EXPAND EDGE fin_E32_ex2 OUTSIDE BY FIN_SPACE
fin_B33 = fin_B33a NOT fin_B33_ex2 
fin_lay33o = fin_lay32o NOT fin_B33 
fin_E32 = fin_B33 INSIDE EDGE diffin31 
fin_A33 = EXPAND EDGE fin_E32 INSIDE BY FIN_PITCH
diffin32 = diffin31 NOT fin_A32 
fin_E33_ori = fin_A33 INSIDE EDGE diffin32 
fin_B34_ori = EXPAND EDGE fin_E33_ori OUTSIDE BY FIN_SPACE
fin_E33_ex1 = LENGTH fin_E33_ori == FIN_WIDTH
fin_B34_ex1 = EXPAND EDGE fin_E33_ex1 OUTSIDE BY FIN_SPACE
fin_B34a = fin_B34_ori NOT fin_B34_ex1 
fin_E33_ex2 = LENGTH fin_E33_ori == FIN_PITCH
fin_B34_ex2 = EXPAND EDGE fin_E33_ex2 OUTSIDE BY FIN_SPACE
fin_B34 = fin_B34a NOT fin_B34_ex2 
fin_lay34o = fin_lay33o NOT fin_B34 
fin_E33 = fin_B34 INSIDE EDGE diffin32 
fin_A34 = EXPAND EDGE fin_E33 INSIDE BY FIN_PITCH
diffin33 = diffin32 NOT fin_A33 
fin_E34_ori = fin_A34 INSIDE EDGE diffin33 
fin_B35_ori = EXPAND EDGE fin_E34_ori OUTSIDE BY FIN_SPACE
fin_E34_ex1 = LENGTH fin_E34_ori == FIN_WIDTH
fin_B35_ex1 = EXPAND EDGE fin_E34_ex1 OUTSIDE BY FIN_SPACE
fin_B35a = fin_B35_ori NOT fin_B35_ex1 
fin_E34_ex2 = LENGTH fin_E34_ori == FIN_PITCH
fin_B35_ex2 = EXPAND EDGE fin_E34_ex2 OUTSIDE BY FIN_SPACE
fin_B35 = fin_B35a NOT fin_B35_ex2 
fin_lay35o = fin_lay34o NOT fin_B35 
fin_E34 = fin_B35 INSIDE EDGE diffin33 
fin_A35 = EXPAND EDGE fin_E34 INSIDE BY FIN_PITCH
diffin34 = diffin33 NOT fin_A34 
fin_E35_ori = fin_A35 INSIDE EDGE diffin34 
fin_B36_ori = EXPAND EDGE fin_E35_ori OUTSIDE BY FIN_SPACE
fin_E35_ex1 = LENGTH fin_E35_ori == FIN_WIDTH
fin_B36_ex1 = EXPAND EDGE fin_E35_ex1 OUTSIDE BY FIN_SPACE
fin_B36a = fin_B36_ori NOT fin_B36_ex1 
fin_E35_ex2 = LENGTH fin_E35_ori == FIN_PITCH
fin_B36_ex2 = EXPAND EDGE fin_E35_ex2 OUTSIDE BY FIN_SPACE
fin_B36 = fin_B36a NOT fin_B36_ex2 
fin_lay36o = fin_lay35o NOT fin_B36 
fin_E35 = fin_B36 INSIDE EDGE diffin34 
fin_A36 = EXPAND EDGE fin_E35 INSIDE BY FIN_PITCH
diffin35 = diffin34 NOT fin_A35 
fin_E36_ori = fin_A36 INSIDE EDGE diffin35 
fin_B37_ori = EXPAND EDGE fin_E36_ori OUTSIDE BY FIN_SPACE
fin_E36_ex1 = LENGTH fin_E36_ori == FIN_WIDTH
fin_B37_ex1 = EXPAND EDGE fin_E36_ex1 OUTSIDE BY FIN_SPACE
fin_B37a = fin_B37_ori NOT fin_B37_ex1 
fin_E36_ex2 = LENGTH fin_E36_ori == FIN_PITCH
fin_B37_ex2 = EXPAND EDGE fin_E36_ex2 OUTSIDE BY FIN_SPACE
fin_B37 = fin_B37a NOT fin_B37_ex2 
fin_lay37o = fin_lay36o NOT fin_B37 
fin_E36 = fin_B37 INSIDE EDGE diffin35 
fin_A37 = EXPAND EDGE fin_E36 INSIDE BY FIN_PITCH
diffin36 = diffin35 NOT fin_A36 
fin_E37_ori = fin_A37 INSIDE EDGE diffin36 
fin_B38_ori = EXPAND EDGE fin_E37_ori OUTSIDE BY FIN_SPACE
fin_E37_ex1 = LENGTH fin_E37_ori == FIN_WIDTH
fin_B38_ex1 = EXPAND EDGE fin_E37_ex1 OUTSIDE BY FIN_SPACE
fin_B38a = fin_B38_ori NOT fin_B38_ex1 
fin_E37_ex2 = LENGTH fin_E37_ori == FIN_PITCH
fin_B38_ex2 = EXPAND EDGE fin_E37_ex2 OUTSIDE BY FIN_SPACE
fin_B38 = fin_B38a NOT fin_B38_ex2 
fin_lay38o = fin_lay37o NOT fin_B38 
fin_E37 = fin_B38 INSIDE EDGE diffin36 
fin_A38 = EXPAND EDGE fin_E37 INSIDE BY FIN_PITCH
diffin37 = diffin36 NOT fin_A37 
fin_E38_ori = fin_A38 INSIDE EDGE diffin37 
fin_B39_ori = EXPAND EDGE fin_E38_ori OUTSIDE BY FIN_SPACE
fin_E38_ex1 = LENGTH fin_E38_ori == FIN_WIDTH
fin_B39_ex1 = EXPAND EDGE fin_E38_ex1 OUTSIDE BY FIN_SPACE
fin_B39a = fin_B39_ori NOT fin_B39_ex1 
fin_E38_ex2 = LENGTH fin_E38_ori == FIN_PITCH
fin_B39_ex2 = EXPAND EDGE fin_E38_ex2 OUTSIDE BY FIN_SPACE
fin_B39 = fin_B39a NOT fin_B39_ex2 
fin_lay39o = fin_lay38o NOT fin_B39 
fin_E38 = fin_B39 INSIDE EDGE diffin37 
fin_A39 = EXPAND EDGE fin_E38 INSIDE BY FIN_PITCH
diffin38 = diffin37 NOT fin_A38 
fin_E39_ori = fin_A39 INSIDE EDGE diffin38 
fin_B40_ori = EXPAND EDGE fin_E39_ori OUTSIDE BY FIN_SPACE
fin_E39_ex1 = LENGTH fin_E39_ori == FIN_WIDTH
fin_B40_ex1 = EXPAND EDGE fin_E39_ex1 OUTSIDE BY FIN_SPACE
fin_B40a = fin_B40_ori NOT fin_B40_ex1 
fin_E39_ex2 = LENGTH fin_E39_ori == FIN_PITCH
fin_B40_ex2 = EXPAND EDGE fin_E39_ex2 OUTSIDE BY FIN_SPACE
fin_B40 = fin_B40a NOT fin_B40_ex2 
fin_lay40o = fin_lay39o NOT fin_B40 
fin_E39 = fin_B40 INSIDE EDGE diffin38 
fin_A40 = EXPAND EDGE fin_E39 INSIDE BY FIN_PITCH
diffin39 = diffin38 NOT fin_A39 
fin_E40_ori = fin_A40 INSIDE EDGE diffin39 
fin_B41_ori = EXPAND EDGE fin_E40_ori OUTSIDE BY FIN_SPACE
fin_E40_ex1 = LENGTH fin_E40_ori == FIN_WIDTH
fin_B41_ex1 = EXPAND EDGE fin_E40_ex1 OUTSIDE BY FIN_SPACE
fin_B41a = fin_B41_ori NOT fin_B41_ex1 
fin_E40_ex2 = LENGTH fin_E40_ori == FIN_PITCH
fin_B41_ex2 = EXPAND EDGE fin_E40_ex2 OUTSIDE BY FIN_SPACE
fin_B41 = fin_B41a NOT fin_B41_ex2 
fin_lay41o = fin_lay40o NOT fin_B41 
fin_E40 = fin_B41 INSIDE EDGE diffin39 
fin_A41 = EXPAND EDGE fin_E40 INSIDE BY FIN_PITCH
diffin40 = diffin39 NOT fin_A40 
fin_E41_ori = fin_A41 INSIDE EDGE diffin40 
fin_B42_ori = EXPAND EDGE fin_E41_ori OUTSIDE BY FIN_SPACE
fin_E41_ex1 = LENGTH fin_E41_ori == FIN_WIDTH
fin_B42_ex1 = EXPAND EDGE fin_E41_ex1 OUTSIDE BY FIN_SPACE
fin_B42a = fin_B42_ori NOT fin_B42_ex1 
fin_E41_ex2 = LENGTH fin_E41_ori == FIN_PITCH
fin_B42_ex2 = EXPAND EDGE fin_E41_ex2 OUTSIDE BY FIN_SPACE
fin_B42 = fin_B42a NOT fin_B42_ex2 
fin_lay42o = fin_lay41o NOT fin_B42 
fin_E41 = fin_B42 INSIDE EDGE diffin40 
fin_A42 = EXPAND EDGE fin_E41 INSIDE BY FIN_PITCH
diffin41 = diffin40 NOT fin_A41 
fin_E42_ori = fin_A42 INSIDE EDGE diffin41 
fin_B43_ori = EXPAND EDGE fin_E42_ori OUTSIDE BY FIN_SPACE
fin_E42_ex1 = LENGTH fin_E42_ori == FIN_WIDTH
fin_B43_ex1 = EXPAND EDGE fin_E42_ex1 OUTSIDE BY FIN_SPACE
fin_B43a = fin_B43_ori NOT fin_B43_ex1 
fin_E42_ex2 = LENGTH fin_E42_ori == FIN_PITCH
fin_B43_ex2 = EXPAND EDGE fin_E42_ex2 OUTSIDE BY FIN_SPACE
fin_B43 = fin_B43a NOT fin_B43_ex2 
fin_lay43o = fin_lay42o NOT fin_B43 
fin_E42 = fin_B43 INSIDE EDGE diffin41 
fin_A43 = EXPAND EDGE fin_E42 INSIDE BY FIN_PITCH
diffin42 = diffin41 NOT fin_A42 
fin_E43_ori = fin_A43 INSIDE EDGE diffin42 
fin_B44_ori = EXPAND EDGE fin_E43_ori OUTSIDE BY FIN_SPACE
fin_E43_ex1 = LENGTH fin_E43_ori == FIN_WIDTH
fin_B44_ex1 = EXPAND EDGE fin_E43_ex1 OUTSIDE BY FIN_SPACE
fin_B44a = fin_B44_ori NOT fin_B44_ex1 
fin_E43_ex2 = LENGTH fin_E43_ori == FIN_PITCH
fin_B44_ex2 = EXPAND EDGE fin_E43_ex2 OUTSIDE BY FIN_SPACE
fin_B44 = fin_B44a NOT fin_B44_ex2 
fin_lay44o = fin_lay43o NOT fin_B44 
fin_E43 = fin_B44 INSIDE EDGE diffin42 
fin_A44 = EXPAND EDGE fin_E43 INSIDE BY FIN_PITCH
diffin43 = diffin42 NOT fin_A43 
fin_E44_ori = fin_A44 INSIDE EDGE diffin43 
fin_B45_ori = EXPAND EDGE fin_E44_ori OUTSIDE BY FIN_SPACE
fin_E44_ex1 = LENGTH fin_E44_ori == FIN_WIDTH
fin_B45_ex1 = EXPAND EDGE fin_E44_ex1 OUTSIDE BY FIN_SPACE
fin_B45a = fin_B45_ori NOT fin_B45_ex1 
fin_E44_ex2 = LENGTH fin_E44_ori == FIN_PITCH
fin_B45_ex2 = EXPAND EDGE fin_E44_ex2 OUTSIDE BY FIN_SPACE
fin_B45 = fin_B45a NOT fin_B45_ex2 
fin_lay45o = fin_lay44o NOT fin_B45 
fin_E44 = fin_B45 INSIDE EDGE diffin43 
fin_A45 = EXPAND EDGE fin_E44 INSIDE BY FIN_PITCH
diffin44 = diffin43 NOT fin_A44 
fin_E45_ori = fin_A45 INSIDE EDGE diffin44 
fin_B46_ori = EXPAND EDGE fin_E45_ori OUTSIDE BY FIN_SPACE
fin_E45_ex1 = LENGTH fin_E45_ori == FIN_WIDTH
fin_B46_ex1 = EXPAND EDGE fin_E45_ex1 OUTSIDE BY FIN_SPACE
fin_B46a = fin_B46_ori NOT fin_B46_ex1 
fin_E45_ex2 = LENGTH fin_E45_ori == FIN_PITCH
fin_B46_ex2 = EXPAND EDGE fin_E45_ex2 OUTSIDE BY FIN_SPACE
fin_B46 = fin_B46a NOT fin_B46_ex2 
fin_lay46o = fin_lay45o NOT fin_B46 
fin_E45 = fin_B46 INSIDE EDGE diffin44 
fin_A46 = EXPAND EDGE fin_E45 INSIDE BY FIN_PITCH
diffin45 = diffin44 NOT fin_A45 
fin_E46_ori = fin_A46 INSIDE EDGE diffin45 
fin_B47_ori = EXPAND EDGE fin_E46_ori OUTSIDE BY FIN_SPACE
fin_E46_ex1 = LENGTH fin_E46_ori == FIN_WIDTH
fin_B47_ex1 = EXPAND EDGE fin_E46_ex1 OUTSIDE BY FIN_SPACE
fin_B47a = fin_B47_ori NOT fin_B47_ex1 
fin_E46_ex2 = LENGTH fin_E46_ori == FIN_PITCH
fin_B47_ex2 = EXPAND EDGE fin_E46_ex2 OUTSIDE BY FIN_SPACE
fin_B47 = fin_B47a NOT fin_B47_ex2 
fin_lay47o = fin_lay46o NOT fin_B47 
fin_E46 = fin_B47 INSIDE EDGE diffin45 
fin_A47 = EXPAND EDGE fin_E46 INSIDE BY FIN_PITCH
diffin46 = diffin45 NOT fin_A46 
fin_E47_ori = fin_A47 INSIDE EDGE diffin46 
fin_B48_ori = EXPAND EDGE fin_E47_ori OUTSIDE BY FIN_SPACE
fin_E47_ex1 = LENGTH fin_E47_ori == FIN_WIDTH
fin_B48_ex1 = EXPAND EDGE fin_E47_ex1 OUTSIDE BY FIN_SPACE
fin_B48a = fin_B48_ori NOT fin_B48_ex1 
fin_E47_ex2 = LENGTH fin_E47_ori == FIN_PITCH
fin_B48_ex2 = EXPAND EDGE fin_E47_ex2 OUTSIDE BY FIN_SPACE
fin_B48 = fin_B48a NOT fin_B48_ex2 
fin_lay48o = fin_lay47o NOT fin_B48 
fin_E47 = fin_B48 INSIDE EDGE diffin46 
fin_A48 = EXPAND EDGE fin_E47 INSIDE BY FIN_PITCH
diffin47 = diffin46 NOT fin_A47 
fin_E48_ori = fin_A48 INSIDE EDGE diffin47 
fin_B49_ori = EXPAND EDGE fin_E48_ori OUTSIDE BY FIN_SPACE
fin_E48_ex1 = LENGTH fin_E48_ori == FIN_WIDTH
fin_B49_ex1 = EXPAND EDGE fin_E48_ex1 OUTSIDE BY FIN_SPACE
fin_B49a = fin_B49_ori NOT fin_B49_ex1 
fin_E48_ex2 = LENGTH fin_E48_ori == FIN_PITCH
fin_B49_ex2 = EXPAND EDGE fin_E48_ex2 OUTSIDE BY FIN_SPACE
fin_B49 = fin_B49a NOT fin_B49_ex2 
fin_lay49o = fin_lay48o NOT fin_B49 
fin_E48 = fin_B49 INSIDE EDGE diffin47 
fin_A49 = EXPAND EDGE fin_E48 INSIDE BY FIN_PITCH
diffin48 = diffin47 NOT fin_A48 
fin_E49_ori = fin_A49 INSIDE EDGE diffin48 
fin_B50_ori = EXPAND EDGE fin_E49_ori OUTSIDE BY FIN_SPACE
fin_E49_ex1 = LENGTH fin_E49_ori == FIN_WIDTH
fin_B50_ex1 = EXPAND EDGE fin_E49_ex1 OUTSIDE BY FIN_SPACE
fin_B50a = fin_B50_ori NOT fin_B50_ex1 
fin_E49_ex2 = LENGTH fin_E49_ori == FIN_PITCH
fin_B50_ex2 = EXPAND EDGE fin_E49_ex2 OUTSIDE BY FIN_SPACE
fin_B50 = fin_B50a NOT fin_B50_ex2 
fin_lay50o = fin_lay49o NOT fin_B50 
fin_E49 = fin_B50 INSIDE EDGE diffin48 
fin_A50 = EXPAND EDGE fin_E49 INSIDE BY FIN_PITCH
diffin49 = diffin48 NOT fin_A49 
fin_E50_ori = fin_A50 INSIDE EDGE diffin49 
fin_B51_ori = EXPAND EDGE fin_E50_ori OUTSIDE BY FIN_SPACE
fin_E50_ex1 = LENGTH fin_E50_ori == FIN_WIDTH
fin_B51_ex1 = EXPAND EDGE fin_E50_ex1 OUTSIDE BY FIN_SPACE
fin_B51a = fin_B51_ori NOT fin_B51_ex1 
fin_E50_ex2 = LENGTH fin_E50_ori == FIN_PITCH
fin_B51_ex2 = EXPAND EDGE fin_E50_ex2 OUTSIDE BY FIN_SPACE
fin_B51 = fin_B51a NOT fin_B51_ex2 
fin_lay51o = fin_lay50o NOT fin_B51 
fin_E50 = fin_B51 INSIDE EDGE diffin49 
fin_A51 = EXPAND EDGE fin_E50 INSIDE BY FIN_PITCH
diffin50 = diffin49 NOT fin_A50 
fin_E51_ori = fin_A51 INSIDE EDGE diffin50 
fin_B52_ori = EXPAND EDGE fin_E51_ori OUTSIDE BY FIN_SPACE
fin_E51_ex1 = LENGTH fin_E51_ori == FIN_WIDTH
fin_B52_ex1 = EXPAND EDGE fin_E51_ex1 OUTSIDE BY FIN_SPACE
fin_B52a = fin_B52_ori NOT fin_B52_ex1 
fin_E51_ex2 = LENGTH fin_E51_ori == FIN_PITCH
fin_B52_ex2 = EXPAND EDGE fin_E51_ex2 OUTSIDE BY FIN_SPACE
fin_B52 = fin_B52a NOT fin_B52_ex2 
fin_lay52o = fin_lay51o NOT fin_B52 
fin_E51 = fin_B52 INSIDE EDGE diffin50 
fin_A52 = EXPAND EDGE fin_E51 INSIDE BY FIN_PITCH
diffin51 = diffin50 NOT fin_A51 
fin_E52_ori = fin_A52 INSIDE EDGE diffin51 
fin_B53_ori = EXPAND EDGE fin_E52_ori OUTSIDE BY FIN_SPACE
fin_E52_ex1 = LENGTH fin_E52_ori == FIN_WIDTH
fin_B53_ex1 = EXPAND EDGE fin_E52_ex1 OUTSIDE BY FIN_SPACE
fin_B53a = fin_B53_ori NOT fin_B53_ex1 
fin_E52_ex2 = LENGTH fin_E52_ori == FIN_PITCH
fin_B53_ex2 = EXPAND EDGE fin_E52_ex2 OUTSIDE BY FIN_SPACE
fin_B53 = fin_B53a NOT fin_B53_ex2 
fin_lay53o = fin_lay52o NOT fin_B53 
fin_E52 = fin_B53 INSIDE EDGE diffin51 
fin_A53 = EXPAND EDGE fin_E52 INSIDE BY FIN_PITCH
diffin52 = diffin51 NOT fin_A52 
fin_E53_ori = fin_A53 INSIDE EDGE diffin52 
fin_B54_ori = EXPAND EDGE fin_E53_ori OUTSIDE BY FIN_SPACE
fin_E53_ex1 = LENGTH fin_E53_ori == FIN_WIDTH
fin_B54_ex1 = EXPAND EDGE fin_E53_ex1 OUTSIDE BY FIN_SPACE
fin_B54a = fin_B54_ori NOT fin_B54_ex1 
fin_E53_ex2 = LENGTH fin_E53_ori == FIN_PITCH
fin_B54_ex2 = EXPAND EDGE fin_E53_ex2 OUTSIDE BY FIN_SPACE
fin_B54 = fin_B54a NOT fin_B54_ex2 
fin_lay54o = fin_lay53o NOT fin_B54 
sram_fin = ODi AND SRM 
fin_lay1 = fin_lay54o OR sram_fin 
EMPTY1 = SIZE ODi BY 0.005 
Empty = ODi NOT EMPTY1 
#IFDEF RC_DFM_RULE
   fin_lay = COPY fin_lay1
#ELSE
   fin_lay = COPY Empty
#ENDIF

//***** Define connectivity/via layer -- mom6p1_a ****
mom6p11_a = M6_A AND MOMDMY_MXP1 
mom6p1_a = mom6p11_a INTERACT MOMDMY_MXP12 
M0_B_SRM03 = M0_B AND M0_B_SRM03_region 

//***** Define connectivity/via layer -- p_gpoly_svt ****
p_gpoly_svt_all = ppoly_co_s NOT p_fpoly_svt 
p_gpoly_svt = p_gpoly_svt_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom1p2_b ****
mom1p21_b = M1_B AND MOMDMY_MXP2 
mom1p2_b = mom1p21_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6plus ****
mom6plus = M6 AND MOMDMY_PLUS 

//* Define layer -- M1_A_SRM03_1
M1_A_SRM03_1 = SRM AND SRM2015


//* Define layer -- M1_A_SRM03_2
M1_A_SRM03_2 = SRM AND SRM2018

M1_A_SRM03_region1 = M1_A_SRM03_1 OR M1_A_SRM03_2 

//* Define layer -- M1_A_SRM03_3
M1_A_SRM03_3 = SRM AND SRM2020

M1_A_SRM03_region2 = M1_A_SRM03_region1 OR M1_A_SRM03_3 

//* Define layer -- M1_A_SRM03_4
M1_A_SRM03_4 = SRM AND SRM2030

M1_A_SRM03_region3 = M1_A_SRM03_region2 OR M1_A_SRM03_4 

//* Define layer -- M1_A_SRM03_5
M1_A_SRM03_5 = SRM AND SRM2022

M1_A_SRM03_region4 = M1_A_SRM03_region3 OR M1_A_SRM03_5 

//* Define layer -- M1_A_SRM03_6
M1_A_SRM03_6 = SRM AND SRM2026

M1_A_SRM03_region = M1_A_SRM03_region4 OR M1_A_SRM03_6 
M1_A_SRM03 = M1_A AND M1_A_SRM03_region 

//***** Define connectivity/via layer -- mom9plus_b ****
mom9plus_b = M9_B AND MOMDMY_PLUS 
FINMOS_1 = FB1 OR FINFET_boundary10 
FINMOS = FINFET_boundary9 OR FINMOS_1 

//***** Define connectivity/via layer -- mom4m2 ****
mom4p21 = M4 AND MOMDMY_MXP2 
mom4m2 = mom4p21 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6p2_b ****
mom6p21_b = M6_B AND MOMDMY_MXP2 
mom6p2_b = mom6p21_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- pplug ****
pplug1 = tpdiff_ori AND psub 
plug_sel1 = tndiff_ori OR tpdiff_ori 
tiod1 = diff NOT tpdiff_ori 
tiod2 = tiod1 NOT tndiff_ori 
tiod3 = tiod2 NOT POx 
tiod = tiod3 NOT NWDMY  //  NWDMY, POLY cut ti-od
plug_sel2 = plug_sel1 OR tiod 
plug_valid = MD_ODa INTERACT MD_valid 
plug_sel3 = plug_sel2 INTERACT plug_valid 
#IFDEF RC_DFM_RULE
   plug_sel = COPY plug_sel2
#ELSE
   plug_sel = COPY plug_sel3
#ENDIF
pplug2 = pplug1 AND plug_sel 
tndiffco = tndiff_ori INTERACT MD_valid 
pplug3 = pplug1 INTERACT tndiffco 
pplug = pplug2 OR pplug3 

//***** Define connectivity/via layer -- n_pode_io ****
npoly_ioa_final = npoly_ioa NOT npoly_ioa_ulvt 
npode_io = npoly_ioa_final AND PODE_3T 
n_pode_io = npode_io NOT all_mos_gates 

//***** Define connectivity/via layer -- MD_OD_P_SRM ****
MD_OD_P_SRM = MD_OD_P1 AND SRM_all 
MOM_field4 = metal4i AND MOMDMY4 

//***** Define connectivity/via layer -- VTIN_15 ****
RH_TN_16a = RH_TN_all INTERACT RHDMY16i 
VTIN_15 = VIA15i AND RH_TN_16a 

//***** Define connectivity/via layer -- n_gpoly_srm ****
n_gpoly_srm_all = npoly_co_srm NOT n_fpoly_srm 
n_gpoly_srm = n_gpoly_srm_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom1p1_a ****
mom1p11_a = M1_A AND MOMDMY_MXP1 
mom1p1_a = mom1p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom8p1_a ****
mom8p11_a = M8_A AND MOMDMY_MXP1 
mom8p1_a = mom8p11_a INTERACT MOMDMY_MXP12 

//* Define layer -- mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1
mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1_tmp01 = core_ngpoly_region AND FINFET_boundary9
mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1_tmp02 = mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1 = mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1_tmp02 NOT CPP57

mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85 = COPY mkr_cfi_n_core_gpoly_fb9_cpp51_cpp85_1 

//***** Define connectivity/via layer -- n_fpoly_io ****
n_fpoly_io = npoly_ioa_final NOT OD 

//***** Define connectivity/via layer -- mom9m1_b ****
mom9m11_b = M9_B AND MOMDMY_MXP1 
mom9m1_b = mom9m11_b NOT INTERACT MOMDMY_MXP12 
tndiff1 = tndiff_ori NOT tndiff_dio 
tndiff2 = tndiff1 NOT tndiff_bjt 
tndiff_sdi1 = tndiff_ori AND SDI_2 
ngate_hia = COPY ngate_hia12_mac 
tndiff_sdi = tndiff_sdi1 INTERACT ngate_hia  //  for asymmetry HIA MOS drain terminal
tndiff_all = tndiff2 NOT tndiff_sdi 
unrecognized_ndio_1 = tndiff_all NOT SR_DOD 
unrecognized_ndio_2 = unrecognized_ndio_1 NOT nxwell 
unrecognized_dio_1 = COPY all_mos_gates 
unrecognized_dio_2 = COPY unrecognized_dio_1 
unrecognized_dio_n = tndiff_all INTERACT unrecognized_dio_2 
unrecognized_ndio_3 = unrecognized_ndio_2 NOT unrecognized_dio_n 
unrecognized_ndio_4 = diff AND unrecognized_ndio_3 
unrecognized_ndio = unrecognized_ndio_4 NOT SRM_all 
gate_and_fb9 = gate_4t AND FINFET_boundary9 
gate_and_fb10 = gate_4t AND FINFET_boundary10 
gate_fb9_fb10 = gate_and_fb9 OR gate_and_fb10 
gate_and_fb1 = gate_4t NOT gate_fb9_fb10 
fbound_aux = DFM PROPERTY gate_4t gate_and_fb1 gate_and_fb9 gate_and_fb10 OVERLAP ABUT ALSO MULTI
[fbound = 1*count(gate_and_fb1) + 9*count(gate_and_fb9) + 10*count(gate_and_fb10)]
tpdiff1 = tpdiff_ori NOT tpdiff_dio 
tpdiff_all = tpdiff1 NOT tpdiff_bjt 
unrecognized_pdio_1 = tpdiff_all NOT SR_DOD 
unrecognized_pdio_2 = unrecognized_pdio_1 NOT psub 
unrecognized_dio_p = tpdiff_all INTERACT unrecognized_dio_2 
unrecognized_pdio_3 = unrecognized_pdio_2 NOT unrecognized_dio_p 
unrecognized_pdio_4 = diff AND unrecognized_pdio_3 
unrecognized_pdio = unrecognized_pdio_4 NOT SRM_all 

//***** Define connectivity/via layer -- RH_TN_12 ****

//* Define layer -- rhim_r12a
rhim_r12a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r12a = rhim_r12a_tmp01 AND RHDMY12i

rhim_r12_body_and_via_up = rhim_r12a AND VIA11i 
rhim_r12 = rhim_r12a NOT INTERACT rhim_r12_body_and_via_up 
RH_TN_12 = RH_TN_all NOT rhim_r12 

//***** Define connectivity/via layer -- mom3plus ****
mom3plus = M3 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom4m1 ****
mom4p11 = M4 AND MOMDMY_MXP1 
mom4m1 = mom4p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- n_gpoly_nocg_io ****
npoly_io = npoly_ioa_final NOT PODE_3T 
n_gpoly_io_all = npoly_io NOT n_fpoly_io 
n_gpoly_io1 = n_gpoly_io_all NOT all_mos_gates 
n_gpoly_nocg_io = n_gpoly_io1 AND nocg_dmy_io 

//***** Define connectivity/via layer -- MD_STI_CPP85 ****
MD_STI_CPP85 = MD_STI3 AND CPP85 

//***** Define connectivity/via layer -- VTIN_4 ****
RH_TN_5a = RH_TN_all INTERACT RHDMY5i 
VTIN_4 = VIA4i AND RH_TN_5a 

//***** Define connectivity/via layer -- mom8minus_a ****
mom8minus_a = M8_A AND MOMDMY_MINUS 
ODs = ODi AND gate1  //  for SRAM nfin

//***** Define connectivity/via layer -- VTIN_10 ****
RH_TN_11a = RH_TN_all INTERACT RHDMY11i 
VTIN_10 = VIA10i AND RH_TN_11a 

//***** Define connectivity/via layer -- mom2p1_b ****
mom2p11_b = M2_B AND MOMDMY_MXP1 
mom2p1_b = mom2p11_b INTERACT MOMDMY_MXP12 
tpgate2 = tpgate1 NOT PODE_GATE 
tpgate3a = tpgate2 NOT FILLER_MOS 

//***** Define connectivity/via layer -- RH_TN_7 ****

//* Define layer -- rhim_r7a
rhim_r7a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r7a = rhim_r7a_tmp01 AND RHDMY7i

rhim_r7_body_and_via_up = rhim_r7a AND VIA6i 
rhim_r7 = rhim_r7a NOT INTERACT rhim_r7_body_and_via_up 
RH_TN_7 = RH_TN_all NOT rhim_r7 

//***** Define connectivity/via layer -- mom5minus_a ****
mom5minus_a = M5_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- VD ****
VD1 = VDi INTERACT VDR 
VD = VDi NOT VD1 
MOM_field5 = metal5i AND MOMDMY5 
pode_r_92_exclude_layer1 = DIODMYi OR IBJTDMY 
pode_r_92_exclude_layer2 = pode_r_92_exclude_layer1 OR HIA_DUMMY 
pode_r_92_exclude_layer = pode_r_92_exclude_layer2 OR SEALRING_ALL 
all_ppode_gate1 = tpgate0 NOT pode_r_92_exclude_layer 
all_ppode_gate = all_ppode_gate1 AND PODE_GATE 
all_abut_ppode_gate = all_ppode_gate INTERACT tpdiff_ori == 2

//***** Define connectivity/via layer -- mom6m2_b ****
mom6m21_b = M6_B AND MOMDMY_MXP2 
mom6m2_b = mom6m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom4plus_b ****
mom4plus_b = M4_B AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- VIA15 ****
VIA15 = VIA15i NOT VTIN_15 
p_odtap_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9_cpp57_ext_o 
p_odtap_ext_2 = p_odtap_ext_1 NOT INTERACT p_odtap_fb10_cpp57_ext_o 
p_odtap_ext_3 = p_odtap_ext_2 NOT INTERACT p_odtap_cpp57_ext_o 
p_odtap_ext_4 = p_odtap_ext_3 NOT INTERACT p_odtap_cpp85_ext_o 
p_odtap_ext_5 = p_odtap_ext_4 NOT INTERACT p_odtap_fb9_cpp51_ext_o 
p_odtap_ext = p_odtap_ext_5 INTERACT p_odtap_ext_o 

//***** Define connectivity/via layer -- p_gpoly_ulvt ****
p_gpoly_ulvt_all = ppoly_co_ul NOT p_fpoly_ulvt 
p_gpoly_ulvt1 = p_gpoly_ulvt_all NOT all_mos_gates 
p_gpoly_nocg_ulvt = p_gpoly_ulvt1 AND nocg_dmy 
p_gpoly_ulvt = p_gpoly_ulvt1 NOT p_gpoly_nocg_ulvt 

//***** Define connectivity/via layer -- mom3minus ****
mom3minus = M3 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- n_pode_io_ulvt ****
npode_io_ulvt = npoly_ioa_ulvt AND PODE_3T 
n_pode_io_ulvt = npode_io_ulvt NOT all_mos_gates 

//***** Define connectivity/via layer -- mom5p1 ****
mom5p1 = mom5p11 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA9 ****
RH_TN_10a = RH_TN_all INTERACT RHDMY10i 
VTIN_9 = VIA9i AND RH_TN_10a 
VIA9 = VIA9i NOT VTIN_9 

//* Define layer -- mkr_cfi_n_core_gpoly_fb10_cpp57_1
mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp02 = mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp01 AND FINFET_boundary10
mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp03 = mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp02 AND CPP57
mkr_cfi_n_core_gpoly_fb10_cpp57_1 = mkr_cfi_n_core_gpoly_fb10_cpp57_1_tmp03 NOT CPP85

mkr_cfi_n_core_gpoly_fb10_cpp57 = COPY mkr_cfi_n_core_gpoly_fb10_cpp57_1 

//* Define layer -- mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1
mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1_tmp02 = mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1_tmp01 AND FINFET_boundary10
mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1 = mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1_tmp02 NOT CPP57

mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85 = COPY mkr_cfi_p_core_gpoly_fb10_cpp51_cpp85_1 

//***** Define connectivity/via layer -- mom3minus_a ****
mom3minus_a = M3_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom2m1_a ****
mom2m11_a = M2_A AND MOMDMY_MXP1 
mom2m1_a = mom2m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA0 ****
VIA0 = COPY VIA0i 
valid_rh_tn3 = RHDMY3i INTERACT rhim_r3 
unrecognized_rh_tn3a = RHDMY3i NOT valid_rh_tn3 
unrecognized_rh_tn_body_with_vtin2 = rhim_r3a INTERACT rhim_r3_body_and_via_up 
unrecognized_rh_tn3 = unrecognized_rh_tn3a OR unrecognized_rh_tn_body_with_vtin2 
unrecognized_rh_tn_tmp3 = COPY unrecognized_rh_tn3 
valid_rh_tn4 = RHDMY4i INTERACT rhim_r4 
unrecognized_rh_tn4a = RHDMY4i NOT valid_rh_tn4 
unrecognized_rh_tn_body_with_vtin3 = rhim_r4a INTERACT rhim_r4_body_and_via_up 
unrecognized_rh_tn4 = unrecognized_rh_tn4a OR unrecognized_rh_tn_body_with_vtin3 
unrecognized_rh_tn_tmp4 = unrecognized_rh_tn_tmp3 OR unrecognized_rh_tn4 
valid_rh_tn5 = RHDMY5i INTERACT rhim_r5 
unrecognized_rh_tn5a = RHDMY5i NOT valid_rh_tn5 
unrecognized_rh_tn_body_with_vtin4 = rhim_r5a INTERACT rhim_r5_body_and_via_up 
unrecognized_rh_tn5 = unrecognized_rh_tn5a OR unrecognized_rh_tn_body_with_vtin4 
unrecognized_rh_tn_tmp5 = unrecognized_rh_tn_tmp4 OR unrecognized_rh_tn5 
valid_rh_tn6 = RHDMY6i INTERACT rhim_r6 
unrecognized_rh_tn6a = RHDMY6i NOT valid_rh_tn6 
unrecognized_rh_tn_body_with_vtin5 = rhim_r6a INTERACT rhim_r6_body_and_via_up 
unrecognized_rh_tn6 = unrecognized_rh_tn6a OR unrecognized_rh_tn_body_with_vtin5 
unrecognized_rh_tn_tmp6 = unrecognized_rh_tn_tmp5 OR unrecognized_rh_tn6 
valid_rh_tn7 = RHDMY7i INTERACT rhim_r7 
unrecognized_rh_tn7a = RHDMY7i NOT valid_rh_tn7 
unrecognized_rh_tn_body_with_vtin6 = rhim_r7a INTERACT rhim_r7_body_and_via_up 
unrecognized_rh_tn7 = unrecognized_rh_tn7a OR unrecognized_rh_tn_body_with_vtin6 
unrecognized_rh_tn_tmp7 = unrecognized_rh_tn_tmp6 OR unrecognized_rh_tn7 

//* Define layer -- rhim_r8a
rhim_r8a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r8a = rhim_r8a_tmp01 AND RHDMY8i

rhim_r8_body_and_via_up = rhim_r8a AND VIA7i 
rhim_r8 = rhim_r8a NOT INTERACT rhim_r8_body_and_via_up 
valid_rh_tn8 = RHDMY8i INTERACT rhim_r8 
unrecognized_rh_tn8a = RHDMY8i NOT valid_rh_tn8 
unrecognized_rh_tn_body_with_vtin7 = rhim_r8a INTERACT rhim_r8_body_and_via_up 
unrecognized_rh_tn8 = unrecognized_rh_tn8a OR unrecognized_rh_tn_body_with_vtin7 
unrecognized_rh_tn_tmp8 = unrecognized_rh_tn_tmp7 OR unrecognized_rh_tn8 

//* Define layer -- rhim_r9a
rhim_r9a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r9a = rhim_r9a_tmp01 AND RHDMY9i

rhim_r9_body_and_via_up = rhim_r9a AND VIA8i 
rhim_r9 = rhim_r9a NOT INTERACT rhim_r9_body_and_via_up 
valid_rh_tn9 = RHDMY9i INTERACT rhim_r9 
unrecognized_rh_tn9a = RHDMY9i NOT valid_rh_tn9 
unrecognized_rh_tn_body_with_vtin8 = rhim_r9a INTERACT rhim_r9_body_and_via_up 
unrecognized_rh_tn9 = unrecognized_rh_tn9a OR unrecognized_rh_tn_body_with_vtin8 
unrecognized_rh_tn_tmp9 = unrecognized_rh_tn_tmp8 OR unrecognized_rh_tn9 

//* Define layer -- rhim_r10a
rhim_r10a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r10a = rhim_r10a_tmp01 AND RHDMY10i

rhim_r10_body_and_via_up = rhim_r10a AND VIA9i 
rhim_r10 = rhim_r10a NOT INTERACT rhim_r10_body_and_via_up 
valid_rh_tn10 = RHDMY10i INTERACT rhim_r10 
unrecognized_rh_tn10a = RHDMY10i NOT valid_rh_tn10 
unrecognized_rh_tn_body_with_vtin9 = rhim_r10a INTERACT rhim_r10_body_and_via_up 
unrecognized_rh_tn10 = unrecognized_rh_tn10a OR unrecognized_rh_tn_body_with_vtin9 
unrecognized_rh_tn_tmp10 = unrecognized_rh_tn_tmp9 OR unrecognized_rh_tn10 

//* Define layer -- rhim_r11a
rhim_r11a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r11a = rhim_r11a_tmp01 AND RHDMY11i

rhim_r11_body_and_via_up = rhim_r11a AND VIA10i 
rhim_r11 = rhim_r11a NOT INTERACT rhim_r11_body_and_via_up 
valid_rh_tn11 = RHDMY11i INTERACT rhim_r11 
unrecognized_rh_tn11a = RHDMY11i NOT valid_rh_tn11 
unrecognized_rh_tn_body_with_vtin10 = rhim_r11a INTERACT rhim_r11_body_and_via_up 
unrecognized_rh_tn11 = unrecognized_rh_tn11a OR unrecognized_rh_tn_body_with_vtin10 
unrecognized_rh_tn_tmp11 = unrecognized_rh_tn_tmp10 OR unrecognized_rh_tn11 
valid_rh_tn12 = RHDMY12i INTERACT rhim_r12 
unrecognized_rh_tn12a = RHDMY12i NOT valid_rh_tn12 
unrecognized_rh_tn_body_with_vtin11 = rhim_r12a INTERACT rhim_r12_body_and_via_up 
unrecognized_rh_tn12 = unrecognized_rh_tn12a OR unrecognized_rh_tn_body_with_vtin11 
unrecognized_rh_tn_tmp12 = unrecognized_rh_tn_tmp11 OR unrecognized_rh_tn12 
valid_rh_tn13 = RHDMY13i INTERACT rhim_r13 
unrecognized_rh_tn13a = RHDMY13i NOT valid_rh_tn13 
unrecognized_rh_tn_body_with_vtin12 = rhim_r13a INTERACT rhim_r13_body_and_via_up 
unrecognized_rh_tn13 = unrecognized_rh_tn13a OR unrecognized_rh_tn_body_with_vtin12 
unrecognized_rh_tn_tmp13 = unrecognized_rh_tn_tmp12 OR unrecognized_rh_tn13 

//* Define layer -- rhim_r14a
rhim_r14a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r14a = rhim_r14a_tmp01 AND RHDMY14i

rhim_r14_body_and_via_up = rhim_r14a AND VIA13i 
rhim_r14 = rhim_r14a NOT INTERACT rhim_r14_body_and_via_up 
valid_rh_tn14 = RHDMY14i INTERACT rhim_r14 
unrecognized_rh_tn14a = RHDMY14i NOT valid_rh_tn14 
unrecognized_rh_tn_body_with_vtin13 = rhim_r14a INTERACT rhim_r14_body_and_via_up 
unrecognized_rh_tn14 = unrecognized_rh_tn14a OR unrecognized_rh_tn_body_with_vtin13 
unrecognized_rh_tn_tmp14 = unrecognized_rh_tn_tmp13 OR unrecognized_rh_tn14 

//* Define layer -- rhim_r15a
rhim_r15a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r15a = rhim_r15a_tmp01 AND RHDMY15i

rhim_r15_body_and_via_up = rhim_r15a AND VIA14i 
rhim_r15 = rhim_r15a NOT INTERACT rhim_r15_body_and_via_up 
valid_rh_tn15 = RHDMY15i INTERACT rhim_r15 
unrecognized_rh_tn15a = RHDMY15i NOT valid_rh_tn15 
unrecognized_rh_tn_body_with_vtin14 = rhim_r15a INTERACT rhim_r15_body_and_via_up 
unrecognized_rh_tn15 = unrecognized_rh_tn15a OR unrecognized_rh_tn_body_with_vtin14 
unrecognized_rh_tn_tmp15 = unrecognized_rh_tn_tmp14 OR unrecognized_rh_tn15 
valid_rh_tn16 = RHDMY16i INTERACT rhim_r16 
unrecognized_rh_tn16a = RHDMY16i NOT valid_rh_tn16 
unrecognized_rh_tn_body_with_vtin15 = rhim_r16a INTERACT rhim_r16_body_and_via_up 
unrecognized_rh_tn16 = unrecognized_rh_tn16a OR unrecognized_rh_tn_body_with_vtin15 
unrecognized_rh_tn_tmp16 = unrecognized_rh_tn_tmp15 OR unrecognized_rh_tn16 

//* Define layer -- rhim_r17a
rhim_r17a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r17a = rhim_r17a_tmp01 AND RHDMY17i

rhim_r17_body_and_via_up = rhim_r17a AND VIA16i 
rhim_r17 = rhim_r17a NOT INTERACT rhim_r17_body_and_via_up 
valid_rh_tn17 = RHDMY17i INTERACT rhim_r17 
unrecognized_rh_tn17a = RHDMY17i NOT valid_rh_tn17 
unrecognized_rh_tn_body_with_vtin16 = rhim_r17a INTERACT rhim_r17_body_and_via_up 
unrecognized_rh_tn17 = unrecognized_rh_tn17a OR unrecognized_rh_tn_body_with_vtin16 
unrecognized_rh_tn_tmp17 = unrecognized_rh_tn_tmp16 OR unrecognized_rh_tn17 
unrecognized_rh_tn = COPY unrecognized_rh_tn_tmp17 

//***** Define connectivity/via layer -- mom1p1_b ****
mom1p11_b = M1_B AND MOMDMY_MXP1 
mom1p1_b = mom1p11_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom2minus_a ****
mom2minus_a = M2_A AND MOMDMY_MINUS 
ponnw_s = realpo_s NOT nxwell 
nponnw_s = ponnw_s AND NP  //  SRAM NMOS
ngate_s_normal1 = nponnw_s AND SRMDEV 
ngate_s_normal3 = ngate_s_normal1 INTERACT gate1 
ngate_s_normal = ngate_s_normal3 NOT RODMY_srm 
erc_nmos_gates = COPY tngate1 

//***** Define connectivity/via layer -- mom1m2_b ****
mom1m21_b = M1_B AND MOMDMY_MXP2 
mom1m2_b = mom1m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom5p1_a ****
mom5p11_a = M5_A AND MOMDMY_MXP1 
mom5p1_a = mom5p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom9p2_a ****
mom9p21_a = M9_A AND MOMDMY_MXP2 
mom9p2_a = mom9p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6p1_b ****
mom6p11_b = M6_B AND MOMDMY_MXP1 
mom6p1_b = mom6p11_b INTERACT MOMDMY_MXP12 
p_odtap_cpp85_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9_cpp57_ext_o 
p_odtap_cpp85_ext_2 = p_odtap_cpp85_ext_1 NOT INTERACT p_odtap_fb10_cpp57_ext_o 
p_odtap_cpp85_ext_3 = p_odtap_cpp85_ext_2 NOT INTERACT p_odtap_cpp57_ext_o 
p_odtap_cpp85_ext = p_odtap_cpp85_ext_3 INTERACT p_odtap_cpp85_ext_o 

//* Define layer -- mkr_cfi_n_core_gpoly_fb1_1
mkr_cfi_n_core_gpoly_fb1_1_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb1_1_tmp02 = mkr_cfi_n_core_gpoly_fb1_1_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb1_1_tmp03 = mkr_cfi_n_core_gpoly_fb1_1_tmp02 AND CPP57
mkr_cfi_n_core_gpoly_fb1_1 = mkr_cfi_n_core_gpoly_fb1_1_tmp03 AND CPP85


//* Define layer -- mkr_cfi_n_core_gpoly_fb1_2
mkr_cfi_n_core_gpoly_fb1_2_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb1_2_tmp02 = mkr_cfi_n_core_gpoly_fb1_2_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb1_2_tmp03 = mkr_cfi_n_core_gpoly_fb1_2_tmp02 AND CPP57
mkr_cfi_n_core_gpoly_fb1_2 = mkr_cfi_n_core_gpoly_fb1_2_tmp03 NOT CPP85

mkr_cfi_n_core_gpoly_fb1_region1 = mkr_cfi_n_core_gpoly_fb1_1 OR mkr_cfi_n_core_gpoly_fb1_2 

//* Define layer -- mkr_cfi_n_core_gpoly_fb1_3
mkr_cfi_n_core_gpoly_fb1_3_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb1_3_tmp02 = mkr_cfi_n_core_gpoly_fb1_3_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb1_3_tmp03 = mkr_cfi_n_core_gpoly_fb1_3_tmp02 NOT CPP57
mkr_cfi_n_core_gpoly_fb1_3 = mkr_cfi_n_core_gpoly_fb1_3_tmp03 AND CPP85

mkr_cfi_n_core_gpoly_fb1 = mkr_cfi_n_core_gpoly_fb1_region1 OR mkr_cfi_n_core_gpoly_fb1_3 

//***** Define connectivity/via layer -- RH_TN_14 ****
RH_TN_14 = RH_TN_all NOT rhim_r14 
gate1_not_IO2a = COPY gate1 
gate1_not_IO2b = gate1_not_IO2a NOT PODE_GATE 
gate1_not_IO2 = gate1_not_IO2b NOT OD2 

//***** Define connectivity/via layer -- RH_TN_8 ****
RH_TN_8 = RH_TN_all NOT rhim_r8 

//***** Define connectivity/via layer -- p_pode_lvt ****
ppode_co_l = ppoly_co_la AND PODE_3T 
p_pode_lvt = ppode_co_l NOT all_mos_gates 

//***** Define connectivity/via layer -- p_pode_elvt ****
ppode_co_el = ppoly_co_ela AND PODE_3T 
p_pode_elvt = ppode_co_el NOT all_mos_gates 
tngate2 = tngate1 NOT PODE_GATE 
tngate3a = tngate2 NOT INTERACT SDI_2 

//***** Define connectivity/via layer -- mom8m1_a ****
mom8m11_a = M8_A AND MOMDMY_MXP1 
mom8m1_a = mom8m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom3m1_a ****
mom3m11_a = M3_A AND MOMDMY_MXP1 
mom3m1_a = mom3m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA10 ****
VIA10 = VIA10i NOT VTIN_10 

//***** Define connectivity/via layer -- mom9p1_a ****
mom9p11_a = M9_A AND MOMDMY_MXP1 
mom9p1_a = mom9p11_a INTERACT MOMDMY_MXP12 
TCDDMY1 = COPY TCDDMY 

//***** Define connectivity/via layer -- mom4p1_b ****
mom4p11_b = M4_B AND MOMDMY_MXP1 
mom4p1_b = mom4p11_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom2p2_b ****
mom2p21_b = M2_B AND MOMDMY_MXP2 
mom2p2_b = mom2p21_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_gpoly_lvt ****
p_gpoly_lvt_all = ppoly_co_l NOT p_fpoly_lvt 
p_gpoly_lvt = p_gpoly_lvt_all NOT all_mos_gates 

//* Define layer -- M1_B_SRM01_1
M1_B_SRM01_1 = SRM AND SRM2014

M1_B_SRM01_region = COPY M1_B_SRM01_1 
M1_B_SRM01 = M1_B AND M1_B_SRM01_region 
MOM_field2 = metal2i AND MOMDMY2 
SHDMIM_TOP = TPC_FINAL AND MPC_FINAL 

//***** Define connectivity/via layer -- VIA1 ****
VIA1 = COPY VIA1i 
n_odtap_fb9_cpp51_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9_cpp57_ext_o 
n_odtap_fb9_cpp51_ext_2 = n_odtap_fb9_cpp51_ext_1 NOT INTERACT n_odtap_fb10_cpp57_ext_o 
n_odtap_fb9_cpp51_ext_3 = n_odtap_fb9_cpp51_ext_2 NOT INTERACT n_odtap_cpp57_ext_o 
n_odtap_fb9_cpp51_ext_4 = n_odtap_fb9_cpp51_ext_3 NOT INTERACT n_odtap_cpp85_ext_o 
n_odtap_fb9_cpp51_ext = n_odtap_fb9_cpp51_ext_4 INTERACT n_odtap_fb9_cpp51_ext_o 

//***** Define connectivity/via layer -- mom9p2_b ****
mom9p21_b = M9_B AND MOMDMY_MXP2 
mom9p2_b = mom9p21_b INTERACT MOMDMY_MXP12 
unrecognized_mos_7 = realpo NOT all_mos_gates 
unrecognized_mos_8 = unrecognized_mos_7 AND diff 
unrecognized_mos_2 = COPY BJTDMY 
unrecognized_mos_3 = unrecognized_mos_2 OR all_diode_rec 
unrecognized_mos_9 = unrecognized_mos_8 NOT unrecognized_mos_3 
unrecognized_mos_4 = NP AND nxwell 
unrecognized_mos_5 = PP AND psub 
unrecognized_mos_6 = unrecognized_mos_4 OR unrecognized_mos_5 
unrecognized_mos_10 = unrecognized_mos_9 NOT unrecognized_mos_6 
unrecognized_mos = unrecognized_mos_10 NOT SRM_all 
MOM_field7 = metal7i AND MOMDMY7 

//***** Define connectivity/via layer -- p_pode_ulvt ****
ppode_co_ul = ppoly_co_ula AND PODE_3T 
p_pode_ulvt = ppode_co_ul NOT all_mos_gates 

//***** Define connectivity/via layer -- MD_OD_P_CPP85 ****
MD_OD_P2 = MD_OD_P1 NOT SRM_all 
MD_OD_P_IO = MD_OD_P2 AND OD12 
MD_OD_P3 = MD_OD_P2 NOT MD_OD_P_IO 
MD_OD_P_CPP85 = MD_OD_P3 AND CPP85 

//***** Define connectivity/via layer -- mom8p2_b ****
mom8p21_b = M8_B AND MOMDMY_MXP2 
mom8p2_b = mom8p21_b INTERACT MOMDMY_MXP12 
mkr_vg = VG NOT mkr_vg_tie 

//***** Define connectivity/via layer -- mom3p2_a ****
mom3p21_a = M3_A AND MOMDMY_MXP2 
mom3p2_a = mom3p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_pode_io ****
ppode_io = ppoly_ioa AND PODE_3T 
p_pode_io = ppode_io NOT all_mos_gates 

//***** Define connectivity/via layer -- RV ****
RV_logic1 = RVi NOT RV_TPC_RDL 
RV_logic2 = RV_logic1 NOT RV_BPC_TPC 
RV_MTOP_BPC1 = RVi AND BPC_FINAL 
RV_MTOP_BPC = RV_MTOP_BPC1 AND M17 
RV_logic3 = RV_logic2 NOT RV_MTOP_BPC 
RV_logic4 = RV_logic3 NOT RV_MPC_RDL 
RV_logic = RV_logic4 NOT RV_MTOP_MPC 
RVa = RV_logic OR CBD 
RV = RVa OR CB 

//***** Define connectivity/via layer -- VTIN_2 ****
RH_TN_3a = RH_TN_all INTERACT RHDMY3i 
VTIN_2 = VIA2i AND RH_TN_3a 
MOM_field17 = metal17i AND MOMDMY17 

//***** Define connectivity/via layer -- RH_TN_11 ****
RH_TN_11 = RH_TN_all NOT rhim_r11 

//***** Define connectivity/via layer -- mom6p1 ****
mom6p1 = mom6p11 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom4p2_a ****
mom4p21_a = M4_A AND MOMDMY_MXP2 
mom4p2_a = mom4p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_pode_svt ****
ppode_co_s = ppoly_co_sa AND PODE_3T 
p_pode_svt = ppode_co_s NOT all_mos_gates 

//***** Define connectivity/via layer -- mom0p1_b ****
mom0p11_b = M0_B AND MOMDMY_MXP1 
mom0p1_b = mom0p11_b INTERACT MOMDMY_MXP12 

//* Define layer -- mkr_cfi_n_core_gpoly_fb9_cpp57_1
mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp01 = core_ngpoly_region AND FINFET_boundary9
mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp02 = mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp01 NOT FINFET_boundary10
mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp03 = mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp02 AND CPP57
mkr_cfi_n_core_gpoly_fb9_cpp57_1 = mkr_cfi_n_core_gpoly_fb9_cpp57_1_tmp03 NOT CPP85

mkr_cfi_n_core_gpoly_fb9_cpp57 = COPY mkr_cfi_n_core_gpoly_fb9_cpp57_1 
dio0 = mdiff INTERACT POi 

//***** Define connectivity/via layer -- mom2p2 ****
mom2p21 = M2 AND MOMDMY_MXP2 
mom2p2 = mom2p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- RH_TN_10 ****
RH_TN_10 = RH_TN_all NOT rhim_r10 

//***** Define connectivity/via layer -- TPC ****
TPC = TPC_FINAL OR TPCDMY 
MOM_field0 = metal0i AND MOMDMY0 
tpgate_cap18v_aux1 = tpgate1 AND CAP_18V 
vtypeflag_aux = DFM PROPERTY tpgate1 tpgate_cap18v_aux1 OVERLAP ABUT ALSO MULTI
[vtypeflag = 1*count(tpgate_cap18v_aux1)]

//***** Define connectivity/via layer -- nplug ****
nplug1 = tndiff_ori AND nxwell 
nplug2 = nplug1 AND plug_sel 
tpdiffco = tpdiff_ori INTERACT MD_valid 
nplug3 = nplug1 INTERACT tpdiffco 
nplug = nplug2 OR nplug3 
erc_pmos_gates = COPY tpgate1 

//***** Define connectivity/via layer -- MPC ****
MPC = MPC_FINAL OR MPCDMY 

//***** Define connectivity/via layer -- RH_TN_15 ****
RH_TN_15 = RH_TN_all NOT rhim_r15 

//***** Define connectivity/via layer -- mom2p2_a ****
mom2p21_a = M2_A AND MOMDMY_MXP2 
mom2p2_a = mom2p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom8m1_b ****
mom8m11_b = M8_B AND MOMDMY_MXP1 
mom8m1_b = mom8m11_b NOT INTERACT MOMDMY_MXP12 

//* Define layer -- mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1
mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1_tmp01 = core_ngpoly_region NOT FINFET_boundary9
mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1_tmp02 = mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1_tmp01 AND FINFET_boundary10
mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1 = mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1_tmp02 NOT CPP57

mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85 = COPY mkr_cfi_n_core_gpoly_fb10_cpp51_cpp85_1 

//***** Define connectivity/via layer -- mom3m2_b ****
mom3m21_b = M3_B AND MOMDMY_MXP2 
mom3m2_b = mom3m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6m1_a ****
mom6m11_a = M6_A AND MOMDMY_MXP1 
mom6m1_a = mom6m11_a NOT INTERACT MOMDMY_MXP12 

//* Define layer -- M1_A_SRM01_1
M1_A_SRM01_1 = SRM AND SRM2014

M1_A_SRM01_region = COPY M1_A_SRM01_1 
M1_A_SRM01 = M1_A AND M1_A_SRM01_region 

//***** Define connectivity/via layer -- mom5p2 ****
mom5p21 = M5 AND MOMDMY_MXP2 
mom5p2 = mom5p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- MD_OD_N_CPP85 ****
MD_OD_N_CPP85 = MD_OD_N3 AND CPP85 

//* Define layer -- M1_B_SRM02_1
M1_B_SRM02_1 = SRM AND SRM2013

M1_B_SRM02_region = COPY M1_B_SRM02_1 
M1_B_SRM02 = M1_B AND M1_B_SRM02_region 

//***** Define connectivity/via layer -- MD_OD_P ****
MD_OD_P = MD_OD_P3 NOT CPP85 

//***** Define connectivity/via layer -- ntap ****
xwell = NW OUTSIDE NWDMY 
ntapx = tndiff_ori AND xwell 
ntap1 = ntapx NOT BJTDMY 
ntap2 = ntap1 INTERACT plug_valid 
ntap3 = ntap1 INTERACT tpdiffco 
ntap = ntap2 OR ntap3 

//***** Define connectivity/via layer -- RH_TN_9 ****
RH_TN_9 = RH_TN_all NOT rhim_r9 
MOM_field3 = metal3i AND MOMDMY3 

//***** Define connectivity/via layer -- mom0p1_a ****
mom0p11_a = M0_A AND MOMDMY_MXP1 
mom0p1_a = mom0p11_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- BPC ****
BPC = BPC_FINAL OR BPCDMY 

//***** Define connectivity/via layer -- p_odtap_bjt ****
p_odtap_bjt = p_odtap2 AND tpdiff_bjt 

//* Define layer -- M1_A_SRM02_1
M1_A_SRM02_1 = SRM AND SRM2013

M1_A_SRM02_region = COPY M1_A_SRM02_1 
M1_A_SRM02 = M1_A AND M1_A_SRM02_region 
VAR_noRF = VAR NOT INTERACT RFDMY 
vargt1 = gatenw AND VAR_noRF 
var_exclude_layer = COPY PODE_GATE 
vargt2 = vargt1 NOT var_exclude_layer 

//***** Define connectivity/via layer -- mom3p2_b ****
mom3p21_b = M3_B AND MOMDMY_MXP2 
mom3p2_b = mom3p21_b INTERACT MOMDMY_MXP12 
nxwell_float1 = nxwell NOT INTERACT VAR  //  exclude nwell under VAR for floating nwell check
nxwell_float3 = nxwell_float1 NOT TCDOVL  //  exclude dummy nwell under TCDDMY
nxwell_dc3a = nxwell AND DC3 
nxwell_dc3 = nxwell_dc3a NOT INTERACT diff 
nxwell_float4 = nxwell_float3 NOT nxwell_dc3  //  exclude dummy nwell in dummy Cell3
nxwell_dc2_ioa = nxwell AND DC2_IO_FB2 
nxwell_dc2_io = nxwell_dc2_ioa NOT INTERACT diff 
nxwell_float5 = nxwell_float4 NOT nxwell_dc2_io  //  exclude dummy nwell in dummy Cell2_IO
nxwell_sealring1 = nxwell AND SEALRING_ALL 
nxwell_sealring = nxwell_sealring1 NOT INTERACT diff 
nxwell_float = nxwell_float5 NOT nxwell_sealring  //  exclude dummy nwell in sealring_all layer

//***** Define connectivity/via layer -- mom7plus_b ****
mom7plus_b = M7_B AND MOMDMY_PLUS 

//* Define layer -- mkr_cfi_p_core_gpoly_fb10_cpp57_1
mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp01 = core_pgpoly_region NOT FINFET_boundary9
mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp02 = mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp01 AND FINFET_boundary10
mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp03 = mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp02 AND CPP57
mkr_cfi_p_core_gpoly_fb10_cpp57_1 = mkr_cfi_p_core_gpoly_fb10_cpp57_1_tmp03 NOT CPP85

mkr_cfi_p_core_gpoly_fb10_cpp57 = COPY mkr_cfi_p_core_gpoly_fb10_cpp57_1 

//***** Define connectivity/via layer -- VIA2 ****
VIA2 = VIA2i NOT VTIN_2 
MOM_field6 = metal6i AND MOMDMY6 

//***** Define connectivity/via layer -- mom7m1_b ****
mom7m11_b = M7_B AND MOMDMY_MXP1 
mom7m1_b = mom7m11_b NOT INTERACT MOMDMY_MXP12 
all_sd = tndiff_ori OR tpdiff_ori  //  for layout effect measurement

//***** Define connectivity/via layer -- mom4minus ****
mom4minus = M4 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom2minus ****
mom2minus = M2 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom8p2_a ****
mom8p21_a = M8_A AND MOMDMY_MXP2 
mom8p2_a = mom8p21_a INTERACT MOMDMY_MXP12 
rwdio1 = DNW NOT nxwell 

//***** Define connectivity/via layer -- mom5m2 ****
mom5m2 = mom5p21 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom7p1_b ****
mom7p11_b = M7_B AND MOMDMY_MXP1 
mom7p1_b = mom7p11_b INTERACT MOMDMY_MXP12 
SRDPO = COPY SR_DPO 
MOM_field14 = metal14i AND MOMDMY14 
SHDMIM_BOT = MPC_FINAL AND BPC_FINAL 
ngate_hia_reg = tngate2 INTERACT SDI_2 

//***** Define connectivity/via layer -- mom9minus ****
mom9minus = M9 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom9minus_a ****
mom9minus_a = M9_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom5m2_a ****
mom5m21_a = M5_A AND MOMDMY_MXP2 
mom5m2_a = mom5m21_a NOT INTERACT MOMDMY_MXP12 
dfm_gate1a = gate1 NOT INTERACT SRM_all 
dfm_gate1 = dfm_gate1a NOT PODE_3T 

//***** Define connectivity/via layer -- mom7m1_a ****
mom7m11_a = M7_A AND MOMDMY_MXP1 
mom7m1_a = mom7m11_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- RV_BPC_RDL ****
RV_BPC_RDL1 = RV_TPC_RDL1 AND BPC_FINAL 
RV_BPC_RDL = RV_BPC_RDL1 NOT TPC_FINAL 

//***** Define connectivity/via layer -- dnwc ****
dnwc1 = DNW AND nxwell 
dnwc = dnwc1 NOT TCDOVL 
gate_and_p57 = gate_core_4t AND CPP57 
gate_and_p85 = gate_core_4t AND CPP85 
ppitch_aux = DFM PROPERTY gate_core_4t gate_and_p57 gate_and_p85 OVERLAP ABUT ALSO MULTI
[ppitch = 1*count(gate_and_p57) + 2*count(gate_and_p85) ]
p_odtap_cpp57_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9_cpp57_ext_o 
p_odtap_cpp57_ext_2 = p_odtap_cpp57_ext_1 NOT INTERACT p_odtap_fb10_cpp57_ext_o 
p_odtap_cpp57_ext = p_odtap_cpp57_ext_2 INTERACT p_odtap_cpp57_ext_o 

//***** Define connectivity/via layer -- VIA12 ****
VIA12 = VIA12i NOT VTIN_12 

//***** Define connectivity/via layer -- mom0m1_a ****
mom0m11_a = M0_A AND MOMDMY_MXP1 
mom0m1_a = mom0m11_a NOT INTERACT MOMDMY_MXP12 

//* Define layer -- M0_A_SRM03_1
M0_A_SRM03_1 = SRM AND SRM2030


//* Define layer -- M0_A_SRM03_2
M0_A_SRM03_2 = SRM AND SRM2022

M0_A_SRM03_region = M0_A_SRM03_1 OR M0_A_SRM03_2 
M0_A_SRM03 = M0_A AND M0_A_SRM03_region 

//***** Define connectivity/via layer -- mom4m1_b ****
mom4m11_b = M4_B AND MOMDMY_MXP1 
mom4m1_b = mom4m11_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom7p2_a ****
mom7p21_a = M7_A AND MOMDMY_MXP2 
mom7p2_a = mom7p21_a INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom4p2 ****
mom4p2 = mom4p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6minus_a ****
mom6minus_a = M6_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom3m1_b ****
mom3m11_b = M3_B AND MOMDMY_MXP1 
mom3m1_b = mom3m11_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA5 ****
VIA5 = VIA5i NOT VTIN_5 

//***** Define connectivity/via layer -- mom2p1 ****
mom2p1 = mom2p11 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom2m2_b ****
mom2m21_b = M2_B AND MOMDMY_MXP2 
mom2m2_b = mom2m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6m2 ****
mom6p21 = M6 AND MOMDMY_MXP2 
mom6m2 = mom6p21 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom7p2 ****
mom7p2 = mom7p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom9m2 ****
mom9m2 = mom9p21 NOT INTERACT MOMDMY_MXP12 
MOM_field15 = metal15i AND MOMDMY15 
p_odtap_fb10_cpp57_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9_cpp57_ext_o 
p_odtap_fb10_cpp57_ext = p_odtap_fb10_cpp57_ext_1 INTERACT p_odtap_fb10_cpp57_ext_o 
tngate3b = tngate3a NOT FILLER_MOS 

//***** Define connectivity/via layer -- mom2m2 ****
mom2m2 = mom2p21 NOT INTERACT MOMDMY_MXP12 
MOM_field9 = metal9i AND MOMDMY9 
core_pmos_gates = tpgate1 NOT OD2 

//***** Define connectivity/via layer -- VIA3 ****
VIA3 = VIA3i NOT VTIN_3 

//***** Define connectivity/via layer -- MD_STI_SRM ****
MD_STI_SRM = MD_STIb AND SRM_all 

//***** Define connectivity/via layer -- p_pode_lvtll ****
ppode_co_lll = ppoly_co_llla AND PODE_3T 
p_pode_lvtll = ppode_co_lll NOT all_mos_gates 

//***** Define connectivity/via layer -- mom6m2_a ****
mom6m21_a = M6_A AND MOMDMY_MXP2 
mom6m2_a = mom6m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom3m2 ****
mom3p21 = M3 AND MOMDMY_MXP2 
mom3m2 = mom3p21 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- n_gpoly_io ****
n_gpoly_io = n_gpoly_io1 NOT n_gpoly_nocg_io 

//***** Define connectivity/via layer -- mom7plus ****
mom7plus = M7 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom8plus_b ****
mom8plus_b = M8_B AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom8p1 ****
mom8p1 = mom8p11 INTERACT MOMDMY_MXP12 
all_npode_gate1 = tngate0 NOT pode_r_92_exclude_layer 
all_npode_gate = all_npode_gate1 AND PODE_GATE 
all_abut_npode_gate = all_npode_gate INTERACT tndiff_ori == 2
match_gate = gate NOT PODE_3T  //  Only support Core and IO
v_shrink = SHRINK ANARRAY_HS TOP BY ANARRAY_SHRINK BOTTOM BY ANARRAY_SHRINK
v_edge1 = GROW v_shrink TOP BY ANARRAY_SHRINK BOTTOM BY ANARRAY_SHRINK
v_edge = v_edge1 NOT v_shrink  //  define edge region
inner_reg1 = ANARRAY_HS NOT v_edge 
h_shrink = SHRINK ANARRAY_HS RIGHT BY ANARRAY_SHRINK LEFT BY ANARRAY_SHRINK
h_edge1 = GROW h_shrink RIGHT BY ANARRAY_SHRINK LEFT BY ANARRAY_SHRINK
h_edge = h_edge1 NOT h_shrink  //  define edge region
inner_reg = inner_reg1 NOT h_edge  //  define inner region
gate_inr1 = match_gate AND inner_reg 
gate_cut = match_gate CUT inner_reg
gate_inr = gate_inr1 NOT gate_cut  //  Only inside inner region 
gate_hs = match_gate AND ANARRAY_HS 
gate_edg = gate_hs NOT gate_inr  //  outside inner and cut inner belongs to edge
matching_aux = DFM PROPERTY match_gate gate_inr gate_edg OVERLAP ABUT ALSO MULTI
[matching_region = 1*count(gate_inr) + 2*count(gate_edg) ]
SRDOD = COPY SR_DOD 

//***** Define connectivity/via layer -- mom8plus ****
mom8plus = M8 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom2plus ****
mom2plus = M2 AND MOMDMY_PLUS 
MOM_field13 = metal13i AND MOMDMY13 

//***** Define connectivity/via layer -- VIA4 ****
VIA4 = VIA4i NOT VTIN_4 

//***** Define connectivity/via layer -- mom5p1_b ****
mom5p11_b = M5_B AND MOMDMY_MXP1 
mom5p1_b = mom5p11_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom7m2_b ****
mom7m21_b = M7_B AND MOMDMY_MXP2 
mom7m2_b = mom7m21_b NOT INTERACT MOMDMY_MXP12 
n_odtap_fb9_cpp57_ext = n_odtap_ext_all INTERACT n_odtap_fb9_cpp57_ext_o 

//***** Define connectivity/via layer -- mom4p1 ****
mom4p1 = mom4p11 INTERACT MOMDMY_MXP12 
p_gpoly_elvt_all = ppoly_co_el NOT p_fpoly_elvt 
p_gpoly_elvt = p_gpoly_elvt_all NOT all_mos_gates 
core_p_gpoly1 = COPY p_gpoly_svt 
core_p_gpoly2 = p_gpoly_lvt OR core_p_gpoly1 
core_p_gpoly3 = p_gpoly_ulvt OR core_p_gpoly2 
core_p_gpoly4 = p_gpoly_elvt OR core_p_gpoly3 
core_p_gpoly5 = p_gpoly_lvtll OR core_p_gpoly4 
core_p_gpoly6 = p_gpoly_ulvtll OR core_p_gpoly5 
core_pmos_gate1 = COPY pch_svt_mac_gate 
core_pmos_gate2 = pch_lvt_mac_gate OR core_pmos_gate1 
core_pmos_gate3 = pch_ulvt_mac_gate OR core_pmos_gate2 
core_pmos_gate4 = pch_elvt_mac_gate OR core_pmos_gate3 
core_pmos_gate5 = pch_lvtll_mac_gate OR core_pmos_gate4 
core_pmos_gate6 = pch_ulvtll_mac_gate OR core_pmos_gate5 
core_pgpoly_region1 = core_p_gpoly6 OR core_pmos_gate6 
core_pmpode_gate1 = COPY pch_mpodesvt_mac_gate 
core_pmpode_gate2 = pch_mpodelvt_mac_gate OR core_pmpode_gate1 
core_pmpode_gate3 = pch_mpodeulvt_mac_gate OR core_pmpode_gate2 
core_pmpode_gate4 = pch_mpodeelvt_mac_gate OR core_pmpode_gate3 
core_pmpode_gate5 = pch_mpodelvtll_mac_gate OR core_pmpode_gate4 
core_pmpode_gate6 = pch_mpodeulvtll_mac_gate OR core_pmpode_gate5 
core_pgpoly_region2 = core_pgpoly_region1 OR core_pmpode_gate6 
core_pflr_gate1 = COPY pch_flrsvt_mac_gate 
core_pflr_gate2 = pch_flrlvt_mac_gate OR core_pflr_gate1 
core_pflr_gate3 = pch_flrulvt_mac_gate OR core_pflr_gate2 
core_pflr_gate4 = pch_flrelvt_mac_gate OR core_pflr_gate3 
core_pflr_gate5 = pch_flrlvtll_mac_gate OR core_pflr_gate4 
core_pflr_gate6 = pch_flrulvtll_mac_gate OR core_pflr_gate5 
core_pgpoly_region3 = core_pgpoly_region2 OR core_pflr_gate6 
core_p_pode_gate1 = COPY ppode_svt_mac_gate 
core_p_pode_gate2 = ppode_lvt_mac_gate OR core_p_pode_gate1 
core_p_pode_gate3 = ppode_ulvt_mac_gate OR core_p_pode_gate2 
core_p_pode_gate4 = ppode_elvt_mac_gate OR core_p_pode_gate3 
core_p_pode_gate5 = ppode_lvtll_mac_gate OR core_p_pode_gate4 
core_p_pode_gate6 = ppode_ulvtll_mac_gate OR core_p_pode_gate5 
core_pgpoly_region4 = core_pgpoly_region3 OR core_p_pode_gate6 
core_p_pode1 = COPY p_pode_svt 
core_p_pode2 = p_pode_lvt OR core_p_pode1 
core_p_pode3 = p_pode_ulvt OR core_p_pode2 
core_p_pode4 = p_pode_elvt OR core_p_pode3 
core_p_pode5 = p_pode_lvtll OR core_p_pode4 
core_p_pode6 = p_pode_ulvtll OR core_p_pode5 
core_pgpoly_region5 = core_pgpoly_region4 OR core_p_pode6 
core_pgpoly_region = core_pgpoly_region5 OR p_gpoly_nocg_ulvt 
COD_H_Output_all1 = COD_H_Output OR COD_Hi 
COD_H_Output_all2 = COD_H_Output_all1 OR DCOD_Hi 
COD_H_Output_all = COD_H_Output_all2 OR GCOD_Hi 

//***** Define connectivity/via layer -- RH_TN_17 ****
RH_TN_17 = RH_TN_all NOT rhim_r17 

//***** Define connectivity/via layer -- VIA11 ****
VIA11 = VIA11i NOT VTIN_11 

//***** Define connectivity/via layer -- mom5plus ****
mom5plus = M5 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom3p2 ****
mom3p2 = mom3p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom4m2_a ****
mom4m21_a = M4_A AND MOMDMY_MXP2 
mom4m2_a = mom4m21_a NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom9m1 ****
mom9m1 = mom9p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- VIA6 ****
VIA6 = VIA6i NOT VTIN_6 

//***** Define connectivity/via layer -- mom8m2_b ****
mom8m21_b = M8_B AND MOMDMY_MXP2 
mom8m2_b = mom8m21_b NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom6p2 ****
mom6p2 = mom6p21 INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom1plus_b ****
mom1plus_b = M1_B AND MOMDMY_PLUS 
MOM_field16 = metal16i AND MOMDMY16 

//***** Define connectivity/via layer -- mom4minus_a ****
mom4minus_a = M4_A AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- n_pplug ****
n_pplug1 = tpdiff_ori AND plug_sel 
n_pplug2 = n_pplug1 NOT nxwell 
rwel = psub INSIDE DNW 
n_pplug3 = n_pplug2 NOT rwel 
n_pplug4 = n_pplug3 AND n_psub 
n_pplug = n_pplug4 NOT TCDOVL 

//***** Define connectivity/via layer -- M0_VDR_TAP ****
M0_AB = M0_A OR M0_B 
M0_VDR_TAP = VDRi AND M0_AB 

//* Define layer -- mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1
mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1_tmp01 = core_pgpoly_region AND FINFET_boundary9
mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1_tmp02 = mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1_tmp01 NOT FINFET_boundary10
mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1 = mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1_tmp02 NOT CPP57

mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85 = COPY mkr_cfi_p_core_gpoly_fb9_cpp51_cpp85_1 
gate_mac1 = tngate1 OR tpgate1 
gate_mac2 = gate_mac1 NOT PODE_3T  //  for layout effect measurement
gate_mac = gate_mac2 TOUCH all_sd == 2

//***** Define connectivity/via layer -- mom3m1 ****
mom3m1 = mom3p11 NOT INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom0m1_b ****
mom0m11_b = M0_B AND MOMDMY_MXP1 
mom0m1_b = mom0m11_b NOT INTERACT MOMDMY_MXP12 
n_odtap_cpp57_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9_cpp57_ext_o 
n_odtap_cpp57_ext_2 = n_odtap_cpp57_ext_1 NOT INTERACT n_odtap_fb10_cpp57_ext_o 
n_odtap_cpp57_ext = n_odtap_cpp57_ext_2 INTERACT n_odtap_cpp57_ext_o 
p_odtap_fb9_cpp57_ext = p_odtap_ext_all INTERACT p_odtap_fb9_cpp57_ext_o 

//***** Define connectivity/via layer -- mom0p2_b ****
mom0p21_b = M0_B AND MOMDMY_MXP2 
mom0p2_b = mom0p21_b INTERACT MOMDMY_MXP12 

//***** Define connectivity/via layer -- ptap ****
ptap1 = tpdiff_ori AND psub 
ptap3 = ptap1 AND plug_sel 
ptap4 = ptap1 INTERACT tndiffco 
ptap5 = ptap3 OR ptap4 
ptap = ptap5 NOT TCDOVL 
dnwdmy = DNW AND LVSDMY4 

//***** Define connectivity/via layer -- mom7m2_a ****
mom7m21_a = M7_A AND MOMDMY_MXP2 
mom7m2_a = mom7m21_a NOT INTERACT MOMDMY_MXP12 
MOM_field1 = metal1i AND MOMDMY1 
MOM_field8 = metal8i AND MOMDMY8 
mkr_VDR_MD_TAP_FB9 = VDR_MD_TAP INTERACT mkr_VDR_MD_TAP_FB9_o 

//***** Define connectivity/via layer -- n_odtap_srm ****
n_odtap_srm = n_odtap1 AND SRM_all 
MOM_M0 = M0_A OR M0_B 
MOM_M1 = M1_A OR M1_B 
MOM_M2_tmp0 = M2 OR M2_A 
MOM_M2 = MOM_M2_tmp0 OR M2_B 
MOM_M3_tmp0 = M3 OR M3_A 
MOM_M3 = MOM_M3_tmp0 OR M3_B 
MOM_M4_tmp0 = M4 OR M4_A 
MOM_M4 = MOM_M4_tmp0 OR M4_B 
MOM_M5_tmp0 = M5 OR M5_A 
MOM_M5 = MOM_M5_tmp0 OR M5_B 
MOM_M6_tmp0 = M6 OR M6_A 
MOM_M6 = MOM_M6_tmp0 OR M6_B 
MOM_M7_tmp0 = M7 OR M7_A 
MOM_M7 = MOM_M7_tmp0 OR M7_B 
MOM_M8_tmp0 = M8 OR M8_A 
MOM_M8 = MOM_M8_tmp0 OR M8_B 
MOM_M9_tmp0 = M9 OR M9_A 
MOM_M9 = MOM_M9_tmp0 OR M9_B 
MOM_M10_tmp0 = M10 OR M10_A 
MOM_M10 = MOM_M10_tmp0 OR M10_B 
MOM_M11_tmp0 = M11 OR M11_A 
MOM_M11 = MOM_M11_tmp0 OR M11_B 
MOM_M12_tmp0 = M12 OR M12_A 
MOM_M12 = MOM_M12_tmp0 OR M12_B 
MOM_M13_tmp0 = M13 OR M13_A 
MOM_M13 = MOM_M13_tmp0 OR M13_B 
MOM_M14 = COPY M14 
MOM_M15 = COPY M15 
MOM_M16 = COPY M16 
MOM_M17 = COPY M17 
MOMDMY_stop0 = MOMDMY0 NOT INTERACT MOM_field1 
MOMDMY_stop1 = MOMDMY1 NOT INTERACT MOM_field2 
MOMDMY_stop2 = MOMDMY2 NOT INTERACT MOM_field3 
MOMDMY_stop3 = MOMDMY3 NOT INTERACT MOM_field4 
MOMDMY_stop4 = MOMDMY4 NOT INTERACT MOM_field5 
MOMDMY_stop5 = MOMDMY5 NOT INTERACT MOM_field6 
MOMDMY_stop6 = MOMDMY6 NOT INTERACT MOM_field7 
MOMDMY_stop7 = MOMDMY7 NOT INTERACT MOM_field8 
MOMDMY_stop8 = MOMDMY8 NOT INTERACT MOM_field9 
MOMDMY_stop9 = MOMDMY9 NOT INTERACT MOM_field10 
MOMDMY_stop10 = MOMDMY10 NOT INTERACT MOM_field11 
MOMDMY_stop11 = MOMDMY11 NOT INTERACT MOM_field12 
MOMDMY_stop12 = MOMDMY12 NOT INTERACT MOM_field13 
MOMDMY_stop13 = MOMDMY13 NOT INTERACT MOM_field14 
MOMDMY_stop14 = MOMDMY14 NOT INTERACT MOM_field15 
MOMDMY_stop15 = MOMDMY15 NOT INTERACT MOM_field16 
MOMDMY_stop16 = MOMDMY16 NOT INTERACT MOM_field17 
MOMDMY_stop17 = COPY MOMDMY17 
MOMDMY_start0 = COPY MOMDMY0 
MOMDMY_start1_tmp0 = MOMDMY1 NOT INTERACT MOM_field0 
MOMDMY_start1 = MOMDMY_start1_tmp0 OR MOMDMY_start0 
MOMDMY_start2_tmp0 = MOMDMY2 NOT INTERACT MOM_field1 
MOMDMY_start2 = MOMDMY_start2_tmp0 OR MOMDMY_start1 
MOMDMY_start3_tmp0 = MOMDMY3 NOT INTERACT MOM_field2 
MOMDMY_start3 = MOMDMY_start3_tmp0 OR MOMDMY_start2 
MOMDMY_start4_tmp0 = MOMDMY4 NOT INTERACT MOM_field3 
MOMDMY_start4 = MOMDMY_start4_tmp0 OR MOMDMY_start3 
MOMDMY_start5_tmp0 = MOMDMY5 NOT INTERACT MOM_field4 
MOMDMY_start5 = MOMDMY_start5_tmp0 OR MOMDMY_start4 
MOMDMY_start6_tmp0 = MOMDMY6 NOT INTERACT MOM_field5 
MOMDMY_start6 = MOMDMY_start6_tmp0 OR MOMDMY_start5 
MOMDMY_start7_tmp0 = MOMDMY7 NOT INTERACT MOM_field6 
MOMDMY_start7 = MOMDMY_start7_tmp0 OR MOMDMY_start6 
MOMDMY_start8_tmp0 = MOMDMY8 NOT INTERACT MOM_field7 
MOMDMY_start8 = MOMDMY_start8_tmp0 OR MOMDMY_start7 
MOMDMY_start_tmp0 = MOMDMY9 NOT INTERACT MOM_field8 
MOMDMY_start = MOMDMY_start_tmp0 OR MOMDMY_start8 
MOMDMY1_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop1 
MOMDMY1_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop1 
MOMDMY1_REC_tmp2 = MOMDMY1_REC_tmp0 OR MOMDMY1_REC_tmp1 
MOMDMY1_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 10000 INSIDE OF LAYER MOMDMY1_REC_tmp2
MOMDMY2_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop2 
MOMDMY2_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop2 
MOMDMY2_REC_tmp2 = MOMDMY2_REC_tmp0 OR MOMDMY2_REC_tmp1 
MOMDMY2_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 10000 INSIDE OF LAYER MOMDMY2_REC_tmp2
MOMDMY3_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop3 
MOMDMY3_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop3 
MOMDMY3_REC_tmp2 = MOMDMY3_REC_tmp0 OR MOMDMY3_REC_tmp1 
MOMDMY3_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT3 10000 INSIDE OF LAYER MOMDMY3_REC_tmp2
MOMDMY4_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop4 
MOMDMY4_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop4 
MOMDMY4_REC_tmp2 = MOMDMY4_REC_tmp0 OR MOMDMY4_REC_tmp1 
MOMDMY4_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT4 10000 INSIDE OF LAYER MOMDMY4_REC_tmp2
MOMDMY5_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop5 
MOMDMY5_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop5 
MOMDMY5_REC_tmp2 = MOMDMY5_REC_tmp0 OR MOMDMY5_REC_tmp1 
MOMDMY5_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT5 10000 INSIDE OF LAYER MOMDMY5_REC_tmp2
MOMDMY6_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop6 
MOMDMY6_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop6 
MOMDMY6_REC_tmp2 = MOMDMY6_REC_tmp0 OR MOMDMY6_REC_tmp1 
MOMDMY6_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT6 10000 INSIDE OF LAYER MOMDMY6_REC_tmp2
MOMDMY7_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop7 
MOMDMY7_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop7 
MOMDMY7_REC_tmp2 = MOMDMY7_REC_tmp0 OR MOMDMY7_REC_tmp1 
MOMDMY7_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT7 10000 INSIDE OF LAYER MOMDMY7_REC_tmp2
MOMDMY8_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop8 
MOMDMY8_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop8 
MOMDMY8_REC_tmp2 = MOMDMY8_REC_tmp0 OR MOMDMY8_REC_tmp1 
MOMDMY8_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT8 10000 INSIDE OF LAYER MOMDMY8_REC_tmp2
MOMDMY9_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop9 
MOMDMY9_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop9 
MOMDMY9_REC_tmp2 = MOMDMY9_REC_tmp0 OR MOMDMY9_REC_tmp1 
MOMDMY9_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT9 10000 INSIDE OF LAYER MOMDMY9_REC_tmp2
MOMDMY10_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop10 
MOMDMY10_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop10 
MOMDMY10_REC_tmp2 = MOMDMY10_REC_tmp0 OR MOMDMY10_REC_tmp1 
MOMDMY10_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT10 10000 INSIDE OF LAYER MOMDMY10_REC_tmp2
MOMDMY11_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop11 
MOMDMY11_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop11 
MOMDMY11_REC_tmp2 = MOMDMY11_REC_tmp0 OR MOMDMY11_REC_tmp1 
MOMDMY11_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT11 10000 INSIDE OF LAYER MOMDMY11_REC_tmp2
MOMDMY12_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop12 
MOMDMY12_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop12 
MOMDMY12_REC_tmp2 = MOMDMY12_REC_tmp0 OR MOMDMY12_REC_tmp1 
MOMDMY12_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT12 10000 INSIDE OF LAYER MOMDMY12_REC_tmp2
MOMDMY13_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop13 
MOMDMY13_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop13 
MOMDMY13_REC_tmp2 = MOMDMY13_REC_tmp0 OR MOMDMY13_REC_tmp1 
MOMDMY13_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT13 10000 INSIDE OF LAYER MOMDMY13_REC_tmp2
MOMDMY14_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop14 
MOMDMY14_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop14 
MOMDMY14_REC_tmp2 = MOMDMY14_REC_tmp0 OR MOMDMY14_REC_tmp1 
MOMDMY14_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT14 10000 INSIDE OF LAYER MOMDMY14_REC_tmp2
MOMDMY15_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop15 
MOMDMY15_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop15 
MOMDMY15_REC_tmp2 = MOMDMY15_REC_tmp0 OR MOMDMY15_REC_tmp1 
MOMDMY15_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT15 10000 INSIDE OF LAYER MOMDMY15_REC_tmp2
MOMDMY16_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop16 
MOMDMY16_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop16 
MOMDMY16_REC_tmp2 = MOMDMY16_REC_tmp0 OR MOMDMY16_REC_tmp1 
MOMDMY16_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT16 10000 INSIDE OF LAYER MOMDMY16_REC_tmp2
MOMDMY17_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop17 
MOMDMY17_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop17 
MOMDMY17_REC_tmp2 = MOMDMY17_REC_tmp0 OR MOMDMY17_REC_tmp1 
MOMDMY17_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT17 10000 INSIDE OF LAYER MOMDMY17_REC_tmp2
MOM_LAYER_1 = MOMDMY1_REC OR MOMDMY2_REC 
MOM_LAYER_2 = MOM_LAYER_1 OR MOMDMY2_REC 
MOM_LAYER_3 = MOM_LAYER_2 OR MOMDMY3_REC 
MOM_LAYER_4 = MOM_LAYER_3 OR MOMDMY4_REC 
MOM_LAYER_5 = MOM_LAYER_4 OR MOMDMY5_REC 
MOM_LAYER_6 = MOM_LAYER_5 OR MOMDMY6_REC 
MOM_LAYER_7 = MOM_LAYER_6 OR MOMDMY7_REC 
MOM_LAYER_8 = MOM_LAYER_7 OR MOMDMY8_REC 
MOM_LAYER_9 = MOM_LAYER_8 OR MOMDMY9_REC 
MOM_LAYER_10 = MOM_LAYER_9 OR MOMDMY10_REC 
MOM_LAYER_11 = MOM_LAYER_10 OR MOMDMY11_REC 
MOM_LAYER_12 = MOM_LAYER_11 OR MOMDMY12_REC 
MOM_LAYER_13 = MOM_LAYER_12 OR MOMDMY13_REC 
MOM_LAYER_14 = MOM_LAYER_13 OR MOMDMY14_REC 
MOM_LAYER_15 = MOM_LAYER_14 OR MOMDMY15_REC 
MOM_LAYER_16 = MOM_LAYER_15 OR MOMDMY16_REC 
MOM_LAYER_17 = MOM_LAYER_16 OR MOMDMY17_REC 
MOMDMY_NW = MOMDMY_NWi OR MOMDMY_NW2i 
MOMDMY_PW = MOMDMY_PWi OR MOMDMY_PW2i 
MOMDMY_NTN = MOMDMY_NTNi OR MOMDMY_NTN2i 
MOMDMY_NW_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NWi 
MOMDMY_NW_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NW_SHIELD_tmp0 
MOMDMY_NW_SHIELD_tmp2 = MOMDMY_NW_SHIELD_tmp1 NOT INTERACT MOMDMY_PW 
MOMDMY_NW_SHIELD_tmp3 = MOMDMY_NW_SHIELD_tmp2 NOT INTERACT MOMDMY_NTN 
MOMDMY_NW_SHIELD_tmp4 = MOMDMY_NW_SHIELD_tmp3 INTERACT nxwell 
MOMDMY_NW_SHIELD = MOMDMY_NW_SHIELD_tmp4 NOT INTERACT MOMDMY_NW2i 
NW_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 10000 INSIDE OF LAYER MOMDMY_NW_SHIELD
MOMDMY_PW_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_PWi 
MOMDMY_PW_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_PW_SHIELD_tmp0 
MOMDMY_PW_SHIELD_tmp2 = MOMDMY_PW_SHIELD_tmp1 NOT INTERACT MOMDMY_NW 
MOMDMY_PW_SHIELD_tmp3 = MOMDMY_PW_SHIELD_tmp2 NOT INTERACT MOMDMY_NTN 
MOMDMY_PW_SHIELD = MOMDMY_PW_SHIELD_tmp3 NOT INTERACT MOMDMY_PW2i 
PW_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 10000 INSIDE OF LAYER MOMDMY_PW_SHIELD
MOMDMY_NTN_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NTNi 
MOMDMY_NTN_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NTN_SHIELD_tmp0 
MOMDMY_NTN_SHIELD_tmp2 = MOMDMY_NTN_SHIELD_tmp1 INTERACT NT_N 
MOMDMY_NTN_SHIELD_tmp3 = MOMDMY_NTN_SHIELD_tmp2 NOT INTERACT MOMDMY_NW 
MOMDMY_NTN_SHIELD_tmp4 = MOMDMY_NTN_SHIELD_tmp3 NOT INTERACT MOMDMY_PW 
MOMDMY_NTN_SHIELD = MOMDMY_NTN_SHIELD_tmp4 NOT INTERACT MOMDMY_NTN2i 
NTN_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT3 10000 INSIDE OF LAYER MOMDMY_NTN_SHIELD
MOMDMY_NW2_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NW2i 
MOMDMY_NW2_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NW2_SHIELD_tmp0 
MOMDMY_NW2_SHIELD_tmp2 = MOMDMY_NW2_SHIELD_tmp1 NOT INTERACT MOMDMY_PW 
MOMDMY_NW2_SHIELD_tmp3 = MOMDMY_NW2_SHIELD_tmp2 NOT INTERACT MOMDMY_NTN 
MOMDMY_NW2_SHIELD_tmp4 = MOMDMY_NW2_SHIELD_tmp3 INTERACT nxwell 
MOMDMY_NW2_SHIELD = MOMDMY_NW2_SHIELD_tmp4 NOT INTERACT MOMDMY_NWi 
NW2_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT4 10000 INSIDE OF LAYER MOMDMY_NW2_SHIELD
MOMDMY_PW2_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_PW2i 
MOMDMY_PW2_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_PW2_SHIELD_tmp0 
MOMDMY_PW2_SHIELD_tmp2 = MOMDMY_PW2_SHIELD_tmp1 NOT INTERACT MOMDMY_NW 
MOMDMY_PW2_SHIELD_tmp3 = MOMDMY_PW2_SHIELD_tmp2 NOT INTERACT MOMDMY_NTN 
MOMDMY_PW2_SHIELD = MOMDMY_PW2_SHIELD_tmp3 NOT INTERACT MOMDMY_PWi 
PW2_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT5 10000 INSIDE OF LAYER MOMDMY_PW2_SHIELD
MOMDMY_NTN2_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NTN2i 
MOMDMY_NTN2_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NTN2_SHIELD_tmp0 
MOMDMY_NTN2_SHIELD_tmp2 = MOMDMY_NTN2_SHIELD_tmp1 INTERACT NT_N 
MOMDMY_NTN2_SHIELD_tmp3 = MOMDMY_NTN2_SHIELD_tmp2 NOT INTERACT MOMDMY_NW 
MOMDMY_NTN2_SHIELD_tmp4 = MOMDMY_NTN2_SHIELD_tmp3 NOT INTERACT MOMDMY_PW 
MOMDMY_NTN2_SHIELD = MOMDMY_NTN2_SHIELD_tmp4 NOT INTERACT MOMDMY_NTNi 
NTN2_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT6 10000 INSIDE OF LAYER MOMDMY_NTN2_SHIELD
SHIELD_LAYER_1_tmp0 = PW_SHIELD_REC OR NTN_SHIELD_REC 
SHIELD_LAYER_1 = SHIELD_LAYER_1_tmp0 OR NW_SHIELD_REC 
SHIELD_LAYER_2_tmp0 = PW2_SHIELD_REC OR NTN2_SHIELD_REC 
SHIELD_LAYER_2 = SHIELD_LAYER_2_tmp0 OR NW2_SHIELD_REC 
SHIELD_LAYER = SHIELD_LAYER_1 OR SHIELD_LAYER_2 
MOMDMY0_1 = MOMDMY0 INTERACT MOM_field0 
MOMDMY1_1 = MOMDMY1 INTERACT MOM_field1 
MOMDMY2_1 = MOMDMY2 INTERACT MOM_field2 
MOMDMY3_1 = MOMDMY3 INTERACT MOM_field3 
MOMDMY4_1 = MOMDMY4 INTERACT MOM_field4 
MOMDMY5_1 = MOMDMY5 INTERACT MOM_field5 
MOMDMY6_1 = MOMDMY6 INTERACT MOM_field6 
MOMDMY7_1 = MOMDMY7 INTERACT MOM_field7 
MOMDMY8_1 = MOMDMY8 INTERACT MOM_field8 
MOMDMY9_1 = MOMDMY9 INTERACT MOM_field9 
MOMDMY10_1 = MOMDMY10 INTERACT MOM_field10 
MOMDMY11_1 = MOMDMY11 INTERACT MOM_field11 
MOMDMY12_1 = MOMDMY12 INTERACT MOM_field12 
MOMDMY13_1 = MOMDMY13 INTERACT MOM_field13 
MOMDMY14_1 = MOMDMY14 INTERACT MOM_field14 
MOMDMY15_1 = MOMDMY15 INTERACT MOM_field15 
MOMDMY16_1 = MOMDMY16 INTERACT MOM_field16 
MOMDMY17_1 = MOMDMY17 INTERACT MOM_field17 
MOMDMY_all0 = MOMDMY0_1 OR MOMDMY1_1 
MOMDMY_all1 = MOMDMY_all0 OR MOMDMY2_1 
MOMDMY_all2 = MOMDMY_all1 OR MOMDMY3_1 
MOMDMY_all3 = MOMDMY_all2 OR MOMDMY4_1 
MOMDMY_all4 = MOMDMY_all3 OR MOMDMY5_1 
MOMDMY_all5 = MOMDMY_all4 OR MOMDMY6_1 
MOMDMY_all6 = MOMDMY_all5 OR MOMDMY7_1 
MOMDMY_all7 = MOMDMY_all6 OR MOMDMY8_1 
MOMDMY_all8 = MOMDMY_all7 OR MOMDMY9_1 
MOMDMY_all9 = MOMDMY_all8 OR MOMDMY10_1 
MOMDMY_all10 = MOMDMY_all9 OR MOMDMY11_1 
MOMDMY_all11 = MOMDMY_all10 OR MOMDMY12_1 
MOMDMY_all12 = MOMDMY_all11 OR MOMDMY13_1 
MOMDMY_all13 = MOMDMY_all12 OR MOMDMY14_1 
MOMDMY_all14 = MOMDMY_all13 OR MOMDMY15_1 
MOMDMY_all15 = MOMDMY_all14 OR MOMDMY16_1 
MOMDMY_all = MOMDMY_all15 OR MOMDMY17_1 
cmom0_reg0 = MOMDMY0 INTERACT RTMOMDMY 
cmom0_reg1 = cmom0_reg0 NOT INTERACT MOMDMY_MX 
cmom0_reg2 = cmom0_reg1 NOT INTERACT RFDMY 
cmom0_reg = cmom0_reg2 NOT INTERACT MOMDMY_2T 
cmom0_reg_psub = cmom0_reg NOT INTERACT MOMDMY_NW 
cmom0_reg_nw = cmom0_reg INTERACT MOMDMY_NW 
cmom0_reg_2t = cmom0_reg1 INTERACT MOMDMY_2T 
cmom0_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom0_mx_reg1 = cmom0_mx_reg0 INTERACT MOMDMY0 
cmom0_mx_reg2 = COPY cmom0_mx_reg1 
cmom0_mx_reg3 = cmom0_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom0_mx_reg_4t = cmom0_mx_reg2 INTERACT MOMDMY_2T 
cmom0_mx_reg_4t_a = cmom0_mx_reg_4t INTERACT mom0p1_a 
cmom0_mx_reg_4t_b = cmom0_mx_reg_4t INTERACT mom0p1_b 
cmom0_mx_reg_nw = cmom0_mx_reg3 INTERACT MOMDMY_NW 
cmom0_mx_reg_nw_a = cmom0_mx_reg_nw INTERACT mom0p1_a 
cmom0_mx_reg_nw_b = cmom0_mx_reg_nw INTERACT mom0p1_b 
cmom0_mx_reg_psub = cmom0_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom0_mx_reg_psub_a = cmom0_mx_reg_psub INTERACT mom0p1_a 
cmom0_mx_reg_psub_b = cmom0_mx_reg_psub INTERACT mom0p1_b 
cmom0_rf_reg1 = MOMDMY0 INTERACT RFDMY 
cmom0_rf_reg2 = COPY cmom0_rf_reg1 
cmom0_rf_reg3 = cmom0_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom0_rf_reg4 = cmom0_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom0_rf_reg_psub = cmom0_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom0_rf_reg_nw = cmom0_rf_reg4 INTERACT MOMDMY_NW 
mom1_0 = MOMDMY1 NOT INTERACT MOM_field0 
cmom1_reg0 = mom1_0 INTERACT RTMOMDMY 
cmom1_reg1 = cmom1_reg0 NOT INTERACT MOMDMY_MX 
cmom1_reg2 = cmom1_reg1 NOT INTERACT RFDMY 
cmom1_reg = cmom1_reg2 NOT INTERACT MOMDMY_2T 
cmom1_reg_psub = cmom1_reg NOT INTERACT MOMDMY_NW 
cmom1_reg_nw = cmom1_reg INTERACT MOMDMY_NW 
cmom1_reg_2t = cmom1_reg1 INTERACT MOMDMY_2T 
cmom1_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom1_mx_reg1 = cmom1_mx_reg0 INTERACT mom1_0 
cmom1_mx_reg2 = COPY cmom1_mx_reg1 
cmom1_mx_reg3 = cmom1_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom1_mx_reg_4t = cmom1_mx_reg2 INTERACT MOMDMY_2T 
cmom1_mx_reg_4t_a = cmom1_mx_reg_4t INTERACT mom1p1_a 
cmom1_mx_reg_4t_b = cmom1_mx_reg_4t INTERACT mom1p1_b 
cmom1_mx_reg_nw = cmom1_mx_reg3 INTERACT MOMDMY_NW 
cmom1_mx_reg_nw_a = cmom1_mx_reg_nw INTERACT mom1p1_a 
cmom1_mx_reg_nw_b = cmom1_mx_reg_nw INTERACT mom1p1_b 
cmom1_mx_reg_psub = cmom1_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom1_mx_reg_psub_a = cmom1_mx_reg_psub INTERACT mom1p1_a 
cmom1_mx_reg_psub_b = cmom1_mx_reg_psub INTERACT mom1p1_b 
cmom1_rf_reg1 = mom1_0 INTERACT RFDMY 
cmom1_rf_reg2 = COPY cmom1_rf_reg1 
cmom1_rf_reg3 = cmom1_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom1_rf_reg4 = cmom1_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom1_rf_reg_psub = cmom1_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom1_rf_reg_nw = cmom1_rf_reg4 INTERACT MOMDMY_NW 
mom2_0 = MOMDMY2 NOT INTERACT MOM_field0 
mom2_1 = mom2_0 NOT INTERACT MOM_field1 
cmom2_reg0 = mom2_1 INTERACT RTMOMDMY 
cmom2_reg1 = cmom2_reg0 NOT INTERACT MOMDMY_MX 
cmom2_reg2 = cmom2_reg1 NOT INTERACT RFDMY 
cmom2_reg = cmom2_reg2 NOT INTERACT MOMDMY_2T 
cmom2_reg_psub1 = cmom2_reg NOT INTERACT MOMDMY_NW 
cmom2_reg_psub_non = cmom2_reg_psub1 INTERACT M2 
cmom2_reg_psub = cmom2_reg_psub1 NOT cmom2_reg_psub_non 
cmom2_reg_nw1 = cmom2_reg INTERACT MOMDMY_NW 
cmom2_reg_nw_non = cmom2_reg_nw1 INTERACT M2 
cmom2_reg_nw = cmom2_reg_nw1 NOT cmom2_reg_nw_non 
cmom2_reg3 = cmom2_reg1 INTERACT MOMDMY_2T 
cmom2_reg_2t_non = cmom2_reg3 INTERACT M2 
cmom2_reg_2t = cmom2_reg3 NOT cmom2_reg_2t_non 
cmom2_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom2_mx_reg1 = cmom2_mx_reg0 INTERACT mom2_1 
cmom2_mx_reg2 = COPY cmom2_mx_reg1 
cmom2_mx_reg3 = cmom2_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom2_mx_reg_4t = cmom2_mx_reg2 INTERACT MOMDMY_2T 
cmom2_mx_reg_4t_non = cmom2_mx_reg_4t INTERACT mom2p1 
cmom2_mx_reg_4t_a = cmom2_mx_reg_4t INTERACT mom2p1_a 
cmom2_mx_reg_4t_b = cmom2_mx_reg_4t INTERACT mom2p1_b 
cmom2_mx_reg_nw = cmom2_mx_reg3 INTERACT MOMDMY_NW 
cmom2_mx_reg_nw_a = cmom2_mx_reg_nw INTERACT mom2p1_a 
cmom2_mx_reg_nw_b = cmom2_mx_reg_nw INTERACT mom2p1_b 
cmom2_mx_reg_nw_non = cmom2_mx_reg_nw INTERACT mom2p1 
cmom2_mx_reg_psub = cmom2_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom2_mx_reg_psub_a = cmom2_mx_reg_psub INTERACT mom2p1_a 
cmom2_mx_reg_psub_b = cmom2_mx_reg_psub INTERACT mom2p1_b 
cmom2_mx_reg_psub_non = cmom2_mx_reg_psub INTERACT mom2p1 
cmom2_rf_reg1 = mom2_1 INTERACT RFDMY 
cmom2_rf_reg2 = COPY cmom2_rf_reg1 
cmom2_rf_reg3 = cmom2_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom2_rf_reg4 = cmom2_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom2_rf_reg_psub1 = cmom2_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom2_rf_reg_psub_non = cmom2_rf_reg_psub1 INTERACT M2 
cmom2_rf_reg_psub = cmom2_rf_reg_psub1 NOT cmom2_rf_reg_psub_non 
cmom2_rf_reg_nw1 = cmom2_rf_reg4 INTERACT MOMDMY_NW 
cmom2_rf_reg_nw_non = cmom2_rf_reg_nw1 INTERACT M2 
cmom2_rf_reg_nw = cmom2_rf_reg_nw1 NOT cmom2_rf_reg_nw_non 
mom3_0 = MOMDMY3 NOT INTERACT MOM_field0 
mom3_1 = mom3_0 NOT INTERACT MOM_field1 
mom3_2 = mom3_1 NOT INTERACT MOM_field2 
cmom3_reg0 = mom3_2 INTERACT RTMOMDMY 
cmom3_reg1 = cmom3_reg0 NOT INTERACT MOMDMY_MX 
cmom3_reg2 = cmom3_reg1 NOT INTERACT RFDMY 
cmom3_reg = cmom3_reg2 NOT INTERACT MOMDMY_2T 
cmom3_reg_psub1 = cmom3_reg NOT INTERACT MOMDMY_NW 
cmom3_reg_psub_non = cmom3_reg_psub1 INTERACT M3 
cmom3_reg_psub = cmom3_reg_psub1 NOT cmom3_reg_psub_non 
cmom3_reg_nw1 = cmom3_reg INTERACT MOMDMY_NW 
cmom3_reg_nw_non = cmom3_reg_nw1 INTERACT M3 
cmom3_reg_nw = cmom3_reg_nw1 NOT cmom3_reg_nw_non 
cmom3_reg3 = cmom3_reg1 INTERACT MOMDMY_2T 
cmom3_reg_2t_non = cmom3_reg3 INTERACT M3 
cmom3_reg_2t = cmom3_reg3 NOT cmom3_reg_2t_non 
cmom3_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom3_mx_reg1 = cmom3_mx_reg0 INTERACT mom3_2 
cmom3_mx_reg2 = COPY cmom3_mx_reg1 
cmom3_mx_reg3 = cmom3_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom3_mx_reg_4t = cmom3_mx_reg2 INTERACT MOMDMY_2T 
cmom3_mx_reg_4t_non = cmom3_mx_reg_4t INTERACT mom3p1 
cmom3_mx_reg_4t_a = cmom3_mx_reg_4t INTERACT mom3p1_a 
cmom3_mx_reg_4t_b = cmom3_mx_reg_4t INTERACT mom3p1_b 
cmom3_mx_reg_nw = cmom3_mx_reg3 INTERACT MOMDMY_NW 
cmom3_mx_reg_nw_a = cmom3_mx_reg_nw INTERACT mom3p1_a 
cmom3_mx_reg_nw_b = cmom3_mx_reg_nw INTERACT mom3p1_b 
cmom3_mx_reg_nw_non = cmom3_mx_reg_nw INTERACT mom3p1 
cmom3_mx_reg_psub = cmom3_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom3_mx_reg_psub_a = cmom3_mx_reg_psub INTERACT mom3p1_a 
cmom3_mx_reg_psub_b = cmom3_mx_reg_psub INTERACT mom3p1_b 
cmom3_mx_reg_psub_non = cmom3_mx_reg_psub INTERACT mom3p1 
cmom3_rf_reg1 = mom3_2 INTERACT RFDMY 
cmom3_rf_reg2 = COPY cmom3_rf_reg1 
cmom3_rf_reg3 = cmom3_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom3_rf_reg4 = cmom3_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom3_rf_reg_psub1 = cmom3_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom3_rf_reg_psub_non = cmom3_rf_reg_psub1 INTERACT M3 
cmom3_rf_reg_psub = cmom3_rf_reg_psub1 NOT cmom3_rf_reg_psub_non 
cmom3_rf_reg_nw1 = cmom3_rf_reg4 INTERACT MOMDMY_NW 
cmom3_rf_reg_nw_non = cmom3_rf_reg_nw1 INTERACT M3 
cmom3_rf_reg_nw = cmom3_rf_reg_nw1 NOT cmom3_rf_reg_nw_non 
mom4_0 = MOMDMY4 NOT INTERACT MOM_field0 
mom4_1 = mom4_0 NOT INTERACT MOM_field1 
mom4_2 = mom4_1 NOT INTERACT MOM_field2 
mom4_3 = mom4_2 NOT INTERACT MOM_field3 
cmom4_reg0 = mom4_3 INTERACT RTMOMDMY 
cmom4_reg1 = cmom4_reg0 NOT INTERACT MOMDMY_MX 
cmom4_reg2 = cmom4_reg1 NOT INTERACT RFDMY 
cmom4_reg = cmom4_reg2 NOT INTERACT MOMDMY_2T 
cmom4_reg_psub1 = cmom4_reg NOT INTERACT MOMDMY_NW 
cmom4_reg_psub_non = cmom4_reg_psub1 INTERACT M4 
cmom4_reg_psub = cmom4_reg_psub1 NOT cmom4_reg_psub_non 
cmom4_reg_nw1 = cmom4_reg INTERACT MOMDMY_NW 
cmom4_reg_nw_non = cmom4_reg_nw1 INTERACT M4 
cmom4_reg_nw = cmom4_reg_nw1 NOT cmom4_reg_nw_non 
cmom4_reg3 = cmom4_reg1 INTERACT MOMDMY_2T 
cmom4_reg_2t_non = cmom4_reg3 INTERACT M4 
cmom4_reg_2t = cmom4_reg3 NOT cmom4_reg_2t_non 
cmom4_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom4_mx_reg1 = cmom4_mx_reg0 INTERACT mom4_3 
cmom4_mx_reg2 = COPY cmom4_mx_reg1 
cmom4_mx_reg3 = cmom4_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom4_mx_reg_4t = cmom4_mx_reg2 INTERACT MOMDMY_2T 
cmom4_mx_reg_4t_non = cmom4_mx_reg_4t INTERACT mom4p1 
cmom4_mx_reg_4t_a = cmom4_mx_reg_4t INTERACT mom4p1_a 
cmom4_mx_reg_4t_b = cmom4_mx_reg_4t INTERACT mom4p1_b 
cmom4_mx_reg_nw = cmom4_mx_reg3 INTERACT MOMDMY_NW 
cmom4_mx_reg_nw_a = cmom4_mx_reg_nw INTERACT mom4p1_a 
cmom4_mx_reg_nw_b = cmom4_mx_reg_nw INTERACT mom4p1_b 
cmom4_mx_reg_nw_non = cmom4_mx_reg_nw INTERACT mom4p1 
cmom4_mx_reg_psub = cmom4_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom4_mx_reg_psub_a = cmom4_mx_reg_psub INTERACT mom4p1_a 
cmom4_mx_reg_psub_b = cmom4_mx_reg_psub INTERACT mom4p1_b 
cmom4_mx_reg_psub_non = cmom4_mx_reg_psub INTERACT mom4p1 
cmom4_rf_reg1 = mom4_3 INTERACT RFDMY 
cmom4_rf_reg2 = COPY cmom4_rf_reg1 
cmom4_rf_reg3 = cmom4_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom4_rf_reg4 = cmom4_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom4_rf_reg_psub1 = cmom4_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom4_rf_reg_psub_non = cmom4_rf_reg_psub1 INTERACT M4 
cmom4_rf_reg_psub = cmom4_rf_reg_psub1 NOT cmom4_rf_reg_psub_non 
cmom4_rf_reg_nw1 = cmom4_rf_reg4 INTERACT MOMDMY_NW 
cmom4_rf_reg_nw_non = cmom4_rf_reg_nw1 INTERACT M4 
cmom4_rf_reg_nw = cmom4_rf_reg_nw1 NOT cmom4_rf_reg_nw_non 
mom5_0 = MOMDMY5 NOT INTERACT MOM_field0 
mom5_1 = mom5_0 NOT INTERACT MOM_field1 
mom5_2 = mom5_1 NOT INTERACT MOM_field2 
mom5_3 = mom5_2 NOT INTERACT MOM_field3 
mom5_4 = mom5_3 NOT INTERACT MOM_field4 
cmom5_reg0 = mom5_4 INTERACT RTMOMDMY 
cmom5_reg1 = cmom5_reg0 NOT INTERACT MOMDMY_MX 
cmom5_reg2 = cmom5_reg1 NOT INTERACT RFDMY 
cmom5_reg = cmom5_reg2 NOT INTERACT MOMDMY_2T 
cmom5_reg_psub1 = cmom5_reg NOT INTERACT MOMDMY_NW 
cmom5_reg_psub_non = cmom5_reg_psub1 INTERACT M5 
cmom5_reg_psub = cmom5_reg_psub1 NOT cmom5_reg_psub_non 
cmom5_reg_nw1 = cmom5_reg INTERACT MOMDMY_NW 
cmom5_reg_nw_non = cmom5_reg_nw1 INTERACT M5 
cmom5_reg_nw = cmom5_reg_nw1 NOT cmom5_reg_nw_non 
cmom5_reg3 = cmom5_reg1 INTERACT MOMDMY_2T 
cmom5_reg_2t_non = cmom5_reg3 INTERACT M5 
cmom5_reg_2t = cmom5_reg3 NOT cmom5_reg_2t_non 
cmom5_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom5_mx_reg1 = cmom5_mx_reg0 INTERACT mom5_4 
cmom5_mx_reg2 = COPY cmom5_mx_reg1 
cmom5_mx_reg3 = cmom5_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom5_mx_reg_4t = cmom5_mx_reg2 INTERACT MOMDMY_2T 
cmom5_mx_reg_4t_non = cmom5_mx_reg_4t INTERACT mom5p1 
cmom5_mx_reg_4t_a = cmom5_mx_reg_4t INTERACT mom5p1_a 
cmom5_mx_reg_4t_b = cmom5_mx_reg_4t INTERACT mom5p1_b 
cmom5_mx_reg_nw = cmom5_mx_reg3 INTERACT MOMDMY_NW 
cmom5_mx_reg_nw_a = cmom5_mx_reg_nw INTERACT mom5p1_a 
cmom5_mx_reg_nw_b = cmom5_mx_reg_nw INTERACT mom5p1_b 
cmom5_mx_reg_nw_non = cmom5_mx_reg_nw INTERACT mom5p1 
cmom5_mx_reg_psub = cmom5_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom5_mx_reg_psub_a = cmom5_mx_reg_psub INTERACT mom5p1_a 
cmom5_mx_reg_psub_b = cmom5_mx_reg_psub INTERACT mom5p1_b 
cmom5_mx_reg_psub_non = cmom5_mx_reg_psub INTERACT mom5p1 
cmom5_rf_reg1 = mom5_4 INTERACT RFDMY 
cmom5_rf_reg2 = COPY cmom5_rf_reg1 
cmom5_rf_reg3 = cmom5_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom5_rf_reg4 = cmom5_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom5_rf_reg_psub1 = cmom5_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom5_rf_reg_psub_non = cmom5_rf_reg_psub1 INTERACT M5 
cmom5_rf_reg_psub = cmom5_rf_reg_psub1 NOT cmom5_rf_reg_psub_non 
cmom5_rf_reg_nw1 = cmom5_rf_reg4 INTERACT MOMDMY_NW 
cmom5_rf_reg_nw_non = cmom5_rf_reg_nw1 INTERACT M5 
cmom5_rf_reg_nw = cmom5_rf_reg_nw1 NOT cmom5_rf_reg_nw_non 
mom6_0 = MOMDMY6 NOT INTERACT MOM_field0 
mom6_1 = mom6_0 NOT INTERACT MOM_field1 
mom6_2 = mom6_1 NOT INTERACT MOM_field2 
mom6_3 = mom6_2 NOT INTERACT MOM_field3 
mom6_4 = mom6_3 NOT INTERACT MOM_field4 
mom6_5 = mom6_4 NOT INTERACT MOM_field5 
cmom6_reg0 = mom6_5 INTERACT RTMOMDMY 
cmom6_reg1 = cmom6_reg0 NOT INTERACT MOMDMY_MX 
cmom6_reg2 = cmom6_reg1 NOT INTERACT RFDMY 
cmom6_reg = cmom6_reg2 NOT INTERACT MOMDMY_2T 
cmom6_reg_psub1 = cmom6_reg NOT INTERACT MOMDMY_NW 
cmom6_reg_psub_non = cmom6_reg_psub1 INTERACT M6 
cmom6_reg_psub = cmom6_reg_psub1 NOT cmom6_reg_psub_non 
cmom6_reg_nw1 = cmom6_reg INTERACT MOMDMY_NW 
cmom6_reg_nw_non = cmom6_reg_nw1 INTERACT M6 
cmom6_reg_nw = cmom6_reg_nw1 NOT cmom6_reg_nw_non 
cmom6_reg3 = cmom6_reg1 INTERACT MOMDMY_2T 
cmom6_reg_2t_non = cmom6_reg3 INTERACT M6 
cmom6_reg_2t = cmom6_reg3 NOT cmom6_reg_2t_non 
cmom6_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom6_mx_reg1 = cmom6_mx_reg0 INTERACT mom6_5 
cmom6_mx_reg2 = COPY cmom6_mx_reg1 
cmom6_mx_reg3 = cmom6_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom6_mx_reg_4t = cmom6_mx_reg2 INTERACT MOMDMY_2T 
cmom6_mx_reg_4t_non = cmom6_mx_reg_4t INTERACT mom6p1 
cmom6_mx_reg_4t_a = cmom6_mx_reg_4t INTERACT mom6p1_a 
cmom6_mx_reg_4t_b = cmom6_mx_reg_4t INTERACT mom6p1_b 
cmom6_mx_reg_nw = cmom6_mx_reg3 INTERACT MOMDMY_NW 
cmom6_mx_reg_nw_a = cmom6_mx_reg_nw INTERACT mom6p1_a 
cmom6_mx_reg_nw_b = cmom6_mx_reg_nw INTERACT mom6p1_b 
cmom6_mx_reg_nw_non = cmom6_mx_reg_nw INTERACT mom6p1 
cmom6_mx_reg_psub = cmom6_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom6_mx_reg_psub_a = cmom6_mx_reg_psub INTERACT mom6p1_a 
cmom6_mx_reg_psub_b = cmom6_mx_reg_psub INTERACT mom6p1_b 
cmom6_mx_reg_psub_non = cmom6_mx_reg_psub INTERACT mom6p1 
cmom6_rf_reg1 = mom6_5 INTERACT RFDMY 
cmom6_rf_reg2 = COPY cmom6_rf_reg1 
cmom6_rf_reg3 = cmom6_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom6_rf_reg4 = cmom6_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom6_rf_reg_psub1 = cmom6_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom6_rf_reg_psub_non = cmom6_rf_reg_psub1 INTERACT M6 
cmom6_rf_reg_psub = cmom6_rf_reg_psub1 NOT cmom6_rf_reg_psub_non 
cmom6_rf_reg_nw1 = cmom6_rf_reg4 INTERACT MOMDMY_NW 
cmom6_rf_reg_nw_non = cmom6_rf_reg_nw1 INTERACT M6 
cmom6_rf_reg_nw = cmom6_rf_reg_nw1 NOT cmom6_rf_reg_nw_non 
mom7_0 = MOMDMY7 NOT INTERACT MOM_field0 
mom7_1 = mom7_0 NOT INTERACT MOM_field1 
mom7_2 = mom7_1 NOT INTERACT MOM_field2 
mom7_3 = mom7_2 NOT INTERACT MOM_field3 
mom7_4 = mom7_3 NOT INTERACT MOM_field4 
mom7_5 = mom7_4 NOT INTERACT MOM_field5 
mom7_6 = mom7_5 NOT INTERACT MOM_field6 
cmom7_reg0 = mom7_6 INTERACT RTMOMDMY 
cmom7_reg1 = cmom7_reg0 NOT INTERACT MOMDMY_MX 
cmom7_reg2 = cmom7_reg1 NOT INTERACT RFDMY 
cmom7_reg = cmom7_reg2 NOT INTERACT MOMDMY_2T 
cmom7_reg_psub1 = cmom7_reg NOT INTERACT MOMDMY_NW 
cmom7_reg_psub_non = cmom7_reg_psub1 INTERACT M7 
cmom7_reg_psub = cmom7_reg_psub1 NOT cmom7_reg_psub_non 
cmom7_reg_nw1 = cmom7_reg INTERACT MOMDMY_NW 
cmom7_reg_nw_non = cmom7_reg_nw1 INTERACT M7 
cmom7_reg_nw = cmom7_reg_nw1 NOT cmom7_reg_nw_non 
cmom7_reg3 = cmom7_reg1 INTERACT MOMDMY_2T 
cmom7_reg_2t_non = cmom7_reg3 INTERACT M7 
cmom7_reg_2t = cmom7_reg3 NOT cmom7_reg_2t_non 
cmom7_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom7_mx_reg1 = cmom7_mx_reg0 INTERACT mom7_6 
cmom7_mx_reg2 = COPY cmom7_mx_reg1 
cmom7_mx_reg3 = cmom7_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom7_mx_reg_4t = cmom7_mx_reg2 INTERACT MOMDMY_2T 
cmom7_mx_reg_4t_non = cmom7_mx_reg_4t INTERACT mom7p1 
cmom7_mx_reg_4t_a = cmom7_mx_reg_4t INTERACT mom7p1_a 
cmom7_mx_reg_4t_b = cmom7_mx_reg_4t INTERACT mom7p1_b 
cmom7_mx_reg_nw = cmom7_mx_reg3 INTERACT MOMDMY_NW 
cmom7_mx_reg_nw_a = cmom7_mx_reg_nw INTERACT mom7p1_a 
cmom7_mx_reg_nw_b = cmom7_mx_reg_nw INTERACT mom7p1_b 
cmom7_mx_reg_nw_non = cmom7_mx_reg_nw INTERACT mom7p1 
cmom7_mx_reg_psub = cmom7_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom7_mx_reg_psub_a = cmom7_mx_reg_psub INTERACT mom7p1_a 
cmom7_mx_reg_psub_b = cmom7_mx_reg_psub INTERACT mom7p1_b 
cmom7_mx_reg_psub_non = cmom7_mx_reg_psub INTERACT mom7p1 
cmom7_rf_reg1 = mom7_6 INTERACT RFDMY 
cmom7_rf_reg2 = COPY cmom7_rf_reg1 
cmom7_rf_reg3 = cmom7_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom7_rf_reg4 = cmom7_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom7_rf_reg_psub1 = cmom7_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom7_rf_reg_psub_non = cmom7_rf_reg_psub1 INTERACT M7 
cmom7_rf_reg_psub = cmom7_rf_reg_psub1 NOT cmom7_rf_reg_psub_non 
cmom7_rf_reg_nw1 = cmom7_rf_reg4 INTERACT MOMDMY_NW 
cmom7_rf_reg_nw_non = cmom7_rf_reg_nw1 INTERACT M7 
cmom7_rf_reg_nw = cmom7_rf_reg_nw1 NOT cmom7_rf_reg_nw_non 
mom8_0 = MOMDMY8 NOT INTERACT MOM_field0 
mom8_1 = mom8_0 NOT INTERACT MOM_field1 
mom8_2 = mom8_1 NOT INTERACT MOM_field2 
mom8_3 = mom8_2 NOT INTERACT MOM_field3 
mom8_4 = mom8_3 NOT INTERACT MOM_field4 
mom8_5 = mom8_4 NOT INTERACT MOM_field5 
mom8_6 = mom8_5 NOT INTERACT MOM_field6 
mom8_7 = mom8_6 NOT INTERACT MOM_field7 
cmom8_reg0 = mom8_7 INTERACT RTMOMDMY 
cmom8_reg1 = cmom8_reg0 NOT INTERACT MOMDMY_MX 
cmom8_reg2 = cmom8_reg1 NOT INTERACT RFDMY 
cmom8_reg = cmom8_reg2 NOT INTERACT MOMDMY_2T 
cmom8_reg_psub1 = cmom8_reg NOT INTERACT MOMDMY_NW 
cmom8_reg_psub_non = cmom8_reg_psub1 INTERACT M8 
cmom8_reg_psub = cmom8_reg_psub1 NOT cmom8_reg_psub_non 
cmom8_reg_nw1 = cmom8_reg INTERACT MOMDMY_NW 
cmom8_reg_nw_non = cmom8_reg_nw1 INTERACT M8 
cmom8_reg_nw = cmom8_reg_nw1 NOT cmom8_reg_nw_non 
cmom8_reg3 = cmom8_reg1 INTERACT MOMDMY_2T 
cmom8_reg_2t_non = cmom8_reg3 INTERACT M8 
cmom8_reg_2t = cmom8_reg3 NOT cmom8_reg_2t_non 
cmom8_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom8_mx_reg1 = cmom8_mx_reg0 INTERACT mom8_7 
cmom8_mx_reg2 = COPY cmom8_mx_reg1 
cmom8_mx_reg3 = cmom8_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom8_mx_reg_4t = cmom8_mx_reg2 INTERACT MOMDMY_2T 
cmom8_mx_reg_4t_non = cmom8_mx_reg_4t INTERACT mom8p1 
cmom8_mx_reg_4t_a = cmom8_mx_reg_4t INTERACT mom8p1_a 
cmom8_mx_reg_4t_b = cmom8_mx_reg_4t INTERACT mom8p1_b 
cmom8_mx_reg_nw = cmom8_mx_reg3 INTERACT MOMDMY_NW 
cmom8_mx_reg_nw_a = cmom8_mx_reg_nw INTERACT mom8p1_a 
cmom8_mx_reg_nw_b = cmom8_mx_reg_nw INTERACT mom8p1_b 
cmom8_mx_reg_nw_non = cmom8_mx_reg_nw INTERACT mom8p1 
cmom8_mx_reg_psub = cmom8_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom8_mx_reg_psub_a = cmom8_mx_reg_psub INTERACT mom8p1_a 
cmom8_mx_reg_psub_b = cmom8_mx_reg_psub INTERACT mom8p1_b 
cmom8_mx_reg_psub_non = cmom8_mx_reg_psub INTERACT mom8p1 
cmom8_rf_reg1 = mom8_7 INTERACT RFDMY 
cmom8_rf_reg2 = COPY cmom8_rf_reg1 
cmom8_rf_reg3 = cmom8_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom8_rf_reg4 = cmom8_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom8_rf_reg_psub1 = cmom8_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom8_rf_reg_psub_non = cmom8_rf_reg_psub1 INTERACT M8 
cmom8_rf_reg_psub = cmom8_rf_reg_psub1 NOT cmom8_rf_reg_psub_non 
cmom8_rf_reg_nw1 = cmom8_rf_reg4 INTERACT MOMDMY_NW 
cmom8_rf_reg_nw_non = cmom8_rf_reg_nw1 INTERACT M8 
cmom8_rf_reg_nw = cmom8_rf_reg_nw1 NOT cmom8_rf_reg_nw_non 
mom9_0 = MOMDMY9 NOT INTERACT MOM_field0 
mom9_1 = mom9_0 NOT INTERACT MOM_field1 
mom9_2 = mom9_1 NOT INTERACT MOM_field2 
mom9_3 = mom9_2 NOT INTERACT MOM_field3 
mom9_4 = mom9_3 NOT INTERACT MOM_field4 
mom9_5 = mom9_4 NOT INTERACT MOM_field5 
mom9_6 = mom9_5 NOT INTERACT MOM_field6 
mom9_7 = mom9_6 NOT INTERACT MOM_field7 
mom9_8 = mom9_7 NOT INTERACT MOM_field8 
cmom9_reg0 = mom9_8 INTERACT RTMOMDMY 
cmom9_reg1 = cmom9_reg0 NOT INTERACT MOMDMY_MX 
cmom9_reg2 = cmom9_reg1 NOT INTERACT RFDMY 
cmom9_reg = cmom9_reg2 NOT INTERACT MOMDMY_2T 
cmom9_reg_psub1 = cmom9_reg NOT INTERACT MOMDMY_NW 
cmom9_reg_psub_non = cmom9_reg_psub1 INTERACT M9 
cmom9_reg_psub = cmom9_reg_psub1 NOT cmom9_reg_psub_non 
cmom9_reg_nw1 = cmom9_reg INTERACT MOMDMY_NW 
cmom9_reg_nw_non = cmom9_reg_nw1 INTERACT M9 
cmom9_reg_nw = cmom9_reg_nw1 NOT cmom9_reg_nw_non 
cmom9_reg3 = cmom9_reg1 INTERACT MOMDMY_2T 
cmom9_reg_2t_non = cmom9_reg3 INTERACT M9 
cmom9_reg_2t = cmom9_reg3 NOT cmom9_reg_2t_non 
cmom9_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom9_mx_reg1 = cmom9_mx_reg0 INTERACT mom9_8 
cmom9_mx_reg2 = COPY cmom9_mx_reg1 
cmom9_mx_reg3 = cmom9_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom9_mx_reg_4t = cmom9_mx_reg2 INTERACT MOMDMY_2T 
cmom9_mx_reg_4t_non = cmom9_mx_reg_4t INTERACT mom9p1 
cmom9_mx_reg_4t_a = cmom9_mx_reg_4t INTERACT mom9p1_a 
cmom9_mx_reg_4t_b = cmom9_mx_reg_4t INTERACT mom9p1_b 
cmom9_mx_reg_nw = cmom9_mx_reg3 INTERACT MOMDMY_NW 
cmom9_mx_reg_nw_a = cmom9_mx_reg_nw INTERACT mom9p1_a 
cmom9_mx_reg_nw_b = cmom9_mx_reg_nw INTERACT mom9p1_b 
cmom9_mx_reg_nw_non = cmom9_mx_reg_nw INTERACT mom9p1 
cmom9_mx_reg_psub = cmom9_mx_reg3 NOT INTERACT MOMDMY_NW 
cmom9_mx_reg_psub_a = cmom9_mx_reg_psub INTERACT mom9p1_a 
cmom9_mx_reg_psub_b = cmom9_mx_reg_psub INTERACT mom9p1_b 
cmom9_mx_reg_psub_non = cmom9_mx_reg_psub INTERACT mom9p1 
cmom9_rf_reg1 = mom9_8 INTERACT RFDMY 
cmom9_rf_reg2 = COPY cmom9_rf_reg1 
cmom9_rf_reg3 = cmom9_rf_reg2 NOT INTERACT MOMDMY_MX 
cmom9_rf_reg4 = cmom9_rf_reg3 NOT INTERACT MOMDMY_2T 
cmom9_rf_reg_psub1 = cmom9_rf_reg4 NOT INTERACT MOMDMY_NW 
cmom9_rf_reg_psub_non = cmom9_rf_reg_psub1 INTERACT M9 
cmom9_rf_reg_psub = cmom9_rf_reg_psub1 NOT cmom9_rf_reg_psub_non 
cmom9_rf_reg_nw1 = cmom9_rf_reg4 INTERACT MOMDMY_NW 
cmom9_rf_reg_nw_non = cmom9_rf_reg_nw1 INTERACT M9 
cmom9_rf_reg_nw = cmom9_rf_reg_nw1 NOT cmom9_rf_reg_nw_non 
//#############################################
//# CONNECTION                                #
//#############################################
CONNECT AP BPC BY RV_BPC_RDL
CONNECT AP M17 BY RV
CONNECT AP M17_A BY RV
CONNECT AP M17_B BY RV
CONNECT AP MPC BY RV_MPC_RDL
CONNECT AP TPC BY RV_TPC_RDL
CONNECT BPC M17 BY RV_MTOP_BPC
CONNECT M0_A MD_OD_N BY VD
CONNECT M0_A MD_OD_N_CPP85 BY VD
CONNECT M0_A MD_OD_N_IO BY VD
CONNECT M0_A MD_OD_N_SRM BY VD
CONNECT M0_A MD_OD_P BY VD
CONNECT M0_A MD_OD_P_CPP85 BY VD
CONNECT M0_A MD_OD_P_IO BY VD
CONNECT M0_A MD_OD_P_SRM BY VD
CONNECT M0_A MD_STI BY VD
CONNECT M0_A MD_STI_CPP85 BY VD
CONNECT M0_A MD_STI_IO BY VD
CONNECT M0_A MD_STI_SRM BY VD
CONNECT M0_A VDR BY M0_VDR_TAP
CONNECT M0_A mom0m1_a
CONNECT M0_A mom0m2_a
CONNECT M0_A mom0minus_a
CONNECT M0_A mom0p1_a
CONNECT M0_A mom0p2_a
CONNECT M0_B MD_OD_N BY VD
CONNECT M0_B MD_OD_N_CPP85 BY VD
CONNECT M0_B MD_OD_N_IO BY VD
CONNECT M0_B MD_OD_N_SRM BY VD
CONNECT M0_B MD_OD_P BY VD
CONNECT M0_B MD_OD_P_CPP85 BY VD
CONNECT M0_B MD_OD_P_IO BY VD
CONNECT M0_B MD_OD_P_SRM BY VD
CONNECT M0_B MD_STI BY VD
CONNECT M0_B MD_STI_CPP85 BY VD
CONNECT M0_B MD_STI_IO BY VD
CONNECT M0_B MD_STI_SRM BY VD
CONNECT M0_B VDR BY M0_VDR_TAP
CONNECT M0_B mom0m1_b
CONNECT M0_B mom0m2_b
CONNECT M0_B mom0p1_b
CONNECT M0_B mom0p2_b
CONNECT M0_B mom0plus_b
CONNECT M10 M9 BY VIA9
CONNECT M10 M9_A BY VIA9
CONNECT M10 M9_B BY VIA9
CONNECT M10 RH_TN_10 BY VTIN_9
CONNECT M10_A M9 BY VIA9
CONNECT M10_A M9_A BY VIA9
CONNECT M10_A M9_B BY VIA9
CONNECT M10_B M9 BY VIA9
CONNECT M10_B M9_A BY VIA9
CONNECT M10_B M9_B BY VIA9
CONNECT M11 M10 BY VIA10
CONNECT M11 M10_A BY VIA10
CONNECT M11 M10_B BY VIA10
CONNECT M11 RH_TN_11 BY VTIN_10
CONNECT M11_A M10 BY VIA10
CONNECT M11_A M10_A BY VIA10
CONNECT M11_A M10_B BY VIA10
CONNECT M11_B M10 BY VIA10
CONNECT M11_B M10_A BY VIA10
CONNECT M11_B M10_B BY VIA10
CONNECT M12 M11 BY VIA11
CONNECT M12 M11_A BY VIA11
CONNECT M12 M11_B BY VIA11
CONNECT M12 RH_TN_12 BY VTIN_11
CONNECT M12_A M11 BY VIA11
CONNECT M12_A M11_A BY VIA11
CONNECT M12_A M11_B BY VIA11
CONNECT M12_B M11 BY VIA11
CONNECT M12_B M11_A BY VIA11
CONNECT M12_B M11_B BY VIA11
CONNECT M13 M12 BY VIA12
CONNECT M13 M12_A BY VIA12
CONNECT M13 M12_B BY VIA12
CONNECT M13 RH_TN_13 BY VTIN_12
CONNECT M13_A M12 BY VIA12
CONNECT M13_A M12_A BY VIA12
CONNECT M13_A M12_B BY VIA12
CONNECT M13_B M12 BY VIA12
CONNECT M13_B M12_A BY VIA12
CONNECT M13_B M12_B BY VIA12
CONNECT M14 M13 BY VIA13
CONNECT M14 M13_A BY VIA13
CONNECT M14 M13_B BY VIA13
CONNECT M14 RH_TN_14 BY VTIN_13
CONNECT M14_A M13 BY VIA13
CONNECT M14_A M13_A BY VIA13
CONNECT M14_A M13_B BY VIA13
CONNECT M14_B M13 BY VIA13
CONNECT M14_B M13_A BY VIA13
CONNECT M14_B M13_B BY VIA13
CONNECT M15 M14 BY VIA14
CONNECT M15 M14_A BY VIA14
CONNECT M15 M14_B BY VIA14
CONNECT M15 RH_TN_15 BY VTIN_14
CONNECT M15_A M14 BY VIA14
CONNECT M15_A M14_A BY VIA14
CONNECT M15_A M14_B BY VIA14
CONNECT M15_B M14 BY VIA14
CONNECT M15_B M14_A BY VIA14
CONNECT M15_B M14_B BY VIA14
CONNECT M16 M15 BY VIA15
CONNECT M16 M15_A BY VIA15
CONNECT M16 M15_B BY VIA15
CONNECT M16 RH_TN_16 BY VTIN_15
CONNECT M16_A M15 BY VIA15
CONNECT M16_A M15_A BY VIA15
CONNECT M16_A M15_B BY VIA15
CONNECT M16_B M15 BY VIA15
CONNECT M16_B M15_A BY VIA15
CONNECT M16_B M15_B BY VIA15
CONNECT M17 M16 BY VIA16
CONNECT M17 M16_A BY VIA16
CONNECT M17 M16_B BY VIA16
CONNECT M17 RH_TN_17 BY VTIN_16
CONNECT M17_A M16 BY VIA16
CONNECT M17_A M16_A BY VIA16
CONNECT M17_A M16_B BY VIA16
CONNECT M17_B M16 BY VIA16
CONNECT M17_B M16_A BY VIA16
CONNECT M17_B M16_B BY VIA16
CONNECT M1_A M0_A BY VIA0
CONNECT M1_A M0_B BY VIA0
CONNECT M1_A mom1m1_a
CONNECT M1_A mom1m2_a
CONNECT M1_A mom1minus_a
CONNECT M1_A mom1p1_a
CONNECT M1_A mom1p2_a
CONNECT M1_B M0_A BY VIA0
CONNECT M1_B M0_B BY VIA0
CONNECT M1_B mom1m1_b
CONNECT M1_B mom1m2_b
CONNECT M1_B mom1p1_b
CONNECT M1_B mom1p2_b
CONNECT M1_B mom1plus_b
CONNECT M2 M1_A BY VIA1
CONNECT M2 M1_B BY VIA1
CONNECT M2 mom2m1
CONNECT M2 mom2m2
CONNECT M2 mom2minus
CONNECT M2 mom2p1
CONNECT M2 mom2p2
CONNECT M2 mom2plus
CONNECT M2_A M1_A BY VIA1
CONNECT M2_A M1_B BY VIA1
CONNECT M2_A mom2m1_a
CONNECT M2_A mom2m2_a
CONNECT M2_A mom2minus_a
CONNECT M2_A mom2p1_a
CONNECT M2_A mom2p2_a
CONNECT M2_B M1_A BY VIA1
CONNECT M2_B M1_B BY VIA1
CONNECT M2_B mom2m1_b
CONNECT M2_B mom2m2_b
CONNECT M2_B mom2p1_b
CONNECT M2_B mom2p2_b
CONNECT M2_B mom2plus_b
CONNECT M3 M2 BY VIA2
CONNECT M3 M2_A BY VIA2
CONNECT M3 M2_B BY VIA2
CONNECT M3 RH_TN_3 BY VTIN_2
CONNECT M3 mom3m1
CONNECT M3 mom3m2
CONNECT M3 mom3minus
CONNECT M3 mom3p1
CONNECT M3 mom3p2
CONNECT M3 mom3plus
CONNECT M3_A M2 BY VIA2
CONNECT M3_A M2_A BY VIA2
CONNECT M3_A M2_B BY VIA2
CONNECT M3_A mom3m1_a
CONNECT M3_A mom3m2_a
CONNECT M3_A mom3minus_a
CONNECT M3_A mom3p1_a
CONNECT M3_A mom3p2_a
CONNECT M3_B M2 BY VIA2
CONNECT M3_B M2_A BY VIA2
CONNECT M3_B M2_B BY VIA2
CONNECT M3_B mom3m1_b
CONNECT M3_B mom3m2_b
CONNECT M3_B mom3p1_b
CONNECT M3_B mom3p2_b
CONNECT M3_B mom3plus_b
CONNECT M4 M3 BY VIA3
CONNECT M4 M3_A BY VIA3
CONNECT M4 M3_B BY VIA3
CONNECT M4 RH_TN_4 BY VTIN_3
CONNECT M4 mom4m1
CONNECT M4 mom4m2
CONNECT M4 mom4minus
CONNECT M4 mom4p1
CONNECT M4 mom4p2
CONNECT M4 mom4plus
CONNECT M4_A M3 BY VIA3
CONNECT M4_A M3_A BY VIA3
CONNECT M4_A M3_B BY VIA3
CONNECT M4_A mom4m1_a
CONNECT M4_A mom4m2_a
CONNECT M4_A mom4minus_a
CONNECT M4_A mom4p1_a
CONNECT M4_A mom4p2_a
CONNECT M4_B M3 BY VIA3
CONNECT M4_B M3_A BY VIA3
CONNECT M4_B M3_B BY VIA3
CONNECT M4_B mom4m1_b
CONNECT M4_B mom4m2_b
CONNECT M4_B mom4p1_b
CONNECT M4_B mom4p2_b
CONNECT M4_B mom4plus_b
CONNECT M5 M4 BY VIA4
CONNECT M5 M4_A BY VIA4
CONNECT M5 M4_B BY VIA4
CONNECT M5 RH_TN_5 BY VTIN_4
CONNECT M5 mom5m1
CONNECT M5 mom5m2
CONNECT M5 mom5minus
CONNECT M5 mom5p1
CONNECT M5 mom5p2
CONNECT M5 mom5plus
CONNECT M5_A M4 BY VIA4
CONNECT M5_A M4_A BY VIA4
CONNECT M5_A M4_B BY VIA4
CONNECT M5_A mom5m1_a
CONNECT M5_A mom5m2_a
CONNECT M5_A mom5minus_a
CONNECT M5_A mom5p1_a
CONNECT M5_A mom5p2_a
CONNECT M5_B M4 BY VIA4
CONNECT M5_B M4_A BY VIA4
CONNECT M5_B M4_B BY VIA4
CONNECT M5_B mom5m1_b
CONNECT M5_B mom5m2_b
CONNECT M5_B mom5p1_b
CONNECT M5_B mom5p2_b
CONNECT M5_B mom5plus_b
CONNECT M6 M5 BY VIA5
CONNECT M6 M5_A BY VIA5
CONNECT M6 M5_B BY VIA5
CONNECT M6 RH_TN_6 BY VTIN_5
CONNECT M6 mom6m1
CONNECT M6 mom6m2
CONNECT M6 mom6minus
CONNECT M6 mom6p1
CONNECT M6 mom6p2
CONNECT M6 mom6plus
CONNECT M6_A M5 BY VIA5
CONNECT M6_A M5_A BY VIA5
CONNECT M6_A M5_B BY VIA5
CONNECT M6_A mom6m1_a
CONNECT M6_A mom6m2_a
CONNECT M6_A mom6minus_a
CONNECT M6_A mom6p1_a
CONNECT M6_A mom6p2_a
CONNECT M6_B M5 BY VIA5
CONNECT M6_B M5_A BY VIA5
CONNECT M6_B M5_B BY VIA5
CONNECT M6_B mom6m1_b
CONNECT M6_B mom6m2_b
CONNECT M6_B mom6p1_b
CONNECT M6_B mom6p2_b
CONNECT M6_B mom6plus_b
CONNECT M7 M6 BY VIA6
CONNECT M7 M6_A BY VIA6
CONNECT M7 M6_B BY VIA6
CONNECT M7 RH_TN_7 BY VTIN_6
CONNECT M7 mom7m1
CONNECT M7 mom7m2
CONNECT M7 mom7minus
CONNECT M7 mom7p1
CONNECT M7 mom7p2
CONNECT M7 mom7plus
CONNECT M7_A M6 BY VIA6
CONNECT M7_A M6_A BY VIA6
CONNECT M7_A M6_B BY VIA6
CONNECT M7_A mom7m1_a
CONNECT M7_A mom7m2_a
CONNECT M7_A mom7minus_a
CONNECT M7_A mom7p1_a
CONNECT M7_A mom7p2_a
CONNECT M7_B M6 BY VIA6
CONNECT M7_B M6_A BY VIA6
CONNECT M7_B M6_B BY VIA6
CONNECT M7_B mom7m1_b
CONNECT M7_B mom7m2_b
CONNECT M7_B mom7p1_b
CONNECT M7_B mom7p2_b
CONNECT M7_B mom7plus_b
CONNECT M8 M7 BY VIA7
CONNECT M8 M7_A BY VIA7
CONNECT M8 M7_B BY VIA7
CONNECT M8 RH_TN_8 BY VTIN_7
CONNECT M8 mom8m1
CONNECT M8 mom8m2
CONNECT M8 mom8minus
CONNECT M8 mom8p1
CONNECT M8 mom8p2
CONNECT M8 mom8plus
CONNECT M8_A M7 BY VIA7
CONNECT M8_A M7_A BY VIA7
CONNECT M8_A M7_B BY VIA7
CONNECT M8_A mom8m1_a
CONNECT M8_A mom8m2_a
CONNECT M8_A mom8minus_a
CONNECT M8_A mom8p1_a
CONNECT M8_A mom8p2_a
CONNECT M8_B M7 BY VIA7
CONNECT M8_B M7_A BY VIA7
CONNECT M8_B M7_B BY VIA7
CONNECT M8_B mom8m1_b
CONNECT M8_B mom8m2_b
CONNECT M8_B mom8p1_b
CONNECT M8_B mom8p2_b
CONNECT M8_B mom8plus_b
CONNECT M9 M8 BY VIA8
CONNECT M9 M8_A BY VIA8
CONNECT M9 M8_B BY VIA8
CONNECT M9 RH_TN_9 BY VTIN_8
CONNECT M9 mom9m1
CONNECT M9 mom9m2
CONNECT M9 mom9minus
CONNECT M9 mom9p1
CONNECT M9 mom9p2
CONNECT M9 mom9plus
CONNECT M9_A M8 BY VIA8
CONNECT M9_A M8_A BY VIA8
CONNECT M9_A M8_B BY VIA8
CONNECT M9_A mom9m1_a
CONNECT M9_A mom9m2_a
CONNECT M9_A mom9minus_a
CONNECT M9_A mom9p1_a
CONNECT M9_A mom9p2_a
CONNECT M9_B M8 BY VIA8
CONNECT M9_B M8_A BY VIA8
CONNECT M9_B M8_B BY VIA8
CONNECT M9_B mom9m1_b
CONNECT M9_B mom9m2_b
CONNECT M9_B mom9p1_b
CONNECT M9_B mom9p2_b
CONNECT M9_B mom9plus_b
CONNECT MD_OD_N MD_OD_N_IO
CONNECT MD_OD_N MD_OD_N_SRM
CONNECT MD_OD_N MD_OD_P
CONNECT MD_OD_N MD_OD_P_IO
CONNECT MD_OD_N MD_OD_P_SRM
CONNECT MD_OD_N MD_STI_IO
CONNECT MD_OD_N MD_STI_SRM
CONNECT MD_OD_N tndiff BY n_odtap
CONNECT MD_OD_N tndiff_bjt BY n_odtap_bjt
CONNECT MD_OD_N tndiff_dio BY n_odtap
CONNECT MD_OD_N tndiff_sdi BY n_odtap
CONNECT MD_OD_N_CPP85 MD_OD_N
CONNECT MD_OD_N_CPP85 MD_OD_N_IO
CONNECT MD_OD_N_CPP85 MD_OD_N_SRM
CONNECT MD_OD_N_CPP85 MD_OD_P
CONNECT MD_OD_N_CPP85 MD_OD_P_CPP85
CONNECT MD_OD_N_CPP85 MD_OD_P_IO
CONNECT MD_OD_N_CPP85 MD_OD_P_SRM
CONNECT MD_OD_N_CPP85 MD_STI
CONNECT MD_OD_N_CPP85 MD_STI_IO
CONNECT MD_OD_N_CPP85 MD_STI_SRM
CONNECT MD_OD_N_CPP85 tndiff BY n_odtap
CONNECT MD_OD_N_CPP85 tndiff_bjt BY n_odtap_bjt
CONNECT MD_OD_N_CPP85 tndiff_dio BY n_odtap
CONNECT MD_OD_N_CPP85 tndiff_sdi BY n_odtap
CONNECT MD_OD_N_IO MD_OD_P_IO
CONNECT MD_OD_N_IO MD_STI_IO
CONNECT MD_OD_N_IO tndiff BY n_odtap
CONNECT MD_OD_N_IO tndiff_bjt BY n_odtap_bjt
CONNECT MD_OD_N_IO tndiff_dio BY n_odtap
CONNECT MD_OD_N_IO tndiff_sdi BY n_odtap
CONNECT MD_OD_N_SRM MD_OD_N_IO
CONNECT MD_OD_N_SRM MD_OD_P_IO
CONNECT MD_OD_N_SRM MD_STI_IO
CONNECT MD_OD_N_SRM MD_STI_SRM
CONNECT MD_OD_N_SRM tndiff BY n_odtap_srm
CONNECT MD_OD_N_SRM tndiff_bjt BY n_odtap_srm
CONNECT MD_OD_N_SRM tndiff_dio BY n_odtap_srm
CONNECT MD_OD_P MD_OD_N_IO
CONNECT MD_OD_P MD_OD_N_SRM
CONNECT MD_OD_P MD_OD_P_IO
CONNECT MD_OD_P MD_OD_P_SRM
CONNECT MD_OD_P MD_STI_IO
CONNECT MD_OD_P MD_STI_SRM
CONNECT MD_OD_P tpdiff BY p_odtap
CONNECT MD_OD_P tpdiff_bjt BY p_odtap_bjt
CONNECT MD_OD_P tpdiff_dio BY p_odtap
CONNECT MD_OD_P_CPP85 MD_OD_N
CONNECT MD_OD_P_CPP85 MD_OD_N_IO
CONNECT MD_OD_P_CPP85 MD_OD_N_SRM
CONNECT MD_OD_P_CPP85 MD_OD_P
CONNECT MD_OD_P_CPP85 MD_OD_P_IO
CONNECT MD_OD_P_CPP85 MD_OD_P_SRM
CONNECT MD_OD_P_CPP85 MD_STI
CONNECT MD_OD_P_CPP85 MD_STI_IO
CONNECT MD_OD_P_CPP85 MD_STI_SRM
CONNECT MD_OD_P_CPP85 tpdiff BY p_odtap
CONNECT MD_OD_P_CPP85 tpdiff_bjt BY p_odtap_bjt
CONNECT MD_OD_P_CPP85 tpdiff_dio BY p_odtap
CONNECT MD_OD_P_IO MD_STI_IO
CONNECT MD_OD_P_IO tpdiff BY p_odtap
CONNECT MD_OD_P_IO tpdiff_bjt BY p_odtap_bjt
CONNECT MD_OD_P_IO tpdiff_dio BY p_odtap
CONNECT MD_OD_P_SRM MD_OD_N_IO
CONNECT MD_OD_P_SRM MD_OD_N_SRM
CONNECT MD_OD_P_SRM MD_OD_P_IO
CONNECT MD_OD_P_SRM MD_STI_IO
CONNECT MD_OD_P_SRM MD_STI_SRM
CONNECT MD_OD_P_SRM tpdiff BY p_odtap_srm
CONNECT MD_OD_P_SRM tpdiff_bjt BY p_odtap_srm
CONNECT MD_OD_P_SRM tpdiff_dio BY p_odtap_srm
CONNECT MD_STI MD_OD_N
CONNECT MD_STI MD_OD_N_IO
CONNECT MD_STI MD_OD_N_SRM
CONNECT MD_STI MD_OD_P
CONNECT MD_STI MD_OD_P_IO
CONNECT MD_STI MD_OD_P_SRM
CONNECT MD_STI MD_STI_IO
CONNECT MD_STI MD_STI_SRM
CONNECT MD_STI_CPP85 MD_OD_N
CONNECT MD_STI_CPP85 MD_OD_N_CPP85
CONNECT MD_STI_CPP85 MD_OD_N_IO
CONNECT MD_STI_CPP85 MD_OD_N_SRM
CONNECT MD_STI_CPP85 MD_OD_P
CONNECT MD_STI_CPP85 MD_OD_P_CPP85
CONNECT MD_STI_CPP85 MD_OD_P_IO
CONNECT MD_STI_CPP85 MD_OD_P_SRM
CONNECT MD_STI_CPP85 MD_STI
CONNECT MD_STI_CPP85 MD_STI_IO
CONNECT MD_STI_CPP85 MD_STI_SRM
CONNECT MD_STI_SRM MD_OD_N_IO
CONNECT MD_STI_SRM MD_OD_P_IO
CONNECT MD_STI_SRM MD_STI_IO
CONNECT MPC M17 BY RV_MTOP_MPC
CONNECT TPC BPC BY RV_BPC_TPC
CONNECT VDR MD_OD_N BY VDR_MD_TAP
CONNECT VDR MD_OD_N_CPP85 BY VDR_MD_TAP
CONNECT VDR MD_OD_N_IO BY VDR_MD_TAP
CONNECT VDR MD_OD_N_SRM BY VDR_MD_TAP
CONNECT VDR MD_OD_P BY VDR_MD_TAP
CONNECT VDR MD_OD_P_CPP85 BY VDR_MD_TAP
CONNECT VDR MD_OD_P_IO BY VDR_MD_TAP
CONNECT VDR MD_OD_P_SRM BY VDR_MD_TAP
CONNECT VDR MD_STI BY VDR_MD_TAP
CONNECT VDR MD_STI_CPP85 BY VDR_MD_TAP
CONNECT VDR MD_STI_IO BY VDR_MD_TAP
CONNECT VDR MD_STI_SRM BY VDR_MD_TAP
CONNECT cnbase1 tndiff BY nplug
CONNECT cnbase1 tndiff_bjt BY nplug
CONNECT n_fpoly_elvt M0_A BY VG
CONNECT n_fpoly_elvt M0_B BY VG
CONNECT n_fpoly_elvt VDR BY VG_VDR
CONNECT n_fpoly_elvt n_fpoly_srm
CONNECT n_fpoly_elvt n_gpoly_elvt
CONNECT n_fpoly_elvt n_pode_elvt
CONNECT n_fpoly_elvt p_fpoly_elvt
CONNECT n_fpoly_elvt p_fpoly_lvt
CONNECT n_fpoly_elvt p_fpoly_lvtll
CONNECT n_fpoly_elvt p_fpoly_srm
CONNECT n_fpoly_elvt p_fpoly_svt
CONNECT n_fpoly_elvt p_fpoly_ulvt
CONNECT n_fpoly_elvt p_fpoly_ulvtll
CONNECT n_fpoly_io M0_A BY VG
CONNECT n_fpoly_io M0_B BY VG
CONNECT n_fpoly_io VDR BY VG_VDR
CONNECT n_fpoly_io n_fpoly_io_ulvt
CONNECT n_fpoly_io n_gpoly_io
CONNECT n_fpoly_io n_gpoly_nocg_io
CONNECT n_fpoly_io n_pode_io
CONNECT n_fpoly_io p_fpoly_io
CONNECT n_fpoly_io_ulvt M0_A BY VG
CONNECT n_fpoly_io_ulvt M0_B BY VG
CONNECT n_fpoly_io_ulvt VDR BY VG_VDR
CONNECT n_fpoly_io_ulvt n_gpoly_io_ulvt
CONNECT n_fpoly_io_ulvt n_pode_io_ulvt
CONNECT n_fpoly_io_ulvt p_fpoly_io
CONNECT n_fpoly_lvt M0_A BY VG
CONNECT n_fpoly_lvt M0_B BY VG
CONNECT n_fpoly_lvt VDR BY VG_VDR
CONNECT n_fpoly_lvt n_fpoly_elvt
CONNECT n_fpoly_lvt n_fpoly_srm
CONNECT n_fpoly_lvt n_fpoly_ulvt
CONNECT n_fpoly_lvt n_fpoly_ulvtll
CONNECT n_fpoly_lvt n_gpoly_lvt
CONNECT n_fpoly_lvt n_pode_lvt
CONNECT n_fpoly_lvt p_fpoly_elvt
CONNECT n_fpoly_lvt p_fpoly_lvt
CONNECT n_fpoly_lvt p_fpoly_lvtll
CONNECT n_fpoly_lvt p_fpoly_srm
CONNECT n_fpoly_lvt p_fpoly_svt
CONNECT n_fpoly_lvt p_fpoly_ulvt
CONNECT n_fpoly_lvt p_fpoly_ulvtll
CONNECT n_fpoly_lvtll M0_A BY VG
CONNECT n_fpoly_lvtll M0_B BY VG
CONNECT n_fpoly_lvtll VDR BY VG_VDR
CONNECT n_fpoly_lvtll n_fpoly_elvt
CONNECT n_fpoly_lvtll n_fpoly_lvt
CONNECT n_fpoly_lvtll n_fpoly_srm
CONNECT n_fpoly_lvtll n_fpoly_ulvt
CONNECT n_fpoly_lvtll n_fpoly_ulvtll
CONNECT n_fpoly_lvtll n_gpoly_lvtll
CONNECT n_fpoly_lvtll n_pode_lvtll
CONNECT n_fpoly_lvtll p_fpoly_elvt
CONNECT n_fpoly_lvtll p_fpoly_lvt
CONNECT n_fpoly_lvtll p_fpoly_lvtll
CONNECT n_fpoly_lvtll p_fpoly_srm
CONNECT n_fpoly_lvtll p_fpoly_svt
CONNECT n_fpoly_lvtll p_fpoly_ulvt
CONNECT n_fpoly_lvtll p_fpoly_ulvtll
CONNECT n_fpoly_srm M0_A BY VG
CONNECT n_fpoly_srm M0_B BY VG
CONNECT n_fpoly_srm VDR BY VG_VDR
CONNECT n_fpoly_srm n_gpoly_srm
CONNECT n_fpoly_srm p_fpoly_srm
CONNECT n_fpoly_svt M0_A BY VG
CONNECT n_fpoly_svt M0_B BY VG
CONNECT n_fpoly_svt VDR BY VG_VDR
CONNECT n_fpoly_svt n_fpoly_elvt
CONNECT n_fpoly_svt n_fpoly_lvt
CONNECT n_fpoly_svt n_fpoly_lvtll
CONNECT n_fpoly_svt n_fpoly_srm
CONNECT n_fpoly_svt n_fpoly_ulvt
CONNECT n_fpoly_svt n_fpoly_ulvtll
CONNECT n_fpoly_svt n_gpoly_svt
CONNECT n_fpoly_svt n_pode_svt
CONNECT n_fpoly_svt p_fpoly_elvt
CONNECT n_fpoly_svt p_fpoly_lvt
CONNECT n_fpoly_svt p_fpoly_lvtll
CONNECT n_fpoly_svt p_fpoly_srm
CONNECT n_fpoly_svt p_fpoly_svt
CONNECT n_fpoly_svt p_fpoly_ulvt
CONNECT n_fpoly_svt p_fpoly_ulvtll
CONNECT n_fpoly_ulvt M0_A BY VG
CONNECT n_fpoly_ulvt M0_B BY VG
CONNECT n_fpoly_ulvt VDR BY VG_VDR
CONNECT n_fpoly_ulvt n_fpoly_elvt
CONNECT n_fpoly_ulvt n_fpoly_srm
CONNECT n_fpoly_ulvt n_gpoly_nocg_ulvt
CONNECT n_fpoly_ulvt n_gpoly_ulvt
CONNECT n_fpoly_ulvt n_pode_ulvt
CONNECT n_fpoly_ulvt p_fpoly_elvt
CONNECT n_fpoly_ulvt p_fpoly_lvt
CONNECT n_fpoly_ulvt p_fpoly_lvtll
CONNECT n_fpoly_ulvt p_fpoly_srm
CONNECT n_fpoly_ulvt p_fpoly_svt
CONNECT n_fpoly_ulvt p_fpoly_ulvt
CONNECT n_fpoly_ulvt p_fpoly_ulvtll
CONNECT n_fpoly_ulvtll M0_A BY VG
CONNECT n_fpoly_ulvtll M0_B BY VG
CONNECT n_fpoly_ulvtll VDR BY VG_VDR
CONNECT n_fpoly_ulvtll n_fpoly_elvt
CONNECT n_fpoly_ulvtll n_fpoly_srm
CONNECT n_fpoly_ulvtll n_fpoly_ulvt
CONNECT n_fpoly_ulvtll n_gpoly_ulvtll
CONNECT n_fpoly_ulvtll n_pode_ulvtll
CONNECT n_fpoly_ulvtll p_fpoly_elvt
CONNECT n_fpoly_ulvtll p_fpoly_lvt
CONNECT n_fpoly_ulvtll p_fpoly_lvtll
CONNECT n_fpoly_ulvtll p_fpoly_srm
CONNECT n_fpoly_ulvtll p_fpoly_svt
CONNECT n_fpoly_ulvtll p_fpoly_ulvt
CONNECT n_fpoly_ulvtll p_fpoly_ulvtll
CONNECT n_gpoly_elvt M0_A BY VG
CONNECT n_gpoly_elvt M0_B BY VG
CONNECT n_gpoly_elvt VDR BY VG_VDR
CONNECT n_gpoly_elvt n_pode_elvt
CONNECT n_gpoly_io M0_A BY VG
CONNECT n_gpoly_io M0_B BY VG
CONNECT n_gpoly_io VDR BY VG_VDR
CONNECT n_gpoly_io n_pode_io
CONNECT n_gpoly_io_ulvt M0_A BY VG
CONNECT n_gpoly_io_ulvt M0_B BY VG
CONNECT n_gpoly_io_ulvt VDR BY VG_VDR
CONNECT n_gpoly_io_ulvt n_pode_io_ulvt
CONNECT n_gpoly_lvt M0_A BY VG
CONNECT n_gpoly_lvt M0_B BY VG
CONNECT n_gpoly_lvt VDR BY VG_VDR
CONNECT n_gpoly_lvt n_pode_lvt
CONNECT n_gpoly_lvtll M0_A BY VG
CONNECT n_gpoly_lvtll M0_B BY VG
CONNECT n_gpoly_lvtll VDR BY VG_VDR
CONNECT n_gpoly_lvtll n_pode_lvtll
CONNECT n_gpoly_nocg_io M0_A BY VG
CONNECT n_gpoly_nocg_io M0_B BY VG
CONNECT n_gpoly_nocg_io VDR BY VG_VDR
CONNECT n_gpoly_nocg_io n_pode_io
CONNECT n_gpoly_nocg_ulvt M0_A BY VG
CONNECT n_gpoly_nocg_ulvt M0_B BY VG
CONNECT n_gpoly_nocg_ulvt VDR BY VG_VDR
CONNECT n_gpoly_nocg_ulvt n_pode_ulvt
CONNECT n_gpoly_srm M0_A BY VG
CONNECT n_gpoly_srm M0_B BY VG
CONNECT n_gpoly_srm VDR BY VG_VDR
CONNECT n_gpoly_svt M0_A BY VG
CONNECT n_gpoly_svt M0_B BY VG
CONNECT n_gpoly_svt VDR BY VG_VDR
CONNECT n_gpoly_svt n_pode_svt
CONNECT n_gpoly_ulvt M0_A BY VG
CONNECT n_gpoly_ulvt M0_B BY VG
CONNECT n_gpoly_ulvt VDR BY VG_VDR
CONNECT n_gpoly_ulvt n_pode_ulvt
CONNECT n_gpoly_ulvtll M0_A BY VG
CONNECT n_gpoly_ulvtll M0_B BY VG
CONNECT n_gpoly_ulvtll VDR BY VG_VDR
CONNECT n_gpoly_ulvtll n_pode_ulvtll
CONNECT n_pode_elvt M0_A BY VG
CONNECT n_pode_elvt M0_B BY VG
CONNECT n_pode_elvt VDR BY VG_VDR
CONNECT n_pode_io M0_A BY VG
CONNECT n_pode_io M0_B BY VG
CONNECT n_pode_io VDR BY VG_VDR
CONNECT n_pode_io_ulvt M0_A BY VG
CONNECT n_pode_io_ulvt M0_B BY VG
CONNECT n_pode_io_ulvt VDR BY VG_VDR
CONNECT n_pode_lvt M0_A BY VG
CONNECT n_pode_lvt M0_B BY VG
CONNECT n_pode_lvt VDR BY VG_VDR
CONNECT n_pode_lvtll M0_A BY VG
CONNECT n_pode_lvtll M0_B BY VG
CONNECT n_pode_lvtll VDR BY VG_VDR
CONNECT n_pode_svt M0_A BY VG
CONNECT n_pode_svt M0_B BY VG
CONNECT n_pode_svt VDR BY VG_VDR
CONNECT n_pode_ulvt M0_A BY VG
CONNECT n_pode_ulvt M0_B BY VG
CONNECT n_pode_ulvt VDR BY VG_VDR
CONNECT n_pode_ulvtll M0_A BY VG
CONNECT n_pode_ulvtll M0_B BY VG
CONNECT n_pode_ulvtll VDR BY VG_VDR
CONNECT nch_12_mac_gate M0_A BY VG
CONNECT nch_12_mac_gate M0_B BY VG
CONNECT nch_12_mac_gate VDR BY VG_VDR
CONNECT nch_12_mac_gate_dnw M0_A BY VG
CONNECT nch_12_mac_gate_dnw M0_B BY VG
CONNECT nch_12_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_12od15_mac_gate M0_A BY VG
CONNECT nch_12od15_mac_gate M0_B BY VG
CONNECT nch_12od15_mac_gate VDR BY VG_VDR
CONNECT nch_12od15_mac_gate_dnw M0_A BY VG
CONNECT nch_12od15_mac_gate_dnw M0_B BY VG
CONNECT nch_12od15_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_elvt_mac_gate M0_A BY VG
CONNECT nch_elvt_mac_gate M0_B BY VG
CONNECT nch_elvt_mac_gate VDR BY VG_VDR
CONNECT nch_elvt_mac_gate_dnw M0_A BY VG
CONNECT nch_elvt_mac_gate_dnw M0_B BY VG
CONNECT nch_elvt_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_flrelvt_mac_gate M0_A BY VG
CONNECT nch_flrelvt_mac_gate M0_B BY VG
CONNECT nch_flrelvt_mac_gate VDR BY VG_VDR
CONNECT nch_flrlvt_mac_gate M0_A BY VG
CONNECT nch_flrlvt_mac_gate M0_B BY VG
CONNECT nch_flrlvt_mac_gate VDR BY VG_VDR
CONNECT nch_flrlvtll_mac_gate M0_A BY VG
CONNECT nch_flrlvtll_mac_gate M0_B BY VG
CONNECT nch_flrlvtll_mac_gate VDR BY VG_VDR
CONNECT nch_flrsvt_mac_gate M0_A BY VG
CONNECT nch_flrsvt_mac_gate M0_B BY VG
CONNECT nch_flrsvt_mac_gate VDR BY VG_VDR
CONNECT nch_flrulvt_mac_gate M0_A BY VG
CONNECT nch_flrulvt_mac_gate M0_B BY VG
CONNECT nch_flrulvt_mac_gate VDR BY VG_VDR
CONNECT nch_flrulvtll_mac_gate M0_A BY VG
CONNECT nch_flrulvtll_mac_gate M0_B BY VG
CONNECT nch_flrulvtll_mac_gate VDR BY VG_VDR
CONNECT nch_lvt_mac_gate M0_A BY VG
CONNECT nch_lvt_mac_gate M0_B BY VG
CONNECT nch_lvt_mac_gate VDR BY VG_VDR
CONNECT nch_lvt_mac_gate_dnw M0_A BY VG
CONNECT nch_lvt_mac_gate_dnw M0_B BY VG
CONNECT nch_lvt_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_lvtll_mac_gate M0_A BY VG
CONNECT nch_lvtll_mac_gate M0_B BY VG
CONNECT nch_lvtll_mac_gate VDR BY VG_VDR
CONNECT nch_lvtll_mac_gate_dnw M0_A BY VG
CONNECT nch_lvtll_mac_gate_dnw M0_B BY VG
CONNECT nch_lvtll_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_mpode12_mac_gate M0_A BY VG
CONNECT nch_mpode12_mac_gate M0_B BY VG
CONNECT nch_mpode12_mac_gate VDR BY VG_VDR
CONNECT nch_mpode12od15_mac_gate M0_A BY VG
CONNECT nch_mpode12od15_mac_gate M0_B BY VG
CONNECT nch_mpode12od15_mac_gate VDR BY VG_VDR
CONNECT nch_mpodeelvt_mac_gate M0_A BY VG
CONNECT nch_mpodeelvt_mac_gate M0_B BY VG
CONNECT nch_mpodeelvt_mac_gate VDR BY VG_VDR
CONNECT nch_mpodelvt_mac_gate M0_A BY VG
CONNECT nch_mpodelvt_mac_gate M0_B BY VG
CONNECT nch_mpodelvt_mac_gate VDR BY VG_VDR
CONNECT nch_mpodelvtll_mac_gate M0_A BY VG
CONNECT nch_mpodelvtll_mac_gate M0_B BY VG
CONNECT nch_mpodelvtll_mac_gate VDR BY VG_VDR
CONNECT nch_mpodesvt_mac_gate M0_A BY VG
CONNECT nch_mpodesvt_mac_gate M0_B BY VG
CONNECT nch_mpodesvt_mac_gate VDR BY VG_VDR
CONNECT nch_mpodeulvt_mac_gate M0_A BY VG
CONNECT nch_mpodeulvt_mac_gate M0_B BY VG
CONNECT nch_mpodeulvt_mac_gate VDR BY VG_VDR
CONNECT nch_mpodeulvtll_mac_gate M0_A BY VG
CONNECT nch_mpodeulvtll_mac_gate M0_B BY VG
CONNECT nch_mpodeulvtll_mac_gate VDR BY VG_VDR
CONNECT nch_svt_mac_gate M0_A BY VG
CONNECT nch_svt_mac_gate M0_B BY VG
CONNECT nch_svt_mac_gate VDR BY VG_VDR
CONNECT nch_svt_mac_gate_dnw M0_A BY VG
CONNECT nch_svt_mac_gate_dnw M0_B BY VG
CONNECT nch_svt_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_ulvt_mac_gate M0_A BY VG
CONNECT nch_ulvt_mac_gate M0_B BY VG
CONNECT nch_ulvt_mac_gate VDR BY VG_VDR
CONNECT nch_ulvt_mac_gate_dnw M0_A BY VG
CONNECT nch_ulvt_mac_gate_dnw M0_B BY VG
CONNECT nch_ulvt_mac_gate_dnw VDR BY VG_VDR
CONNECT nch_ulvtll_mac_gate M0_A BY VG
CONNECT nch_ulvtll_mac_gate M0_B BY VG
CONNECT nch_ulvtll_mac_gate VDR BY VG_VDR
CONNECT nch_ulvtll_mac_gate_dnw M0_A BY VG
CONNECT nch_ulvtll_mac_gate_dnw M0_B BY VG
CONNECT nch_ulvtll_mac_gate_dnw VDR BY VG_VDR
CONNECT ngate_hia12_mac M0_A BY VG
CONNECT ngate_hia12_mac M0_B BY VG
CONNECT ngate_hia12_mac VDR BY VG_VDR
CONNECT ngate_pd_8trpsr_mac M0_A BY VG
CONNECT ngate_pd_8trpsr_mac M0_B BY VG
CONNECT ngate_pd_8trpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_8tsr_mac M0_A BY VG
CONNECT ngate_pd_8tsr_mac M0_B BY VG
CONNECT ngate_pd_8tsr_mac VDR BY VG_VDR
CONNECT ngate_pd_camcpsr_mac M0_A BY VG
CONNECT ngate_pd_camcpsr_mac M0_B BY VG
CONNECT ngate_pd_camcpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_camsr_mac M0_A BY VG
CONNECT ngate_pd_camsr_mac M0_B BY VG
CONNECT ngate_pd_camsr_mac VDR BY VG_VDR
CONNECT ngate_pd_dpfsr_mac M0_A BY VG
CONNECT ngate_pd_dpfsr_mac M0_B BY VG
CONNECT ngate_pd_dpfsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hc8trpsr_mac M0_A BY VG
CONNECT ngate_pd_hc8trpsr_mac M0_B BY VG
CONNECT ngate_pd_hc8trpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hc8tsr_mac M0_A BY VG
CONNECT ngate_pd_hc8tsr_mac M0_B BY VG
CONNECT ngate_pd_hc8tsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hcsr_mac M0_A BY VG
CONNECT ngate_pd_hcsr_mac M0_B BY VG
CONNECT ngate_pd_hcsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hdcamcpsr_mac M0_A BY VG
CONNECT ngate_pd_hdcamcpsr_mac M0_B BY VG
CONNECT ngate_pd_hdcamcpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hdcamsr_mac M0_A BY VG
CONNECT ngate_pd_hdcamsr_mac M0_B BY VG
CONNECT ngate_pd_hdcamsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hdsr_mac M0_A BY VG
CONNECT ngate_pd_hdsr_mac M0_B BY VG
CONNECT ngate_pd_hdsr_mac VDR BY VG_VDR
CONNECT ngate_pd_hssr_mac M0_A BY VG
CONNECT ngate_pd_hssr_mac M0_B BY VG
CONNECT ngate_pd_hssr_mac VDR BY VG_VDR
CONNECT ngate_pd_tprpsr_mac M0_A BY VG
CONNECT ngate_pd_tprpsr_mac M0_B BY VG
CONNECT ngate_pd_tprpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_tpsr_mac M0_A BY VG
CONNECT ngate_pd_tpsr_mac M0_B BY VG
CONNECT ngate_pd_tpsr_mac VDR BY VG_VDR
CONNECT ngate_pd_ulhdsr_mac M0_A BY VG
CONNECT ngate_pd_ulhdsr_mac M0_B BY VG
CONNECT ngate_pd_ulhdsr_mac VDR BY VG_VDR
CONNECT ngate_pg_8trpsr_mac M0_A BY VG
CONNECT ngate_pg_8trpsr_mac M0_B BY VG
CONNECT ngate_pg_8trpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_8tsr_mac M0_A BY VG
CONNECT ngate_pg_8tsr_mac M0_B BY VG
CONNECT ngate_pg_8tsr_mac VDR BY VG_VDR
CONNECT ngate_pg_camcpsr_mac M0_A BY VG
CONNECT ngate_pg_camcpsr_mac M0_B BY VG
CONNECT ngate_pg_camcpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_camsr_mac M0_A BY VG
CONNECT ngate_pg_camsr_mac M0_B BY VG
CONNECT ngate_pg_camsr_mac VDR BY VG_VDR
CONNECT ngate_pg_dpfsr_mac M0_A BY VG
CONNECT ngate_pg_dpfsr_mac M0_B BY VG
CONNECT ngate_pg_dpfsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hc8trpsr_mac M0_A BY VG
CONNECT ngate_pg_hc8trpsr_mac M0_B BY VG
CONNECT ngate_pg_hc8trpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hc8tsr_mac M0_A BY VG
CONNECT ngate_pg_hc8tsr_mac M0_B BY VG
CONNECT ngate_pg_hc8tsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hcsr_mac M0_A BY VG
CONNECT ngate_pg_hcsr_mac M0_B BY VG
CONNECT ngate_pg_hcsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hdcamcpsr_mac M0_A BY VG
CONNECT ngate_pg_hdcamcpsr_mac M0_B BY VG
CONNECT ngate_pg_hdcamcpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hdcamsr_mac M0_A BY VG
CONNECT ngate_pg_hdcamsr_mac M0_B BY VG
CONNECT ngate_pg_hdcamsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hdsr_mac M0_A BY VG
CONNECT ngate_pg_hdsr_mac M0_B BY VG
CONNECT ngate_pg_hdsr_mac VDR BY VG_VDR
CONNECT ngate_pg_hssr_mac M0_A BY VG
CONNECT ngate_pg_hssr_mac M0_B BY VG
CONNECT ngate_pg_hssr_mac VDR BY VG_VDR
CONNECT ngate_pg_tprpsr_mac M0_A BY VG
CONNECT ngate_pg_tprpsr_mac M0_B BY VG
CONNECT ngate_pg_tprpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_tpsr_mac M0_A BY VG
CONNECT ngate_pg_tpsr_mac M0_B BY VG
CONNECT ngate_pg_tpsr_mac VDR BY VG_VDR
CONNECT ngate_pg_ulhdsr_mac M0_A BY VG
CONNECT ngate_pg_ulhdsr_mac M0_B BY VG
CONNECT ngate_pg_ulhdsr_mac VDR BY VG_VDR
CONNECT npode_12_mac_gate M0_A BY VG
CONNECT npode_12_mac_gate M0_B BY VG
CONNECT npode_12_mac_gate VDR BY VG_VDR
CONNECT npode_12_mac_gate nch_12_mac_gate
CONNECT npode_12_mac_gate nch_12_mac_gate_dnw
CONNECT npode_12_mac_gate nch_mpode12_mac_gate
CONNECT npode_12od15_mac_gate M0_A BY VG
CONNECT npode_12od15_mac_gate M0_B BY VG
CONNECT npode_12od15_mac_gate VDR BY VG_VDR
CONNECT npode_elvt_mac_gate M0_A BY VG
CONNECT npode_elvt_mac_gate M0_B BY VG
CONNECT npode_elvt_mac_gate VDR BY VG_VDR
CONNECT npode_elvt_mac_gate nch_elvt_mac_gate
CONNECT npode_elvt_mac_gate nch_elvt_mac_gate_dnw
CONNECT npode_elvt_mac_gate nch_mpodeelvt_mac_gate
CONNECT npode_lvt_mac_gate M0_A BY VG
CONNECT npode_lvt_mac_gate M0_B BY VG
CONNECT npode_lvt_mac_gate VDR BY VG_VDR
CONNECT npode_lvt_mac_gate nch_lvt_mac_gate
CONNECT npode_lvt_mac_gate nch_lvt_mac_gate_dnw
CONNECT npode_lvt_mac_gate nch_mpodelvt_mac_gate
CONNECT npode_lvtll_mac_gate M0_A BY VG
CONNECT npode_lvtll_mac_gate M0_B BY VG
CONNECT npode_lvtll_mac_gate VDR BY VG_VDR
CONNECT npode_lvtll_mac_gate nch_lvtll_mac_gate
CONNECT npode_lvtll_mac_gate nch_lvtll_mac_gate_dnw
CONNECT npode_lvtll_mac_gate nch_mpodelvtll_mac_gate
CONNECT npode_svt_mac_gate M0_A BY VG
CONNECT npode_svt_mac_gate M0_B BY VG
CONNECT npode_svt_mac_gate VDR BY VG_VDR
CONNECT npode_svt_mac_gate nch_mpodesvt_mac_gate
CONNECT npode_svt_mac_gate nch_svt_mac_gate
CONNECT npode_svt_mac_gate nch_svt_mac_gate_dnw
CONNECT npode_ulvt_mac_gate M0_A BY VG
CONNECT npode_ulvt_mac_gate M0_B BY VG
CONNECT npode_ulvt_mac_gate VDR BY VG_VDR
CONNECT npode_ulvt_mac_gate nch_mpodeulvt_mac_gate
CONNECT npode_ulvt_mac_gate nch_ulvt_mac_gate
CONNECT npode_ulvt_mac_gate nch_ulvt_mac_gate_dnw
CONNECT npode_ulvtll_mac_gate M0_A BY VG
CONNECT npode_ulvtll_mac_gate M0_B BY VG
CONNECT npode_ulvtll_mac_gate VDR BY VG_VDR
CONNECT npode_ulvtll_mac_gate nch_mpodeulvtll_mac_gate
CONNECT npode_ulvtll_mac_gate nch_ulvtll_mac_gate
CONNECT npode_ulvtll_mac_gate nch_ulvtll_mac_gate_dnw
CONNECT p_fpoly_elvt M0_A BY VG
CONNECT p_fpoly_elvt M0_B BY VG
CONNECT p_fpoly_elvt VDR BY VG_VDR
CONNECT p_fpoly_elvt n_fpoly_srm
CONNECT p_fpoly_elvt p_fpoly_srm
CONNECT p_fpoly_elvt p_gpoly_elvt
CONNECT p_fpoly_elvt p_pode_elvt
CONNECT p_fpoly_io M0_A BY VG
CONNECT p_fpoly_io M0_B BY VG
CONNECT p_fpoly_io VDR BY VG_VDR
CONNECT p_fpoly_io p_gpoly_io
CONNECT p_fpoly_io p_gpoly_nocg_io
CONNECT p_fpoly_io p_pode_io
CONNECT p_fpoly_lvt M0_A BY VG
CONNECT p_fpoly_lvt M0_B BY VG
CONNECT p_fpoly_lvt VDR BY VG_VDR
CONNECT p_fpoly_lvt n_fpoly_srm
CONNECT p_fpoly_lvt p_fpoly_elvt
CONNECT p_fpoly_lvt p_fpoly_srm
CONNECT p_fpoly_lvt p_fpoly_ulvt
CONNECT p_fpoly_lvt p_fpoly_ulvtll
CONNECT p_fpoly_lvt p_gpoly_lvt
CONNECT p_fpoly_lvt p_pode_lvt
CONNECT p_fpoly_lvtll M0_A BY VG
CONNECT p_fpoly_lvtll M0_B BY VG
CONNECT p_fpoly_lvtll VDR BY VG_VDR
CONNECT p_fpoly_lvtll n_fpoly_srm
CONNECT p_fpoly_lvtll p_fpoly_elvt
CONNECT p_fpoly_lvtll p_fpoly_lvt
CONNECT p_fpoly_lvtll p_fpoly_srm
CONNECT p_fpoly_lvtll p_fpoly_ulvt
CONNECT p_fpoly_lvtll p_fpoly_ulvtll
CONNECT p_fpoly_lvtll p_gpoly_lvtll
CONNECT p_fpoly_lvtll p_pode_lvtll
CONNECT p_fpoly_srm M0_A BY VG
CONNECT p_fpoly_srm M0_B BY VG
CONNECT p_fpoly_srm VDR BY VG_VDR
CONNECT p_fpoly_srm p_gpoly_srm
CONNECT p_fpoly_svt M0_A BY VG
CONNECT p_fpoly_svt M0_B BY VG
CONNECT p_fpoly_svt VDR BY VG_VDR
CONNECT p_fpoly_svt n_fpoly_srm
CONNECT p_fpoly_svt p_fpoly_elvt
CONNECT p_fpoly_svt p_fpoly_lvt
CONNECT p_fpoly_svt p_fpoly_lvtll
CONNECT p_fpoly_svt p_fpoly_srm
CONNECT p_fpoly_svt p_fpoly_ulvt
CONNECT p_fpoly_svt p_fpoly_ulvtll
CONNECT p_fpoly_svt p_gpoly_svt
CONNECT p_fpoly_svt p_pode_svt
CONNECT p_fpoly_ulvt M0_A BY VG
CONNECT p_fpoly_ulvt M0_B BY VG
CONNECT p_fpoly_ulvt VDR BY VG_VDR
CONNECT p_fpoly_ulvt n_fpoly_srm
CONNECT p_fpoly_ulvt p_fpoly_elvt
CONNECT p_fpoly_ulvt p_fpoly_srm
CONNECT p_fpoly_ulvt p_gpoly_nocg_ulvt
CONNECT p_fpoly_ulvt p_gpoly_ulvt
CONNECT p_fpoly_ulvt p_pode_ulvt
CONNECT p_fpoly_ulvtll M0_A BY VG
CONNECT p_fpoly_ulvtll M0_B BY VG
CONNECT p_fpoly_ulvtll VDR BY VG_VDR
CONNECT p_fpoly_ulvtll n_fpoly_srm
CONNECT p_fpoly_ulvtll p_fpoly_elvt
CONNECT p_fpoly_ulvtll p_fpoly_srm
CONNECT p_fpoly_ulvtll p_fpoly_ulvt
CONNECT p_fpoly_ulvtll p_gpoly_ulvtll
CONNECT p_fpoly_ulvtll p_pode_ulvtll
CONNECT p_gpoly_elvt M0_A BY VG
CONNECT p_gpoly_elvt M0_B BY VG
CONNECT p_gpoly_elvt VDR BY VG_VDR
CONNECT p_gpoly_elvt p_pode_elvt
CONNECT p_gpoly_io M0_A BY VG
CONNECT p_gpoly_io M0_B BY VG
CONNECT p_gpoly_io VDR BY VG_VDR
CONNECT p_gpoly_io p_pode_io
CONNECT p_gpoly_lvt M0_A BY VG
CONNECT p_gpoly_lvt M0_B BY VG
CONNECT p_gpoly_lvt VDR BY VG_VDR
CONNECT p_gpoly_lvt p_pode_lvt
CONNECT p_gpoly_lvtll M0_A BY VG
CONNECT p_gpoly_lvtll M0_B BY VG
CONNECT p_gpoly_lvtll VDR BY VG_VDR
CONNECT p_gpoly_lvtll p_pode_lvtll
CONNECT p_gpoly_nocg_io M0_A BY VG
CONNECT p_gpoly_nocg_io M0_B BY VG
CONNECT p_gpoly_nocg_io VDR BY VG_VDR
CONNECT p_gpoly_nocg_io p_pode_io
CONNECT p_gpoly_nocg_ulvt M0_A BY VG
CONNECT p_gpoly_nocg_ulvt M0_B BY VG
CONNECT p_gpoly_nocg_ulvt VDR BY VG_VDR
CONNECT p_gpoly_nocg_ulvt p_pode_ulvt
CONNECT p_gpoly_srm M0_A BY VG
CONNECT p_gpoly_srm M0_B BY VG
CONNECT p_gpoly_srm VDR BY VG_VDR
CONNECT p_gpoly_svt M0_A BY VG
CONNECT p_gpoly_svt M0_B BY VG
CONNECT p_gpoly_svt VDR BY VG_VDR
CONNECT p_gpoly_svt p_pode_svt
CONNECT p_gpoly_ulvt M0_A BY VG
CONNECT p_gpoly_ulvt M0_B BY VG
CONNECT p_gpoly_ulvt VDR BY VG_VDR
CONNECT p_gpoly_ulvt p_pode_ulvt
CONNECT p_gpoly_ulvtll M0_A BY VG
CONNECT p_gpoly_ulvtll M0_B BY VG
CONNECT p_gpoly_ulvtll VDR BY VG_VDR
CONNECT p_gpoly_ulvtll p_pode_ulvtll
CONNECT p_pode_elvt M0_A BY VG
CONNECT p_pode_elvt M0_B BY VG
CONNECT p_pode_elvt VDR BY VG_VDR
CONNECT p_pode_io M0_A BY VG
CONNECT p_pode_io M0_B BY VG
CONNECT p_pode_io VDR BY VG_VDR
CONNECT p_pode_lvt M0_A BY VG
CONNECT p_pode_lvt M0_B BY VG
CONNECT p_pode_lvt VDR BY VG_VDR
CONNECT p_pode_lvtll M0_A BY VG
CONNECT p_pode_lvtll M0_B BY VG
CONNECT p_pode_lvtll VDR BY VG_VDR
CONNECT p_pode_svt M0_A BY VG
CONNECT p_pode_svt M0_B BY VG
CONNECT p_pode_svt VDR BY VG_VDR
CONNECT p_pode_ulvt M0_A BY VG
CONNECT p_pode_ulvt M0_B BY VG
CONNECT p_pode_ulvt VDR BY VG_VDR
CONNECT p_pode_ulvtll M0_A BY VG
CONNECT p_pode_ulvtll M0_B BY VG
CONNECT p_pode_ulvtll VDR BY VG_VDR
CONNECT pch_12_mac_gate M0_A BY VG
CONNECT pch_12_mac_gate M0_B BY VG
CONNECT pch_12_mac_gate VDR BY VG_VDR
CONNECT pch_12od15_mac_gate M0_A BY VG
CONNECT pch_12od15_mac_gate M0_B BY VG
CONNECT pch_12od15_mac_gate VDR BY VG_VDR
CONNECT pch_elvt_mac_gate M0_A BY VG
CONNECT pch_elvt_mac_gate M0_B BY VG
CONNECT pch_elvt_mac_gate VDR BY VG_VDR
CONNECT pch_flrelvt_mac_gate M0_A BY VG
CONNECT pch_flrelvt_mac_gate M0_B BY VG
CONNECT pch_flrelvt_mac_gate VDR BY VG_VDR
CONNECT pch_flrlvt_mac_gate M0_A BY VG
CONNECT pch_flrlvt_mac_gate M0_B BY VG
CONNECT pch_flrlvt_mac_gate VDR BY VG_VDR
CONNECT pch_flrlvtll_mac_gate M0_A BY VG
CONNECT pch_flrlvtll_mac_gate M0_B BY VG
CONNECT pch_flrlvtll_mac_gate VDR BY VG_VDR
CONNECT pch_flrsvt_mac_gate M0_A BY VG
CONNECT pch_flrsvt_mac_gate M0_B BY VG
CONNECT pch_flrsvt_mac_gate VDR BY VG_VDR
CONNECT pch_flrulvt_mac_gate M0_A BY VG
CONNECT pch_flrulvt_mac_gate M0_B BY VG
CONNECT pch_flrulvt_mac_gate VDR BY VG_VDR
CONNECT pch_flrulvtll_mac_gate M0_A BY VG
CONNECT pch_flrulvtll_mac_gate M0_B BY VG
CONNECT pch_flrulvtll_mac_gate VDR BY VG_VDR
CONNECT pch_lvt_mac_gate M0_A BY VG
CONNECT pch_lvt_mac_gate M0_B BY VG
CONNECT pch_lvt_mac_gate VDR BY VG_VDR
CONNECT pch_lvtll_mac_gate M0_A BY VG
CONNECT pch_lvtll_mac_gate M0_B BY VG
CONNECT pch_lvtll_mac_gate VDR BY VG_VDR
CONNECT pch_mpode12_mac_gate M0_A BY VG
CONNECT pch_mpode12_mac_gate M0_B BY VG
CONNECT pch_mpode12_mac_gate VDR BY VG_VDR
CONNECT pch_mpode12od15_mac_gate M0_A BY VG
CONNECT pch_mpode12od15_mac_gate M0_B BY VG
CONNECT pch_mpode12od15_mac_gate VDR BY VG_VDR
CONNECT pch_mpodeelvt_mac_gate M0_A BY VG
CONNECT pch_mpodeelvt_mac_gate M0_B BY VG
CONNECT pch_mpodeelvt_mac_gate VDR BY VG_VDR
CONNECT pch_mpodelvt_mac_gate M0_A BY VG
CONNECT pch_mpodelvt_mac_gate M0_B BY VG
CONNECT pch_mpodelvt_mac_gate VDR BY VG_VDR
CONNECT pch_mpodelvtll_mac_gate M0_A BY VG
CONNECT pch_mpodelvtll_mac_gate M0_B BY VG
CONNECT pch_mpodelvtll_mac_gate VDR BY VG_VDR
CONNECT pch_mpodesvt_mac_gate M0_A BY VG
CONNECT pch_mpodesvt_mac_gate M0_B BY VG
CONNECT pch_mpodesvt_mac_gate VDR BY VG_VDR
CONNECT pch_mpodeulvt_mac_gate M0_A BY VG
CONNECT pch_mpodeulvt_mac_gate M0_B BY VG
CONNECT pch_mpodeulvt_mac_gate VDR BY VG_VDR
CONNECT pch_mpodeulvtll_mac_gate M0_A BY VG
CONNECT pch_mpodeulvtll_mac_gate M0_B BY VG
CONNECT pch_mpodeulvtll_mac_gate VDR BY VG_VDR
CONNECT pch_svt_mac_gate M0_A BY VG
CONNECT pch_svt_mac_gate M0_B BY VG
CONNECT pch_svt_mac_gate VDR BY VG_VDR
CONNECT pch_ulvt_mac_gate M0_A BY VG
CONNECT pch_ulvt_mac_gate M0_B BY VG
CONNECT pch_ulvt_mac_gate VDR BY VG_VDR
CONNECT pch_ulvtll_mac_gate M0_A BY VG
CONNECT pch_ulvtll_mac_gate M0_B BY VG
CONNECT pch_ulvtll_mac_gate VDR BY VG_VDR
CONNECT pgate_pu_8tsr_mac M0_A BY VG
CONNECT pgate_pu_8tsr_mac M0_B BY VG
CONNECT pgate_pu_8tsr_mac VDR BY VG_VDR
CONNECT pgate_pu_camsr_mac M0_A BY VG
CONNECT pgate_pu_camsr_mac M0_B BY VG
CONNECT pgate_pu_camsr_mac VDR BY VG_VDR
CONNECT pgate_pu_dpfsr_mac M0_A BY VG
CONNECT pgate_pu_dpfsr_mac M0_B BY VG
CONNECT pgate_pu_dpfsr_mac VDR BY VG_VDR
CONNECT pgate_pu_hc8tsr_mac M0_A BY VG
CONNECT pgate_pu_hc8tsr_mac M0_B BY VG
CONNECT pgate_pu_hc8tsr_mac VDR BY VG_VDR
CONNECT pgate_pu_hcsr_mac M0_A BY VG
CONNECT pgate_pu_hcsr_mac M0_B BY VG
CONNECT pgate_pu_hcsr_mac VDR BY VG_VDR
CONNECT pgate_pu_hdcamsr_mac M0_A BY VG
CONNECT pgate_pu_hdcamsr_mac M0_B BY VG
CONNECT pgate_pu_hdcamsr_mac VDR BY VG_VDR
CONNECT pgate_pu_hdsr_mac M0_A BY VG
CONNECT pgate_pu_hdsr_mac M0_B BY VG
CONNECT pgate_pu_hdsr_mac VDR BY VG_VDR
CONNECT pgate_pu_hssr_mac M0_A BY VG
CONNECT pgate_pu_hssr_mac M0_B BY VG
CONNECT pgate_pu_hssr_mac VDR BY VG_VDR
CONNECT pgate_pu_tpsr_mac M0_A BY VG
CONNECT pgate_pu_tpsr_mac M0_B BY VG
CONNECT pgate_pu_tpsr_mac VDR BY VG_VDR
CONNECT pgate_pu_ulhdsr_mac M0_A BY VG
CONNECT pgate_pu_ulhdsr_mac M0_B BY VG
CONNECT pgate_pu_ulhdsr_mac VDR BY VG_VDR
CONNECT ppode_12_mac_gate M0_A BY VG
CONNECT ppode_12_mac_gate M0_B BY VG
CONNECT ppode_12_mac_gate VDR BY VG_VDR
CONNECT ppode_12_mac_gate pch_12_mac_gate
CONNECT ppode_12_mac_gate pch_mpode12_mac_gate
CONNECT ppode_12od15_mac_gate M0_A BY VG
CONNECT ppode_12od15_mac_gate M0_B BY VG
CONNECT ppode_12od15_mac_gate VDR BY VG_VDR
CONNECT ppode_elvt_mac_gate M0_A BY VG
CONNECT ppode_elvt_mac_gate M0_B BY VG
CONNECT ppode_elvt_mac_gate VDR BY VG_VDR
CONNECT ppode_elvt_mac_gate pch_elvt_mac_gate
CONNECT ppode_elvt_mac_gate pch_mpodeelvt_mac_gate
CONNECT ppode_lvt_mac_gate M0_A BY VG
CONNECT ppode_lvt_mac_gate M0_B BY VG
CONNECT ppode_lvt_mac_gate VDR BY VG_VDR
CONNECT ppode_lvt_mac_gate pch_lvt_mac_gate
CONNECT ppode_lvt_mac_gate pch_mpodelvt_mac_gate
CONNECT ppode_lvtll_mac_gate M0_A BY VG
CONNECT ppode_lvtll_mac_gate M0_B BY VG
CONNECT ppode_lvtll_mac_gate VDR BY VG_VDR
CONNECT ppode_lvtll_mac_gate pch_lvtll_mac_gate
CONNECT ppode_lvtll_mac_gate pch_mpodelvtll_mac_gate
CONNECT ppode_svt_mac_gate M0_A BY VG
CONNECT ppode_svt_mac_gate M0_B BY VG
CONNECT ppode_svt_mac_gate VDR BY VG_VDR
CONNECT ppode_svt_mac_gate pch_mpodesvt_mac_gate
CONNECT ppode_svt_mac_gate pch_svt_mac_gate
CONNECT ppode_ulvt_mac_gate M0_A BY VG
CONNECT ppode_ulvt_mac_gate M0_B BY VG
CONNECT ppode_ulvt_mac_gate VDR BY VG_VDR
CONNECT ppode_ulvt_mac_gate pch_mpodeulvt_mac_gate
CONNECT ppode_ulvt_mac_gate pch_ulvt_mac_gate
CONNECT ppode_ulvtll_mac_gate M0_A BY VG
CONNECT ppode_ulvtll_mac_gate M0_B BY VG
CONNECT ppode_ulvtll_mac_gate VDR BY VG_VDR
CONNECT ppode_ulvtll_mac_gate pch_mpodeulvtll_mac_gate
CONNECT ppode_ulvtll_mac_gate pch_ulvtll_mac_gate
CONNECT tndiff tiod
CONNECT tndiff tndiff_bjt
CONNECT tndiff tndiff_dio
CONNECT tndiff tndiff_sdi
CONNECT tndiff tpdiff
CONNECT tndiff_bjt tndiff
CONNECT tndiff_sdi tiod
CONNECT tndiff_sdi tndiff
CONNECT tpdiff tiod
CONNECT tpdiff tpdiff_bjt
CONNECT tpdiff tpdiff_dio
CONNECT tpdiff_bjt tpdiff
CONNECT vargt M0_A BY VG
CONNECT vargt M0_B BY VG
CONNECT vargt VDR BY VG_VDR
CONNECT vargt_12 M0_A BY VG
CONNECT vargt_12 M0_B BY VG
CONNECT vargt_12 VDR BY VG_VDR
CONNECT vargt_12od15 M0_A BY VG
CONNECT vargt_12od15 M0_B BY VG
CONNECT vargt_12od15 VDR BY VG_VDR
#IFNDEF RC_DFM_RULE
CONNECT ntap tndiff
CONNECT ntap tndiff_RC
CONNECT ntap tndiff_bjt
CONNECT ntap tndiff_dio
CONNECT ntap tndiff_sdi
CONNECT ptap tpdiff
CONNECT ptap tpdiff_RC
CONNECT ptap tpdiff_bjt
CONNECT ptap tpdiff_dio
#ENDIF

#IFDEF RC_DFM_RULE
CONNECT  nxwell DNW BY dnwc
CONNECT  tpdiff_dio psub BY pplug
CONNECT  tpdiff_bjt psub BY pplug
CONNECT  tpdiff_bjt coll1 BY pplug
CONNECT  tndiff_sdi nxwell BY nplug
CONNECT  tpdiff psub BY pplug
CONNECT  tpdiff coll1 BY pplug
CONNECT  tndiff_dio nxwell BY nplug
CONNECT  psub psub_term BY psub_term_plug
CONNECT  tndiff_bjt nxwell BY nplug
CONNECT  tndiff nxwell BY nplug
#ELSE
SCONNECT nxwell DNW BY dnwc
#IFNDEF NW_RING
  SCONNECT tpdiff_dio n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff_dio psub BY pplug
#IFNDEF NW_RING
  SCONNECT tpdiff_bjt n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff_bjt psub BY pplug
SCONNECT tpdiff_bjt coll1 BY pplug
SCONNECT tndiff_sdi nxwell BY nplug
#IFNDEF NW_RING
  SCONNECT tpdiff n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff psub BY pplug
SCONNECT tpdiff coll1 BY pplug
SCONNECT tndiff_dio nxwell BY nplug
SCONNECT psub psub_term BY psub_term_plug
SCONNECT tndiff_bjt nxwell BY nplug
SCONNECT tndiff nxwell BY nplug
#ENDIF
#IFDEF RC_DFM_RULE
#IFDEF MULTI_DEVICE_EXTRACTION
OD_id = COPY OD
CONNECT OD_id
OD_p = DFM PROPERTY OD_id
    [ ODNET = NETID(OD_id) ]
#ENDIF
#ENDIF
all_mos_gates = (((ppode_12od15_mac_gate OR (ppode_12_mac_gate OR (ppode_ulvtll_mac_gate OR (ppode_lvtll_mac_gate OR (ppode_elvt_mac_gate OR (ppode_ulvt_mac_gate OR (ppode_lvt_mac_gate OR (ppode_svt_mac_gate OR (npode_12od15_mac_gate OR (npode_12_mac_gate OR (npode_ulvtll_mac_gate OR (npode_lvtll_mac_gate OR (npode_elvt_mac_gate OR (npode_ulvt_mac_gate OR (npode_lvt_mac_gate OR (npode_svt_mac_gate OR (pch_mpode12od15_mac_gate OR (pch_mpode12_mac_gate OR (pch_mpodeulvtll_mac_gate OR (pch_mpodelvtll_mac_gate OR (pch_mpodeelvt_mac_gate OR (pch_mpodeulvt_mac_gate OR (pch_mpodelvt_mac_gate OR (pch_mpodesvt_mac_gate OR (nch_mpode12od15_mac_gate OR (nch_mpode12_mac_gate OR (nch_mpodeulvtll_mac_gate OR (nch_mpodelvtll_mac_gate OR (nch_mpodeelvt_mac_gate OR (nch_mpodeulvt_mac_gate OR (nch_mpodelvt_mac_gate OR (nch_mpodesvt_mac_gate OR (ngate_pd_hdcamcpsr_mac OR (ngate_pg_hdcamcpsr_mac OR (pgate_pu_hdcamsr_mac OR (ngate_pd_hdcamsr_mac OR (ngate_pg_hdcamsr_mac OR (ngate_pd_camcpsr_mac OR (ngate_pg_camcpsr_mac OR (pgate_pu_camsr_mac OR (ngate_pd_camsr_mac OR (ngate_pg_camsr_mac OR (pgate_pu_dpfsr_mac OR (ngate_pd_dpfsr_mac OR (ngate_pg_dpfsr_mac OR (ngate_pd_tprpsr_mac OR (ngate_pg_tprpsr_mac OR (pgate_pu_tpsr_mac OR (ngate_pd_tpsr_mac OR (ngate_pg_tpsr_mac OR (ngate_pd_8trpsr_mac OR (ngate_pg_8trpsr_mac OR (pgate_pu_8tsr_mac OR (ngate_pd_8tsr_mac OR (ngate_pg_8tsr_mac OR (pgate_pu_hssr_mac OR (ngate_pd_hssr_mac OR (ngate_pg_hssr_mac OR (ngate_pd_hc8trpsr_mac OR (ngate_pg_hc8trpsr_mac OR (pgate_pu_hc8tsr_mac OR (ngate_pd_hc8tsr_mac OR (ngate_pg_hc8tsr_mac OR (pgate_pu_hcsr_mac OR (ngate_pd_hcsr_mac OR (ngate_pg_hcsr_mac OR (pgate_pu_hdsr_mac OR (ngate_pd_hdsr_mac OR (ngate_pg_hdsr_mac OR (pgate_pu_ulhdsr_mac OR (ngate_pd_ulhdsr_mac OR (ngate_pg_ulhdsr_mac OR (pch_12od15_mac_gate OR (pch_12_mac_gate OR (pch_flrelvt_mac_gate OR (pch_flrulvtll_mac_gate OR (pch_flrulvt_mac_gate OR (pch_flrlvtll_mac_gate OR (pch_flrlvt_mac_gate OR (pch_flrsvt_mac_gate OR (pch_elvt_mac_gate OR (pch_ulvtll_mac_gate OR (pch_ulvt_mac_gate OR (pch_lvtll_mac_gate OR (pch_lvt_mac_gate OR (pch_svt_mac_gate OR (ngate_hia12_mac OR (nch_12od15_mac_gate_dnw OR (nch_12od15_mac_gate OR (nch_12_mac_gate_dnw OR (nch_12_mac_gate OR (nch_flrelvt_mac_gate OR (nch_flrulvtll_mac_gate OR (nch_flrulvt_mac_gate OR (nch_flrlvtll_mac_gate OR (nch_flrlvt_mac_gate OR (nch_flrsvt_mac_gate OR (nch_elvt_mac_gate_dnw OR (nch_elvt_mac_gate OR (nch_ulvtll_mac_gate_dnw OR (nch_ulvt_mac_gate_dnw OR (nch_ulvtll_mac_gate OR (nch_ulvt_mac_gate OR (nch_lvtll_mac_gate_dnw OR (nch_lvt_mac_gate_dnw OR (nch_lvtll_mac_gate OR (nch_lvt_mac_gate OR (nch_svt_mac_gate OR nch_svt_mac_gate_dnw)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) OR vargt) OR vargt_12) OR vargt_12od15
tndiff_gates = tndiff_all INTERACT all_mos_gates
tpdiff_gates = tpdiff_all INTERACT all_mos_gates

all_diode_form = COPY nwdio_r
tndiff_diode = tndiff_all INTERACT all_diode_form
tpdiff_diode = tpdiff_all INTERACT all_diode_form

all_rdiff_form = var_nw_rf12od15 OR (var_nw_rf12 OR (var_nw_rf OR (var_nw_rf12od15_nw OR (var_nw_rf12_nw OR (var_nw_rf_nw OR (ppode_12od15_mac_gate_edge OR (ppode_12_mac_gate_edge OR (ppode_ulvtll_mac_gate_edge OR (ppode_lvtll_mac_gate_edge OR (ppode_elvt_mac_gate_edge OR (ppode_ulvt_mac_gate_edge OR (ppode_lvt_mac_gate_edge OR (ppode_svt_mac_gate_edge OR (npode_12od15_mac_gate_edge OR (npode_12_mac_gate_edge OR (npode_ulvtll_mac_gate_edge OR (npode_lvtll_mac_gate_edge OR (npode_elvt_mac_gate_edge OR (npode_ulvt_mac_gate_edge OR (npode_svt_mac_gate_edge OR npode_lvt_mac_gate_edge))))))))))))))))))))
tndiff_r = tndiff_all INTERACT all_rdiff_form
tpdiff_r = tpdiff_all INTERACT all_rdiff_form

tndiff_RC = tndiff_all NOT ((tndiff_gates OR tndiff_diode) OR tndiff_r)
tndiff = tndiff_all NOT tndiff_RC

tpdiff_RC = tpdiff_all NOT ((tpdiff_gates OR tpdiff_diode) OR tpdiff_r)
tpdiff = tpdiff_all NOT tpdiff_RC


 /* SPECIAL CONNECTIONS FOR without R diffusion */ 
CONNECT tndiff tndiff_RC
CONNECT tpdiff tpdiff_RC
CONNECT tpdiff_RC tndiff_RC

CONNECT MD_OD_N tndiff_RC BY n_odtap 
CONNECT MD_OD_N_CPP85 tndiff_RC BY n_odtap 
CONNECT MD_OD_N_IO tndiff_RC BY n_odtap 
CONNECT MD_OD_N_SRM tndiff_RC BY n_odtap_srm 
CONNECT cnbase1 tndiff_RC BY nplug 
CONNECT tndiff_RC tiod 
CONNECT tndiff_RC tndiff_bjt 
CONNECT tndiff_RC tndiff_dio 
CONNECT tndiff_RC tndiff_sdi 
CONNECT tndiff_RC tpdiff 
CONNECT tndiff_bjt tndiff_RC 
CONNECT tndiff_sdi tndiff_RC 

CONNECT MD_OD_P tpdiff_RC BY p_odtap 
CONNECT MD_OD_P_CPP85 tpdiff_RC BY p_odtap 
CONNECT MD_OD_P_IO tpdiff_RC BY p_odtap 
CONNECT MD_OD_P_SRM tpdiff_RC BY p_odtap_srm 
CONNECT tndiff tpdiff_RC 
CONNECT tpdiff_RC tiod 
CONNECT tpdiff_RC tpdiff_bjt 
CONNECT tpdiff_RC tpdiff_dio 
CONNECT tpdiff_bjt tpdiff_RC 


#IFDEF RC_DFM_RULE
CONNECT tndiff_RC nxwell BY nplug 
CONNECT tpdiff_RC coll1 BY pplug 
CONNECT tpdiff_RC psub BY pplug 

#ELSE
SCONNECT tndiff_RC nxwell BY nplug 
SCONNECT tpdiff_RC coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT tpdiff_RC n_psub BY n_pplug 
#ENDIF
SCONNECT tpdiff_RC psub BY pplug 

#ENDIF
CONNECT vargt n_fpoly_ulvt
CONNECT vargt_12 n_fpoly_io_ulvt
CONNECT vargt_12od15 n_fpoly_io_ulvt
CONNECT nch_12_mac_gate_dnw n_fpoly_io
CONNECT nch_12_mac_gate n_fpoly_io
CONNECT nch_12od15_mac_gate_dnw n_fpoly_io
CONNECT nch_12od15_mac_gate n_fpoly_io
CONNECT nch_elvt_mac_gate_dnw n_fpoly_elvt
CONNECT nch_elvt_mac_gate n_fpoly_elvt
CONNECT nch_flrelvt_mac_gate n_fpoly_elvt
CONNECT nch_flrlvt_mac_gate n_fpoly_lvt
CONNECT nch_flrlvtll_mac_gate n_fpoly_lvtll
CONNECT nch_flrsvt_mac_gate n_fpoly_svt
CONNECT nch_flrulvt_mac_gate n_fpoly_ulvt
CONNECT nch_flrulvtll_mac_gate n_fpoly_ulvtll
CONNECT nch_lvt_mac_gate_dnw n_fpoly_lvt
CONNECT nch_lvt_mac_gate n_fpoly_lvt
CONNECT nch_lvtll_mac_gate_dnw n_fpoly_lvtll
CONNECT nch_lvtll_mac_gate n_fpoly_lvtll
CONNECT nch_mpode12_mac_gate n_fpoly_io
CONNECT nch_mpode12od15_mac_gate n_fpoly_io
CONNECT nch_mpodeelvt_mac_gate n_fpoly_elvt
CONNECT nch_mpodelvt_mac_gate n_fpoly_lvt
CONNECT nch_mpodelvtll_mac_gate n_fpoly_lvtll
CONNECT nch_mpodesvt_mac_gate n_fpoly_svt
CONNECT nch_mpodeulvt_mac_gate n_fpoly_ulvt
CONNECT nch_mpodeulvtll_mac_gate n_fpoly_ulvtll
CONNECT nch_svt_mac_gate_dnw n_fpoly_svt
CONNECT nch_svt_mac_gate n_fpoly_svt
CONNECT nch_ulvt_mac_gate_dnw n_fpoly_ulvt
CONNECT nch_ulvt_mac_gate n_fpoly_ulvt
CONNECT nch_ulvtll_mac_gate_dnw n_fpoly_ulvtll
CONNECT nch_ulvtll_mac_gate n_fpoly_ulvtll
CONNECT ngate_pd_8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_8tsr_mac n_fpoly_srm
CONNECT ngate_pd_camcpsr_mac n_fpoly_srm
CONNECT ngate_pd_camsr_mac n_fpoly_srm
CONNECT ngate_pd_dpfsr_mac n_fpoly_srm
CONNECT ngate_pd_hc8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_hc8tsr_mac n_fpoly_srm
CONNECT ngate_pd_hcsr_mac n_fpoly_srm
CONNECT ngate_pd_hdcamcpsr_mac n_fpoly_srm
CONNECT ngate_pd_hdcamsr_mac n_fpoly_srm
CONNECT ngate_pd_hdsr_mac n_fpoly_srm
CONNECT ngate_pd_hssr_mac n_fpoly_srm
CONNECT ngate_pd_tprpsr_mac n_fpoly_srm
CONNECT ngate_pd_tpsr_mac n_fpoly_srm
CONNECT ngate_pd_ulhdsr_mac n_fpoly_srm
CONNECT ngate_pg_8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_8tsr_mac n_fpoly_srm
CONNECT ngate_pg_camcpsr_mac n_fpoly_srm
CONNECT ngate_pg_camsr_mac n_fpoly_srm
CONNECT ngate_pg_dpfsr_mac n_fpoly_srm
CONNECT ngate_pg_hc8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_hc8tsr_mac n_fpoly_srm
CONNECT ngate_pg_hcsr_mac n_fpoly_srm
CONNECT ngate_pg_hdcamcpsr_mac n_fpoly_srm
CONNECT ngate_pg_hdcamsr_mac n_fpoly_srm
CONNECT ngate_pg_hdsr_mac n_fpoly_srm
CONNECT ngate_pg_hssr_mac n_fpoly_srm
CONNECT ngate_pg_tprpsr_mac n_fpoly_srm
CONNECT ngate_pg_tpsr_mac n_fpoly_srm
CONNECT ngate_pg_ulhdsr_mac n_fpoly_srm
CONNECT pch_12_mac_gate p_fpoly_io
CONNECT pch_12od15_mac_gate p_fpoly_io
CONNECT pch_elvt_mac_gate p_fpoly_elvt
CONNECT pch_flrelvt_mac_gate p_fpoly_elvt
CONNECT pch_flrlvt_mac_gate p_fpoly_lvt
CONNECT pch_flrlvtll_mac_gate p_fpoly_lvtll
CONNECT pch_flrsvt_mac_gate p_fpoly_svt
CONNECT pch_flrulvt_mac_gate p_fpoly_ulvt
CONNECT pch_flrulvtll_mac_gate p_fpoly_ulvtll
CONNECT pch_lvt_mac_gate p_fpoly_lvt
CONNECT pch_lvtll_mac_gate p_fpoly_lvtll
CONNECT pch_mpode12_mac_gate p_fpoly_io
CONNECT pch_mpode12od15_mac_gate p_fpoly_io
CONNECT pch_mpodeelvt_mac_gate p_fpoly_elvt
CONNECT pch_mpodelvt_mac_gate p_fpoly_lvt
CONNECT pch_mpodelvtll_mac_gate p_fpoly_lvtll
CONNECT pch_mpodesvt_mac_gate p_fpoly_svt
CONNECT pch_mpodeulvt_mac_gate p_fpoly_ulvt
CONNECT pch_mpodeulvtll_mac_gate p_fpoly_ulvtll
CONNECT pch_svt_mac_gate p_fpoly_svt
CONNECT pch_ulvt_mac_gate p_fpoly_ulvt
CONNECT pch_ulvtll_mac_gate p_fpoly_ulvtll
CONNECT pgate_pu_8tsr_mac p_fpoly_srm
CONNECT pgate_pu_camsr_mac p_fpoly_srm
CONNECT pgate_pu_dpfsr_mac p_fpoly_srm
CONNECT pgate_pu_hc8tsr_mac p_fpoly_srm
CONNECT pgate_pu_hcsr_mac p_fpoly_srm
CONNECT pgate_pu_hdcamsr_mac p_fpoly_srm
CONNECT pgate_pu_hdsr_mac p_fpoly_srm
CONNECT pgate_pu_hssr_mac p_fpoly_srm
CONNECT pgate_pu_tpsr_mac p_fpoly_srm
CONNECT pgate_pu_ulhdsr_mac p_fpoly_srm
CONNECT ngate_hia12_mac n_fpoly_io
CONNECT n_fpoly_io npode_12_mac_gate
CONNECT n_fpoly_io npode_12od15_mac_gate
CONNECT n_fpoly_elvt npode_elvt_mac_gate
CONNECT n_fpoly_lvt npode_lvt_mac_gate
CONNECT n_fpoly_lvtll npode_lvtll_mac_gate
CONNECT n_fpoly_svt npode_svt_mac_gate
CONNECT n_fpoly_ulvt npode_ulvt_mac_gate
CONNECT n_fpoly_ulvtll npode_ulvtll_mac_gate
CONNECT p_fpoly_io ppode_12_mac_gate
CONNECT p_fpoly_io ppode_12od15_mac_gate
CONNECT p_fpoly_elvt ppode_elvt_mac_gate
CONNECT p_fpoly_lvt ppode_lvt_mac_gate
CONNECT p_fpoly_lvtll ppode_lvtll_mac_gate
CONNECT p_fpoly_svt ppode_svt_mac_gate
CONNECT p_fpoly_ulvt ppode_ulvt_mac_gate
CONNECT p_fpoly_ulvtll ppode_ulvtll_mac_gate

//#############################################
//# FORM DEVICE                               #
//#############################################
INCLUDE /project/foundry/TSMC/N5/M1_1Mx_1Mxb_1Mxe_1Mya_1Myb_5My_2Myy_2Myx_2Mr_UT_ALRDL/PDK/LVS/mentor/1.2A/profile/CALIBRE_FLOW/DFM/logic_operation2.encrypt

#IFDEF RC_DFM_RULE
INCLUDE /project/foundry/TSMC/N5/M1_1Mx_1Mxb_1Mxe_1Mya_1Myb_5My_2Myy_2Myx_2Mr_UT_ALRDL/PDK/LVS/mentor/1.2A/profile/CALIBRE_FLOW/DFM/dfm_device

DEVICE LDDN(nch_hia12_mac) ngate_hia12_mac tndiff_sdi(D) ngate_hia12_mac(G) tndiff(S) psub(B) <nthin> <OD>  <fbound_aux> netlist model nch_hia12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hia12_mac, tndiff ) + perimeter_coincide(ngate_hia12_mac, tndiff_sdi)) / 2
   L=area(ngate_hia12_mac) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_hia12_mac_ODN_layer = DEVICE LAYER LDDN(nch_hia12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia12_mac"
       ]
LVS ANNOTATE DEVICES nch_hia12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12_dnw_mac) nch_12_mac_gate_dnw nch_12_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12_mac_gate_dnw, tndiff)) / 2
   L=area(nch_12_mac_gate_dnw) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_12_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_12_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12_mac) nch_12_mac_gate nch_12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12_mac_gate, tndiff ) + perimeter_inside(nch_12_mac_gate, tndiff)) / 2
   L=area(nch_12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12_mac_ODN_layer = DEVICE LAYER MN(nch_12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12_mac"
       ]
LVS ANNOTATE DEVICES nch_12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12od15_dnw_mac) nch_12od15_mac_gate_dnw nch_12od15_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_12od15_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12od15_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12od15_mac_gate_dnw, tndiff)) / 2
   L=area(nch_12od15_mac_gate_dnw) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12od15_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_12od15_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12od15_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_12od15_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12od15_mac) nch_12od15_mac_gate nch_12od15_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_12od15_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12od15_mac_gate, tndiff ) + perimeter_inside(nch_12od15_mac_gate, tndiff)) / 2
   L=area(nch_12od15_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12od15_mac_ODN_layer = DEVICE LAYER MN(nch_12od15_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12od15_mac"
       ]
LVS ANNOTATE DEVICES nch_12od15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_dnw_mac) nch_elvt_mac_gate_dnw nch_elvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_elvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_elvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_mac) nch_elvt_mac_gate nch_elvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_elvt_mac_ODN_layer = DEVICE LAYER MN(nch_elvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_mac"
       ]
LVS ANNOTATE DEVICES nch_elvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrelvt_mac) nch_flrelvt_mac_gate nch_flrelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrelvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrelvt_mac_ODN_layer = DEVICE LAYER MN(nch_flrelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrelvt_mac"
       ]
LVS ANNOTATE DEVICES nch_flrelvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrlvt_mac) nch_flrlvt_mac_gate nch_flrlvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrlvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrlvt_mac_ODN_layer = DEVICE LAYER MN(nch_flrlvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrlvt_mac"
       ]
LVS ANNOTATE DEVICES nch_flrlvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrlvtll_mac) nch_flrlvtll_mac_gate nch_flrlvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrlvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrlvtll_mac_ODN_layer = DEVICE LAYER MN(nch_flrlvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrlvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_flrlvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrsvt_mac) nch_flrsvt_mac_gate nch_flrsvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrsvt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrsvt_mac_ODN_layer = DEVICE LAYER MN(nch_flrsvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrsvt_mac"
       ]
LVS ANNOTATE DEVICES nch_flrsvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrulvt_mac) nch_flrulvt_mac_gate nch_flrulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrulvt_mac_ODN_layer = DEVICE LAYER MN(nch_flrulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrulvt_mac"
       ]
LVS ANNOTATE DEVICES nch_flrulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_flrulvtll_mac) nch_flrulvtll_mac_gate nch_flrulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_flrulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_flrulvtll_mac_ODN_layer = DEVICE LAYER MN(nch_flrulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_flrulvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_flrulvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_dnw_mac) nch_lvt_mac_gate_dnw nch_lvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_lvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_mac) nch_lvt_mac_gate nch_lvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvt_mac_ODN_layer = DEVICE LAYER MN(nch_lvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_mac"
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtll_dnw_mac) nch_lvtll_mac_gate_dnw nch_lvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvtll_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_lvtll_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvtll_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_lvtll_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtll_mac) nch_lvtll_mac_gate nch_lvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvtll_mac_ODN_layer = DEVICE LAYER MN(nch_lvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_lvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpode12_mac) nch_mpode12_mac_gate nch_mpode12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_mpode12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_mpode12_mac_gate, tndiff ) + perimeter_inside(nch_mpode12_mac_gate, tndiff)) / 2
   L=area(nch_mpode12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpode12_mac_ODN_layer = DEVICE LAYER MN(nch_mpode12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpode12_mac"
       ]
LVS ANNOTATE DEVICES nch_mpode12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpode12od15_mac) nch_mpode12od15_mac_gate nch_mpode12od15_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin> <OD>  <matching_aux>  <fbound_aux> netlist model nch_mpode12od15_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_mpode12od15_mac_gate, tndiff ) + perimeter_inside(nch_mpode12od15_mac_gate, tndiff)) / 2
   L=area(nch_mpode12od15_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SN"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpode12od15_mac_ODN_layer = DEVICE LAYER MN(nch_mpode12od15_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpode12od15_mac"
       ]
LVS ANNOTATE DEVICES nch_mpode12od15_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeelvt_mac) nch_mpodeelvt_mac_gate nch_mpodeelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeelvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeelvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeelvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeelvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodelvt_mac) nch_mpodelvt_mac_gate nch_mpodelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodelvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodelvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodelvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodelvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodelvtll_mac) nch_mpodelvtll_mac_gate nch_mpodelvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodelvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodelvtll_mac_ODN_layer = DEVICE LAYER MN(nch_mpodelvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodelvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodelvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodesvt_mac) nch_mpodesvt_mac_gate nch_mpodesvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodesvt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodesvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodesvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodesvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodesvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeulvt_mac) nch_mpodeulvt_mac_gate nch_mpodeulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeulvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeulvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeulvtll_mac) nch_mpodeulvtll_mac_gate nch_mpodeulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeulvtll_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeulvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeulvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_svt_dnw_mac) nch_svt_mac_gate_dnw nch_svt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_svt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_svt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_svt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_svt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_svt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_svt_mac) nch_svt_mac_gate nch_svt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_svt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_svt_mac_ODN_layer = DEVICE LAYER MN(nch_svt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_svt_mac"
       ]
LVS ANNOTATE DEVICES nch_svt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvt_dnw_mac) nch_ulvt_mac_gate_dnw nch_ulvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_ulvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvt_mac) nch_ulvt_mac_gate nch_ulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvt_mac_ODN_layer = DEVICE LAYER MN(nch_ulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvtll_dnw_mac) nch_ulvtll_mac_gate_dnw nch_ulvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvtll_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_ulvtll_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvtll_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvtll_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvtll_mac) nch_ulvtll_mac_gate nch_ulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvtll_mac_ODN_layer = DEVICE LAYER MN(nch_ulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nchpd_8trpsr_mac) ngate_pd_8trpsr_mac ngate_pd_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8trpsr_mac)/2
   L = area(ngate_pd_8trpsr_mac)/W1
]

DEVICE MN(nchpd_8tsr_mac) ngate_pd_8tsr_mac ngate_pd_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8tsr_mac)/2
   L = area(ngate_pd_8tsr_mac)/W1
]

DEVICE MN(nchpd_camcpsr_mac) ngate_pd_camcpsr_mac ngate_pd_camcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_camcpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_camcpsr_mac)/2
   L = area(ngate_pd_camcpsr_mac)/W1
]

DEVICE MN(nchpd_camsr_mac) ngate_pd_camsr_mac ngate_pd_camsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_camsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_camsr_mac)/2
   L = area(ngate_pd_camsr_mac)/W1
]

DEVICE MN(nchpd_dpfsr_mac) ngate_pd_dpfsr_mac ngate_pd_dpfsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_dpfsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_dpfsr_mac)/2
   L = area(ngate_pd_dpfsr_mac)/W1
]

DEVICE MN(nchpd_hc8trpsr_mac) ngate_pd_hc8trpsr_mac ngate_pd_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8trpsr_mac)/2
   L = area(ngate_pd_hc8trpsr_mac)/W1
]

DEVICE MN(nchpd_hc8tsr_mac) ngate_pd_hc8tsr_mac ngate_pd_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8tsr_mac)/2
   L = area(ngate_pd_hc8tsr_mac)/W1
]

DEVICE MN(nchpd_hcsr_mac) ngate_pd_hcsr_mac ngate_pd_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hcsr_mac)/2
   L = area(ngate_pd_hcsr_mac)/W1
]

DEVICE MN(nchpd_hdcamcpsr_mac) ngate_pd_hdcamcpsr_mac ngate_pd_hdcamcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hdcamcpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdcamcpsr_mac)/2
   L = area(ngate_pd_hdcamcpsr_mac)/W1
]

DEVICE MN(nchpd_hdcamsr_mac) ngate_pd_hdcamsr_mac ngate_pd_hdcamsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hdcamsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdcamsr_mac)/2
   L = area(ngate_pd_hdcamsr_mac)/W1
]

DEVICE MN(nchpd_hdsr_mac) ngate_pd_hdsr_mac ngate_pd_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdsr_mac)/2
   L = area(ngate_pd_hdsr_mac)/W1
]

DEVICE MN(nchpd_hssr_mac) ngate_pd_hssr_mac ngate_pd_hssr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hssr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hssr_mac)/2
   L = area(ngate_pd_hssr_mac)/W1
]

DEVICE MN(nchpd_tprpsr_mac) ngate_pd_tprpsr_mac ngate_pd_tprpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_tprpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_tprpsr_mac)/2
   L = area(ngate_pd_tprpsr_mac)/W1
]

DEVICE MN(nchpd_tpsr_mac) ngate_pd_tpsr_mac ngate_pd_tpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_tpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_tpsr_mac)/2
   L = area(ngate_pd_tpsr_mac)/W1
]

DEVICE MN(nchpd_ulhdsr_mac) ngate_pd_ulhdsr_mac ngate_pd_ulhdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulhdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulhdsr_mac)/2
   L = area(ngate_pd_ulhdsr_mac)/W1
]

DEVICE MN(nchpg_8trpsr_mac) ngate_pg_8trpsr_mac ngate_pg_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8trpsr_mac)/2
   L = area(ngate_pg_8trpsr_mac)/W1
]

DEVICE MN(nchpg_8tsr_mac) ngate_pg_8tsr_mac ngate_pg_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8tsr_mac)/2
   L = area(ngate_pg_8tsr_mac)/W1
]

DEVICE MN(nchpg_camcpsr_mac) ngate_pg_camcpsr_mac ngate_pg_camcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_camcpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_camcpsr_mac)/2
   L = area(ngate_pg_camcpsr_mac)/W1
]

DEVICE MN(nchpg_camsr_mac) ngate_pg_camsr_mac ngate_pg_camsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_camsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_camsr_mac)/2
   L = area(ngate_pg_camsr_mac)/W1
]

DEVICE MN(nchpg_dpfsr_mac) ngate_pg_dpfsr_mac ngate_pg_dpfsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_dpfsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_dpfsr_mac)/2
   L = area(ngate_pg_dpfsr_mac)/W1
]

DEVICE MN(nchpg_hc8trpsr_mac) ngate_pg_hc8trpsr_mac ngate_pg_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8trpsr_mac)/2
   L = area(ngate_pg_hc8trpsr_mac)/W1
]

DEVICE MN(nchpg_hc8tsr_mac) ngate_pg_hc8tsr_mac ngate_pg_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8tsr_mac)/2
   L = area(ngate_pg_hc8tsr_mac)/W1
]

DEVICE MN(nchpg_hcsr_mac) ngate_pg_hcsr_mac ngate_pg_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hcsr_mac)/2
   L = area(ngate_pg_hcsr_mac)/W1
]

DEVICE MN(nchpg_hdcamcpsr_mac) ngate_pg_hdcamcpsr_mac ngate_pg_hdcamcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hdcamcpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdcamcpsr_mac)/2
   L = area(ngate_pg_hdcamcpsr_mac)/W1
]

DEVICE MN(nchpg_hdcamsr_mac) ngate_pg_hdcamsr_mac ngate_pg_hdcamsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hdcamsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdcamsr_mac)/2
   L = area(ngate_pg_hdcamsr_mac)/W1
]

DEVICE MN(nchpg_hdsr_mac) ngate_pg_hdsr_mac ngate_pg_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdsr_mac)/2
   L = area(ngate_pg_hdsr_mac)/W1
]

DEVICE MN(nchpg_hssr_mac) ngate_pg_hssr_mac ngate_pg_hssr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hssr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hssr_mac)/2
   L = area(ngate_pg_hssr_mac)/W1
]

DEVICE MN(nchpg_tprpsr_mac) ngate_pg_tprpsr_mac ngate_pg_tprpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_tprpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_tprpsr_mac)/2
   L = area(ngate_pg_tprpsr_mac)/W1
]

DEVICE MN(nchpg_tpsr_mac) ngate_pg_tpsr_mac ngate_pg_tpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_tpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_tpsr_mac)/2
   L = area(ngate_pg_tpsr_mac)/W1
]

DEVICE MN(nchpg_ulhdsr_mac) ngate_pg_ulhdsr_mac ngate_pg_ulhdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulhdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulhdsr_mac)/2
   L = area(ngate_pg_ulhdsr_mac)/W1
]

DEVICE MP(pch_12_mac) pch_12_mac_gate pch_12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD>  <matching_aux>  <fbound_aux> netlist model pch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_12_mac_gate, tpdiff ) + perimeter_inside(pch_12_mac_gate, tpdiff)) / 2
   L=area(pch_12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SP"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_12_mac_ODN_layer = DEVICE LAYER MP(pch_12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_12_mac"
       ]
LVS ANNOTATE DEVICES pch_12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_12od15_mac) pch_12od15_mac_gate pch_12od15_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD>  <matching_aux>  <fbound_aux>  <vtypeflag_aux> netlist model pch_12od15_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound,vtypeflag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_12od15_mac_gate, tpdiff ) + perimeter_inside(pch_12od15_mac_gate, tpdiff)) / 2
   L=area(pch_12od15_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
   vtypeflag = DFM_NUMERIC_VALUE(vtypeflag_aux,"vtypeflag")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SP"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_12od15_mac_ODN_layer = DEVICE LAYER MP(pch_12od15_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_12od15_mac"
       ]
LVS ANNOTATE DEVICES pch_12od15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_elvt_mac) pch_elvt_mac_gate pch_elvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_elvt_mac netlist element "X" CMACRO dfm_pmos "ELP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_elvt_mac_ODN_layer = DEVICE LAYER MP(pch_elvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt_mac"
       ]
LVS ANNOTATE DEVICES pch_elvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrelvt_mac) pch_flrelvt_mac_gate pch_flrelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrelvt_mac netlist element "X" CMACRO dfm_pmos "ELP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrelvt_mac_ODN_layer = DEVICE LAYER MP(pch_flrelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrelvt_mac"
       ]
LVS ANNOTATE DEVICES pch_flrelvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrlvt_mac) pch_flrlvt_mac_gate pch_flrlvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrlvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrlvt_mac_ODN_layer = DEVICE LAYER MP(pch_flrlvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrlvt_mac"
       ]
LVS ANNOTATE DEVICES pch_flrlvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrlvtll_mac) pch_flrlvtll_mac_gate pch_flrlvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrlvtll_mac netlist element "X" CMACRO dfm_pmos "LPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrlvtll_mac_ODN_layer = DEVICE LAYER MP(pch_flrlvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrlvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_flrlvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrsvt_mac) pch_flrsvt_mac_gate pch_flrsvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrsvt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrsvt_mac_ODN_layer = DEVICE LAYER MP(pch_flrsvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrsvt_mac"
       ]
LVS ANNOTATE DEVICES pch_flrsvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrulvt_mac) pch_flrulvt_mac_gate pch_flrulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrulvt_mac netlist element "X" CMACRO dfm_pmos "ULP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrulvt_mac_ODN_layer = DEVICE LAYER MP(pch_flrulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrulvt_mac"
       ]
LVS ANNOTATE DEVICES pch_flrulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_flrulvtll_mac) pch_flrulvtll_mac_gate pch_flrulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_flrulvtll_mac netlist element "X" CMACRO dfm_pmos "ULPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_flrulvtll_mac_ODN_layer = DEVICE LAYER MP(pch_flrulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_flrulvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_flrulvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvt_mac) pch_lvt_mac_gate pch_lvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_lvt_mac_ODN_layer = DEVICE LAYER MP(pch_lvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt_mac"
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvtll_mac) pch_lvtll_mac_gate pch_lvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvtll_mac netlist element "X" CMACRO dfm_pmos "LPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_lvtll_mac_ODN_layer = DEVICE LAYER MP(pch_lvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_lvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpode12_mac) pch_mpode12_mac_gate pch_mpode12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD>  <matching_aux>  <fbound_aux> netlist model pch_mpode12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_mpode12_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12_mac_gate, tpdiff)) / 2
   L=area(pch_mpode12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SP"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpode12_mac_ODN_layer = DEVICE LAYER MP(pch_mpode12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpode12_mac"
       ]
LVS ANNOTATE DEVICES pch_mpode12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpode12od15_mac) pch_mpode12od15_mac_gate pch_mpode12od15_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin> <OD>  <matching_aux>  <fbound_aux>  <vtypeflag_aux> netlist model pch_mpode12od15_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag,fbound,vtypeflag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   hidden property W, SCALE
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_mpode12od15_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12od15_mac_gate, tpdiff)) / 2
   L=area(pch_mpode12od15_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
   vtypeflag = DFM_NUMERIC_VALUE(vtypeflag_aux,"vtypeflag")
]  <lod_PROP>  <gate_COR>  <gate_xvtmbe_io>  <cpo_aux>  <ody_PROP>  [
   property tsa1,tsa2,tsa3,tsb1,tsb2,tsb3,twa1,twa2,twa3,twb1,twb2,twb3
   #IFNDEF SKIP_PLE
   property ploda1,ploda2,ploda3,plodb1,plodb2,plodb3
   #ENDIF
   #IFNDEF SKIP_ODSE
   property sodyt,sodyb
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   property smbt,smbb,smbt1,smbb1,mbetflag,mbebflag
   #ENDIF
   #IFNDEF SKIP_CPO
   property spotr1,spotr2,spotr3,spotl1,spotl2,spotl3,spobr1,spobr2,spobr3,spobl1,spobl2,spobl3
   ,spot,spob,poletflag,polebflag
   #ENDIF
   #IFNDEF SKIP_CODH
   property codyt,codyb
   #ENDIF
   #IFNDEF SKIP_CPO
   spotl3  = DFM_NUM_VAL(cpo_aux, spot3, S) * UNIT_LENGTH()
   spotl2  = DFM_NUM_VAL(cpo_aux, spot2, S) * UNIT_LENGTH()
   spotl1  = DFM_NUM_VAL(cpo_aux, spot1, S) * UNIT_LENGTH()
   spot    = DFM_NUM_VAL(cpo_aux, spot, S) * UNIT_LENGTH()
   spotr1  = DFM_NUM_VAL(cpo_aux, spot1, D) * UNIT_LENGTH()
   spotr2  = DFM_NUM_VAL(cpo_aux, spot2, D) * UNIT_LENGTH()
   spotr3  = DFM_NUM_VAL(cpo_aux, spot3, D) * UNIT_LENGTH()
   spobl3  = DFM_NUM_VAL(cpo_aux, spob3, S) * UNIT_LENGTH()
   spobl2  = DFM_NUM_VAL(cpo_aux, spob2, S) * UNIT_LENGTH()
   spobl1  = DFM_NUM_VAL(cpo_aux, spob1, S) * UNIT_LENGTH()
   spob    = DFM_NUM_VAL(cpo_aux, spob, S) * UNIT_LENGTH()
   spobr1  = DFM_NUM_VAL(cpo_aux, spob1, D) * UNIT_LENGTH()
   spobr2  = DFM_NUM_VAL(cpo_aux, spob2, D) * UNIT_LENGTH()
   spobr3  = DFM_NUM_VAL(cpo_aux, spob3, D) * UNIT_LENGTH()
   poletflag  = DFM_NUM_VAL(cpo_aux, poletflag, S)
   polebflag  = DFM_NUM_VAL(cpo_aux, polebflag, S)
   #ENDIF
   LODX_1 = DFM_VEC_VAL( lod_PROP, "PER_1" )
   LODX_2 = DFM_VEC_VAL( lod_PROP, "PER_2" )
   LODA = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_1, W, L, UNIT_LENGTH(), SCALE )
   LODB = TVF_STR_FUN::parameter_equation::calc_lod_tw( LODX_2, W, L, UNIT_LENGTH(), SCALE )

   twa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 0 )
   tsa1 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 1 )
   twa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 2 )
   tsa2 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 3 )
   twa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 4 )
   tsa3 = TVF_NUM_FUN::parameter_equation::lod_out( LODA, 5 )
   twb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 0 )
   tsb1 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 1 )
   twb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 2 )
   tsb2 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 3 )
   twb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 4 )
   tsb3 = TVF_NUM_FUN::parameter_equation::lod_out( LODB, 5 )
   snet = PIN_NET(s)
   #IFNDEF SKIP_PLE
   is_rotated = 0
   wrange = DFM_VEC_VAL( gate_COR, "WRANGE" )
   maxsd  = DFM_VEC_VAL( gate_COR, "MAX_SD" )
   pse1       = DFM_VEC_VAL( gate_COR, "PSE1" )
   pse2       = DFM_VEC_VAL( gate_COR, "PSE2" )
   pse_str    = TVF_STR_FUN::parameter_equation::pse_pre( pse1, pse2, wrange, is_rotated, maxsd, UNIT_LENGTH() )
   ploda1     = TVF_NUM_FUN::parameter_equation::ploda1( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda2     = TVF_NUM_FUN::parameter_equation::ploda2( pse_str, W, UNIT_LENGTH(), SCALE )
   ploda3     = TVF_NUM_FUN::parameter_equation::ploda3( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb1     = TVF_NUM_FUN::parameter_equation::plodb1( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb2     = TVF_NUM_FUN::parameter_equation::plodb2( pse_str, W, UNIT_LENGTH(), SCALE )
   plodb3     = TVF_NUM_FUN::parameter_equation::plodb3( pse_str, W, UNIT_LENGTH(), SCALE )
   #ENDIF
   #IFNDEF SKIP_ODSE
   is_rotated = 0
   lrange = DFM_VEC_VAL( ody_PROP, "LRANGE" )
   lrange2 = DFM_VEC_VAL( ody_PROP, "LRANGE2" )
   maxsd_ody  = DFM_VEC_VAL( ody_PROP, "MAX_SD" )

   wose1left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1LEFT" )
   wose1mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1MID" )
   wose1right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD1RIGHT" )
   sodyb      = TVF_NUM_FUN::parameter_equation::sodytb( wose1left, wose1mid, wose1right, lrange, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   wose2left  = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2LEFT" )
   wose2mid   = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2MID" )
   wose2right = DFM_VEC_VAL( ody_PROP, "W_DIR_OD2RIGHT" )
   sodyt      = TVF_NUM_FUN::parameter_equation::sodytb( wose2left, wose2mid, wose2right, lrange2, 2, is_rotated, UNIT_LENGTH(), SCALE, maxsd_ody, L)
   #ENDIF
   #IFNDEF SKIP_XVTMBE
   type = "SP"
   xvtmbe_net1 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_1" )
   xvtmbe_net2 = DFM_NUM_VAL( gate_xvtmbe_io, "NET_2" )
   if(snet == xvtmbe_net1) {
     xvtmbe_is_rotated = 0
   } else {
     xvtmbe_is_rotated = 1
   }
   xvtmbe_maxsd   = DFM_VEC_VAL( gate_xvtmbe_io, "MAX_SD" )
   xvtmbe_lrange  = DFM_VEC_VAL( gate_xvtmbe_io, "LRANGE" )
   xvtmbe1        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_1" )
   xvtmbe2        = DFM_VEC_VAL( gate_xvtmbe_io, "MULTI_LAYER_2" )
   xvtmbe_str     = TVF_STR_FUN::parameter_equation::xvtmbe_io_pre( type, xvtmbe1, xvtmbe2, xvtmbe_lrange, xvtmbe_is_rotated, UNIT_LENGTH(), xvtmbe_maxsd, L, SCALE )
   smbt           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 0, UNIT_LENGTH() )
   smbt1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 1, UNIT_LENGTH() )
   mbetflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 2, UNIT_LENGTH() )
   smbb           = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 3, UNIT_LENGTH() )
   smbb1          = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 4, UNIT_LENGTH() )
   mbebflag       = TVF_NUM_FUN::parameter_equation::mbe_out( xvtmbe_str, 5, UNIT_LENGTH() )
   #ENDIF
   #IFNDEF SKIP_CODH
    codyt = DFM_NUM_VAL( ody_PROP, "codyt" )
    codyb = DFM_NUM_VAL( ody_PROP, "codyb" )
   #ENDIF
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpode12od15_mac_ODN_layer = DEVICE LAYER MP(pch_mpode12od15_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpode12od15_mac"
       ]
LVS ANNOTATE DEVICES pch_mpode12od15_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeelvt_mac) pch_mpodeelvt_mac_gate pch_mpodeelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeelvt_mac netlist element "X" CMACRO dfm_pmos "ELP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeelvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeelvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeelvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodelvt_mac) pch_mpodelvt_mac_gate pch_mpodelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodelvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodelvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodelvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodelvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodelvtll_mac) pch_mpodelvtll_mac_gate pch_mpodelvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodelvtll_mac netlist element "X" CMACRO dfm_pmos "LPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodelvtll_mac_ODN_layer = DEVICE LAYER MP(pch_mpodelvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodelvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodelvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodesvt_mac) pch_mpodesvt_mac_gate pch_mpodesvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodesvt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodesvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodesvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodesvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodesvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeulvt_mac) pch_mpodeulvt_mac_gate pch_mpodeulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeulvt_mac netlist element "X" CMACRO dfm_pmos "ULP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeulvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeulvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeulvtll_mac) pch_mpodeulvtll_mac_gate pch_mpodeulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeulvtll_mac netlist element "X" CMACRO dfm_pmos "ULPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeulvtll_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeulvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeulvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_svt_mac) pch_svt_mac_gate pch_svt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_svt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_svt_mac_ODN_layer = DEVICE LAYER MP(pch_svt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_svt_mac"
       ]
LVS ANNOTATE DEVICES pch_svt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ulvt_mac) pch_ulvt_mac_gate pch_ulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ulvt_mac netlist element "X" CMACRO dfm_pmos "ULP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_ulvt_mac_ODN_layer = DEVICE LAYER MP(pch_ulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvt_mac"
       ]
LVS ANNOTATE DEVICES pch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ulvtll_mac) pch_ulvtll_mac_gate pch_ulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ulvtll_mac netlist element "X" CMACRO dfm_pmos "ULPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_ulvtll_mac_ODN_layer = DEVICE LAYER MP(pch_ulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_ulvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_8tsr_mac) pgate_pu_8tsr_mac pgate_pu_8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_8tsr_mac)/2
   L = area(pgate_pu_8tsr_mac)/W1
]

DEVICE MP(pchpu_camsr_mac) pgate_pu_camsr_mac pgate_pu_camsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_camsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_camsr_mac)/2
   L = area(pgate_pu_camsr_mac)/W1
]

DEVICE MP(pchpu_dpfsr_mac) pgate_pu_dpfsr_mac pgate_pu_dpfsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_dpfsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_dpfsr_mac)/2
   L = area(pgate_pu_dpfsr_mac)/W1
]

DEVICE MP(pchpu_hc8tsr_mac) pgate_pu_hc8tsr_mac pgate_pu_hc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hc8tsr_mac)/2
   L = area(pgate_pu_hc8tsr_mac)/W1
]

DEVICE MP(pchpu_hcsr_mac) pgate_pu_hcsr_mac pgate_pu_hcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hcsr_mac)/2
   L = area(pgate_pu_hcsr_mac)/W1
]

DEVICE MP(pchpu_hdcamsr_mac) pgate_pu_hdcamsr_mac pgate_pu_hdcamsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hdcamsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdcamsr_mac)/2
   L = area(pgate_pu_hdcamsr_mac)/W1
]

DEVICE MP(pchpu_hdsr_mac) pgate_pu_hdsr_mac pgate_pu_hdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdsr_mac)/2
   L = area(pgate_pu_hdsr_mac)/W1
]

DEVICE MP(pchpu_hssr_mac) pgate_pu_hssr_mac pgate_pu_hssr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hssr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hssr_mac)/2
   L = area(pgate_pu_hssr_mac)/W1
]

DEVICE MP(pchpu_tpsr_mac) pgate_pu_tpsr_mac pgate_pu_tpsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_tpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_tpsr_mac)/2
   L = area(pgate_pu_tpsr_mac)/W1
]

DEVICE MP(pchpu_ulhdsr_mac) pgate_pu_ulhdsr_mac pgate_pu_ulhdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_ulhdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulhdsr_mac)/2
   L = area(pgate_pu_ulhdsr_mac)/W1
]

#ELSE
DEVICE LDDN(nch_hia12_mac)  ngate_hia12_mac tndiff_sdi(D) ngate_hia12_mac(G) tndiff(S) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W = (perimeter_coincide(ngate_hia12_mac, tndiff ) + perimeter_coincide(ngate_hia12_mac, tndiff_sdi)) / 2
   L = area(ngate_hia12_mac) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_12_dnw_mac) nch_12_mac_gate_dnw nch_12_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_12_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_12_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_12_mac) nch_12_mac_gate nch_12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_12_mac_gate, tndiff ) + perimeter_inside(nch_12_mac_gate, tndiff)) / 2 
   L=area(nch_12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_12od15_dnw_mac) nch_12od15_mac_gate_dnw nch_12od15_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_12od15_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12od15_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_12od15_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_12od15_mac) nch_12od15_mac_gate nch_12od15_mac_gate(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_12od15_mac_gate, tndiff ) + perimeter_inside(nch_12od15_mac_gate, tndiff)) / 2 
   L=area(nch_12od15_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_elvt_dnw_mac) nch_elvt_mac_gate_dnw nch_elvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_elvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_elvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_elvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_elvt_mac) nch_elvt_mac_gate nch_elvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_elvt_mac_gate, tndiff ) + perimeter_inside(nch_elvt_mac_gate, tndiff)) / 2 
   L=area(nch_elvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrelvt_mac) nch_flrelvt_mac_gate nch_flrelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrelvt_mac_gate, tndiff ) + perimeter_inside(nch_flrelvt_mac_gate, tndiff)) / 2 
   L=area(nch_flrelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrlvt_mac) nch_flrlvt_mac_gate nch_flrlvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrlvt_mac_gate, tndiff ) + perimeter_inside(nch_flrlvt_mac_gate, tndiff)) / 2 
   L=area(nch_flrlvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrlvtll_mac) nch_flrlvtll_mac_gate nch_flrlvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrlvtll_mac_gate, tndiff ) + perimeter_inside(nch_flrlvtll_mac_gate, tndiff)) / 2 
   L=area(nch_flrlvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrsvt_mac) nch_flrsvt_mac_gate nch_flrsvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrsvt_mac_gate, tndiff ) + perimeter_inside(nch_flrsvt_mac_gate, tndiff)) / 2 
   L=area(nch_flrsvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrulvt_mac) nch_flrulvt_mac_gate nch_flrulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrulvt_mac_gate, tndiff ) + perimeter_inside(nch_flrulvt_mac_gate, tndiff)) / 2 
   L=area(nch_flrulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_flrulvtll_mac) nch_flrulvtll_mac_gate nch_flrulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_flrulvtll_mac_gate, tndiff ) + perimeter_inside(nch_flrulvtll_mac_gate, tndiff)) / 2 
   L=area(nch_flrulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_lvt_dnw_mac) nch_lvt_mac_gate_dnw nch_lvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_lvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_lvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_lvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_lvt_mac) nch_lvt_mac_gate nch_lvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_lvt_mac_gate, tndiff ) + perimeter_inside(nch_lvt_mac_gate, tndiff)) / 2 
   L=area(nch_lvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_lvtll_dnw_mac) nch_lvtll_mac_gate_dnw nch_lvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_lvtll_mac_gate_dnw, tndiff ) + perimeter_inside(nch_lvtll_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_lvtll_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_lvtll_mac) nch_lvtll_mac_gate nch_lvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_lvtll_mac_gate, tndiff ) + perimeter_inside(nch_lvtll_mac_gate, tndiff)) / 2 
   L=area(nch_lvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpode12_mac) nch_mpode12_mac_gate nch_mpode12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_mpode12_mac_gate, tndiff ) + perimeter_inside(nch_mpode12_mac_gate, tndiff)) / 2 
   L=area(nch_mpode12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpode12od15_mac) nch_mpode12od15_mac_gate nch_mpode12od15_mac_gate(G) tndiff(S) tndiff(D) psub(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(nch_mpode12od15_mac_gate, tndiff ) + perimeter_inside(nch_mpode12od15_mac_gate, tndiff)) / 2 
   L=area(nch_mpode12od15_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodeelvt_mac) nch_mpodeelvt_mac_gate nch_mpodeelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodeelvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodeelvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodelvt_mac) nch_mpodelvt_mac_gate nch_mpodelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodelvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodelvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodelvtll_mac) nch_mpodelvtll_mac_gate nch_mpodelvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodelvtll_mac_gate, tndiff ) + perimeter_inside(nch_mpodelvtll_mac_gate, tndiff)) / 2 
   L=area(nch_mpodelvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodesvt_mac) nch_mpodesvt_mac_gate nch_mpodesvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodesvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodesvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodesvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodeulvt_mac) nch_mpodeulvt_mac_gate nch_mpodeulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodeulvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodeulvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_mpodeulvtll_mac) nch_mpodeulvtll_mac_gate nch_mpodeulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_mpodeulvtll_mac_gate, tndiff ) + perimeter_inside(nch_mpodeulvtll_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_svt_dnw_mac) nch_svt_mac_gate_dnw nch_svt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_svt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_svt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_svt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_svt_mac) nch_svt_mac_gate nch_svt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_svt_mac_gate, tndiff ) + perimeter_inside(nch_svt_mac_gate, tndiff)) / 2 
   L=area(nch_svt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_ulvt_dnw_mac) nch_ulvt_mac_gate_dnw nch_ulvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_ulvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_ulvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_ulvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_ulvt_mac) nch_ulvt_mac_gate nch_ulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_ulvt_mac_gate, tndiff ) + perimeter_inside(nch_ulvt_mac_gate, tndiff)) / 2 
   L=area(nch_ulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_ulvtll_dnw_mac) nch_ulvtll_mac_gate_dnw nch_ulvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_ulvtll_mac_gate_dnw, tndiff ) + perimeter_inside(nch_ulvtll_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_ulvtll_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nch_ulvtll_mac) nch_ulvtll_mac_gate nch_ulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(nch_ulvtll_mac_gate, tndiff ) + perimeter_inside(nch_ulvtll_mac_gate, tndiff)) / 2 
   L=area(nch_ulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MN(nchpd_8trpsr_mac) ngate_pd_8trpsr_mac ngate_pd_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8trpsr_mac)/2
   L = area(ngate_pd_8trpsr_mac)/W1
]
DEVICE MN(nchpd_8tsr_mac) ngate_pd_8tsr_mac ngate_pd_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8tsr_mac)/2
   L = area(ngate_pd_8tsr_mac)/W1
]
DEVICE MN(nchpd_camcpsr_mac) ngate_pd_camcpsr_mac ngate_pd_camcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_camcpsr_mac)/2
   L = area(ngate_pd_camcpsr_mac)/W1
]
DEVICE MN(nchpd_camsr_mac) ngate_pd_camsr_mac ngate_pd_camsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_camsr_mac)/2
   L = area(ngate_pd_camsr_mac)/W1
]
DEVICE MN(nchpd_dpfsr_mac) ngate_pd_dpfsr_mac ngate_pd_dpfsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_dpfsr_mac)/2
   L = area(ngate_pd_dpfsr_mac)/W1
]
DEVICE MN(nchpd_hc8trpsr_mac) ngate_pd_hc8trpsr_mac ngate_pd_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8trpsr_mac)/2
   L = area(ngate_pd_hc8trpsr_mac)/W1
]
DEVICE MN(nchpd_hc8tsr_mac) ngate_pd_hc8tsr_mac ngate_pd_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8tsr_mac)/2
   L = area(ngate_pd_hc8tsr_mac)/W1
]
DEVICE MN(nchpd_hcsr_mac) ngate_pd_hcsr_mac ngate_pd_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hcsr_mac)/2
   L = area(ngate_pd_hcsr_mac)/W1
]
DEVICE MN(nchpd_hdcamcpsr_mac) ngate_pd_hdcamcpsr_mac ngate_pd_hdcamcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdcamcpsr_mac)/2
   L = area(ngate_pd_hdcamcpsr_mac)/W1
]
DEVICE MN(nchpd_hdcamsr_mac) ngate_pd_hdcamsr_mac ngate_pd_hdcamsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdcamsr_mac)/2
   L = area(ngate_pd_hdcamsr_mac)/W1
]
DEVICE MN(nchpd_hdsr_mac) ngate_pd_hdsr_mac ngate_pd_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdsr_mac)/2
   L = area(ngate_pd_hdsr_mac)/W1
]
DEVICE MN(nchpd_hssr_mac) ngate_pd_hssr_mac ngate_pd_hssr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hssr_mac)/2
   L = area(ngate_pd_hssr_mac)/W1
]
DEVICE MN(nchpd_tprpsr_mac) ngate_pd_tprpsr_mac ngate_pd_tprpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_tprpsr_mac)/2
   L = area(ngate_pd_tprpsr_mac)/W1
]
DEVICE MN(nchpd_tpsr_mac) ngate_pd_tpsr_mac ngate_pd_tpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_tpsr_mac)/2
   L = area(ngate_pd_tpsr_mac)/W1
]
DEVICE MN(nchpd_ulhdsr_mac) ngate_pd_ulhdsr_mac ngate_pd_ulhdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulhdsr_mac)/2
   L = area(ngate_pd_ulhdsr_mac)/W1
]
DEVICE MN(nchpg_8trpsr_mac) ngate_pg_8trpsr_mac ngate_pg_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8trpsr_mac)/2
   L = area(ngate_pg_8trpsr_mac)/W1
]
DEVICE MN(nchpg_8tsr_mac) ngate_pg_8tsr_mac ngate_pg_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8tsr_mac)/2
   L = area(ngate_pg_8tsr_mac)/W1
]
DEVICE MN(nchpg_camcpsr_mac) ngate_pg_camcpsr_mac ngate_pg_camcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_camcpsr_mac)/2
   L = area(ngate_pg_camcpsr_mac)/W1
]
DEVICE MN(nchpg_camsr_mac) ngate_pg_camsr_mac ngate_pg_camsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_camsr_mac)/2
   L = area(ngate_pg_camsr_mac)/W1
]
DEVICE MN(nchpg_dpfsr_mac) ngate_pg_dpfsr_mac ngate_pg_dpfsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_dpfsr_mac)/2
   L = area(ngate_pg_dpfsr_mac)/W1
]
DEVICE MN(nchpg_hc8trpsr_mac) ngate_pg_hc8trpsr_mac ngate_pg_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8trpsr_mac)/2
   L = area(ngate_pg_hc8trpsr_mac)/W1
]
DEVICE MN(nchpg_hc8tsr_mac) ngate_pg_hc8tsr_mac ngate_pg_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8tsr_mac)/2
   L = area(ngate_pg_hc8tsr_mac)/W1
]
DEVICE MN(nchpg_hcsr_mac) ngate_pg_hcsr_mac ngate_pg_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hcsr_mac)/2
   L = area(ngate_pg_hcsr_mac)/W1
]
DEVICE MN(nchpg_hdcamcpsr_mac) ngate_pg_hdcamcpsr_mac ngate_pg_hdcamcpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdcamcpsr_mac)/2
   L = area(ngate_pg_hdcamcpsr_mac)/W1
]
DEVICE MN(nchpg_hdcamsr_mac) ngate_pg_hdcamsr_mac ngate_pg_hdcamsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdcamsr_mac)/2
   L = area(ngate_pg_hdcamsr_mac)/W1
]
DEVICE MN(nchpg_hdsr_mac) ngate_pg_hdsr_mac ngate_pg_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdsr_mac)/2
   L = area(ngate_pg_hdsr_mac)/W1
]
DEVICE MN(nchpg_hssr_mac) ngate_pg_hssr_mac ngate_pg_hssr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hssr_mac)/2
   L = area(ngate_pg_hssr_mac)/W1
]
DEVICE MN(nchpg_tprpsr_mac) ngate_pg_tprpsr_mac ngate_pg_tprpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_tprpsr_mac)/2
   L = area(ngate_pg_tprpsr_mac)/W1
]
DEVICE MN(nchpg_tpsr_mac) ngate_pg_tpsr_mac ngate_pg_tpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_tpsr_mac)/2
   L = area(ngate_pg_tpsr_mac)/W1
]
DEVICE MN(nchpg_ulhdsr_mac) ngate_pg_ulhdsr_mac ngate_pg_ulhdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulhdsr_mac)/2
   L = area(ngate_pg_ulhdsr_mac)/W1
]
DEVICE MP(pch_12_mac) pch_12_mac_gate pch_12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(pch_12_mac_gate, tpdiff ) + perimeter_inside(pch_12_mac_gate, tpdiff)) / 2 
   L=area(pch_12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_12od15_mac) pch_12od15_mac_gate pch_12od15_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(pch_12od15_mac_gate, tpdiff ) + perimeter_inside(pch_12od15_mac_gate, tpdiff)) / 2 
   L=area(pch_12od15_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_elvt_mac) pch_elvt_mac_gate pch_elvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_elvt_mac_gate, tpdiff ) + perimeter_inside(pch_elvt_mac_gate, tpdiff)) / 2 
   L=area(pch_elvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrelvt_mac) pch_flrelvt_mac_gate pch_flrelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrelvt_mac_gate, tpdiff ) + perimeter_inside(pch_flrelvt_mac_gate, tpdiff)) / 2 
   L=area(pch_flrelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrlvt_mac) pch_flrlvt_mac_gate pch_flrlvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrlvt_mac_gate, tpdiff ) + perimeter_inside(pch_flrlvt_mac_gate, tpdiff)) / 2 
   L=area(pch_flrlvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrlvtll_mac) pch_flrlvtll_mac_gate pch_flrlvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrlvtll_mac_gate, tpdiff ) + perimeter_inside(pch_flrlvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_flrlvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrsvt_mac) pch_flrsvt_mac_gate pch_flrsvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrsvt_mac_gate, tpdiff ) + perimeter_inside(pch_flrsvt_mac_gate, tpdiff)) / 2 
   L=area(pch_flrsvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrulvt_mac) pch_flrulvt_mac_gate pch_flrulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrulvt_mac_gate, tpdiff ) + perimeter_inside(pch_flrulvt_mac_gate, tpdiff)) / 2 
   L=area(pch_flrulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_flrulvtll_mac) pch_flrulvtll_mac_gate pch_flrulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_flrulvtll_mac_gate, tpdiff ) + perimeter_inside(pch_flrulvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_flrulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_lvt_mac) pch_lvt_mac_gate pch_lvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_lvt_mac_gate, tpdiff ) + perimeter_inside(pch_lvt_mac_gate, tpdiff)) / 2 
   L=area(pch_lvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_lvtll_mac) pch_lvtll_mac_gate pch_lvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_lvtll_mac_gate, tpdiff ) + perimeter_inside(pch_lvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_lvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpode12_mac) pch_mpode12_mac_gate pch_mpode12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(pch_mpode12_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12_mac_gate, tpdiff)) / 2 
   L=area(pch_mpode12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpode12od15_mac) pch_mpode12od15_mac_gate pch_mpode12od15_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <fbound_aux> [
   property nfin,L,fbound
   W=(perimeter_coincide(pch_mpode12od15_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12od15_mac_gate, tpdiff)) / 2 
   L=area(pch_mpode12od15_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodeelvt_mac) pch_mpodeelvt_mac_gate pch_mpodeelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodeelvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeelvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodelvt_mac) pch_mpodelvt_mac_gate pch_mpodelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodelvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodelvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodelvtll_mac) pch_mpodelvtll_mac_gate pch_mpodelvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodelvtll_mac_gate, tpdiff ) + perimeter_inside(pch_mpodelvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodelvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodesvt_mac) pch_mpodesvt_mac_gate pch_mpodesvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodesvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodesvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodesvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodeulvt_mac) pch_mpodeulvt_mac_gate pch_mpodeulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodeulvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeulvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_mpodeulvtll_mac) pch_mpodeulvtll_mac_gate pch_mpodeulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_mpodeulvtll_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeulvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_svt_mac) pch_svt_mac_gate pch_svt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_svt_mac_gate, tpdiff ) + perimeter_inside(pch_svt_mac_gate, tpdiff)) / 2 
   L=area(pch_svt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_ulvt_mac) pch_ulvt_mac_gate pch_ulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_ulvt_mac_gate, tpdiff ) + perimeter_inside(pch_ulvt_mac_gate, tpdiff)) / 2 
   L=area(pch_ulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pch_ulvtll_mac) pch_ulvtll_mac_gate pch_ulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux> <fbound_aux> [
   property nfin,L,ppitch,fbound
   W=(perimeter_coincide(pch_ulvtll_mac_gate, tpdiff ) + perimeter_inside(pch_ulvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_ulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
   fbound = DFM_NUMERIC_VALUE(fbound_aux,"fbound")
]
DEVICE MP(pchpu_8tsr_mac) pgate_pu_8tsr_mac pgate_pu_8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_8tsr_mac)/2
   L = area(pgate_pu_8tsr_mac)/W1
]
DEVICE MP(pchpu_camsr_mac) pgate_pu_camsr_mac pgate_pu_camsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_camsr_mac)/2
   L = area(pgate_pu_camsr_mac)/W1
]
DEVICE MP(pchpu_dpfsr_mac) pgate_pu_dpfsr_mac pgate_pu_dpfsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_dpfsr_mac)/2
   L = area(pgate_pu_dpfsr_mac)/W1
]
DEVICE MP(pchpu_hc8tsr_mac) pgate_pu_hc8tsr_mac pgate_pu_hc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hc8tsr_mac)/2
   L = area(pgate_pu_hc8tsr_mac)/W1
]
DEVICE MP(pchpu_hcsr_mac) pgate_pu_hcsr_mac pgate_pu_hcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hcsr_mac)/2
   L = area(pgate_pu_hcsr_mac)/W1
]
DEVICE MP(pchpu_hdcamsr_mac) pgate_pu_hdcamsr_mac pgate_pu_hdcamsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdcamsr_mac)/2
   L = area(pgate_pu_hdcamsr_mac)/W1
]
DEVICE MP(pchpu_hdsr_mac) pgate_pu_hdsr_mac pgate_pu_hdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdsr_mac)/2
   L = area(pgate_pu_hdsr_mac)/W1
]
DEVICE MP(pchpu_hssr_mac) pgate_pu_hssr_mac pgate_pu_hssr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hssr_mac)/2
   L = area(pgate_pu_hssr_mac)/W1
]
DEVICE MP(pchpu_tpsr_mac) pgate_pu_tpsr_mac pgate_pu_tpsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_tpsr_mac)/2
   L = area(pgate_pu_tpsr_mac)/W1
]
DEVICE MP(pchpu_ulhdsr_mac) pgate_pu_ulhdsr_mac pgate_pu_ulhdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs> [
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulhdsr_mac)/2
   L = area(pgate_pu_ulhdsr_mac)/W1
]

#ENDIF

#IFDEF FILTER_MPODE
LVS FILTER MN(nch_mpode12_mac)       OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpode12od15_mac)   OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeelvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodelvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodelvtll_mac)    OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodesvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeulvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeulvtll_mac)   OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpode12_mac)       OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpode12od15_mac)   OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeelvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodelvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodelvtll_mac)    OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodesvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeulvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeulvtll_mac)   OPEN LAYOUT SOURCE
#ENDIF

#IFDEF FILTER_FLRMOS
LVS FILTER MN(nch_flrelvt_mac)       OPEN LAYOUT SOURCE
LVS FILTER MN(nch_flrlvt_mac)        OPEN LAYOUT SOURCE
LVS FILTER MN(nch_flrlvtll_mac)      OPEN LAYOUT SOURCE
LVS FILTER MN(nch_flrsvt_mac)        OPEN LAYOUT SOURCE
LVS FILTER MN(nch_flrulvt_mac)       OPEN LAYOUT SOURCE
LVS FILTER MN(nch_flrulvtll_mac)     OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrelvt_mac)       OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrlvt_mac)        OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrlvtll_mac)      OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrsvt_mac)        OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrulvt_mac)       OPEN LAYOUT SOURCE
LVS FILTER MP(pch_flrulvtll_mac)     OPEN LAYOUT SOURCE
#ENDIF

TRACE PROPERTY LDDN(nch_hia12_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_hia12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY LDDN(nch_hia12_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_12_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_12_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_12od15_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12od15_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12od15_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_12od15_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12od15_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12od15_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_elvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_elvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_elvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrelvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrlvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrlvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrlvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrlvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrlvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrlvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrlvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrlvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrsvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrsvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrsvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrsvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrulvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_flrulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_flrulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_flrulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_flrulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_lvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_lvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpode12_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpode12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpode12_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpode12od15_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpode12od15_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpode12od15_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodelvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodesvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodesvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodesvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodesvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_svt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_svt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_svt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_svt_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_svt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_svt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_svt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_svt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_ulvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nch_ulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MN(nchpd_8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_camcpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_camcpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_camsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_camsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_dpfsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_dpfsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hdcamcpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hdcamcpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hdcamsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hdcamsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hssr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hssr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_tprpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_tprpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_tpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_tpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulhdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulhdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_camcpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_camcpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_camsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_camsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_dpfsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_dpfsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hdcamcpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hdcamcpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hdcamsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hdcamsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hssr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hssr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_tprpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_tprpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_tpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_tpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulhdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulhdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_12_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_12_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_12od15_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_12od15_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_12od15_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_elvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_elvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_elvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_elvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrelvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrlvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrlvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrlvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrlvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrlvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrlvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrlvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrlvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrsvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrsvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrsvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrsvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrulvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_flrulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_flrulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_flrulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_flrulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_lvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_lvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_lvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_lvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_lvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_lvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_lvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_lvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpode12_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpode12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpode12_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpode12od15_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpode12od15_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpode12od15_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodelvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodelvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodesvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodesvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodesvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodesvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_svt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_svt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_svt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_svt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_ulvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_ulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_ulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_ulvt_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pch_ulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_ulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_ulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_ulvtll_mac) fbound fbound MOS_FBOUNDerr
TRACE PROPERTY MP(pchpu_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_camsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_camsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_dpfsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_dpfsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hdcamsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hdcamsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hssr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hssr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_tpsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_tpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_ulhdsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ulhdsr_mac) nfin nfin MOS_NFINerr
DEVICE Q(pnp_i1_mac) cemit_io_i1_mac coll1 cnbase1 tpdiff_bjt netlist element "X" netlist model pnp_i1_mac
DEVICE Q(pnp_i2_mac) cemit_io_i2_mac coll1 cnbase1 tpdiff_bjt netlist element "X" netlist model pnp_i2_mac
DEVICE Q(pnp_p1_mac) cemit_io_p1_mac psub_term nxwell tpdiff_bjt netlist element "X" netlist model pnp_p1_mac
DEVICE D(nwdio) nwdio_r psub nxwell netlist model nwdio
  TRACE PROPERTY D(nwdio) A A DIO_Aerr

// User define devices 
//

//

//

//

//

#IFDEF extract_dnwpsub
DEVICE D(dnwpsub) dnwdio psub_term DNW [
   property a, pj
   a = area(DNW)
   pj = perimeter(DNW) 
]
TRACE PROPERTY D(dnwpsub) a a DIOWELL_Aerr
#ENDIF

DEVICE efuse_m0 m0efuse M0_A(PLUS) M0_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m0efuse,M0_A)/2
  l = area(m0efuse)/w
]
TRACE PROPERTY efuse_m0 w w RES_Werr
TRACE PROPERTY efuse_m0 l l RES_Lerr

DEVICE efuse_m1 m1efuse M1_A(PLUS) M1_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m1efuse,M1_A)/2
  l = area(m1efuse)/w
]
TRACE PROPERTY efuse_m1 w w RES_Werr
TRACE PROPERTY efuse_m1 l l RES_Lerr

DEVICE efuse_m4 m4efuse M4_A(PLUS) M4_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m4efuse,M4_A)/2
  l = area(m4efuse)/w
]
TRACE PROPERTY efuse_m4 w w RES_Werr
TRACE PROPERTY efuse_m4 l l RES_Lerr

DEVICE efuse_mx m2efuse M2_A(PLUS) M2_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m2efuse,M2_A)/2
  l = area(m2efuse)/w
]
TRACE PROPERTY efuse_mx w w RES_Werr
TRACE PROPERTY efuse_mx l l RES_Lerr

DEVICE mimcap_sin_fhd fhdmim_reg MPC(MMP) BPC(MBP) <SHDMIM_BOT> [
  property area_mim

  area_mim = area(SHDMIM_BOT)

]
TRACE PROPERTY mimcap_sin_fhd area_mim area_mim MIMCAP_Aerr

DEVICE mimcap_sin_shd_3t shdmim_reg TPC(MTP) MPC(MMP) BPC(MBP) <SHDMIM_TOP> <SHDMIM_BOT> [
  property area_top_mim, area_bot_mim

  area_top_mim = area(SHDMIM_TOP)
  area_bot_mim = area(SHDMIM_BOT)

]
TRACE PROPERTY mimcap_sin_shd_3t area_top_mim area_top_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_sin_shd_3t area_bot_mim area_bot_mim MIMCAP_Aerr












DEVICE crtmom_wo cmom0_reg_psub mom0plus_b(PLUS) mom0minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom0_reg_nw mom0plus_b(PLUS) mom0minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_2t cmom0_reg_2t mom0plus_b(PLUS) mom0minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom0_mx_reg_psub_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom0_mx_reg_psub_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom0_mx_reg_nw_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom0_mx_reg_nw_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]



DEVICE crtmom_mx_4t cmom0_mx_reg_4t_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom0_mx_reg_4t_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom0_rf_reg_psub mom0plus_b(PLUS) mom0minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom0_rf_reg_nw mom0plus_b(PLUS) mom0minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom1_reg_psub mom1plus_b(PLUS) mom1minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom1_reg_nw mom1plus_b(PLUS) mom1minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_2t cmom1_reg_2t mom1plus_b(PLUS) mom1minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom1_mx_reg_psub_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom1_mx_reg_psub_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom1_mx_reg_nw_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom1_mx_reg_nw_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]



DEVICE crtmom_mx_4t cmom1_mx_reg_4t_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom1_mx_reg_4t_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom1_rf_reg_psub mom1plus_b(PLUS) mom1minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom1_rf_reg_nw mom1plus_b(PLUS) mom1minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom2_reg_psub mom2plus_b(PLUS) mom2minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom2_reg_nw mom2plus_b(PLUS) mom2minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom2_reg_psub_non mom2plus(PLUS) mom2minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom2_reg_nw_non mom2plus(PLUS) mom2minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom2_reg_2t mom2plus_b(PLUS) mom2minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom2_reg_2t_non mom2plus(PLUS) mom2minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom2_mx_reg_psub_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_psub_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom2_mx_reg_nw_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_nw_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom2_mx_reg_psub_non mom2p1(PLUS1) mom2m1(MINUS1) mom2p2(PLUS2) mom2m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_nw_non mom2p1(PLUS1) mom2m1(MINUS1) mom2p2(PLUS2) mom2m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom2_mx_reg_4t_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom2_mx_reg_4t_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom2_mx_reg_4t_non mom2p1(PLUS1) mom2m1(MINUS1) mom2p2(PLUS2) mom2m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom2_rf_reg_psub mom2plus_b(PLUS) mom2minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom2_rf_reg_nw mom2plus_b(PLUS) mom2minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom2_rf_reg_psub_non mom2plus(PLUS) mom2minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom2_rf_reg_nw_non mom2plus(PLUS) mom2minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom3_reg_psub mom3plus_b(PLUS) mom3minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom3_reg_nw mom3plus_b(PLUS) mom3minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom3_reg_psub_non mom3plus(PLUS) mom3minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom3_reg_nw_non mom3plus(PLUS) mom3minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom3_reg_2t mom3plus_b(PLUS) mom3minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom3_reg_2t_non mom3plus(PLUS) mom3minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom3_mx_reg_psub_a mom3p1_a(PLUS1) mom3m1_b(MINUS1) mom3p2_a(PLUS2) mom3m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom3_mx_reg_psub_b mom3p1_b(PLUS1) mom3m1_a(MINUS1) mom3p2_b(PLUS2) mom3m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom3_mx_reg_nw_a mom3p1_a(PLUS1) mom3m1_b(MINUS1) mom3p2_a(PLUS2) mom3m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom3_mx_reg_nw_b mom3p1_b(PLUS1) mom3m1_a(MINUS1) mom3p2_b(PLUS2) mom3m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom3_mx_reg_psub_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom3_mx_reg_nw_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom3_mx_reg_4t_a mom3p1_a(PLUS1) mom3m1_b(MINUS1) mom3p2_a(PLUS2) mom3m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom3_mx_reg_4t_b mom3p1_b(PLUS1) mom3m1_a(MINUS1) mom3p2_b(PLUS2) mom3m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom3_mx_reg_4t_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom3_rf_reg_psub mom3plus_b(PLUS) mom3minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom3_rf_reg_nw mom3plus_b(PLUS) mom3minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom3_rf_reg_psub_non mom3plus(PLUS) mom3minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom3_rf_reg_nw_non mom3plus(PLUS) mom3minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom4_reg_psub mom4plus_b(PLUS) mom4minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom4_reg_nw mom4plus_b(PLUS) mom4minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom4_reg_psub_non mom4plus(PLUS) mom4minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom4_reg_nw_non mom4plus(PLUS) mom4minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom4_reg_2t mom4plus_b(PLUS) mom4minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom4_reg_2t_non mom4plus(PLUS) mom4minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom4_mx_reg_psub_a mom4p1_a(PLUS1) mom4m1_b(MINUS1) mom4p2_a(PLUS2) mom4m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom4_mx_reg_psub_b mom4p1_b(PLUS1) mom4m1_a(MINUS1) mom4p2_b(PLUS2) mom4m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom4_mx_reg_nw_a mom4p1_a(PLUS1) mom4m1_b(MINUS1) mom4p2_a(PLUS2) mom4m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom4_mx_reg_nw_b mom4p1_b(PLUS1) mom4m1_a(MINUS1) mom4p2_b(PLUS2) mom4m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom4_mx_reg_psub_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom4_mx_reg_nw_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom4_mx_reg_4t_a mom4p1_a(PLUS1) mom4m1_b(MINUS1) mom4p2_a(PLUS2) mom4m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom4_mx_reg_4t_b mom4p1_b(PLUS1) mom4m1_a(MINUS1) mom4p2_b(PLUS2) mom4m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom4_mx_reg_4t_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom4_rf_reg_psub mom4plus_b(PLUS) mom4minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom4_rf_reg_nw mom4plus_b(PLUS) mom4minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom4_rf_reg_psub_non mom4plus(PLUS) mom4minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom4_rf_reg_nw_non mom4plus(PLUS) mom4minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom5_reg_psub mom5plus_b(PLUS) mom5minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom5_reg_nw mom5plus_b(PLUS) mom5minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom5_reg_psub_non mom5plus(PLUS) mom5minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom5_reg_nw_non mom5plus(PLUS) mom5minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom5_reg_2t mom5plus_b(PLUS) mom5minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom5_reg_2t_non mom5plus(PLUS) mom5minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom5_mx_reg_psub_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_psub_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom5_mx_reg_nw_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_nw_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom5_mx_reg_psub_non mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_nw_non mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom5_mx_reg_4t_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom5_mx_reg_4t_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom5_mx_reg_4t_non mom5p1(PLUS1) mom5m1(MINUS1) mom5p2(PLUS2) mom5m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom5_rf_reg_psub mom5plus_b(PLUS) mom5minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom5_rf_reg_nw mom5plus_b(PLUS) mom5minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom5_rf_reg_psub_non mom5plus(PLUS) mom5minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom5_rf_reg_nw_non mom5plus(PLUS) mom5minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom6_reg_psub mom6plus_b(PLUS) mom6minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom6_reg_nw mom6plus_b(PLUS) mom6minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom6_reg_psub_non mom6plus(PLUS) mom6minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom6_reg_nw_non mom6plus(PLUS) mom6minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom6_reg_2t mom6plus_b(PLUS) mom6minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom6_reg_2t_non mom6plus(PLUS) mom6minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom6_mx_reg_psub_a mom6p1_a(PLUS1) mom6m1_b(MINUS1) mom6p2_a(PLUS2) mom6m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom6_mx_reg_psub_b mom6p1_b(PLUS1) mom6m1_a(MINUS1) mom6p2_b(PLUS2) mom6m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom6_mx_reg_nw_a mom6p1_a(PLUS1) mom6m1_b(MINUS1) mom6p2_a(PLUS2) mom6m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom6_mx_reg_nw_b mom6p1_b(PLUS1) mom6m1_a(MINUS1) mom6p2_b(PLUS2) mom6m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom6_mx_reg_psub_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom6_mx_reg_nw_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom6_mx_reg_4t_a mom6p1_a(PLUS1) mom6m1_b(MINUS1) mom6p2_a(PLUS2) mom6m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom6_mx_reg_4t_b mom6p1_b(PLUS1) mom6m1_a(MINUS1) mom6p2_b(PLUS2) mom6m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom6_mx_reg_4t_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom6_rf_reg_psub mom6plus_b(PLUS) mom6minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom6_rf_reg_nw mom6plus_b(PLUS) mom6minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom6_rf_reg_psub_non mom6plus(PLUS) mom6minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom6_rf_reg_nw_non mom6plus(PLUS) mom6minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom7_reg_psub mom7plus_b(PLUS) mom7minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom7_reg_nw mom7plus_b(PLUS) mom7minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom7_reg_psub_non mom7plus(PLUS) mom7minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom7_reg_nw_non mom7plus(PLUS) mom7minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom7_reg_2t mom7plus_b(PLUS) mom7minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom7_reg_2t_non mom7plus(PLUS) mom7minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom7_mx_reg_psub_a mom7p1_a(PLUS1) mom7m1_b(MINUS1) mom7p2_a(PLUS2) mom7m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom7_mx_reg_psub_b mom7p1_b(PLUS1) mom7m1_a(MINUS1) mom7p2_b(PLUS2) mom7m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom7_mx_reg_nw_a mom7p1_a(PLUS1) mom7m1_b(MINUS1) mom7p2_a(PLUS2) mom7m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom7_mx_reg_nw_b mom7p1_b(PLUS1) mom7m1_a(MINUS1) mom7p2_b(PLUS2) mom7m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom7_mx_reg_psub_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom7_mx_reg_nw_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom7_mx_reg_4t_a mom7p1_a(PLUS1) mom7m1_b(MINUS1) mom7p2_a(PLUS2) mom7m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom7_mx_reg_4t_b mom7p1_b(PLUS1) mom7m1_a(MINUS1) mom7p2_b(PLUS2) mom7m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom7_mx_reg_4t_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom7_rf_reg_psub mom7plus_b(PLUS) mom7minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom7_rf_reg_nw mom7plus_b(PLUS) mom7minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom7_rf_reg_psub_non mom7plus(PLUS) mom7minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom7_rf_reg_nw_non mom7plus(PLUS) mom7minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom8_reg_psub mom8plus_b(PLUS) mom8minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom8_reg_nw mom8plus_b(PLUS) mom8minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom8_reg_psub_non mom8plus(PLUS) mom8minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom8_reg_nw_non mom8plus(PLUS) mom8minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom8_reg_2t mom8plus_b(PLUS) mom8minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom8_reg_2t_non mom8plus(PLUS) mom8minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom8_mx_reg_psub_a mom8p1_a(PLUS1) mom8m1_b(MINUS1) mom8p2_a(PLUS2) mom8m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom8_mx_reg_psub_b mom8p1_b(PLUS1) mom8m1_a(MINUS1) mom8p2_b(PLUS2) mom8m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom8_mx_reg_nw_a mom8p1_a(PLUS1) mom8m1_b(MINUS1) mom8p2_a(PLUS2) mom8m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom8_mx_reg_nw_b mom8p1_b(PLUS1) mom8m1_a(MINUS1) mom8p2_b(PLUS2) mom8m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom8_mx_reg_psub_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom8_mx_reg_nw_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom8_mx_reg_4t_a mom8p1_a(PLUS1) mom8m1_b(MINUS1) mom8p2_a(PLUS2) mom8m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom8_mx_reg_4t_b mom8p1_b(PLUS1) mom8m1_a(MINUS1) mom8p2_b(PLUS2) mom8m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom8_mx_reg_4t_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom8_rf_reg_psub mom8plus_b(PLUS) mom8minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom8_rf_reg_nw mom8plus_b(PLUS) mom8minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom8_rf_reg_psub_non mom8plus(PLUS) mom8minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom8_rf_reg_nw_non mom8plus(PLUS) mom8minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom9_reg_psub mom9plus_b(PLUS) mom9minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom9_reg_nw mom9plus_b(PLUS) mom9minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom9_reg_psub_non mom9plus(PLUS) mom9minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom9_reg_nw_non mom9plus(PLUS) mom9minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]


DEVICE crtmom_2t cmom9_reg_2t mom9plus_b(PLUS) mom9minus_a(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_2t cmom9_reg_2t_non mom9plus(PLUS) mom9minus(MINUS) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxde
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom9_mx_reg_psub_a mom9p1_a(PLUS1) mom9m1_b(MINUS1) mom9p2_a(PLUS2) mom9m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom9_mx_reg_psub_b mom9p1_b(PLUS1) mom9m1_a(MINUS1) mom9p2_b(PLUS2) mom9m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom9_mx_reg_nw_a mom9p1_a(PLUS1) mom9m1_b(MINUS1) mom9p2_a(PLUS2) mom9m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom9_mx_reg_nw_b mom9p1_b(PLUS1) mom9m1_a(MINUS1) mom9p2_b(PLUS2) mom9m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom9_mx_reg_psub_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom9_mx_reg_nw_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxde,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom9_mx_reg_4t_a mom9p1_a(PLUS1) mom9m1_b(MINUS1) mom9p2_a(PLUS2) mom9m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom9_mx_reg_4t_b mom9p1_b(PLUS1) mom9m1_a(MINUS1) mom9p2_b(PLUS2) mom9m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]

DEVICE crtmom_mx_4t cmom9_mx_reg_4t_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXDE> <MOM_LAYER_17> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxde,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom9_rf_reg_psub mom9plus_b(PLUS) mom9minus_a(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom9_rf_reg_nw mom9plus_b(PLUS) mom9minus_a(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]

DEVICE crtmom_wo_rf cmom9_rf_reg_psub_non mom9plus(PLUS) mom9minus(MINUS) psub(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom9_rf_reg_nw_non mom9plus(PLUS) mom9minus(MINUS) nxwell(BULK) <MOMDMY_MXDE> <MOMDMY_VAP> <MOM_LAYER_17> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxde,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_17) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxde1    = ( perimeter(MOMDMY_MXDE) * (1e+6) ) / 2 - 0.05
    if( n_mxde1 < 0.051 ) { 
	n_mxde = 0
    } else {
	n_mxde = n_mxde1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]



TRACE PROPERTY crtmom_wo stm      stm      0
TRACE PROPERTY crtmom_wo spm      spm      0
TRACE PROPERTY crtmom_wo vapmod   vapmod   0
TRACE PROPERTY crtmom_wo nv       nv       0
TRACE PROPERTY crtmom_wo nh       nh       0
TRACE PROPERTY crtmom_wo n_mxde   n_mxde   0
TRACE PROPERTY crtmom_wo shield   shield   0

TRACE PROPERTY crtmom_2t stm      stm      0
TRACE PROPERTY crtmom_2t spm      spm      0
TRACE PROPERTY crtmom_2t vapmod   vapmod   0
TRACE PROPERTY crtmom_2t nv       nv       0
TRACE PROPERTY crtmom_2t nh       nh       0
TRACE PROPERTY crtmom_2t n_mxde   n_mxde   0

TRACE PROPERTY crtmom_wo_mx stm      stm      0
TRACE PROPERTY crtmom_wo_mx spm      spm      0
TRACE PROPERTY crtmom_wo_mx vapmod   vapmod   0
TRACE PROPERTY crtmom_wo_mx nv       nv       0
TRACE PROPERTY crtmom_wo_mx nh       nh       0
TRACE PROPERTY crtmom_wo_mx n_mxde   n_mxde   0
TRACE PROPERTY crtmom_wo_mx shield   shield   0
TRACE PROPERTY crtmom_wo_mx multi    multi    0

TRACE PROPERTY crtmom_mx_4t stm      stm      0
TRACE PROPERTY crtmom_mx_4t spm      spm      0
TRACE PROPERTY crtmom_mx_4t vapmod   vapmod   0
TRACE PROPERTY crtmom_mx_4t nv       nv       0
TRACE PROPERTY crtmom_mx_4t nh       nh       0
TRACE PROPERTY crtmom_mx_4t n_mxde   n_mxde   0
TRACE PROPERTY crtmom_mx_4t multi    multi    0

TRACE PROPERTY crtmom_wo_rf stm      stm      0
TRACE PROPERTY crtmom_wo_rf spm      spm      0
TRACE PROPERTY crtmom_wo_rf vapmod   vapmod   0
TRACE PROPERTY crtmom_wo_rf nv       nv       0
TRACE PROPERTY crtmom_wo_rf nh       nh       0
TRACE PROPERTY crtmom_wo_rf n_mxde   n_mxde   0
TRACE PROPERTY crtmom_wo_rf shield   shield   0


DEVICE moscap_rf var_nw_rf n_gpoly_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf br   br 0
TRACE PROPERTY moscap_rf gr   gr 0

DEVICE moscap_rf12 var_nw_rf12 n_gpoly_io_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf12> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf12)/gr
  wr = (perimeter_coincide(vargt_rf12,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf12)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf12 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12 lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12 br   br 0
TRACE PROPERTY moscap_rf12 gr   gr 0

DEVICE moscap_rf12_nw var_nw_rf12_nw n_gpoly_io_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf12> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf12)/gr
  wr = (perimeter_coincide(vargt_rf12,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf12)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf12_nw nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12_nw lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12_nw br   br 0
TRACE PROPERTY moscap_rf12_nw gr   gr 0

DEVICE moscap_rf12od15 var_nw_rf12od15 n_gpoly_io_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf12od15> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf12od15)/gr
  wr = (perimeter_coincide(vargt_rf12od15,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf12od15)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf12od15 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12od15 lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12od15 br   br 0
TRACE PROPERTY moscap_rf12od15 gr   gr 0

DEVICE moscap_rf12od15_nw var_nw_rf12od15_nw n_gpoly_io_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf12od15> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf12od15)/gr
  wr = (perimeter_coincide(vargt_rf12od15,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf12od15)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf12od15_nw nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12od15_nw lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12od15_nw br   br 0
TRACE PROPERTY moscap_rf12od15_nw gr   gr 0

DEVICE moscap_rf_nw var_nw_rf_nw n_gpoly_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf_nw nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf_nw lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf_nw br   br 0
TRACE PROPERTY moscap_rf_nw gr   gr 0


DEVICE ndio_12_mac ndio_12_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_12_r) / 2 / diffn
	l = area(ndio_12_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY ndio_12_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_12_mac l      l      DIO_Lerr


DEVICE ndio_12_ntn_mac ndio_12_ntn_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_12_ntn_r) / 2 / diffn
	l = area(ndio_12_ntn_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY ndio_12_ntn_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_12_ntn_mac l      l      DIO_Lerr

DEVICE ndio_hia12_mac hia12_ndio_r psub(PLUS) tndiff_dio(MINUS) <hia_dio_ngate> <ndiff_hdio> [
  property l,nfin,nf
  nf = count(ndiff_hdio)
  nr = count(tndiff_dio)
  w = perimeter_coincide(tndiff_dio,hia_dio_ngate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
  l = area(ndiff_hdio)/nf/w
]
TRACE PROPERTY ndio_hia12_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY ndio_hia12_mac l     l     DIO_Lerr
TRACE PROPERTY ndio_hia12_mac nf    nf    0

DEVICE ndio_hia12_ntn_mac hia12_ndio_ntn_r psub(PLUS) tndiff_dio(MINUS) <hia_dio_ngate> <ndiff_hdio_ntn> [
  property l,nfin,nf
  nf = count(ndiff_hdio_ntn)
  nr = count(tndiff_dio)
  w = perimeter_coincide(tndiff_dio,hia_dio_ngate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
  l = area(ndiff_hdio_ntn)/nf/w
]
TRACE PROPERTY ndio_hia12_ntn_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY ndio_hia12_ntn_mac l     l     DIO_Lerr
TRACE PROPERTY ndio_hia12_ntn_mac nf    nf    0


DEVICE ndio_mac ndio_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_r) / 2 / diffn
	l = area(ndio_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY ndio_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_mac l      l      DIO_Lerr


DEVICE nmoscap vargt vargt(PLUS) tndiff(MINUS) <nthin> [
       property lr,nfin
       lr = perimeter_coincide(vargt,nthin)/2
       wr = area(vargt)/lr
       nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY nmoscap nfin nfin MOSCAP_NFINerr
TRACE PROPERTY nmoscap lr   lr   MOSCAP_Lerr



DEVICE nmoscap_12 vargt_12 vargt_12(PLUS) tndiff(MINUS) <nthin> [
       property lr,nfin
       lr = perimeter_coincide(vargt_12,nthin)/2
       wr = area(vargt_12)/lr
       nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY nmoscap_12 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY nmoscap_12 lr   lr   MOSCAP_Lerr



DEVICE nmoscap_12od15 vargt_12od15 vargt_12od15(PLUS) tndiff(MINUS) <nthin> [
       property lr,nfin
       lr = perimeter_coincide(vargt_12od15,nthin)/2
       wr = area(vargt_12od15)/lr
       nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY nmoscap_12od15 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY nmoscap_12od15 lr   lr   MOSCAP_Lerr


#IFDEF RC_DFM_RULE
DEVICE npode_12_mac npode_12_mac_gate_edge tndiff(S) npode_12_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_12_mac_gate_edge, npode_12_mac_gate) 
   l  = area(npode_12_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_12_mac npode_12_mac_gate_edge tndiff(S) npode_12_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_12_mac_gate_edge, npode_12_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_12_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_12_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_12_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_12_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_12od15_mac npode_12od15_mac_gate_edge tndiff(S) npode_12od15_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_12od15_mac_gate_edge, npode_12od15_mac_gate) 
   l  = area(npode_12od15_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_12od15_mac npode_12od15_mac_gate_edge tndiff(S) npode_12od15_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_12od15_mac_gate_edge, npode_12od15_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_12od15_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_12od15_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_12od15_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_12od15_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_elvt_mac npode_elvt_mac_gate_edge tndiff(S) npode_elvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_elvt_mac_gate_edge, npode_elvt_mac_gate) 
   l  = area(npode_elvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_elvt_mac npode_elvt_mac_gate_edge tndiff(S) npode_elvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_elvt_mac_gate_edge, npode_elvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_elvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_elvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_elvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_elvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_lvt_mac npode_lvt_mac_gate_edge tndiff(S) npode_lvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_lvt_mac_gate_edge, npode_lvt_mac_gate) 
   l  = area(npode_lvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_lvt_mac npode_lvt_mac_gate_edge tndiff(S) npode_lvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_lvt_mac_gate_edge, npode_lvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_lvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_lvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_lvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_lvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_lvtll_mac npode_lvtll_mac_gate_edge tndiff(S) npode_lvtll_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_lvtll_mac_gate_edge, npode_lvtll_mac_gate) 
   l  = area(npode_lvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_lvtll_mac npode_lvtll_mac_gate_edge tndiff(S) npode_lvtll_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_lvtll_mac_gate_edge, npode_lvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_lvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_lvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_lvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_lvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_svt_mac npode_svt_mac_gate_edge tndiff(S) npode_svt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_svt_mac_gate_edge, npode_svt_mac_gate) 
   l  = area(npode_svt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_svt_mac npode_svt_mac_gate_edge tndiff(S) npode_svt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_svt_mac_gate_edge, npode_svt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_svt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_svt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_svt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_svt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_ulvt_mac npode_ulvt_mac_gate_edge tndiff(S) npode_ulvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_ulvt_mac_gate_edge, npode_ulvt_mac_gate) 
   l  = area(npode_ulvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_ulvt_mac npode_ulvt_mac_gate_edge tndiff(S) npode_ulvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_ulvt_mac_gate_edge, npode_ulvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_ulvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_ulvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_ulvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_ulvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE npode_ulvtll_mac npode_ulvtll_mac_gate_edge tndiff(S) npode_ulvtll_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_ulvtll_mac_gate_edge, npode_ulvtll_mac_gate) 
   l  = area(npode_ulvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_ulvtll_mac npode_ulvtll_mac_gate_edge tndiff(S) npode_ulvtll_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_ulvtll_mac_gate_edge, npode_ulvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_ulvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_ulvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_ulvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_ulvtll_mac OPEN LAYOUT SOURCE
#ENDIF



DEVICE pdio_12_mac pdio_12_r tpdiff_dio(PLUS) nxwell(MINUS) [
	property nfin, l
	diffn = count(tpdiff_dio)
	w = perimeter_inside(tpdiff_dio,pdio_12_r) / 2 / diffn
	l = area(pdio_12_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY pdio_12_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY pdio_12_mac l      l      DIO_Lerr

DEVICE pdio_hia12_mac hia12_pdio_r tpdiff_dio(PLUS) nxwell(MINUS) <hia_dio_pgate> <pdiff_hdio> [
  property l,nfin,nf
  nf = count(pdiff_hdio)
  nr = count(tpdiff_dio)
  w = perimeter_coincide(tpdiff_dio,hia_dio_pgate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
  l = area(pdiff_hdio)/nf/w
]
TRACE PROPERTY pdio_hia12_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY pdio_hia12_mac l     l     DIO_Lerr
TRACE PROPERTY pdio_hia12_mac nf    nf    0


DEVICE pdio_mac pdio_r tpdiff_dio(PLUS) nxwell(MINUS) [
	property nfin, l
	diffn = count(tpdiff_dio)
	w = perimeter_inside(tpdiff_dio,pdio_r) / 2 / diffn
	l = area(pdio_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY pdio_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY pdio_mac l      l      DIO_Lerr

#IFDEF extract_pnwdio
DEVICE D(pnwdio) pnwdio_r_wo_dnw psub nxwell netlist model nwdio
DEVICE D(pnwdio) pnwdio_r_wi_dnw psub nxwell <DNW> netlist model nwdio [
   property a, pj
   a = area(pnwdio_r_wi_dnw)
   pj = perimeter(pnwdio_r_wi_dnw) - perimeter_coincide(pnwdio_r_wi_dnw,DNW)
]    
LVS FILTER D(pnwdio) OPEN LAYOUT
#ENDIF

#IFDEF RC_DFM_RULE
DEVICE ppode_12_mac ppode_12_mac_gate_edge tpdiff(S) ppode_12_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_12_mac_gate_edge, ppode_12_mac_gate) 
   l  = area(ppode_12_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_12_mac ppode_12_mac_gate_edge tpdiff(S) ppode_12_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_12_mac_gate_edge, ppode_12_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_12_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_12_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_12_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_12_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_12od15_mac ppode_12od15_mac_gate_edge tpdiff(S) ppode_12od15_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_12od15_mac_gate_edge, ppode_12od15_mac_gate) 
   l  = area(ppode_12od15_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_12od15_mac ppode_12od15_mac_gate_edge tpdiff(S) ppode_12od15_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_12od15_mac_gate_edge, ppode_12od15_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_12od15_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_12od15_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_12od15_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_12od15_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_elvt_mac ppode_elvt_mac_gate_edge tpdiff(S) ppode_elvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_elvt_mac_gate_edge, ppode_elvt_mac_gate) 
   l  = area(ppode_elvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_elvt_mac ppode_elvt_mac_gate_edge tpdiff(S) ppode_elvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_elvt_mac_gate_edge, ppode_elvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_elvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_elvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_elvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_elvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_lvt_mac ppode_lvt_mac_gate_edge tpdiff(S) ppode_lvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_lvt_mac_gate_edge, ppode_lvt_mac_gate) 
   l  = area(ppode_lvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_lvt_mac ppode_lvt_mac_gate_edge tpdiff(S) ppode_lvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_lvt_mac_gate_edge, ppode_lvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_lvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_lvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_lvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_lvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_lvtll_mac ppode_lvtll_mac_gate_edge tpdiff(S) ppode_lvtll_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_lvtll_mac_gate_edge, ppode_lvtll_mac_gate) 
   l  = area(ppode_lvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_lvtll_mac ppode_lvtll_mac_gate_edge tpdiff(S) ppode_lvtll_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_lvtll_mac_gate_edge, ppode_lvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_lvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_lvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_lvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_lvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_svt_mac ppode_svt_mac_gate_edge tpdiff(S) ppode_svt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_svt_mac_gate_edge, ppode_svt_mac_gate) 
   l  = area(ppode_svt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_svt_mac ppode_svt_mac_gate_edge tpdiff(S) ppode_svt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_svt_mac_gate_edge, ppode_svt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_svt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_svt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_svt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_svt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_ulvt_mac ppode_ulvt_mac_gate_edge tpdiff(S) ppode_ulvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_ulvt_mac_gate_edge, ppode_ulvt_mac_gate) 
   l  = area(ppode_ulvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_ulvt_mac ppode_ulvt_mac_gate_edge tpdiff(S) ppode_ulvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_ulvt_mac_gate_edge, ppode_ulvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_ulvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_ulvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_ulvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_ulvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF RC_DFM_RULE
DEVICE ppode_ulvtll_mac ppode_ulvtll_mac_gate_edge tpdiff(S) ppode_ulvtll_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_ulvtll_mac_gate_edge, ppode_ulvtll_mac_gate) 
   l  = area(ppode_ulvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_ulvtll_mac ppode_ulvtll_mac_gate_edge tpdiff(S) ppode_ulvtll_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_ulvtll_mac_gate_edge, ppode_ulvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_ulvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_ulvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_ulvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_ulvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF extract_pwdnw
DEVICE D(pwdnw) rwdio_wi_nxwell psub DNW <nxwell> [
   property a, pj
   a = area(rwdio_wi_nxwell)
   pj = perimeter_coincide(rwdio_wi_nxwell,nxwell)
]   

DEVICE D(pwdnw) rwdio_wo_nxwell psub DNW [
   property a, pj
   a = area(rwdio_wo_nxwell)
   pj = 0
]   

TRACE PROPERTY D(pwdnw) a a DIOWELL_Aerr 
#ENDIF

DEVICE rhim rhim_r3 RH_TN_3(PLUS) RH_TN_3(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r3,RH_TN_3)/2
  l = area(rhim_r3)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r4 RH_TN_4(PLUS) RH_TN_4(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r4,RH_TN_4)/2
  l = area(rhim_r4)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r5 RH_TN_5(PLUS) RH_TN_5(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r5,RH_TN_5)/2
  l = area(rhim_r5)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r6 RH_TN_6(PLUS) RH_TN_6(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r6,RH_TN_6)/2
  l = area(rhim_r6)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r7 RH_TN_7(PLUS) RH_TN_7(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r7,RH_TN_7)/2
  l = area(rhim_r7)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r8 RH_TN_8(PLUS) RH_TN_8(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r8,RH_TN_8)/2
  l = area(rhim_r8)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r9 RH_TN_9(PLUS) RH_TN_9(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r9,RH_TN_9)/2
  l = area(rhim_r9)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r10 RH_TN_10(PLUS) RH_TN_10(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r10,RH_TN_10)/2
  l = area(rhim_r10)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r11 RH_TN_11(PLUS) RH_TN_11(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r11,RH_TN_11)/2
  l = area(rhim_r11)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r12 RH_TN_12(PLUS) RH_TN_12(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r12,RH_TN_12)/2
  l = area(rhim_r12)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r13 RH_TN_13(PLUS) RH_TN_13(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r13,RH_TN_13)/2
  l = area(rhim_r13)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r14 RH_TN_14(PLUS) RH_TN_14(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r14,RH_TN_14)/2
  l = area(rhim_r14)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r15 RH_TN_15(PLUS) RH_TN_15(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r15,RH_TN_15)/2
  l = area(rhim_r15)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r16 RH_TN_16(PLUS) RH_TN_16(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r16,RH_TN_16)/2
  l = area(rhim_r16)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

DEVICE rhim rhim_r17 RH_TN_17(PLUS) RH_TN_17(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,hi_em
  w = perimeter_coincide(rhim_r17,RH_TN_17)/2
  l = area(rhim_r17)/w
  hi_em = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]

TRACE PROPERTY rhim w w RES_Werr
TRACE PROPERTY rhim l l RES_Lerr
TRACE PROPERTY rhim hi_em hi_em RES_HIEMerr

DEVICE rm0w mt0res_a M0_A(PLUS) M0_A(MINUS) netlist model rm0w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt0res_a,M0_A)/2
	l = area(mt0res_a)/w
]

DEVICE rm0w mt0res_b M0_B(PLUS) M0_B(MINUS) netlist model rm0w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt0res_b,M0_B)/2
	l = area(mt0res_b)/w
]
	TRACE PROPERTY rm0w w  w  RES_Werr
	TRACE PROPERTY rm0w l  l  RES_Lerr

DEVICE rm10w mt10res_noab M10(PLUS) M10(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt10res_noab,M10)/2
	l = area(mt10res_noab)/w
]
DEVICE rm10w mt10res_a M10_A(PLUS) M10_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt10res_a,M10_A)/2
	l = area(mt10res_a)/w
]
DEVICE rm10w mt10res_b M10_B(PLUS) M10_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt10res_b,M10_B)/2
	l = area(mt10res_b)/w
]
TRACE PROPERTY rm10w w  w  RES_Werr
TRACE PROPERTY rm10w l  l  RES_Lerr

DEVICE rm11w mt11res_noab M11(PLUS) M11(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt11res_noab,M11)/2
	l = area(mt11res_noab)/w
]
DEVICE rm11w mt11res_a M11_A(PLUS) M11_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt11res_a,M11_A)/2
	l = area(mt11res_a)/w
]
DEVICE rm11w mt11res_b M11_B(PLUS) M11_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt11res_b,M11_B)/2
	l = area(mt11res_b)/w
]
TRACE PROPERTY rm11w w  w  RES_Werr
TRACE PROPERTY rm11w l  l  RES_Lerr

DEVICE rm12w mt12res_noab M12(PLUS) M12(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt12res_noab,M12)/2
	l = area(mt12res_noab)/w
]
DEVICE rm12w mt12res_a M12_A(PLUS) M12_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt12res_a,M12_A)/2
	l = area(mt12res_a)/w
]
DEVICE rm12w mt12res_b M12_B(PLUS) M12_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt12res_b,M12_B)/2
	l = area(mt12res_b)/w
]
TRACE PROPERTY rm12w w  w  RES_Werr
TRACE PROPERTY rm12w l  l  RES_Lerr

DEVICE rm13w mt13res_noab M13(PLUS) M13(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt13res_noab,M13)/2
	l = area(mt13res_noab)/w
]
DEVICE rm13w mt13res_a M13_A(PLUS) M13_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt13res_a,M13_A)/2
	l = area(mt13res_a)/w
]
DEVICE rm13w mt13res_b M13_B(PLUS) M13_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt13res_b,M13_B)/2
	l = area(mt13res_b)/w
]
TRACE PROPERTY rm13w w  w  RES_Werr
TRACE PROPERTY rm13w l  l  RES_Lerr

DEVICE rm14w mt14res_noab M14(PLUS) M14(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt14res_noab,M14)/2
	l = area(mt14res_noab)/w
]
DEVICE rm14w mt14res_a M14_A(PLUS) M14_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt14res_a,M14_A)/2
	l = area(mt14res_a)/w
]
DEVICE rm14w mt14res_b M14_B(PLUS) M14_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt14res_b,M14_B)/2
	l = area(mt14res_b)/w
]
TRACE PROPERTY rm14w w  w  RES_Werr
TRACE PROPERTY rm14w l  l  RES_Lerr

DEVICE rm15w mt15res_noab M15(PLUS) M15(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt15res_noab,M15)/2
	l = area(mt15res_noab)/w
]
DEVICE rm15w mt15res_a M15_A(PLUS) M15_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt15res_a,M15_A)/2
	l = area(mt15res_a)/w
]
DEVICE rm15w mt15res_b M15_B(PLUS) M15_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt15res_b,M15_B)/2
	l = area(mt15res_b)/w
]
TRACE PROPERTY rm15w w  w  RES_Werr
TRACE PROPERTY rm15w l  l  RES_Lerr

DEVICE rm16w mt16res_noab M16(PLUS) M16(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt16res_noab,M16)/2
	l = area(mt16res_noab)/w
]
DEVICE rm16w mt16res_a M16_A(PLUS) M16_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt16res_a,M16_A)/2
	l = area(mt16res_a)/w
]
DEVICE rm16w mt16res_b M16_B(PLUS) M16_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt16res_b,M16_B)/2
	l = area(mt16res_b)/w
]
TRACE PROPERTY rm16w w  w  RES_Werr
TRACE PROPERTY rm16w l  l  RES_Lerr

DEVICE rm17w mt17res_noab M17(PLUS) M17(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt17res_noab,M17)/2
	l = area(mt17res_noab)/w
]
DEVICE rm17w mt17res_a M17_A(PLUS) M17_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt17res_a,M17_A)/2
	l = area(mt17res_a)/w
]
DEVICE rm17w mt17res_b M17_B(PLUS) M17_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt17res_b,M17_B)/2
	l = area(mt17res_b)/w
]
TRACE PROPERTY rm17w w  w  RES_Werr
TRACE PROPERTY rm17w l  l  RES_Lerr

DEVICE rm1w mt1res_a M1_A(PLUS) M1_A(MINUS) netlist model rm1w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt1res_a,M1_A)/2
	l = area(mt1res_a)/w
]

DEVICE rm1w mt1res_b M1_B(PLUS) M1_B(MINUS) netlist model rm1w (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt1res_b,M1_B)/2
	l = area(mt1res_b)/w
]
	TRACE PROPERTY rm1w w  w  RES_Werr
	TRACE PROPERTY rm1w l  l  RES_Lerr

DEVICE rm2w mt2res_noab M2(PLUS) M2(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt2res_noab,M2)/2
	l = area(mt2res_noab)/w
]
DEVICE rm2w mt2res_a M2_A(PLUS) M2_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt2res_a,M2_A)/2
	l = area(mt2res_a)/w
]
DEVICE rm2w mt2res_b M2_B(PLUS) M2_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt2res_b,M2_B)/2
	l = area(mt2res_b)/w
]
TRACE PROPERTY rm2w w  w  RES_Werr
TRACE PROPERTY rm2w l  l  RES_Lerr

DEVICE rm3w mt3res_noab M3(PLUS) M3(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt3res_noab,M3)/2
	l = area(mt3res_noab)/w
]
DEVICE rm3w mt3res_a M3_A(PLUS) M3_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt3res_a,M3_A)/2
	l = area(mt3res_a)/w
]
DEVICE rm3w mt3res_b M3_B(PLUS) M3_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt3res_b,M3_B)/2
	l = area(mt3res_b)/w
]
TRACE PROPERTY rm3w w  w  RES_Werr
TRACE PROPERTY rm3w l  l  RES_Lerr

DEVICE rm4w mt4res_noab M4(PLUS) M4(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt4res_noab,M4)/2
	l = area(mt4res_noab)/w
]
DEVICE rm4w mt4res_a M4_A(PLUS) M4_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt4res_a,M4_A)/2
	l = area(mt4res_a)/w
]
DEVICE rm4w mt4res_b M4_B(PLUS) M4_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt4res_b,M4_B)/2
	l = area(mt4res_b)/w
]
TRACE PROPERTY rm4w w  w  RES_Werr
TRACE PROPERTY rm4w l  l  RES_Lerr

DEVICE rm5w mt5res_noab M5(PLUS) M5(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt5res_noab,M5)/2
	l = area(mt5res_noab)/w
]
DEVICE rm5w mt5res_a M5_A(PLUS) M5_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt5res_a,M5_A)/2
	l = area(mt5res_a)/w
]
DEVICE rm5w mt5res_b M5_B(PLUS) M5_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt5res_b,M5_B)/2
	l = area(mt5res_b)/w
]
TRACE PROPERTY rm5w w  w  RES_Werr
TRACE PROPERTY rm5w l  l  RES_Lerr

DEVICE rm6w mt6res_noab M6(PLUS) M6(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt6res_noab,M6)/2
	l = area(mt6res_noab)/w
]
DEVICE rm6w mt6res_a M6_A(PLUS) M6_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt6res_a,M6_A)/2
	l = area(mt6res_a)/w
]
DEVICE rm6w mt6res_b M6_B(PLUS) M6_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt6res_b,M6_B)/2
	l = area(mt6res_b)/w
]
TRACE PROPERTY rm6w w  w  RES_Werr
TRACE PROPERTY rm6w l  l  RES_Lerr

DEVICE rm7w mt7res_noab M7(PLUS) M7(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt7res_noab,M7)/2
	l = area(mt7res_noab)/w
]
DEVICE rm7w mt7res_a M7_A(PLUS) M7_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt7res_a,M7_A)/2
	l = area(mt7res_a)/w
]
DEVICE rm7w mt7res_b M7_B(PLUS) M7_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt7res_b,M7_B)/2
	l = area(mt7res_b)/w
]
TRACE PROPERTY rm7w w  w  RES_Werr
TRACE PROPERTY rm7w l  l  RES_Lerr

DEVICE rm8w mt8res_noab M8(PLUS) M8(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt8res_noab,M8)/2
	l = area(mt8res_noab)/w
]
DEVICE rm8w mt8res_a M8_A(PLUS) M8_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt8res_a,M8_A)/2
	l = area(mt8res_a)/w
]
DEVICE rm8w mt8res_b M8_B(PLUS) M8_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt8res_b,M8_B)/2
	l = area(mt8res_b)/w
]
TRACE PROPERTY rm8w w  w  RES_Werr
TRACE PROPERTY rm8w l  l  RES_Lerr

DEVICE rm9w mt9res_noab M9(PLUS) M9(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt9res_noab,M9)/2
	l = area(mt9res_noab)/w
]
DEVICE rm9w mt9res_a M9_A(PLUS) M9_A(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt9res_a,M9_A)/2
	l = area(mt9res_a)/w
]
DEVICE rm9w mt9res_b M9_B(PLUS) M9_B(MINUS) netlist model rmxw (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mt9res_b,M9_B)/2
	l = area(mt9res_b)/w
]
TRACE PROPERTY rm9w w  w  RES_Werr
TRACE PROPERTY rm9w l  l  RES_Lerr

DEVICE rmap mtAPres AP(PLUS) AP(MINUS) netlist model rmap (PLUS MINUS) [
	property w,l
	w = perimeter_coincide(mtAPres,AP)/2
	l = area(mtAPres)/w
]
TRACE PROPERTY rmap w  w  RES_Werr
TRACE PROPERTY rmap l  l  RES_Lerr

#IFDEF RC_DFM_RULE
#IFDEF MULTI_DEVICE_EXTRACTION
ERC TVF do_Perc_ADP Perc_ADP_properties annotate_adp_properties

TVF FUNCTION Perc_ADP_properties [/*
    package require CalibreLVS_ERC_TVF

    proc annotate_adp_properties {} {

#IFDEF FLICKER_CORNER_EXTRACTION
     erc::setup_parallel_device_parameters -devices { MN(nch_12_dnw_mac) MN(nch_12_mac) MN(nch_12od15_dnw_mac) MN(nch_12od15_mac) MN(nch_elvt_dnw_mac) MN(nch_elvt_mac) MN(nch_flrelvt_mac) MN(nch_flrlvt_mac) MN(nch_flrlvtll_mac) MN(nch_flrsvt_mac) MN(nch_flrulvt_mac) MN(nch_flrulvtll_mac) MN(nch_lvt_dnw_mac) MN(nch_lvt_mac) MN(nch_lvtll_dnw_mac) MN(nch_lvtll_mac) MN(nch_mpode12_mac) MN(nch_mpode12od15_mac) MN(nch_mpodeelvt_mac) MN(nch_mpodelvt_mac) MN(nch_mpodelvtll_mac) MN(nch_mpodesvt_mac) MN(nch_mpodeulvt_mac) MN(nch_mpodeulvtll_mac) MN(nch_svt_dnw_mac) MN(nch_svt_mac) MN(nch_ulvt_dnw_mac) MN(nch_ulvt_mac) MN(nch_ulvtll_dnw_mac) MN(nch_ulvtll_mac) MP(pch_12_mac) MP(pch_12od15_mac) MP(pch_elvt_mac) MP(pch_flrelvt_mac) MP(pch_flrlvt_mac) MP(pch_flrlvtll_mac) MP(pch_flrsvt_mac) MP(pch_flrulvt_mac) MP(pch_flrulvtll_mac) MP(pch_lvt_mac) MP(pch_lvtll_mac) MP(pch_mpode12_mac) MP(pch_mpode12od15_mac) MP(pch_mpodeelvt_mac) MP(pch_mpodelvt_mac) MP(pch_mpodelvtll_mac) MP(pch_mpodesvt_mac) MP(pch_mpodeulvt_mac) MP(pch_mpodeulvtll_mac) MP(pch_svt_mac) MP(pch_ulvt_mac) MP(pch_ulvtll_mac)  } -total { total { L NFIN } }
     erc::execute_parallel_device_parameters 
#ENDIF
#IFDEF SELF_HEATING_EFFECT_EXTRACTION
     erc::setup_device_parameters -devices { MN(nch_svt_mac) MN(nch_svt_dnw_mac) MN(nch_lvt_mac) MN(nch_lvtll_mac) MN(nch_lvt_dnw_mac) MN(nch_lvtll_dnw_mac) MN(nch_ulvt_mac) MN(nch_ulvtll_mac) MN(nch_ulvt_dnw_mac) MN(nch_ulvtll_dnw_mac) MN(nch_elvt_mac) MN(nch_elvt_dnw_mac) MN(nch_flrsvt_mac) MN(nch_flrlvt_mac) MN(nch_flrlvtll_mac) MN(nch_flrulvt_mac) MN(nch_flrulvtll_mac) MN(nch_flrelvt_mac) MN(nch_12_mac) MN(nch_12_dnw_mac) MN(nch_12od15_mac) MN(nch_12od15_dnw_mac) LDDN(nch_hia12_mac) MP(pch_svt_mac) MP(pch_lvt_mac) MP(pch_lvtll_mac) MP(pch_ulvt_mac) MP(pch_ulvtll_mac) MP(pch_elvt_mac) MP(pch_flrsvt_mac) MP(pch_flrlvt_mac) MP(pch_flrlvtll_mac) MP(pch_flrulvt_mac) MP(pch_flrulvtll_mac) MP(pch_flrelvt_mac) MP(pch_12_mac) MP(pch_12od15_mac) MN(nch_mpodesvt_mac) MN(nch_mpodelvt_mac) MN(nch_mpodeulvt_mac) MN(nch_mpodeelvt_mac) MN(nch_mpodelvtll_mac) MN(nch_mpodeulvtll_mac) MN(nch_mpode12_mac) MN(nch_mpode12od15_mac) MP(pch_mpodesvt_mac) MP(pch_mpodelvt_mac) MP(pch_mpodeulvt_mac) MP(pch_mpodeelvt_mac) MP(pch_mpodelvtll_mac) MP(pch_mpodeulvtll_mac) MP(pch_mpode12_mac) MP(pch_mpode12od15_mac)  } -odind odind -globalx gpocrdx -globaly gpocrdy
     erc::execute_parameters 
#ENDIF
    }
*/]
#ENDIF
#ENDIF
TVF FUNCTION device_function [/*

    package require CalibreLVS_DEVICE_DFM
    namespace import device::*
    proc catching_expr { arg } {
      	#puts "called catching_expr"
      	set rtval 0.0
      	if { [ catch {
            set rtval [ expr $arg ]
      	} result ] } {
            global errorCode
            set tmpError $errorCode
            #puts $result
            if { [ string match "ARITH UNDERFLOW *" $errorCode ] } {
            	#puts "$errorCode error caught during expr"
            	set rtval 0.0
            } elseif { [ string match "ARITH OVERFLOW *" $errorCode ] } {
	    	#puts "$errorCode error caught during expr"
            	set rtval 1e200
            } else {
            	#puts "error propagated during expr"
            	error $result $tmpError
            }
      	}
      	return $rtval
    }

    proc calc_lod_sasb { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/($sa+0.5*$Lsi)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ((1.0/$accum)-0.5*$Lsi)/[$scale] } ]
    }
    
    proc calc_lod_sa1sb1 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/pow($sa+0.1*$Lsi,3)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { (pow(1.0/$accum,1.0/3)-0.1*$Lsi)/[$scale] } ]
    }

    proc calc_lod_sa2sb2 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*sqrt(pow(5e-7/($sa+0.5*$Lsi),2)+1)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/sqrt(pow($accum,2)-1) - 0.5*$Lsi ) /[$scale] } ]
    }

    proc calc_lod_sa3sb3 { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)/(1+pow(5e-7/($sa+0.1*$Lsi),3))} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ( 5e-7/pow(1.0/$accum - 1,1.0/3) - 0.1*$Lsi ) /[$scale] } ]
    }
*/]
#IFDEF RC_DFM_RULE
INCLUDE /project/foundry/TSMC/N5/M1_1Mx_1Mxb_1Mxe_1Mya_1Myb_5My_2Myy_2Myx_2Mr_UT_ALRDL/PDK/LVS/mentor/1.2A/profile/CALIBRE_FLOW/DFM/odSpace.encrypt
#ENDIF
// Serve X-resistor as an built-in resistor (for PATHCHK)
LVS DEVICE TYPE RESISTOR rhim rm0w rm10w rm11w rm12w rm13w rm14w rm15w rm16w rm17w rm1w rm2w rm3w rm4w rm5w rm6w rm7w rm8w rm9w rmap [POS=PLUS NEG=MINUS]

#IFDEF RC_DFM_RULE
//=============================
//======= Setup for PEX =======
//=============================
#IFDEF MULTI_DEVICE_EXTRACTION
  MASK SVDB DIRECTORY "svdb" XRC SI
#ELSE
  MASK SVDB DIRECTORY "svdb" XRC
#ENDIF
//PEX MAGNIFY 1.0
//PEX DELAY                      none   //PENFIELD 0.7 MASK DIRECT

PEX EXTRACT EXCLUDE            "VDD" "AVDD" "VD33" "VDDSA" "VDDPST" "VDD5V"
PEX NETLIST                    "net.dist" HSPICE LAYOUTNAMES GROUND VSS LOCATION RCNAMED
PEX NETLIST SIMPLE             "net.simple" HSPICE LAYOUTNAMES LOCATION RCNAMED 		
//Back-annotation xcalibre flow
//PEX NETLIST                    "net.dist" HSPICE SOURCENAMES GROUND VSS LOCATION RCNAMED
//PEX NETLIST SIMPLE             "net.simple" HSPICE SOURCENAMES LOCATION  RCNAMED		 	    

PEX REPORT DISTRIBUTED         none  //"report.dist" ASCII LAYOUT MASK DIRECT
PEX REPORT LUMPED              none  //"report.lump" LAYOUT MASK DIRECT

//PEX REDUCE CC ABSOLUTE 10000000              		

PEX IDEAL XCELL                YES

// xcalibre capacitance and resistance file 
UNIT CAPACITANCE ff
UNIT RESISTANCE OHM
// Unzip RC techfile and include "rules" file here.
include ./rules


PEX XCELL PRECEDENCE FILE BEST
PEX FIN fin_lay
include xact_mapping_17m

PEX NETLIST LPE USING EXTMODE YES
PEX BA MAPFILE "./BA_mapping"

#ELSE

//#############################################
//# ERC CHECK                                 #
//#############################################
all_plug = COPY plug_sel2 
all_nplug = all_plug AND nplug1 
all_pplug = all_plug AND pplug1 
MD_invalid = MDx NOT MD_valid 
check_region = MDx INTERACT MD_invalid 
MD_ntap_region1 = MDx AND all_nplug 
MD_ntap_region = MD_ntap_region1 AND check_region 
MD_ptap_region1 = MDx AND all_pplug 
MD_ptap_region = MD_ptap_region1 AND check_region 
sr_dod_cut_psub2a = PSUB2 INTERACT PSUB2_final >= 2
sr_dod_cut_psub2b = sr_dod_s INTERACT sr_dod_cut_psub2a 
sr_dod_cut_psub2 = sr_dod_cut_psub2b INTERACT PSUB2_final >= 2
gate_connect_to_tndiff = EXT core_nmos_gates tndiff <= 0.0005 CONNECTED REGION ABUT == 0
sd_tndiff_gate_tie = core_nmos_gates INTERACT gate_connect_to_tndiff == 2
mnpp_nmos_gates = core_nmos_gates NOT sd_tndiff_gate_tie 
gate_connect_to_tpdiff = EXT core_pmos_gates tpdiff <= 0.0005 CONNECTED REGION ABUT == 0
sd_tpdiff_gate_tie = core_pmos_gates INTERACT gate_connect_to_tpdiff == 2
mpgg_pmos_gates = core_pmos_gates NOT sd_tpdiff_gate_tie 
erc_nmos_gate_tndiff_gnd = mnpp_nmos_gates TOUCH N2tndiff 
tndiff_virtual_gnd1 = tndiff TOUCH erc_nmos_gate_tndiff_gnd 
tndiff_virtual_gnd2 = tndiff_virtual_gnd1 NOT N2tndiff 
tndiff_virtual_gnd = tndiff_virtual_gnd2 NOT N1tndiff 
erc_pmos_gate_tpdiff_pwr = mpgg_pmos_gates TOUCH N1tpdiff 
tpdiff_virtual_pwr1 = tpdiff TOUCH erc_pmos_gate_tpdiff_pwr 
tpdiff_virtual_pwr2 = tpdiff_virtual_pwr1 NOT N1tpdiff 
tpdiff_virtual_pwr = tpdiff_virtual_pwr2 NOT N2tpdiff 
erc_nmpode_gates_1 = mnpp_nmos_gates AND PODE_GATEi 
erc_nflrmos_gates_1 = mnpp_nmos_gates AND FILLER_MOS 
erc_nfet_gates_1a = mnpp_nmos_gates NOT erc_nmpode_gates_1 
erc_nfet_gates_1 = erc_nfet_gates_1a NOT erc_nflrmos_gates_1 
erc_pmpode_gates_1 = mpgg_pmos_gates AND PODE_GATEi 
erc_pflrmos_gates_1 = mpgg_pmos_gates AND FILLER_MOS 
erc_pfet_gates_1a = mpgg_pmos_gates NOT erc_pmpode_gates_1 
erc_pfet_gates_1 = erc_pfet_gates_1a NOT erc_pflrmos_gates_1 
erc_nmpode_gates_waive = erc_nmpode_gates_1 NOT LUPVTWDMY 
erc_nflrmos_gates_waive = erc_nflrmos_gates_1 NOT LUPVTWDMY 
erc_nfet_gates_waive = erc_nfet_gates_1 NOT LUPVTWDMY 
erc_pmpode_gates_waive = erc_pmpode_gates_1 NOT LUPVTWDMY 
erc_pflrmos_gates_waive = erc_pflrmos_gates_1 NOT LUPVTWDMY 
erc_pfet_gates_waive = erc_pfet_gates_1 NOT LUPVTWDMY 
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_nmpode_gates = COPY erc_nmpode_gates_waive
#ELSE
erc_nmpode_gates = COPY erc_nmpode_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_nflrmos_gates = COPY erc_nflrmos_gates_waive
#ELSE
erc_nflrmos_gates = COPY erc_nflrmos_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_nfet_gates = COPY erc_nfet_gates_waive
#ELSE
erc_nfet_gates = COPY erc_nfet_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_pmpode_gates = COPY erc_pmpode_gates_waive
#ELSE
erc_pmpode_gates = COPY erc_pmpode_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_pflrmos_gates = COPY erc_pflrmos_gates_waive
#ELSE
erc_pflrmos_gates = COPY erc_pflrmos_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_pfet_gates = COPY erc_pfet_gates_waive
#ELSE
erc_pfet_gates = COPY erc_pfet_gates_1
#ENDIF
// Reports regions on a DNW layer that connect to more than one node.
LVS SOFTCHK DNW CONTACT
// Reports regions on a psub_term layer that connect to more than one node.
LVS SOFTCHK psub_term CONTACT
// Reports regions on a nxwell layer that connect to more than one node.
LVS SOFTCHK nxwell CONTACT
// Reports regions on a coll1 layer that connect to more than one node.
LVS SOFTCHK coll1 CONTACT
// Reports regions on a n_psub layer that connect to more than one node.
#IFNDEF NW_RING
	LVS SOFTCHK n_psub CONTACT
#ENDIF
// Reports regions on a psub layer that connect to more than one node.
LVS SOFTCHK psub CONTACT
#IFDEF PICKUP_CHECK
GROUP ERC_PICKUP_CHECK pickup.n_to_p_MD pickup.n_to_n_MD pickup.p_to_p_MD
ERC SELECT CHECK ERC_PICKUP_CHECK
pickup.n_to_p_MD { @ Dummy MD inside Dummy N-pickup connect to Dummy P-pickup path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_n_to_p_MD1 = check_region INTERACT MD_ntap 
  pickup_n_to_p_MD2 = pickup_n_to_p_MD1 INTERACT MD_ptap 
  pickup_n_to_p_MD = pickup_n_to_p_MD2 AND MDx 
  COPY pickup_n_to_p_MD
}
pickup.n_to_n_MD { @ Dummy MD inside Dummy P-pickup connect to Dummy P-pickup cross WELL path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_n_to_n_MD1 = check_region INTERACT MD_ntap >= 2 BY NET
  pickup_n_to_n_MD2 = pickup_n_to_n_MD1 NOT INTERACT MD_ptap 
  pickup_n_to_n_MD = pickup_n_to_n_MD2 AND MDx 
  COPY pickup_n_to_n_MD
}
pickup.p_to_p_MD { @ Dummy MD inside Dummy N-pickup connect to Dummy N-pickup cross WELL path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_p_to_p_MD1 = check_region INTERACT MD_ptap >= 2 BY NET
  pickup_p_to_p_MD2 = pickup_p_to_p_MD1 NOT INTERACT MD_ntap 
  pickup_p_to_p_MD = pickup_p_to_p_MD2 AND MDx 
  COPY pickup_p_to_p_MD
}
#ENDIF
#IFDEF unrecognized_device_checking
GROUP ERC_unrecognized_device_checking unrecognized_mos unrecognized_ndio unrecognized_pdio unrecognized_bjt unrecognized_rh_tn
ERC SELECT CHECK ERC_unrecognized_device_checking
unrecognized_mos { @ unrecognized check for MOS
  COPY unrecognized_mos
}
unrecognized_ndio { @ unrecognized check for NDIO
  COPY unrecognized_ndio
}
unrecognized_pdio { @ unrecognized check for PDIO
  COPY unrecognized_pdio
}
unrecognized_bjt { @ unrecognized check for BJT
  COPY unrecognized_bjt
}
unrecognized_rh_tn { @ unrecognized check for HiR resistor
  COPY unrecognized_rh_tn
}
#ENDIF
#IFDEF PSUB2_ERC_CHECK
GROUP ERC_PSUB2_ERC_CHECK SRDOD_CUT_PSUB2
ERC SELECT CHECK ERC_PSUB2_ERC_CHECK
SRDOD_CUT_PSUB2 { @ SRDOD cut PSUB2 check
  COPY sr_dod_cut_psub2
}
#ENDIF
#IFDEF FLRMOS_MNPP_MPGG_CHECK
GROUP ERC_FLRMOS_MNPP_MPGG_CHECK mnpp_flrmos mpgg_flrmos
ERC SELECT CHECK ERC_FLRMOS_MNPP_MPGG_CHECK
mnpp_flrmos { @ FLR NMOS S/D connected to power
  
  tpdiff_drain = STAMP tpdiff_virtual_pwr BY tpdiff
  tndiff_virtual_pwr = NET AREA RATIO tndiff tpdiff_drain > 0
  tndiff_pwr_pre = tndiff_virtual_pwr OR N1tndiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tndiff_pwr = COPY tndiff_pwr_pre
  #ELSE
  tndiff_pwr = COPY N1tndiff
  #ENDIF
  tndiff_psub_tie = tndiff AND psub CONNECTED
  sd_tndiff_psub_tie = erc_nflrmos_gates INTERACT tndiff_psub_tie == 2
  result_tmp = erc_nflrmos_gates INTERACT tndiff_pwr == 2
  result = result_tmp NOT sd_tndiff_psub_tie 
  COPY result
}
mpgg_flrmos { @ FLR PMOS S/D connected to ground
  
  tndiff_drain = STAMP tndiff_virtual_gnd BY tndiff
  tpdiff_virtual_gnd = NET AREA RATIO tpdiff tndiff_drain > 0
  tpdiff_gnd_pre = tpdiff_virtual_gnd OR N2tpdiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tpdiff_gnd = COPY tpdiff_gnd_pre
  #ELSE
  tpdiff_gnd = COPY N2tpdiff
  #ENDIF
  tpdiff_nxwell_tie = tpdiff AND nxwell CONNECTED
  sd_tpdiff_nxwell_tie = erc_pflrmos_gates INTERACT tpdiff_nxwell_tie == 2
  result_tmp = erc_pflrmos_gates INTERACT tpdiff_gnd == 2
  result = result_tmp NOT sd_tpdiff_nxwell_tie 
  COPY result
}
#ENDIF
#IFDEF METAL_MAIN_CHECK
GROUP ERC_METAL_MAIN_CHECK metal0_main_check metal1_main_check metal2_main_check metal3_main_check metal4_main_check metal5_main_check metal6_main_check metal7_main_check metal8_main_check metal9_main_check metal10_main_check metal11_main_check metal12_main_check metal13_main_check metal14_main_check metal15_main_check metal16_main_check metal17_main_check
ERC SELECT CHECK ERC_METAL_MAIN_CHECK
metal0_main_check { @ Use non-color main metal layer MAIN_M0
  COPY MAIN_M0
}
metal1_main_check { @ Use non-color main metal layer MAIN_M1
  COPY MAIN_M1
}
metal2_main_check { @ Use non-color main metal layer MAIN_M2
  COPY MAIN_M2
}
metal3_main_check { @ Use non-color main metal layer MAIN_M3
  COPY MAIN_M3
}
metal4_main_check { @ Use non-color main metal layer MAIN_M4
  COPY MAIN_M4
}
metal5_main_check { @ Use non-color main metal layer MAIN_M5
  COPY MAIN_M5
}
metal6_main_check { @ Use non-color main metal layer MAIN_M6
  COPY MAIN_M6
}
metal7_main_check { @ Use non-color main metal layer MAIN_M7
  COPY MAIN_M7
}
metal8_main_check { @ Use non-color main metal layer MAIN_M8
  COPY MAIN_M8
}
metal9_main_check { @ Use non-color main metal layer MAIN_M9
  COPY MAIN_M9
}
metal10_main_check { @ Use non-color main metal layer MAIN_M10
  COPY MAIN_M10
}
metal11_main_check { @ Use non-color main metal layer MAIN_M11
  COPY MAIN_M11
}
metal12_main_check { @ Use non-color main metal layer MAIN_M12
  COPY MAIN_M12
}
metal13_main_check { @ Use non-color main metal layer MAIN_M13
  COPY MAIN_M13
}
metal14_main_check { @ Use non-color main metal layer MAIN_M14
  COPY MAIN_M14
}
metal15_main_check { @ Use non-color main metal layer MAIN_M15
  COPY MAIN_M15
}
metal16_main_check { @ Use non-color main metal layer MAIN_M16
  COPY MAIN_M16
}
metal17_main_check { @ Use non-color main metal layer MAIN_M17
  COPY MAIN_M17
}
#ENDIF
#IFDEF REGMOS_MNPP_MPGG_CHECK
GROUP ERC_REGMOS_MNPP_MPGG_CHECK mnpp mpgg
ERC SELECT CHECK ERC_REGMOS_MNPP_MPGG_CHECK
mnpp { @ NMOS S/D connected to power
  
  tpdiff_drain = STAMP tpdiff_virtual_pwr BY tpdiff
  tndiff_virtual_pwr = NET AREA RATIO tndiff tpdiff_drain > 0
  tndiff_pwr_pre = tndiff_virtual_pwr OR N1tndiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tndiff_pwr = COPY tndiff_pwr_pre
  #ELSE
  tndiff_pwr = COPY N1tndiff
  #ENDIF
  tndiff_psub_tie = tndiff AND psub CONNECTED
  sd_tndiff_psub_tie = erc_nfet_gates INTERACT tndiff_psub_tie == 2
  result_tmp = erc_nfet_gates INTERACT tndiff_pwr == 2
  result = result_tmp NOT sd_tndiff_psub_tie 
  COPY result
}
mpgg { @ PMOS S/D connected to ground
  
  tndiff_drain = STAMP tndiff_virtual_gnd BY tndiff
  tpdiff_virtual_gnd = NET AREA RATIO tpdiff tndiff_drain > 0
  tpdiff_gnd_pre = tpdiff_virtual_gnd OR N2tpdiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tpdiff_gnd = COPY tpdiff_gnd_pre
  #ELSE
  tpdiff_gnd = COPY N2tpdiff
  #ENDIF
  tpdiff_nxwell_tie = tpdiff AND nxwell CONNECTED
  sd_tpdiff_nxwell_tie = erc_pfet_gates INTERACT tpdiff_nxwell_tie == 2
  result_tmp = erc_pfet_gates INTERACT tpdiff_gnd == 2
  result = result_tmp NOT sd_tpdiff_nxwell_tie 
  COPY result
}
#ENDIF
#IFDEF MPODE_MNPP_MPGG_CHECK
GROUP ERC_MPODE_MNPP_MPGG_CHECK mnpp_mpode mpgg_mpode
ERC SELECT CHECK ERC_MPODE_MNPP_MPGG_CHECK
mnpp_mpode { @ NMOS MPODE S/D connected to power
  
  tpdiff_drain = STAMP tpdiff_virtual_pwr BY tpdiff
  tndiff_virtual_pwr = NET AREA RATIO tndiff tpdiff_drain > 0
  tndiff_pwr_pre = tndiff_virtual_pwr OR N1tndiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tndiff_pwr = COPY tndiff_pwr_pre
  #ELSE
  tndiff_pwr = COPY N1tndiff
  #ENDIF
  tndiff_psub_tie = tndiff AND psub CONNECTED
  sd_tndiff_psub_tie = erc_nmpode_gates INTERACT tndiff_psub_tie == 2
  result_tmp = erc_nmpode_gates INTERACT tndiff_pwr == 2
  result = result_tmp NOT sd_tndiff_psub_tie 
  COPY result
}
mpgg_mpode { @ PMOS MPODE S/D connected to ground
  
  tndiff_drain = STAMP tndiff_virtual_gnd BY tndiff
  tpdiff_virtual_gnd = NET AREA RATIO tpdiff tndiff_drain > 0
  tpdiff_gnd_pre = tpdiff_virtual_gnd OR N2tpdiff 
  #IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
  tpdiff_gnd = COPY tpdiff_gnd_pre
  #ELSE
  tpdiff_gnd = COPY N2tpdiff
  #ENDIF
  tpdiff_nxwell_tie = tpdiff AND nxwell CONNECTED
  sd_tpdiff_nxwell_tie = erc_pmpode_gates INTERACT tpdiff_nxwell_tie == 2
  result_tmp = erc_pmpode_gates INTERACT tpdiff_gnd == 2
  result = result_tmp NOT sd_tpdiff_nxwell_tie 
  COPY result
}
#ENDIF
CONNECT core_nmos_gates n_fpoly_svt
CONNECT core_nmos_gates n_fpoly_lvtll
CONNECT core_nmos_gates n_fpoly_lvt
CONNECT core_nmos_gates n_fpoly_ulvtll
CONNECT core_nmos_gates n_fpoly_ulvt
CONNECT core_nmos_gates n_fpoly_elvt
CONNECT core_nmos_gates n_fpoly_io
CONNECT core_nmos_gates n_fpoly_io_ulvt
CONNECT core_nmos_gates n_fpoly_srm
CONNECT core_pmos_gates p_fpoly_svt
CONNECT core_pmos_gates p_fpoly_lvtll
CONNECT core_pmos_gates p_fpoly_lvt
CONNECT core_pmos_gates p_fpoly_ulvtll
CONNECT core_pmos_gates p_fpoly_ulvt
CONNECT core_pmos_gates p_fpoly_elvt
CONNECT core_pmos_gates p_fpoly_io
CONNECT core_pmos_gates p_fpoly_srm

#IFDEF WELL_TO_PG_CHECK
GROUP ERC_WELL_TO_PG_CHECK  npvss49 ppvdd49
ERC SELECT CHECK ERC_WELL_TO_PG_CHECK
#ENDIF

#IFDEF GATE_TO_PG_CHECK
GROUP ERC_GATE_TO_PG_CHECK  npvss150 ppvdd150
ERC SELECT CHECK ERC_GATE_TO_PG_CHECK
#ENDIF

#IFDEF DS_TO_PG_CHECK
GROUP ERC_DS_TO_PG_CHECK  mnpg mppg mnpgldd
ERC SELECT CHECK ERC_DS_TO_PG_CHECK
#ENDIF

#IFDEF FLOATING_WELL_CHECK
GROUP ERC_FLOATING_WELL_CHECK  floating.nxwell_float floating.psub
ERC SELECT CHECK ERC_FLOATING_WELL_CHECK
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpg*/
N1tndiff = NET tndiff POWER_NAME
T1tndiff = erc_nmos_gates TOUCH N1tndiff
N2tndiff = NET tndiff GROUND_NAME
T2tndiff = erc_nmos_gates TOUCH N2tndiff

#IFDEF DS_TO_PG_CHECK
mnpg { @ MOS connected to both power and ground
  (T1tndiff AND T2tndiff) NOT SDI
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppg*/
N1tpdiff = NET tpdiff POWER_NAME
T1tpdiff = erc_pmos_gates TOUCH N1tpdiff
N2tpdiff = NET tpdiff GROUND_NAME
T2tpdiff = erc_pmos_gates TOUCH N2tpdiff

#IFDEF DS_TO_PG_CHECK
mppg { @ MOS connected to both power and ground
  (T1tpdiff AND T2tpdiff) NOT SDI
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgldd*/
N1tndiff_mnpglddA = NET tndiff POWER_NAME
T1tndiff_mnpglddA = erc_nmos_gates TOUCH N1tndiff_mnpglddA
N2tndiff_sdi_mnpglddA = NET tndiff_sdi GROUND_NAME
T2tndiff_sdi_mnpglddA = erc_nmos_gates TOUCH N2tndiff_sdi_mnpglddA

N1tndiff_sdi_mnpglddB = NET tndiff_sdi POWER_NAME
T1tndiff_sdi_mnpglddB = erc_nmos_gates TOUCH N1tndiff_sdi_mnpglddB
N2tndiff_mnpglddB = NET tndiff GROUND_NAME
T2tndiff_mnpglddB = erc_nmos_gates TOUCH N2tndiff_mnpglddB

#IFDEF DS_TO_PG_CHECK
mnpgldd { @ MOS connected to both power and ground
  (T1tndiff_mnpglddA AND T2tndiff_sdi_mnpglddA ) OR (T1tndiff_sdi_mnpglddB AND T2tndiff_mnpglddB )
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
SCONNECT tndiff nxwell_float by nplug
SCONNECT tndiff_dio nxwell_float by nplug
SCONNECT tndiff_bjt nxwell_float by nplug
SCONNECT tndiff_RC nxwell_float by nplug
floating.nxwell_float { @ nxwell_float is not connected to POWER
  no_power_path = PATHCHK !POWER nxwell_float PORTS ALSO
  direct_connect_ground = NET nxwell_float GROUND_NAME
  no_power_path or direct_connect_ground
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
floating.psub { @ psub is not connected to GROUND
  no_ground_path = PATHCHK !GROUND psub PORTS ALSO
  direct_connect_power = NET psub POWER_NAME
  no_ground_path or direct_connect_power
}
#ENDIF
gate1_not_IO2_GND = NET gate1_not_IO2_not_IO1 GROUND_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to ground 
npvss150 { @ gate1_not_IO2 connected to GROUND
  gate1_not_IO2_GND_pmos = gate1_not_IO2_GND INTERACT N1tpdiff
  gate1_not_IO2_GND_nmos = gate1_not_IO2_GND INTERACT N1tndiff
  nxwell_PWR = NET nxwell POWER_NAME
  psub_PWR = NET psub POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_GND_pmos_filter1_1 = gate1_not_IO2_GND_pmos INTERACT N1tpdiff == 2
  gate1_not_IO2_GND_pmos_filter1 = gate1_not_IO2_GND_pmos_filter1_1 INTERACT nxwell_PWR

  gate1_not_IO2_GND_nmos_filter1_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter1 = gate1_not_IO2_GND_nmos_filter1_1 INTERACT psub_PWR

  gate1_not_IO2_GND_nmos_filter2_1 = gate1_not_IO2_GND_nmos INTERACT N2tndiff
  gate1_not_IO2_GND_nmos_filter2 = gate1_not_IO2_GND_nmos_filter2_1 INTERACT psub_GND

  gate1_not_IO2_GND_nmos_filter3_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter3 = gate1_not_IO2_GND_nmos_filter3_1 INTERACT (nxwell_PWR AND VARi)

  ((((gate1_not_IO2_GND_pmos OR gate1_not_IO2_GND_nmos) NOT gate1_not_IO2_GND_pmos_filter1) NOT gate1_not_IO2_GND_nmos_filter1) NOT gate1_not_IO2_GND_nmos_filter2) NOT gate1_not_IO2_GND_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ntap connect to ground 
npvss49 { @ ntap connected to GROUND
  ntap_not_var = ntap NOT VARi
  NET ntap_not_var GROUND_NAME
}
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to ground but not power 
ERC PATHCHK GROUND && !POWER
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to power but not ground 
ERC PATHCHK POWER && !GROUND
#ENDIF

#IFDEF PATH_CHECK
// Nodes without a path to power and ground 
ERC PATHCHK !POWER && !GROUND NOFLOAT
#ENDIF

#IFDEF PATH_CHECK
ERC PATHCHK !LABELED NOFLOAT
#ENDIF
gate1_not_IO2_not_IO1 = COPY gate1_not_IO2
CONNECT gate1_not_IO2_not_IO1 n_fpoly_elvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_io
CONNECT gate1_not_IO2_not_IO1 n_fpoly_io_ulvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_lvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_lvtll
CONNECT gate1_not_IO2_not_IO1 n_fpoly_srm
CONNECT gate1_not_IO2_not_IO1 n_fpoly_svt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_ulvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_ulvtll
CONNECT gate1_not_IO2_not_IO1 p_fpoly_elvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_io
CONNECT gate1_not_IO2_not_IO1 p_fpoly_lvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_lvtll
CONNECT gate1_not_IO2_not_IO1 p_fpoly_srm
CONNECT gate1_not_IO2_not_IO1 p_fpoly_svt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_ulvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_ulvtll
gate1_not_IO2_PWR = NET gate1_not_IO2_not_IO1 POWER_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to power 
ppvdd150 { @ gate1_not_IO2 connected to POWER
  gate1_not_IO2_PWR_pmos = gate1_not_IO2_PWR INTERACT N2tpdiff
  gate1_not_IO2_PWR_nmos = gate1_not_IO2_PWR INTERACT N2tndiff
  nxwell_GND = NET nxwell GROUND_NAME
  nxwell_PWR = NET nxwell POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_PWR_pmos_filter1_1 = gate1_not_IO2_PWR_pmos INTERACT N2tpdiff == 2
  gate1_not_IO2_PWR_pmos_filter1 = gate1_not_IO2_PWR_pmos_filter1_1 INTERACT nxwell_GND

  gate1_not_IO2_PWR_nmos_filter1_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter1 = gate1_not_IO2_PWR_nmos_filter1_1 INTERACT psub_GND

  gate1_not_IO2_PWR_pmos_filter2_1 = gate1_not_IO2_PWR_pmos INTERACT N1tpdiff
  gate1_not_IO2_PWR_pmos_filter2 = gate1_not_IO2_PWR_pmos_filter2_1 INTERACT nxwell_PWR

  gate1_not_IO2_PWR_nmos_filter3_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter3 = gate1_not_IO2_PWR_nmos_filter3_1 INTERACT (nxwell_GND AND VARi)

  ((((gate1_not_IO2_PWR_pmos OR gate1_not_IO2_PWR_nmos) NOT gate1_not_IO2_PWR_pmos_filter1) NOT gate1_not_IO2_PWR_nmos_filter1) NOT gate1_not_IO2_PWR_pmos_filter2 ) NOT gate1_not_IO2_PWR_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ptap connect to power 
ppvdd49 { @ ptap connected to POWER
  NET ptap POWER_NAME
}
#ENDIF
#IFDEF LVSDMY4_CHECK
LVSDMY4_DNW_CHECK { @ The LVSDMY4 layer is used in LVS deck to identify logic N-Type MOS within the DNW only. Not recommend that LVSDMY4 layer is used without DNW layer
    nmos_gates_1 = all_mos_gates  NOT PP
    nmos_gates_2 = nmos_gates_1  NOT SRM
    nmos_gates_3 = nmos_gates_2  NOT VAR
    nmos_gates   = nmos_gates_3  NOT PODE_GATE
    LVSDMY4_not_DNW = LVSDMY4 NOT DNW
    LVSDMY4_not_DNW INTERACT nmos_gates
}
ERC SELECT CHECK LVSDMY4_DNW_CHECK
#ENDIF

CONNECT all_abut_npode_gate n_fpoly_svt
CONNECT all_abut_npode_gate n_fpoly_lvtll
CONNECT all_abut_npode_gate n_fpoly_lvt
CONNECT all_abut_npode_gate n_fpoly_ulvtll
CONNECT all_abut_npode_gate n_fpoly_ulvt
CONNECT all_abut_npode_gate n_fpoly_elvt
CONNECT all_abut_npode_gate n_fpoly_io
CONNECT all_abut_npode_gate n_fpoly_io_ulvt
CONNECT all_abut_npode_gate n_fpoly_srm
CONNECT all_abut_ppode_gate p_fpoly_svt
CONNECT all_abut_ppode_gate p_fpoly_lvtll
CONNECT all_abut_ppode_gate p_fpoly_lvt
CONNECT all_abut_ppode_gate p_fpoly_ulvtll
CONNECT all_abut_ppode_gate p_fpoly_ulvt
CONNECT all_abut_ppode_gate p_fpoly_elvt
CONNECT all_abut_ppode_gate p_fpoly_io
CONNECT all_abut_ppode_gate p_fpoly_srm
#IFNDEF THROUGH_ONE_PULLUP_PULLDOWN_MOS
PODE.R.9.2_P { @ 4-terminal PODE_GATE PMOS must be turned off and connected to POWER
  gate_connect_to_tpdiff = EXT all_abut_ppode_gate tpdiff <= 0.0005 CONNECTED REGION ABUT == 0
  dgs_tie = all_abut_ppode_gate INTERACT gate_connect_to_tpdiff == 2
  ( NOT NET all_abut_ppode_gate POWER_NAME ) NOT dgs_tie
}
PODE.R.9.2_N { @ 4-terminal PODE_GATE NMOS must be turned off and connected to GROUND
  gate_connect_to_tndiff = EXT all_abut_npode_gate tndiff <= 0.0005 CONNECTED REGION ABUT == 0
  dgs_tie = all_abut_npode_gate INTERACT gate_connect_to_tndiff == 2
  ( NOT NET all_abut_npode_gate GROUND_NAME ) NOT dgs_tie
}
ERC SELECT CHECK PODE.R.9.2_P PODE.R.9.2_N 

#ELSE
erc_nmos_gate_tndiff_vss1 = erc_nmos_gates TOUCH N2tndiff
erc_pmos_gate_tpdiff_vdd1 = erc_pmos_gates TOUCH N1tpdiff
erc_nmos_gate_tndiff_vss = erc_nmos_gate_tndiff_vss1 NOT INTERACT PODE_GATE
erc_pmos_gate_tpdiff_vdd = erc_pmos_gate_tpdiff_vdd1 NOT INTERACT PODE_GATE
tndiff_vss = tndiff TOUCH erc_nmos_gate_tndiff_vss
tpdiff_vdd = tpdiff TOUCH erc_pmos_gate_tpdiff_vdd
tndiff_vss1 =tndiff_vss NOT N2tndiff
tpdiff_vdd1 =tpdiff_vdd NOT N1tpdiff
PODE.R.9.2_P { @ 4-terminal PODE_GATE PMOS must be turned off and connected to POWER
  PPODE_ERC1 = NOT NET all_abut_ppode_gate POWER_NAME
  tpdiff_drain = STAMP tpdiff_vdd1 BY tpdiff
  PPODE_ERC2 = NET AREA RATIO all_abut_ppode_gate tpdiff_drain > 0
  gate_connect_to_tpdiff = EXT all_abut_ppode_gate tpdiff <= 0.0005 CONNECTED REGION ABUT == 0
  dgs_tie = all_abut_ppode_gate INTERACT gate_connect_to_tpdiff == 2
  ( PPODE_ERC1 NOT PPODE_ERC2 ) NOT dgs_tie
}
PODE.R.9.2_N { @ 4-terminal PODE_GATE NMOS must be turned off and connected to GROUND
  NPODE_ERC1 = NOT NET all_abut_npode_gate GROUND_NAME
  tndiff_drain = STAMP tndiff_vss1 BY tndiff
  NPODE_ERC2 = NET AREA RATIO all_abut_npode_gate tndiff_drain > 0
  gate_connect_to_tndiff = EXT all_abut_npode_gate tndiff <= 0.0005 CONNECTED REGION ABUT == 0
  dgs_tie = all_abut_npode_gate INTERACT gate_connect_to_tndiff == 2
  ( NPODE_ERC1 NOT NPODE_ERC2 ) NOT dgs_tie
}
ERC SELECT CHECK PODE.R.9.2_P PODE.R.9.2_N 

#ENDIF

#ENDIF
////////////////////////////////////////////////////////////////////////////////
// STRAINED SILICON SEARCH DISTANCES
////////////////////////////////////////////////////////////////////////////////
LAYER1 = COPY OD // placeholder dummy layer
CONNECT all_sd tndiff
CONNECT all_sd tpdiff
good_gate_a = TOUCH gate_a all_sd == 2
}

package require CalibreDFM_DEVICE
set device:normalize_xy 1
### max_sp, max_sp2, max_sd : for PSE
# maximum search distance for gate-to-1st-poly spacing
set device::max_sp    3
# maximum search distance for gate-to-2nd-poly spacing
set device::max_sp2   4
# maximum search distance for gate-to-diffusion enclosure
set device::max_sd    11
### max_sp, max_se, max_sf, max_sle, max_slf : for Boundary
# maximum search distance for gate-to-layer1 enclosure (sides)
set device::max_se    5
# maximum search distance for gate-to-2nd-layer1 spacing (sides)
set device::max_sf    6
# maximum search distance for gate-to-layer1 enclosure (ends)
set device::max_sle   5
# maximum search distance for gate-to-2nd-layer1 spacing (ends)
set device::max_slf   6
### max_sp, max_sode, max_sodf, max_sodlf : for OD-OD
# maximum search distance for gate-to-1st-OD (sides)
set device::max_sode  11
# maximum search distance for gate-to-2nd-OD (sides)
set device::max_sodf  15
# maximum search distance for gate-to-2nd-OD (ends)
set device::max_sodlf 4
# sizing up vale for gate when measuring gate-to-2nd-OD (ends)
set device::lat_sodlf 0.028

tvf::SETLAYER end_osey_p = [
   device::n5_osey_measurements -gate gate_mac -sd all_sd -od OD -max_od 3 -lx1 0.025
]
tvf::SETLAYER lod_PROP = [
   device::enclosure_measurements -base gate_mac -measurement OD -orient all_sd -max_par 0  -max_per 60 
]
# maximum search distance for gate to poly measurement (L-dir)
set device::max_pse  3
set device::max_sod  0.01
# maximum search distance for gate to OD measurement (W-dir)
set device::max_eod  3
set device::max_swell  0.01
set device::max_ewell  0.01
set device::max_pxe  5
set device::max_pmet  5
set device::max_m0  0.01
set device::max_md1  0.01
set device::max_md2  0.01
set device::max_v0  0.01
set device::wx1  0.01
# sizing up value for gate when measuring gate-to-2nd-OD (W-dir)
set device::lx1  0.025
set device::lx2  0.01
# shifting gate edge to avoid segment merge, precision 10000 is required
set device::n20_shift_val  0.0002
set device::skip_cmod  1
set device::max_multi_layer 1

tvf::SETLAYER gate_COR = [ 
   device::n20_measurements -gate gate_mac -sd all_sd -active OD -poly POx -cpo CPO -well BULK -pmet Empty -m0 MDi 
]

tvf::SETLAYER gate_xvtmbe = [
   device::multi_layer_measurements -gate gate_mac -sd all_sd                              \
                                    -layers { POx     VTSN    VTLN    VTULN   VTELN   VTLNLL  VTULNLL   VTSP    VTLP    VTULP   VTELP   VTLPLL  VTULPLL  VTSN    VTLN    VTULN   VTELN   VTLNLL  VTULNLL   VTSP    VTLP    VTULP   VTELP   VTLPLL  VTULPLL   }    \
                                    -types  { {enc 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1}   {enc 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1}   }      
]

tvf::SETLAYER gate_xvtmbe_io = [
   device::multi_layer_measurements -gate gate_mac -sd all_sd                              \
                                    -layers { POx     NW      NW      }    \
                                    -types  { {enc 1} {ext 1} {enc 1} }      
]
tvf::SETLAYER cpo_aux = [ device::cpo_measurements -gate gate_mac -sd all_sd -po_bc PO2 -po_ac POx -cpo CPO -lx 1.1 -max_cpo 3 -max_jog 0.0020 -shift_val 0.0001 -od ODI -max_od 1 ]
tvf::SETLAYER end_cod_h_p = [
   device::n5_cod_h_measurements -gate gate_mac -sd all_sd -cod_h COD_H_Output_all -marker FB1 -max_cod_h 0.526 -widths { 0.056 0.084 0.112 0.140 } -values { 2 3 4 5 }
]
