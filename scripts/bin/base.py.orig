import os
import datetime
import csv
import datetime
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.dialects.postgresql import DATERANGE
from sqlalchemy import create_engine, MetaData, Table, Column, String, Float, Integer, select, text, ForeignKey, UniqueConstraint, PrimaryKeyConstraint, DateTime, update, inspect
from sqlalchemy.orm import relationship
from sqlalchemy.exc import IntegrityError, ProgrammingError
from tenacity import retry, stop_after_attempt, wait_fixed
import time
from sqlalchemy.engine import reflection



# SUMMARY - 52
csv_headers_summary = {'Date': 'date|Date', 'Time': 'time|Time', 'Block_name': 'block_name|String', 'Source': 'source|String',\
            'Version': 'version|String', 'Run': 'run|String', 'stage': 'stage|String', 'X(um)': 'xum|Float',\
            'Y(um)': 'yum|Float', 'Area': 'area|Float', 'Leaf_Cell_Area': 'leaf_cell_area|Float',\
            'Utilization': 'util_percent|Float', 'Cell_count': 'cell_count|Integer', 'Buf/inv': 'buf_inv|Integer',\
            'Logic': 'logic|Integer', 'Flops': 'flops|Integer', 'Bits': 'bits|Integer', 'Removed_seq': 'removed_seq|Integer',\
            'num_of_ports': 'num_of_ports|Integer', '%svt': 'svt_percent|Float', '%lvtll': 'lvtll_percent|Float',\
            '%lvt': 'lvt_percent|Float', '%ulvtll': 'ulvtll_percent|Float', '%ulvt': 'ulvt_percent|Float', '%en': 'en_percent|Float', 'internal': 'internal|Float',\
            'switching': 'switching|Float', 'dynamic': 'dynamic|Float', 'leakage': 'leakage|Float', 'total': 'total|Float', 'Bank_ratio': 'bank_ratio|Float',\
            '2_mulibit': 'two_mulibit|Float', '4_mulibit': 'four_mulibit|Float', '6_multibit': 'six_mulibit|Float', '8_mulibit': 'height_mulibit|Float',\
            'Total WNS(ps)': 'total_wns_ps|Float', 'Total TNS(ps)': 'total_tns_ps|Float',\
            'Total FEP': 'total_fep|Float', 'R2R WNS(ps)': 'r2r_wns_ps|Float', 'R2R TNS(ps)': 'r2r_tns_ps|Float', 'R2R FEP': 'r2r_fep|Float',\
            'Hold WNS(ns)': 'hold_wns_ps|Float', 'Hold TNS(ps)': 'hold_tns_ps|Float', 'Hold FEP': 'hold_fep|Float', 'V': 'v_percent|Float', 'H': 'h_percent|Float',\
            'num_of_shorts': 'num_of_shorts_percent|Float','DRC_Total': 'drc_total|Float', 'Run_time': 'run_time|Duration', 'CPU': 'cpu_requested|Float',\
            'Mem': 'memory_requested|Float', 'Comment': 'comment|String'}


# GENERAL
csv_headers_general = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', \
            'STAGE': 'stage|String', 'scripts_version': 'scripts_version|String', 'files_under_scripts_local': 'files_under_scripts_local|String',\
            'files_under_scripts_local_input': 'files_under_scripts_local_input|String', 'compare_user_inputs_2_default_setting': 'compare_user_inputs_2_default_setting|String',\
            'compare_user_inputs_2_default_setting_input': 'compare_user_inputs_2_default_setting_input|String', 'link_to_RTL_files': 'link_to_rtl_files|String',\
            'Calculate_MEMs_BITs': 'calculate_mems_bits|String', 'bonus_cells': 'bonus_cells|String'}

# FLOORPLANE
csv_headers_fp = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String', 'check_floorplan_warnings': 'check_floorplan_warnings|Integer',\
                    'check_floorplan_errors': 'check_floorplan_errors|Integer', 'Leaf_Instance_count': 'leaf_instance_count|Integer', 'Sequential_Cells_Count_NO_CG': 'sequential_cells_count_no_cg|Integer'}


# PLACE
csv_headers_place = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String', 'Host_name': 'host_name|String', 'Innovus_version': 'innovus_version|String', 'Total_IO_buffers': 'total_io_buffers|Integer', \
                     'Total_IO_buffers_input': 'total_io_buffers_input|String', 'Max_distance_IO_buffers_to_ports[um]': 'max_distance_io_buffers_to_ports_um|Float', 'Max_distance_IO_buffers_to_ports_input': 'max_distance_io_buffers_to_ports_input|String', 'IO_Sampled_BY_MB': 'io_sampled_by_mb|Integer',\
                     'IO_Sampled_BY_MB_input': 'io_sampled_by_mb_input|String', 'IO_Buffers_driving_ports_violations': 'io_buffers_driving_ports_violations|Integer', 'IO_Buffers_driving_ports_violations_input': 'io_buffers_driving_ports_violations_input|String', 'HotSpot_Score': 'hotspot_score|Float',\
                     'HotSpot_Score_input': 'hotspot_score_input|String', 'reg2reg_wns': 'reg2reg_wns|Float', 'reg2reg_tns': 'reg2reg_tns|Float', 'reg2reg_vp': 'reg2reg_vp|Float', 'reg2cgate_wns': 'reg2cgate_wns|Float', 'reg2cgate_tns': 'reg2cgate_tns|Float',  'reg2cgate_vp': 'reg2cgate_vp|Float',\
                     'reg2out_wns': 'reg2out_wns|Float', 'reg2out_tns': 'reg2out_tns|Float', 'reg2out_vp': 'reg2out_vp|Float', 'in2reg_wns': 'in2reg_wns|Float', 'in2reg_tns': 'in2reg_tns|Float', 'in2reg_vp': 'in2reg_vp|Float', 'in2out_wns': 'in2out_wns|Float', 'in2out_tns': 'in2out_tns|Float', 'in2out_vp': 'in2out_vp|Float',\
                     'data_transition_violations': 'data_transition_violations|Integer', 'data_transition_violations_input': 'data_transition_violations_input|String', 'check_floorplan_warnings': 'check_floorplan_warnings|Integer', 'check_floorplan_errors': 'check_floorplan_errors|Integer', \
                     'log_Error_Messages': 'log_error_messages|Integer', 'log_Warning_Messages': 'log_warning_messages|Integer'}

# CTS CLOCK
csv_headers_cts_clock = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String', 'CLOCK': 'clock|String', 'USEFUL_SKEW': 'useful_skew|String', 'LEVEL': 'level|Integer', 'MIN_ID': 'min_id|Float', 'MAX_ID': 'max_id|Float',\
                        'AVG_ID': 'avg_id|Float', 'TARGET_SKEW': 'target_skew|Float', 'GLOBAL_SKEW': 'global_skew|Float', 'SKEW_WINDOW_OCCUPANCY': 'skew_window_occupancy|Float'}

# CTS
csv_headers_cts = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String', 'Host_name': 'host_name|String', 'Innovus_version': 'innovus_version|String', 'Total_Clock_Inverters': 'total_clock_inverters|Integer', 'Total_Clock_Buffers': 'total_clock_buffers|Integer',\
                   'clock_tree_cells_violations': 'clock_tree_cells_violations|Integer', 'number_of_min_delay_cells': 'number_of_min_delay_cells|Integer', 'USEFUL_SKEW': 'useful_skew|String', 'LEVEL_grid_clk': 'level_grid_clk|Integer', 'MIN_ID_grid_clk': 'min_id_grid_clk|Float', 'MAX_ID_grid_clk': 'max_id_grid_clk|Float',\
                   'AVG_ID_grid_clk': 'avg_id_grid_clk|Float', 'Global_SKEW_grid_clk': 'global_skew_grid_clk|Float', 'Target_SKEW_grid_clk': 'target_skew_grid_clk|Float', 'Skew_window_occupancy_grid_clk': 'skew_window_occupancy_grid_clk|Float', 'CTS_CTSG': 'cts_ctsg|Integer', 'CTS_cuk': 'cts_cuk|Integer',\
                   'CTS_ccl_a': 'cts_ccl_a|Integer', 'CTS_cbi': 'cts_cbi|Integer', 'CTS_cex': 'cts_cex|Integer', 'CTS_coi': 'cts_coi|Integer', 'CTS_lbl': 'cts_lbl|Integer', 'CTS_ccl': 'cts_ccl|Integer', 'CTS_ccd': 'cts_ccd|Integer', 'CTS_cci': 'cts_cci|Integer', 'CTS_csf': 'cts_csf|Integer', 'CTS_csf': 'cts_csf|Integer',\
                   'CTS_cms': 'cts_cms|Integer', 'CTS_cid': 'cts_cid|Integer', 'CTS_cdb': 'cts_cdb|Integer', 'CTS_cdbw': 'cts_cdbw|Integer', 'CTS_cwb': 'cts_cwb|Integer', 'CTS_cfo': 'cts_cfo|Integer', 'CTS_csk': 'cts_csk|Integer', 'CTS_cmf': 'cts_cmf|Integer', 'CTS_cbc': 'cts_cbc|Integer', \
                   'CTS_css': 'cts_css|Integer', 'CTS_cdc': 'cts_cdc|Integer', 'CTS_cpd': 'cts_cpd|Integer', 'CTS_ccg': 'cts_ccg|Integer', 'CTS_cse': 'cts_cse|Integer', 'CTS_cfh': 'cts_cfh|Integer', 'CTS_cat': 'cts_cat|Integer', 'CTS_cpc_drv': 'cts_cpc_drv|Integer', 'CTS_cpc_sk': 'cts_cpc_sk|Integer',\
                   'CTS_PRO': 'cts_pro|Integer', 'CTS_PRO_drv': 'cts_pro_drv|Integer', 'CTS_PRO_sk': 'cts_pro_sk|Integer', 'CTS_sfc': 'cts_sfc|Integer', 'CTS_ccc': 'cts_ccc|Integer', 'CTS_grb': 'cts_grb|Integer', 'CTS_sgb': 'cts_sgb|Integer', 'CTS_idc': 'cts_idc|Integer', 'CTS_vgb': 'cts_vgb|Integer',\
                   'CTS_USK': 'cts_usk|Integer', 'CTS_cff': 'cts_cff|Integer', 'CTS_cng': 'cts_cng|Integer', 'CTS_incr': 'cts_incr|Integer', 'HotSpot_Score': 'hotspot_score|Float', 'HotSpot_Score_input': 'hotspot_score_input|String', 'reg2reg_wns': 'reg2reg_wns|Float', 'reg2reg_tns': 'reg2reg_tns|Float',\
                   'reg2reg_vp': 'reg2reg_vp|Float', 'reg2cgate_wns': 'reg2cgate_wns|Float', 'reg2cgate_tns': 'reg2cgate_tns|Float', 'reg2cgate_vp': 'reg2cgate_vp|Float', 'reg2out_wns': 'reg2out_wns|Float', 'reg2out_tns': 'reg2out_tns|Float', 'reg2out_vp': 'reg2out_vp|Float', 'in2reg_wns': 'in2reg_wns|Float',\
                   'in2reg_tns': 'in2reg_tns|Float', 'in2reg_vp': 'in2reg_vp|Float', 'in2out_wns': 'in2out_wns|Float', 'in2out_tns': 'in2out_tns|Float', 'in2out_vp': 'in2out_vp|Float', 'reg2reg_hold_wns': 'reg2reg_hold_wns|Float',  'reg2reg_hold_tns': 'reg2reg_hold_tns|Float', 'reg2reg_hold_vp': 'reg2reg_hold_vp|Float', 'Shield_Average_ratio': 'shield_average_ratio|Float',\
                   'NDR_routing_rules_violations': 'ndr_routing_rules_violations|Integer', 'clock_period_violations': 'clock_period_violations|Integer', 'pulse_width_violations': 'pulse_width_violations|Integer', 'clock_pin_connection_violation': 'clock_pin_connection_violation|Integer',\
                   'clock_transition_violations': 'clock_transition_violations|Integer', 'data_transition_violations': 'data_transition_violations|Integer', 'log_Error_Messages': 'log_error_messages|Integer', 'log_Warning_Messages': 'log_warning_messages|Integer'}

# ROUTE  
csv_headers_route = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String',  'Host_name': 'host_name|String',\
                     'Innovus_version': 'innovus_version|String',  'reg2reg_wns': 'reg2reg_wns|Float', 'reg2reg_tns': 'reg2reg_tns|Float', 'reg2reg_vp': 'reg2reg_vp|Float', \
                     'reg2cgate_wns': 'reg2cgate_wns|Float', 'reg2cgate_tns': 'reg2cgate_tns|Float', 'reg2cgate_vp': 'reg2cgate_vp|Float', 'reg2out_wns': 'reg2out_wns|Float', \
                     'reg2out_tns': 'reg2out_tns|Float', 'reg2out_vp': 'reg2out_vp|Float', 'in2reg_wns': 'in2reg_wns|Float', 'in2reg_tns': 'in2reg_tns|Float',\
                     'in2reg_vp': 'in2reg_vp|Float', 'in2out_wns': 'in2out_wns|Float', 'in2out_tns': 'in2out_tns|Float', 'in2out_vp': 'in2out_vp|Float', \
                     'reg2reg_hold_wns': 'reg2reg_hold_wns|Float', 'reg2reg_hold_tns': 'reg2reg_hold_tns|Float', 'reg2reg_hold_vp': 'reg2reg_hold_vp|Float', \
                     'clock_period_violations': 'clock_period_violations|Integer', 'pulse_width_violations': 'pulse_width_violations|Integer', \
                     'Shield_Average_ratio': 'shield_average_ratio|Float', 'NDR_routing_rules_violations': 'ndr_routing_rules_violations|Integer', \
                     'clock_pin_connection_violation': 'clock_pin_connection_violation|Integer', \
                     'long_nets_violations': 'long_nets_violations|Integer', 'Worst_route_quality_ratio': 'worst_route_quality_ratio|Float', \
                     'clock_transition_violations': 'clock_transition_violations|Integer', 'data_transition_violations': 'data_transition_violations|Integer',\
                     'Number_of_DCAPs_violations': 'number_of_dcaps_violations|Integer', "don't_use_cells_violations": 'dont_use_cells_violations|Integer',\
                     'DFM_M0_%': 'dfm_m0_percent|Float', 'DFM_M1_%': 'dfm_m1_percent|Float', 'DFM_M2_%': 'dfm_m2_percent|Float', 'DFM_M3_%': 'dfm_m3_percent|Float',
                     'DFM_M4_%': 'dfm_m4_percent|Float', 'DFM_M5_%': 'dfm_m5_percent|Float', 'DFM_M6_%': 'dfm_m6_percent|Float', 'DFM_M7_%': 'dfm_m7_percent|Float', 
                     'DFM_M8_%': 'dfm_m8_percent|Float', 'DFM_M9_%': 'dfm_m9_percent|Float', 'DFM_M10_%': 'dfm_m10_percent|Float', 'DFM_M11_%': 'dfm_m11_percent|Float',\
                     'DFM_M12_%': 'dfm_m12_percent|Float', 'DFM_M13_%': 'dfm_m13_percent|Float', 'DFM_M14_%': 'dfm_m14_percent|Float', 'DFM_M15_%': 'dfm_m15_percent|Float',\
                     'DFM_M16_%': 'dfm_m16_percent|Float', 'DFM_M17_%': 'dfm_m17_percent|Float', 'Total_shorts': 'total_shorts|Integer', 'Total_drc': 'total_drc|Integer', 'log_Error_Messages': 'log_error_messages|Integer', \
                     'log_Warning_Messages': 'log_warning_messages|Integer'}

# GROUP 
csv_group_headers = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String',\
                         'Group_Name': 'group_name|String', 'STAGE': 'stage|String', 'WNS': 'wns|Float', 'TNS': 'tns|Float', 'VP': 'vp|Integer'}

# CHIP FINISH
csv_chip_finish = {'Date': 'date|Date', 'Time': 'time|Time', 'Work_Area': 'work_area|String', 'Block_Name': 'block_name|String', 'STAGE': 'stage|String', 'Host_name': 'host_name|String', \
                   'Innovus_version': 'innovus_version|String', 'check_place_violations': 'check_place_violations|Integer', 'Total_shorts': 'total_shorts|Integer', 'Total_drc': 'total_drc|Integer',\
                   'Total_decap_cells': 'total_decap_cells|Integer', 'Total_ECO_decap_cells': 'total_eco_decap_cells|Integer', 'Total_cap': 'total_cap|Integer', 'log_Error_Messages': 'log_error_messages|Integer',\
                   'log_Warning_Messages': 'log_warning_messages|Integer'}


class Base:
    def __init__(self, stage, csv_file, group):
        
        self.stage = stage
        self.group = group
        self.csv_file = csv_file
        self.csv_headers = {}
        print('working on stage %s, group: %s' % (self.stage, self.group))
        self.get_db_params()
        if self.group:
            self.table_name = '%s_group' % self.stage
        else:
            self.table_name = self.stage
            
        self.create_table_if_not_exists()
        self.data = [] 
        
                
    def get_db_params(self,):
        
        self.POSTGRES_HOST = "hw-postgresql.hw.k8s.nextsilicon.com"
        self.k8s_POSTGRES_HOST = "hw-postgresql.hw.svc.cluster.local."
        self.POSTGRES_USER = os.environ['POSTGRES_USER']
        self.POSTGRES_PASSWORD = os.environ['POSTGRES_PASSWORD'] 
        self.DB_NAME = os.environ['DB_NAME']
        self.DATE = datetime.datetime.now().strftime("%Y-%m-%d")
        self.TIME = datetime.datetime.now().strftime("%H:%M:%S %p")
        
        POSTGRES_HOST = self.POSTGRES_HOST
        POSTGRES_PASSWORD = self.POSTGRES_PASSWORD
       # POSTGRES_HOST = self.POSTGRES_HOST
        DB_NAME = self.DB_NAME
        POSTGRES_USER = self.POSTGRES_USER
        POSTGRES_PASSWORD = self.POSTGRES_PASSWORD
        username = 'hw'
        self.engine = self.create_engine_with_retry(f'postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}/{DB_NAME}?application_name={username}')
        self.metadata = MetaData()
       
    def get_csv_headers(self):
        print('setting CSV header...')
        match self.stage:          
            case 'summary':
                self.csv_headers = csv_headers_summary
            case 'general':
                self.csv_headers = csv_headers_general
            case 'floorplan':
                self.csv_headers = csv_headers_fp
            case 'cts':
                self.csv_headers = csv_headers_cts
            case 'place':
                self.csv_headers = csv_headers_place
            case 'cts_clock':
                self.csv_headers = csv_headers_cts_clock
            case 'route':
                self.csv_headers = csv_headers_route
            case 'chip_finish':
                self.csv_headers = csv_chip_finish
        
        if self.group:
            self.csv_headers = csv_group_headers
            
        print(self.csv_headers)


    def convert_csv_dict(self,): 
        # read csv file to a list of dictionaries
        date_format = '%b %d %Y'
        time_format = ' %I:%M:%S %p'
        datetime_format = '%b %d %Y %I:%M:%S %p'
        duration_format = '%H:%M:%S'
        date = None
        
        with open(self.csv_file, 'r') as file:
            csv_reader = csv.DictReader(file)
            for row in csv_reader:
                _dict = {}
                for k in row:
                    if k == '': continue
                    new_val = None
                    if row[k] == 'NA':
                        continue

                    match self.csv_headers[k].split('|')[1]:
                        
                        case 'String':
                            new_val = str(row[k])

                        case 'Float':
                            if len(row[k].split('%')) > 1:
                                new_val = float(row[k].split('%')[0])
                            else:
                                new_val = float(row[k])
                                                
                        case 'Date':
                            date = row[k]
                            continue
                            new_val = datetime.datetime.strptime(row[k], date_format)
                                            
                        case 'Duration':
                            duration = row[k].split(':')
                            new_val = datetime.timedelta(hours=int(duration[0]), minutes=int(duration[1]), seconds=int(duration[2])).total_seconds()
                            
                        case 'Time':
                            new_val = datetime.datetime.strptime('%s %s' % (date, row[k]), datetime_format)
                            #new_val = datetime.datetime.strptime(row[k], time_format)
                            _dict['date'] = new_val
                            continue
                            
                    _dict[self.csv_headers[k].split('|')[0]] = new_val
                
                if self.stage == 'summary':
                    _dict['gifs'] = 'https://artifactory.k8s.nextsilicon.com/ui/native/generic-repo/backend/%s/%s/%s/%s' % (os.environ['USER'], _dict['block_name'], _dict['version'], _dict['run'])    
                self.data.append(_dict)
                
        for row in self.data:
            print(row)
    

    @retry(stop=stop_after_attempt(3), wait=wait_fixed(1))
    def create_engine_with_retry(self, connection_string):
        return create_engine(connection_string)

    def check_if_table_exists(self,):
        if not inspect(self.engine).has_table(self.table_name): 
            return False
        return True

    def create_table_if_not_exists(self,):
        
        print('Creating table %s on DB %s' % (self.table_name, self.DB_NAME))

        # Create a connection to the database
        
        if not self.check_if_table_exists():
            try:

                # Create a MetaData instance
                match self.stage:          
                    case 'summary':
                        self.csv_headers = csv_headers_summary
                        self.define_summary_table()
                        
                    case 'general':
                        self.csv_headers = csv_headers_general
                        self.define_general_table()
                        
                    case 'floorplan':
                        self.csv_headers = csv_headers_fp
                        self.define_floorplan_table()
                        
                    case 'cts':
                        self.csv_headers = csv_headers_cts
                        self.define_cts_table()
                        
                    case 'place':
                        self.csv_headers = csv_headers_place
                        self.define_place_table()
                        
                    case 'cts_clock':
                        self.csv_headers = csv_headers_cts_clock
                        self.define_cts_clock_table()
                        
                    case 'route':
                        self.csv_headers = csv_headers_route
                        self.define_route_table()
                
                    case 'chip_finish':
                        self.csv_headers = csv_chip_finish
                        self.define_chip_finish_table()
                
                if self.group:
                    self.csv_headers = csv_group_headers
                    self.define_group_table()
                #define_table(table_name, metadata)
                self.metadata.create_all(self.engine)
            except Exception as e:
                raise e
        
        else: 
            print('Table %s is already exists, skipping' % self.table_name)

    def define_summary_table(self,):
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime),
        Column('block_name', String), Column('source', String), Column('version', String),
        Column('run', String), Column('stage', String), Column('xum', Float), Column('yum', Float), Column('area', Float), Column('leaf_cell_area', Float),
        Column('util_percent', Float), Column('cell_count', Integer), Column('buf_inv', Integer), Column('logic', Integer), Column('flops', Integer),
        Column('bits', Integer), Column('removed_seq', Integer), Column('num_of_ports', Integer), Column('svt_percent', Float),
        Column('lvtll_percent', Float), Column('lvt_percent', Float), Column('ulvtll_percent', Float), Column('ulvt_percent', Float), 
        Column('en_percent', Float), Column('internal', Float), Column('switching', Float), Column('dynamic', Float), Column('leakage', Float), 
        Column('total', Float), Column('bank_ratio', Float), Column('two_mulibit', Float), Column('four_mulibit', Float), Column('six_mulibit', Float), Column('height_mulibit', Float),
        Column('total_wns_ps', Float), Column('total_tns_ps', Float), Column('total_fep', Float), Column('r2r_wns_ps', Float),
        Column('r2r_tns_ps', Float), Column('r2r_fep', Float), Column('hold_wns_ps', Float), Column('hold_tns_ps', Float),
        Column('hold_fep', Float), Column('v_percent', Float), Column('h_percent', Float), Column('num_of_shorts_percent', Float),
        Column('drc_total', Float), Column('run_time', Float), Column('cpu_requested', Float), Column('memory_requested', Float),
        Column('comment', String), Column('gifs', String), UniqueConstraint('date', 'source', name='summary_uq_datetime_source'))        
        return _table
    
    def define_general_table(self,):
        _table = Table(
        self.stage,
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), 
        Column('work_area', String), Column('block_name', String),  Column('stage', String), Column('scripts_version', String), Column('files_under_scripts_local', String), Column('files_under_scripts_local_input', String), 
        Column('compare_user_inputs_2_default_setting', String), Column('compare_user_inputs_2_default_setting_input', String), Column('link_to_rtl_files', String), Column('calculate_mems_bits', String), Column('bonus_cells', String),
        UniqueConstraint('date', 'work_area', 'block_name', name='general_uq_date_wa_block'))        
        return _table

            
    def define_floorplan_table(self,):
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), Column('work_area', String), Column('block_name', String),
        Column('stage', String), Column('check_floorplan_warnings', Integer), Column('check_floorplan_errors', Integer), Column('leaf_instance_count', Integer), Column('sequential_cells_count_no_cg', Integer),
        UniqueConstraint('date', 'stage', name='floorplan_uq_date_wa_block'))        
        return _table

   
    def define_place_table(self,):
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), 
        Column('work_area', String), Column('block_name', String),  Column('stage', String), Column('host_name', String), Column('innovus_version', String), Column('total_io_buffers', String), 
        Column('total_io_buffers_input', String), Column('compare_user_inputs_2_default_setting_input', String), Column('max_distance_io_buffers_to_ports_um', Float), Column('max_distance_io_buffers_to_ports_input', String), Column('io_sampled_by_mb', Integer),
        Column('io_sampled_by_mb_input', String), Column('io_buffers_driving_ports_violations', Integer), Column('io_buffers_driving_ports_violations_input', String), Column('hotspot_score', Float), Column('hotspot_score_input', String), Column('reg2reg_wns', Float), Column('reg2reg_tns', Float), 
        Column('reg2reg_vp', Float), Column('reg2cgate_wns', Float), Column('reg2cgate_tns', Float), Column('reg2cgate_vp', Float), Column('reg2out_wns', Float), Column('reg2out_tns', Float), Column('reg2out_vp', Float), Column('in2reg_wns', Float), Column('in2reg_tns', Float), Column('in2reg_vp', Float), Column('in2out_wns', Float),
        Column('in2out_tns', Float), Column('in2out_vp', Float), Column('data_transition_violations', Integer), Column('data_transition_violations_input', String), Column('check_floorplan_warnings', Integer), Column('check_floorplan_errors', Integer), Column('log_error_messages', Integer), 
        Column('log_warning_messages', Integer), UniqueConstraint('date', 'work_area', 'block_name', name='place_uq_date_wa_block'))        
        return _table
    
          
    def define_cts_table(self,):
        if 'cts' in self.metadata.tables: return
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), 
        Column('work_area', String), Column('block_name', String),  Column('stage', String), Column('host_name', String), Column('innovus_version', String), 
        Column('total_clock_inverters', Integer), Column('total_clock_buffers', Integer), Column('clock_tree_cells_violations', Integer), Column('number_of_min_delay_cells', Integer), Column('useful_skew', String), Column('level_grid_clk', Integer),
        Column('min_id_grid_clk', Float), Column('max_id_grid_clk', Float), Column('avg_id_grid_clk', Float), Column('global_skew_grid_clk', Float), Column('target_skew_grid_clk', Float), Column('skew_window_occupancy_grid_clk', Float), Column('cts_ctsg', Integer), 
        Column('cts_cuk', Integer), Column('cts_ccl_a', Integer), Column('cts_cbi', Integer), Column('cts_cex', Integer), Column('cts_coi', Integer), Column('cts_lbl', Integer), Column('cts_ccl', Integer), Column('cts_ccd', Integer), 
        Column('cts_cci', Integer), Column('cts_csf', Integer), Column('cts_cms', Integer), Column('cts_cid', Integer), Column('cts_cdb', Integer), Column('cts_cdbw', Integer), Column('cts_cwb', Integer), Column('cts_cfo', Integer), Column('cts_csk', Integer), 
        Column('cts_cmf', Integer), Column('cts_cbc', Integer), Column('cts_pro', Integer), Column('cts_pro_drv', Integer), Column('cts_pro_sk', Integer), Column('cts_sfc', Integer), Column('cts_ccc', Integer), Column('reg2reg_hold_tns', Integer),Column('cts_grb', Integer), Column('cts_sgb', Integer),
        Column('cts_css', Integer), Column('cts_cse', Integer),  Column('cts_cat', Integer), Column('hotspot_score_input', String), Column('cts_cpc_sk', Integer), Column('cts_cfh', Integer), Column('cts_cdc', Integer), Column('cts_cpd', Integer), Column('cts_cpc_drv', Integer), Column('cts_ccg', Integer), 
        Column('cts_idc', Integer), Column('cts_vgb', Integer), Column('cts_usk', Integer), Column('cts_cff', Integer), Column('cts_cng', Integer), Column('cts_incr', Integer), Column('hotspot_score', Float), Column('HotSpot_Score_input', String), Column('reg2reg_wns', Float), Column('reg2reg_tns', Float), 
        Column('reg2reg_vp', Float), Column('reg2cgate_wns', Float), Column('reg2cgate_tns', Float), Column('reg2cgate_vp', Float), Column('reg2out_wns', Float), Column('reg2out_tns', Float), Column('reg2out_vp', Float), Column('in2reg_wns', Float), Column('in2reg_tns', Float), Column('in2reg_vp', Float), 
        Column('in2out_wns', Float), Column('in2out_tns', Float), Column('in2out_vp', Float), Column('reg2reg_hold_wns', Float), Column('reg2reg_hold_vp', Float), Column('shield_average_ratio', Float),  Column('ndr_routing_rules_violations', Integer), 
        Column('clock_period_violations', Integer), Column('pulse_width_violations', Integer), Column('clock_pin_connection_violation', Integer), Column('clock_transition_violations', Integer), Column('data_transition_violations', Integer), Column('log_error_messages', Integer), 
        Column('log_warning_messages', Integer), UniqueConstraint('date', 'work_area', 'block_name', name='cts_uq_date_wa_block'))        
        return _table
    
    def define_route_table(self,):
        if 'route' in self.metadata.tables: return
        _table = Table(
        self.stage,
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), 
        Column('work_area', String), Column('block_name', String),  Column('stage', String), Column('host_name', String), Column('innovus_version', String), Column('reg2reg_wns', Float),
        Column('reg2reg_tns', Float), Column('reg2reg_vp', Float), Column('reg2cgate_wns', Float), Column('reg2cgate_tns', Float), Column('reg2cgate_vp', Float), 
        Column('reg2out_wns', Float), Column('reg2out_tns', Float), Column('reg2out_vp', Float), Column('in2reg_wns', Float), Column('in2reg_tns', Float), Column('in2reg_vp', Float), 
        Column('in2out_wns', Float), Column('in2out_tns', Float), Column('in2out_vp', Float), Column('reg2reg_hold_wns', Float), Column('reg2reg_hold_vp', Float), Column('reg2reg_hold_tns', Integer),
        Column('clock_period_violations', Integer), Column('shield_average_ratio', Float), Column('ndr_routing_rules_violations', Integer), 
        Column('pulse_width_violations', Integer), Column('clock_pin_connection_violation', Integer),
        Column('long_nets_violations', Integer), Column('worst_route_quality_ratio', Float),  Column('clock_transition_violations', Integer),  Column('data_transition_violations', Integer), 
        Column('number_of_dcaps_violations', Integer),  Column('dont_use_cells_violations', Integer), Column('dfm_m0_percent', Float), Column('dfm_m1_percent', Float), 
        Column('dfm_m2_percent', Float), Column('dfm_m3_percent', Float), Column('dfm_m4_percent', Float), Column('dfm_m5_percent', Float), Column('dfm_m6_percent', Float), 
        Column('dfm_m7_percent', Float), Column('dfm_m8_percent', Float), Column('dfm_m9_percent', Float), Column('dfm_m10_percent', Float), Column('dfm_m11_percent', Float), 
        Column('dfm_m12_percent', Float), Column('dfm_m13_percent', Float), Column('dfm_m14_percent', Float),
        Column('dfm_m15_percent', Float), Column('dfm_m16_percent', Float), Column('dfm_m17_percent', Float), Column('total_shorts', Integer), Column('total_drc', Integer), Column('log_error_messages', Integer), 
        Column('log_warning_messages', Integer), UniqueConstraint('date', 'work_area', 'block_name', name='route_uq_date_wa_block'))        
        return _table
    
    
    def define_cts_clock_table(self,):
        if 'cts_clock' in self.metadata.tables: return
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), Column('work_area', String), Column('block_name', String),
        Column('stage', String), Column('clock', String), Column('useful_skew', String), Column('level', Integer), Column('min_id', Float), Column('max_id', Float), Column('avg_id', Float), Column('target_skew', Float), Column('global_skew', Float), Column('skew_window_occupancy', Float), 
        UniqueConstraint('date', 'work_area', 'block_name', name='cts_clock_uq_date_wa_block'))
        return _table
    
    def define_group_table(self,):
        if 'group' in self.metadata.tables: return
        _table = Table(
        '%s_group' % self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), Column('work_area', String), Column('block_name', String),
        Column('stage', String), Column('group_name', String), Column('wns', Float), Column('tns', Float), Column('vp', Integer), 
        UniqueConstraint('date', 'work_area', 'block_name', name='%s_group_uq_date_wa_block' % self.stage))        
        return _table
    
    def define_chip_finish_table(self,):
        if 'chip_finish' in self.metadata.tables: return
        _table = Table(
        self.stage, 
        self.metadata, Column('id', Integer, primary_key=True, autoincrement=True), Column('date', DateTime, default=datetime.datetime), Column('work_area', String), Column('block_name', String),
        Column('stage', String), Column('host_name', String), Column('innovus_version', String), Column('check_place_violations', Integer), Column('total_shorts', Integer), Column('total_drc', Integer), Column('total_decap_cells', Integer), 
        Column('total_eco_decap_cells', Integer), Column('total_cap', Integer), Column('log_error_messages', Integer), Column('log_warning_messages', Integer), 
        UniqueConstraint('date', 'work_area', 'block_name', name='chip_finish_uq_date_wa_block'))        
        return _table
    
    def insert_db(self,):

        try:
            with self.engine.connect() as connection:
                match self.stage:      
                    case 'summary':
                        results = self.define_summary_table()
                    
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint="summary_uq_datetime_source")
                            connection.execute(stmt)
                            connection.commit()
                                                        
                    case 'general':
                        results = self.define_general_table()
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint="general_uq_date_wa_block")
                            connection.execute(stmt)
                            connection.commit()
                                                
                    case 'place':
                        if self.group:
                            results = self.define_group_table()
                            constraint_name = 'place_group_uq_date_wa_block'
                        else:
                            results = self.define_place_table()
                            constraint_name = "place_uq_date_wa_block"
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint=constraint_name)               
                            connection.execute(stmt)
                            connection.commit()
                                                   
                    case 'cts':
                        if self.group:
                            results = self.define_group_table()
                            constraint_name = "cts_group_uq_date_wa_block"
                        else:
                            results = self.define_cts_table()
                            constraint_name = "cts_uq_date_wa_block"
                        
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint=constraint_name)               
                            connection.execute(stmt)
                            connection.commit() 
                            
                    case 'cts_clock':
                        results = self.define_cts_clock_table()
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint="cts_clock_uq_date_wa_block")               
                            connection.execute(stmt)
                            connection.commit()
                                
                    case 'route':
                        if self.group:
                            results = self.define_group_table()
                            constraint_name = "route_group_uq_date_wa_block"
                        else:
                            results = self.define_route_table()
                            constraint_name = "route_uq_date_wa_block"
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint=constraint_name)               
                            connection.execute(stmt)
                            connection.commit()
                                               
                    case 'floorplan':
                        results = self.define_floorplan_table()
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint="floorplan_uq_date_wa_block")
                            connection.execute(stmt)
                            connection.commit()
                        
                    case 'chip_finish':
                        results = self.define_chip_finish_table()
                        for record in self.data:
                            stmt = insert(results).values(**record)
                            stmt = stmt.on_conflict_do_nothing(constraint="chip_finish_uq_date_wa_block")
                            connection.execute(stmt)
                            connection.commit()
        except:
            raise
        
        print("Data inserted successfully")
